/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingExpression"], function (BindingExpression) {
  "use strict";

  var _exports = {};
  var or = BindingExpression.or;
  var not = BindingExpression.not;
  var equal = BindingExpression.equal;
  var bindingExpression = BindingExpression.bindingExpression;
  var and = BindingExpression.and;

  var UI = {
    IsCreateMode: bindingExpression("createMode", "ui"),
    IsCreateModeSticky: bindingExpression("createModeSticky", "ui"),
    IsEditable: bindingExpression("/isEditable", "ui"),
    IsTransientBinding: equal(bindingExpression("@$ui5.context.isTransient"), true),
    IsTotal: equal(bindingExpression("@$ui5.node.isTotal"), true),
    IsExpanded: equal(bindingExpression("@$ui5.node.isExpanded"), true),
    NodeLevel: bindingExpression("@$ui5.node.level")
  };
  _exports.UI = UI;
  var Entity = {
    HasDraft: bindingExpression("HasDraftEntity"),
    HasActive: bindingExpression("HasActiveEntity"),
    IsActive: bindingExpression("IsActiveEntity")
  };
  _exports.Entity = Entity;
  var Draft = {
    IsNewObject: and(not(Entity.HasActive), not(Entity.IsActive)),
    HasNoDraftForCurrentUser: or(not(Entity.HasDraft), and(Entity.HasDraft, not(bindingExpression("DraftAdministrativeData/DraftIsCreatedByMe"))))
  };
  /**
   * Function to adjust singleton paths in the annotation.
   * The absolute path via EntityContainer needs to be shortened to /SingletonName/PropertyName.
   *
   * @param {string} path The path configured in the annotation
   * @param {ConverterContext} converterContext The instance of the converter context
   * @param {string[]} visitedNavigationPaths The array of visited navigation paths
   * @returns {string} The adjusted path for the reference of the singleton property, otherwise the input path itself.
   */

  _exports.Draft = Draft;

  var singletonPathVisitor = function (path, converterContext, visitedNavigationPaths) {
    // Determine whether the path is absolute and whether it points to a singleton.
    if (path.indexOf("/") === 0) {
      var parts = path.split("/").filter(Boolean),
          propertyName = parts.pop(),
          entitySetName = parts.join("/"),
          singleton = converterContext.getSingleton(entitySetName);

      if (singleton) {
        // Set the absolute binding path to access the singleton property
        path = "/" + singleton.name + "/" + propertyName;
      }
    } else {
      // Not a singleton reference.
      // Prefix the navigation path to the property path
      var localPath = visitedNavigationPaths.concat();
      localPath.push(path);
      path = localPath.join("/");
    }

    return path;
  };
  /**
   * Function to adjust property paths defined in the binding of an action.
   *
   * The binding parameter name needs to be removed. Singleton paths need to be resolved.
   *
   * @param {string} path The path configured in the annotation
   * @param {ConverterContext} converterContext The instance of the converter context
   * @param {string} bindingParameterFullName The fully qualified name of the binding parameter
   * @returns {string} The adjusted property path
   */


  _exports.singletonPathVisitor = singletonPathVisitor;

  function bindingContextPathVisitor(path, converterContext, bindingParameterFullName) {
    var bindingParameterPrefix = (bindingParameterFullName === null || bindingParameterFullName === void 0 ? void 0 : bindingParameterFullName.substring(bindingParameterFullName.lastIndexOf("/") + 1)) + "/"; // Strip the binding parameter name from OperationAvailable path
    // For e.g. _it/property1 --> property1

    if (path.startsWith(bindingParameterPrefix)) {
      return path.substring(bindingParameterPrefix.length);
    }

    return singletonPathVisitor(path, converterContext, []);
  }

  _exports.bindingContextPathVisitor = bindingContextPathVisitor;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,