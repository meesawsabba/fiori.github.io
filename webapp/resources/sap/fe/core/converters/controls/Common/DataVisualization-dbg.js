/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["./Table", "./Chart", "sap/fe/core/converters/helpers/IssueManager", "../../ManifestSettings"], function (Table, Chart, IssueManager, ManifestSettings) {
  "use strict";

  var _exports = {};
  var TemplateType = ManifestSettings.TemplateType;
  var IssueCategory = IssueManager.IssueCategory;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueType = IssueManager.IssueType;
  var createChartVisualization = Chart.createChartVisualization;
  var createTableVisualization = Table.createTableVisualization;
  var createDefaultTableVisualization = Table.createDefaultTableVisualization;

  var getVisualizationsFromPresentationVariant = function (presentationVariantAnnotation, visualizationPath, converterContext) {
    var visualizationAnnotations = [];
    var visualizations = presentationVariantAnnotation.Visualizations || [];
    var baseVisualizationPath = visualizationPath.split("@")[0];

    if (visualizations) {
      // Only allow one line item / chart
      var hasLineItem = false;
      var hasChart = false;
      var hasVisualization = false; // used to allow only first visualization in OP

      var bIsALP = converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;
      visualizations.forEach(function (visualization) {
        switch (visualization.$target.term) {
          case "com.sap.vocabularies.UI.v1.LineItem":
            if (!hasLineItem && (bIsALP || !hasVisualization)) {
              visualizationAnnotations.push({
                visualization: visualization.$target,
                annotationPath: "".concat(baseVisualizationPath).concat(visualization.value),
                converterContext: converterContext
              });
              hasLineItem = true;
              hasVisualization = true;
            }

            break;

          case "com.sap.vocabularies.UI.v1.Chart":
            if (!hasChart && (bIsALP || !hasVisualization)) {
              visualizationAnnotations.push({
                visualization: visualization.$target,
                annotationPath: "".concat(baseVisualizationPath).concat(visualization.value),
                converterContext: converterContext
              });
              hasChart = true;
              hasVisualization = true;
            }

            break;

          default:
            break;
        }
      });
    }

    return visualizationAnnotations;
  };

  function getSelectionPresentationVariant(entityType, annotationPath, converterContext) {
    if (annotationPath) {
      var resolvedTarget = converterContext.getEntityTypeAnnotation(annotationPath);
      var selectionPresentationVariant = resolvedTarget.annotation;

      if (selectionPresentationVariant) {
        if (selectionPresentationVariant.term === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
          return selectionPresentationVariant;
        }
      } else {
        throw new Error("Annotation Path for the SPV mentioned in the manifest is not found, Please add the SPV in the annotation");
      }
    } else {
      var _entityType$annotatio, _entityType$annotatio2;

      return (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.SelectionPresentationVariant;
    }
  }

  _exports.getSelectionPresentationVariant = getSelectionPresentationVariant;

  function isSelectionPresentationCompliant(SelectionPresentationVariant, bIsALP) {
    var presentationVariant = SelectionPresentationVariant && SelectionPresentationVariant.PresentationVariant;

    if (presentationVariant) {
      return isPresentationCompliant(presentationVariant, bIsALP);
    } else {
      throw new Error("Presentation Variant is not present in the SPV annotation");
    }
  }

  _exports.isSelectionPresentationCompliant = isSelectionPresentationCompliant;

  function isPresentationCompliant(presentationVariant, bIsALP) {
    var bHasTable = false,
        bHasChart = false;

    if (bIsALP) {
      if (presentationVariant && presentationVariant.Visualizations) {
        var aVisualizations = presentationVariant.Visualizations;
        aVisualizations.map(function (oVisualization) {
          if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem") {
            bHasTable = true;
          }

          if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.Chart") {
            bHasChart = true;
          }
        });
      }

      return bHasChart && bHasTable;
    } else {
      return presentationVariant && presentationVariant.Visualizations && !!presentationVariant.Visualizations.find(function (visualization) {
        return visualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem" || visualization.$target.term === "com.sap.vocabularies.UI.v1.Chart";
      });
    }
  }

  _exports.isPresentationCompliant = isPresentationCompliant;

  function getDefaultLineItem(entityType) {
    var _entityType$annotatio3;

    return (_entityType$annotatio3 = entityType.annotations.UI) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.LineItem;
  }

  _exports.getDefaultLineItem = getDefaultLineItem;

  function getDefaultChart(entityType) {
    var _entityType$annotatio4;

    return (_entityType$annotatio4 = entityType.annotations.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.Chart;
  }

  _exports.getDefaultChart = getDefaultChart;

  function getDefaultPresentationVariant(entityType) {
    var _entityType$annotatio5, _entityType$annotatio6;

    return (_entityType$annotatio5 = entityType.annotations) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.UI) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.PresentationVariant;
  }

  _exports.getDefaultPresentationVariant = getDefaultPresentationVariant;

  function getDefaultSelectionVariant(entityType) {
    var _entityType$annotatio7, _entityType$annotatio8;

    return (_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.UI) === null || _entityType$annotatio8 === void 0 ? void 0 : _entityType$annotatio8.SelectionVariant;
  }

  _exports.getDefaultSelectionVariant = getDefaultSelectionVariant;

  function getSelectionVariant(entityType, converterContext) {
    var annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();
    var selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);
    var selectionVariant;

    if (selectionPresentationVariant) {
      var _selectionVariant = selectionPresentationVariant.SelectionVariant;

      if (_selectionVariant) {
        return _selectionVariant;
      }
    } else {
      selectionVariant = getDefaultSelectionVariant(entityType);
      return selectionVariant;
    }
  }

  _exports.getSelectionVariant = getSelectionVariant;

  function getDataVisualizationConfiguration(visualizationPath, isCondensedTableLayoutCompliant, converterContext, viewConfiguration, doNotCheckApplySupported) {
    var resolvedTarget = converterContext.getEntityTypeAnnotation(visualizationPath);
    var visualization = resolvedTarget.annotation;
    converterContext = resolvedTarget.converterContext;
    var visualizationAnnotations = [];
    var presentationVariantAnnotation;
    var presentationPath = "";
    var chartVisualization, tableVisualization;
    var sTerm = visualization === null || visualization === void 0 ? void 0 : visualization.term;

    if (sTerm) {
      switch (sTerm) {
        case "com.sap.vocabularies.UI.v1.LineItem":
        case "com.sap.vocabularies.UI.v1.Chart":
          visualizationAnnotations.push({
            visualization: visualization,
            annotationPath: visualizationPath,
            converterContext: converterContext
          });
          break;

        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          presentationVariantAnnotation = visualization;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(visualization, visualizationPath, converterContext));
          break;

        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          presentationVariantAnnotation = visualization.PresentationVariant; // Presentation can be inline or outside the SelectionPresentationVariant

          presentationPath = presentationVariantAnnotation.fullyQualifiedName;

          if (!isPresentationCompliant(presentationVariantAnnotation)) {
            var entityType = converterContext.getEntityType();
            var defaultLineItemAnnotation = getDefaultLineItem(entityType);

            if (defaultLineItemAnnotation) {
              visualizationAnnotations.push({
                visualization: defaultLineItemAnnotation,
                annotationPath: converterContext.getRelativeAnnotationPath(defaultLineItemAnnotation.fullyQualifiedName, entityType),
                converterContext: converterContext
              });
            }
          } else {
            visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(presentationVariantAnnotation, visualizationPath, converterContext));
          }

          break;

        default:
          break;
      }

      visualizationAnnotations.map(function (visualizationAnnotation) {
        var visualization = visualizationAnnotation.visualization,
            annotationPath = visualizationAnnotation.annotationPath,
            converterContext = visualizationAnnotation.converterContext;

        switch (visualization.term) {
          case "com.sap.vocabularies.UI.v1.Chart":
            chartVisualization = createChartVisualization(visualization, annotationPath, converterContext, doNotCheckApplySupported);
            break;

          case "com.sap.vocabularies.UI.v1.LineItem":
          default:
            tableVisualization = createTableVisualization(visualization, annotationPath, converterContext, presentationVariantAnnotation, isCondensedTableLayoutCompliant, viewConfiguration);
            break;
        }
      });
    } else {
      tableVisualization = createDefaultTableVisualization(converterContext);
      converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_LINEITEM);
    }

    var aVisualizations = [];
    var sPath = sTerm === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" ? presentationPath : visualization && visualization.fullyQualifiedName;

    if (sPath === undefined) {
      sPath = "/";
    }

    if (chartVisualization) {
      aVisualizations.push(chartVisualization);
    }

    if (tableVisualization) {
      aVisualizations.push(tableVisualization);
    }

    return {
      visualizations: aVisualizations,
      annotationPath: converterContext.getEntitySetBasedAnnotationPath(sPath)
    };
  }

  _exports.getDataVisualizationConfiguration = getDataVisualizationConfiguration;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,