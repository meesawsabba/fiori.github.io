/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/formatters/ValueFormatter", "sap/fe/core/templating/UIFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/helpers/BindingExpression", "sap/fe/core/templating/PropertyHelper", "sap/ui/model/odata/v4/AnnotationHelper"], function (valueFormatters, UIFormatters, DataModelPathHelper, BindingExpression, PropertyHelper, AnnotationHelper) {
  "use strict";

  var _exports = {};
  var getAssociatedUnitPropertyPath = PropertyHelper.getAssociatedUnitPropertyPath;
  var unresolveableExpression = BindingExpression.unresolveableExpression;
  var bindingExpression = BindingExpression.bindingExpression;
  var compileBinding = BindingExpression.compileBinding;
  var formatResult = BindingExpression.formatResult;
  var annotationExpression = BindingExpression.annotationExpression;
  var getPathRelativeLocation = DataModelPathHelper.getPathRelativeLocation;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var getBindingWithUnitOrCurrency = UIFormatters.getBindingWithUnitOrCurrency;
  var EDM_TYPE_MAPPING = UIFormatters.EDM_TYPE_MAPPING;
  var getDisplayMode = UIFormatters.getDisplayMode;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var getDataPointTargetExpression = function (oDataModelPath) {
    return oDataModelPath !== null && oDataModelPath !== void 0 && oDataModelPath.TargetValue ? annotationExpression(oDataModelPath.TargetValue) : unresolveableExpression;
  };

  var oResourceModel = sap.ui.getCore().getLibraryResourceBundle("sap.fe.macros");

  var progressIndicatorDisplayValue = function (oPropertyDataModelObjectPath) {
    var _oPropertyDataModelOb;

    var fieldValue = (oPropertyDataModelObjectPath === null || oPropertyDataModelObjectPath === void 0 ? void 0 : (_oPropertyDataModelOb = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb === void 0 ? void 0 : _oPropertyDataModelOb.Value) || "";
    var relativeLocation = getPathRelativeLocation(oPropertyDataModelObjectPath.contextLocation, oPropertyDataModelObjectPath.navigationProperties).map(function (np) {
      return np.name;
    });
    var fieldValueExpression = annotationExpression(fieldValue, relativeLocation);
    var TargetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject);

    if (fieldValueExpression && TargetExpression) {
      var sUnitPropertyPath = fieldValue !== null && fieldValue !== void 0 && fieldValue.$target ? getAssociatedUnitPropertyPath(fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.$target) : undefined;

      if (!sUnitPropertyPath) {
        var _fieldValue$$target, _fieldValue$$target$a, _fieldValue$$target$a2, _fieldValue$$target$a3;

        var sUoMPercent = (_fieldValue$$target = fieldValue.$target) === null || _fieldValue$$target === void 0 ? void 0 : (_fieldValue$$target$a = _fieldValue$$target.annotations) === null || _fieldValue$$target$a === void 0 ? void 0 : (_fieldValue$$target$a2 = _fieldValue$$target$a.Measures) === null || _fieldValue$$target$a2 === void 0 ? void 0 : (_fieldValue$$target$a3 = _fieldValue$$target$a2.Unit) === null || _fieldValue$$target$a3 === void 0 ? void 0 : _fieldValue$$target$a3.charAt(0);

        if (sUoMPercent === "%") {
          return compileBinding(fieldValueExpression) + " %";
        } else {
          return oResourceModel.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [compileBinding(fieldValueExpression), compileBinding(TargetExpression)]);
        }
      } else {
        return oResourceModel.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [compileBinding(fieldValueExpression), compileBinding(TargetExpression)]) + " " + compileBinding(bindingExpression(sUnitPropertyPath));
      }
    }

    return undefined;
  };

  _exports.progressIndicatorDisplayValue = progressIndicatorDisplayValue;

  var buildRatingIndicatorSubtitleExpression = function (oContext, mSampleSize) {
    if (mSampleSize) {
      return formatRatingIndicatorSubTitle(AnnotationHelper.value(mSampleSize, {
        context: oContext
      }));
    }
  }; // returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')


  var formatRatingIndicatorSubTitle = function (iSampleSizeValue) {
    if (iSampleSizeValue) {
      var sSubTitleLabel = iSampleSizeValue > 1 ? oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL_PLURAL") : oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL");
      return oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE", [String(iSampleSizeValue), sSubTitleLabel]);
    }
  };
  /**
   * This function is used to get the header text of rating indicator.
   * @param oContext
   * @param oDataPoint
   * @function param {object} oContext context of interface
   * param {object} oDataPoint data point object
   * @returns {string} Expression binding for rating indicator text
   */


  var getHeaderRatingIndicatorText = function (oContext, oDataPoint) {
    if (oDataPoint && oDataPoint.SampleSize) {
      return buildRatingIndicatorSubtitleExpression(oContext, oDataPoint.SampleSize);
    } else if (oDataPoint && oDataPoint.Description) {
      var sModelValue = AnnotationHelper.value(oDataPoint.Description, {
        context: oContext
      });
      return "${path:" + sModelValue + "}";
    }
  };

  getHeaderRatingIndicatorText.requiresIContext = true;
  _exports.getHeaderRatingIndicatorText = getHeaderRatingIndicatorText;

  var buildExpressionForDescription = function (fieldValue) {
    var _fieldValue$$target2, _fieldValue$$target2$, _fieldValue$$target2$2;

    if (fieldValue !== null && fieldValue !== void 0 && (_fieldValue$$target2 = fieldValue.$target) !== null && _fieldValue$$target2 !== void 0 && (_fieldValue$$target2$ = _fieldValue$$target2.annotations) !== null && _fieldValue$$target2$ !== void 0 && (_fieldValue$$target2$2 = _fieldValue$$target2$.Common) !== null && _fieldValue$$target2$2 !== void 0 && _fieldValue$$target2$2.Text) {
      var _fieldValue$$target3, _fieldValue$$target3$, _fieldValue$$target3$2;

      var oTextExpression = annotationExpression(fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$$target3 = fieldValue.$target) === null || _fieldValue$$target3 === void 0 ? void 0 : (_fieldValue$$target3$ = _fieldValue$$target3.annotations) === null || _fieldValue$$target3$ === void 0 ? void 0 : (_fieldValue$$target3$2 = _fieldValue$$target3$.Common) === null || _fieldValue$$target3$2 === void 0 ? void 0 : _fieldValue$$target3$2.Text);
      oTextExpression.parameters = {
        "$$noPatch": true
      };
      return oTextExpression;
    }

    return undefined;
  };

  var getDecimalFormat = function (outExpression, fieldValue, sNumberOfFractionalDigits) {
    if (!outExpression.constraints) {
      outExpression.constraints = {};
    }

    outExpression.constraints = Object.assign(outExpression.constraints, {
      precision: fieldValue.$target.precision,
      scale: sNumberOfFractionalDigits ? sNumberOfFractionalDigits : fieldValue.$target.scale
    });
    return outExpression;
  };

  var getValueFormatted = function (oPropertyDataModelPath, fieldValue, sPropertyType, sNumberOfFractionalDigits) {
    var _fieldValue$path;

    var outExpression;
    var relativeLocation = (fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$path = fieldValue.path) === null || _fieldValue$path === void 0 ? void 0 : _fieldValue$path.indexOf("/")) === -1 ? getPathRelativeLocation(oPropertyDataModelPath.contextLocation, oPropertyDataModelPath.navigationProperties).map(function (np) {
      return np.name;
    }) : [];
    outExpression = annotationExpression(fieldValue, relativeLocation);

    if (sPropertyType) {
      var _EDM_TYPE_MAPPING$sPr;

      outExpression.type = (_EDM_TYPE_MAPPING$sPr = EDM_TYPE_MAPPING[sPropertyType]) === null || _EDM_TYPE_MAPPING$sPr === void 0 ? void 0 : _EDM_TYPE_MAPPING$sPr.type;
    }

    switch (sPropertyType) {
      case "Edm.Decimal":
        // for the listReport, the decimal fields are formatted by returning a string
        // for the facets of the OP, the decimal fields are formatted by returning a promise, so we manage all the cases
        outExpression = getDecimalFormat(outExpression, fieldValue, sNumberOfFractionalDigits);
        break;

      case "Edm.String":
        if (!outExpression.formatOptions) {
          outExpression.formatOptions = {};
        }

        if (!outExpression.constraints) {
          outExpression.constraints = {};
        }

        outExpression.formatOptions.parseKeepsEmptyString = true;
        break;

      default:
    }

    return outExpression;
  };

  var buildFieldBindingExpression = function (oDataModelPath, oProperty, dataPointFormatOptions, bMeasureDisplayModeEnabled) {
    var _oDataPointValue$$tar, _oPropertyDataModelOb2, _oPropertyDataModelOb3, _oPropertyDataModelOb4, _oPropertyDataModelOb5, _oPropertyDataModelOb6, _oPropertyDataModelOb7;

    var oDataPoint = oDataModelPath.targetObject;
    var oDataPointValue = (oDataPoint === null || oDataPoint === void 0 ? void 0 : oDataPoint.Value) || "";
    var oFormatOptions = oProperty.formatOptions;
    var oDescription = buildExpressionForDescription(oDataPointValue);
    var sPropertyType = oDataPointValue === null || oDataPointValue === void 0 ? void 0 : (_oDataPointValue$$tar = oDataPointValue.$target) === null || _oDataPointValue$$tar === void 0 ? void 0 : _oDataPointValue$$tar.type;
    var sNumberOfFractionalDigits;

    if (sPropertyType === "Edm.Decimal" && oDataPoint.ValueFormat) {
      if (oDataPoint.ValueFormat.NumberOfFractionalDigits) {
        sNumberOfFractionalDigits = oDataPoint.ValueFormat.NumberOfFractionalDigits;
      }
    }

    var oPropertyDataModelObjectPath = enhanceDataModelPath(oDataModelPath, oDataPointValue.path);
    var oFormatedValue = getValueFormatted(oPropertyDataModelObjectPath, oDataPointValue, sPropertyType, sNumberOfFractionalDigits);
    var sDisplayMode = oDescription ? oFormatOptions.displayMode || getDisplayMode(oDataPointValue, oPropertyDataModelObjectPath) : "Value";
    var oBindingExpression;

    switch (sDisplayMode) {
      case "Description":
        oBindingExpression = oDescription;
        break;

      case "ValueDescription":
        oBindingExpression = formatResult([oFormatedValue, oDescription], valueFormatters.formatWithBrackets);
        break;

      case "DescriptionValue":
        oBindingExpression = formatResult([oDescription, oFormatedValue], valueFormatters.formatWithBrackets);
        break;

      default:
        if ((_oPropertyDataModelOb2 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb2 !== void 0 && (_oPropertyDataModelOb3 = _oPropertyDataModelOb2.annotations) !== null && _oPropertyDataModelOb3 !== void 0 && (_oPropertyDataModelOb4 = _oPropertyDataModelOb3.Measures) !== null && _oPropertyDataModelOb4 !== void 0 && _oPropertyDataModelOb4.Unit || (_oPropertyDataModelOb5 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb5 !== void 0 && (_oPropertyDataModelOb6 = _oPropertyDataModelOb5.annotations) !== null && _oPropertyDataModelOb6 !== void 0 && (_oPropertyDataModelOb7 = _oPropertyDataModelOb6.Measures) !== null && _oPropertyDataModelOb7 !== void 0 && _oPropertyDataModelOb7.ISOCurrency) {
          oBindingExpression = getBindingWithUnitOrCurrency(oPropertyDataModelObjectPath, oFormatedValue);

          if (oBindingExpression && bMeasureDisplayModeEnabled && (dataPointFormatOptions === null || dataPointFormatOptions === void 0 ? void 0 : dataPointFormatOptions.measureDisplayMode) !== "ReadOnly") {
            oBindingExpression.formatOptions = _objectSpread(_objectSpread({}, oBindingExpression.formatOptions), {}, {
              showMeasure: false
            });
          }
        } else {
          oBindingExpression = oFormatedValue;
        }

    }

    return compileBinding(oBindingExpression);
  };
  /**
   * Method to calculate the percentage value of Progress Indicator. Basic formula is Value/Target * 100.
   *
   * @param {*} oPropertyDataModelObjectPath
   * @returns {Binding} Expression binding that will calculate the percent value to be shown in progress indicator. Formula given above.
   */


  _exports.buildFieldBindingExpression = buildFieldBindingExpression;

  var buildExpressionForProgressIndicatorPercentValue = function (oPropertyDataModelObjectPath) {
    var _oPropertyDataModelOb8;

    var fieldValue = (oPropertyDataModelObjectPath === null || oPropertyDataModelObjectPath === void 0 ? void 0 : (_oPropertyDataModelOb8 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb8 === void 0 ? void 0 : _oPropertyDataModelOb8.Value) || "";
    var relativeLocation = getPathRelativeLocation(oPropertyDataModelObjectPath.contextLocation, oPropertyDataModelObjectPath.navigationProperties).map(function (np) {
      return np.name;
    });
    var fieldValueExpression = annotationExpression(fieldValue, relativeLocation);
    var TargetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject);
    var sUnitPropertyPath = fieldValue !== null && fieldValue !== void 0 && fieldValue.$target ? getAssociatedUnitPropertyPath(fieldValue.$target) : undefined;
    var UnitExpression = sUnitPropertyPath ? bindingExpression(sUnitPropertyPath) : "";
    var oExpressionTemplate = formatResult([fieldValueExpression, TargetExpression, UnitExpression], valueFormatters.computePercentage);
    return compileBinding(oExpressionTemplate);
  };

  _exports.buildExpressionForProgressIndicatorPercentValue = buildExpressionForProgressIndicatorPercentValue;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,