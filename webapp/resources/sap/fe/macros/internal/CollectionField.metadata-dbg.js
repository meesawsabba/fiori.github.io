/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/macros/MacroMetadata", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/templating/UIFormatters", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/core/helpers/BindingExpression", "sap/fe/core/templating/DataModelPathHelper"], function (MacroMetadata, MetaModelConverter, UIFormatters, BindingHelper, FieldTemplating, BindingExpression, DataModelPathHelper) {
  "use strict";

  var compileBinding = BindingExpression.compileBinding;
  var constant = BindingExpression.constant;
  var annotationExpression = BindingExpression.annotationExpression;
  var ifElse = BindingExpression.ifElse;
  var and = BindingExpression.and;
  var getValueBinding = FieldTemplating.getValueBinding;
  var getVisibleExpression = FieldTemplating.getVisibleExpression;
  var UI = BindingHelper.UI;
  var getDisplayMode = UIFormatters.getDisplayMode;

  /**
   * @classdesc
   * Building block for creating a CollectionField based on the metadata provided by OData V4.
   * <br>
   * Usually, a DataField annotation is expected
   *
   * Usage example:
   * <pre>
   * <internalMacro:CollectionField
   *   idPrefix="SomePrefix"
   *   contextPath="{entitySet>}"
   *   metaPath="{dataField>}"
   * />
   * </pre>
   *
   * @class sap.fe.macros.internal.CollectionField
   * @hideconstructor
   * @private
   * @experimental
   * @since 1.94.0
   */
  var CollectionField = MacroMetadata.extend("sap.fe.macros.internal.CollectionField", {
    /**
     * Define building block stereotype for documentation
     */
    name: "CollectionField",

    /**
     * Namespace of the building block
     */
    namespace: "sap.fe.macros.internal",

    /**
     * Fragment source of the building block (optional)
     */
    fragment: "sap.fe.macros.internal.CollectionField",

    /**
     * The metadata describing the building block
     */
    metadata: {
      /**
       * Define building block stereotype for documentation purpose
       */
      stereotype: "xmlmacro",

      /**
       * Properties.
       */
      properties: {
        /**
         * Prefix added to the generated ID of the field
         */
        idPrefix: {
          type: "string"
        },

        /**
         * Prefix added to the generated ID of the value help used for the field
         */
        vhIdPrefix: {
          type: "string",
          defaultValue: "FieldValueHelp"
        },
        _vhFlexId: {
          type: "string",
          computed: true
        },

        /**
         * Metadata path to the CollectionField.
         * This property is usually a metadataContext pointing to a DataField having a Value that uses a 1:n navigation
         */
        metaPath: {
          type: "sap.ui.model.Context",
          required: true,
          $kind: "Property"
        },

        /**
         * Property added to associate the label with the CollectionField
         */
        ariaLabelledBy: {
          type: "string"
        },
        formatOptions: {
          type: "object",
          properties: {}
        },

        /**
         * Mandatory context to the CollectionField
         */
        contextPath: {
          type: "sap.ui.model.Context",
          required: true,
          $kind: ["EntitySet", "NavigationProperty"]
        }
      }
    },
    create: function (oProps) {
      var oDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(oProps.metaPath, oProps.contextPath);
      var oDataFieldConverted = MetaModelConverter.convertMetaModelContext(oProps.metaPath);
      var oPropertyPath = oDataFieldConverted.Value.$target;
      var sExtraPath = oDataFieldConverted.Value.path;
      oProps.visible = getVisibleExpression(oDataModelPath, oProps.formatOptions);

      if (sExtraPath && sExtraPath.length > 0) {
        oDataModelPath = DataModelPathHelper.enhanceDataModelPath(oDataModelPath, sExtraPath);
      }

      var bInsertable = DataModelPathHelper.isPathInsertable(oDataModelPath);
      var bDeletable = DataModelPathHelper.isPathDeletable(oDataModelPath);
      oProps.editMode = compileBinding(ifElse(and(bInsertable, bDeletable, UI.IsEditable), constant("Editable"), constant("Display")));
      oProps.displayMode = getDisplayMode(oPropertyPath, oDataModelPath);

      var multiInputSettings = CollectionField._getMultiInputSettings(oDataModelPath, oProps.formatOptions);

      oProps.text = multiInputSettings.text;
      oProps.collection = multiInputSettings.collection;
      oProps.key = multiInputSettings.key;
      return oProps;
    },
    _getMultiInputSettings: function (oPropertyDataModelObjectPath, formatOptions) {
      var _oPropertyDefinition$, _oPropertyDefinition$2;

      var collectionPath = "{path:'" + DataModelPathHelper.getTargetEntitySetPath(oPropertyDataModelObjectPath, true) + "',  parameters : { $$groupId : '$auto.Workers' } , templateShareable: false}";
      var navs = DataModelPathHelper.getTargetEntitySetNavigation(oPropertyDataModelObjectPath);
      var oRelativePropertyDataModelObjectPath = Object.assign({}, oPropertyDataModelObjectPath);

      if (oRelativePropertyDataModelObjectPath.contextLocation) {
        oRelativePropertyDataModelObjectPath.contextLocation.navigationProperties = navs;
      }

      var oPropertyDefinition = oPropertyDataModelObjectPath.targetObject.type === "PropertyPath" ? oPropertyDataModelObjectPath.targetObject.$target : oPropertyDataModelObjectPath.targetObject;
      var commonText = (_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Common) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.Text;
      var relativeLocation = DataModelPathHelper.getPathRelativeLocation(oPropertyDataModelObjectPath.contextLocation, oPropertyDataModelObjectPath.navigationProperties).map(function (np) {
        return np.name;
      });
      var textExpression = commonText ? compileBinding(annotationExpression(commonText, relativeLocation)) : getValueBinding(oRelativePropertyDataModelObjectPath, formatOptions, true);
      return {
        text: textExpression,
        collection: collectionPath,
        key: getValueBinding(oRelativePropertyDataModelObjectPath, formatOptions, true)
      };
    }
  });
  return CollectionField;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,