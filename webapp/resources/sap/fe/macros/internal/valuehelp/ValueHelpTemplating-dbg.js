/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingExpression", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters"], function (BindingExpression, StableIdHelper, PropertyHelper, DataModelPathHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getDisplayMode = UIFormatters.getDisplayMode;
  var checkFilterExpressionRestrictions = DataModelPathHelper.checkFilterExpressionRestrictions;
  var hasDateType = PropertyHelper.hasDateType;
  var isCurrency = PropertyHelper.isCurrency;
  var isUnit = PropertyHelper.isUnit;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var hasValueListForValidation = PropertyHelper.hasValueListForValidation;
  var hasValueHelpWithFixedValues = PropertyHelper.hasValueHelpWithFixedValues;
  var generate = StableIdHelper.generate;
  var compileBinding = BindingExpression.compileBinding;

  /**
   * Retrieve the displayMode for the value help.
   * The main rule is that if a property is used in a VHTable then we don't want to display the text arrangement directly.
   *
   * @param propertyPath The current property
   * @returns The target displayMode
   */
  var getValueHelpTableDisplayMode = function (propertyPath) {
    var sDisplayMode = getDisplayMode(propertyPath.targetObject, propertyPath); // if the property is used in a VHTable consider only #TextOnly else show the value

    return sDisplayMode === "Description" ? "Description" : "Value";
  };
  /**
   * Method to return delegate property of Value Help.
   *
   * @function
   * @name getDelegateConfiguration
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param propertyPath The current property path
   * @param conditionModelName Condition model of the Value Help
   * @returns The expression needed to configure the delegate
   */


  _exports.getValueHelpTableDisplayMode = getValueHelpTableDisplayMode;

  var getDelegateConfiguration = function (propertyPath, conditionModelName) {
    var delegateConfiguration = {
      name: "sap/fe/macros/FieldValueHelpDelegate",
      payload: {
        propertyPath: propertyPath,
        conditionModel: conditionModelName
      }
    };
    return compileBinding(delegateConfiguration);
  };
  /**
   * Method to generate the ID for Value Help.
   *
   * @function
   * @name generateID
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param {string} sFlexId Flex ID of the current object
   * @param {string} sIdPrefix Prefix for the ValueHelp ID
   * @param {string} sOriginalPropertyName Name of the property
   * @param {string} sPropertyName Name of the ValueHelp Property
   * @returns {string} The Id generated for the ValueHelp
   */


  _exports.getDelegateConfiguration = getDelegateConfiguration;

  var generateID = function (sFlexId, sIdPrefix, sOriginalPropertyName, sPropertyName) {
    if (sFlexId) {
      return sFlexId;
    }

    var sProperty = sPropertyName;

    if (sOriginalPropertyName !== sPropertyName) {
      sProperty = sOriginalPropertyName + "::" + sPropertyName;
    }

    return generate([sIdPrefix, sProperty]);
  };
  /**
   * Method to check if a property needs to be validated or not when used in the valuehelp.
   *
   * @function
   * @name requiresValidation
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param  oProperty ValueHelp property type annotations
   * @returns `true` if the value help need to be validated
   */


  _exports.generateID = generateID;

  var requiresValidation = function (oProperty) {
    return hasValueHelpWithFixedValues(oProperty) || hasValueListForValidation(oProperty) || hasValueHelp(oProperty) && (isUnit(oProperty) || isCurrency(oProperty));
  };
  /**
   * Method to decide if case sensitive filter requests shall be used or not.
   *
   * In all cases we want to have (semantically) case-insensitive filter requests. If the backend supports tolower we can
   * set it to false so the model will send a tolower filter request. If it doesn't we expect the backend doesn't care
   * about case sensitive and don't want to create a faulty request, therefore setting it to true.
   *
   * @function
   * @name useCaseSensitiveFilterRequests
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param oDataModelPath Current data model path
   * @param aEntityContainerFilterFunctions Filter functions of entity container
   *
   * @returns `true` if the entity set / service supports case sensitive filter requests
   */


  _exports.requiresValidation = requiresValidation;

  var useCaseSensitiveFilterRequests = function (oDataModelPath, aEntityContainerFilterFunctions) {
    var _oDataModelPath$targe, _oDataModelPath$targe2, _oDataModelPath$targe3;

    var filterFunctions = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : (_oDataModelPath$targe = oDataModelPath.targetEntitySet) === null || _oDataModelPath$targe === void 0 ? void 0 : (_oDataModelPath$targe2 = _oDataModelPath$targe.annotations) === null || _oDataModelPath$targe2 === void 0 ? void 0 : (_oDataModelPath$targe3 = _oDataModelPath$targe2.Capabilities) === null || _oDataModelPath$targe3 === void 0 ? void 0 : _oDataModelPath$targe3.FilterFunctions) || aEntityContainerFilterFunctions;
    return filterFunctions ? !(filterFunctions.indexOf("tolower") > -1) : true;
  };

  _exports.useCaseSensitiveFilterRequests = useCaseSensitiveFilterRequests;

  var isSemanticDateRange = function (oDataModelPath) {
    var targetProperty = oDataModelPath.targetObject;
    var targetRestrictions = checkFilterExpressionRestrictions(oDataModelPath, ["SingleRange"]);
    return hasDateType(targetProperty) && compileBinding(targetRestrictions);
  };

  _exports.isSemanticDateRange = isSemanticDateRange;

  var shouldShowConditionPanel = function (oDataModelPath) {
    return compileBinding(checkFilterExpressionRestrictions(oDataModelPath, ["SingleValue", "MultiValue"])) === "false";
  };

  _exports.shouldShowConditionPanel = shouldShowConditionPanel;

  var getColumnDataProperty = function (sValueListProperty, propertyPath) {
    var _propertyPath$targetO, _propertyPath$targetO2, _propertyPath$targetO3, _propertyPath$targetO4, _propertyPath$targetO5, _propertyPath$targetO6;

    if (propertyPath !== null && propertyPath !== void 0 && (_propertyPath$targetO = propertyPath.targetObject) !== null && _propertyPath$targetO !== void 0 && (_propertyPath$targetO2 = _propertyPath$targetO.annotations) !== null && _propertyPath$targetO2 !== void 0 && (_propertyPath$targetO3 = _propertyPath$targetO2.Common) !== null && _propertyPath$targetO3 !== void 0 && _propertyPath$targetO3.Text && (_propertyPath$targetO4 = propertyPath.targetObject.annotations.Common.Text) !== null && _propertyPath$targetO4 !== void 0 && (_propertyPath$targetO5 = _propertyPath$targetO4.annotations) !== null && _propertyPath$targetO5 !== void 0 && (_propertyPath$targetO6 = _propertyPath$targetO5.UI) !== null && _propertyPath$targetO6 !== void 0 && _propertyPath$targetO6.TextArrangement && propertyPath.targetObject.annotations.Common.Text.annotations.UI.TextArrangement.valueOf() === "UI.TextArrangementType/TextOnly") {
      return propertyPath.targetObject.annotations.Common.Text.path;
    }

    return sValueListProperty;
  };

  _exports.getColumnDataProperty = getColumnDataProperty;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,