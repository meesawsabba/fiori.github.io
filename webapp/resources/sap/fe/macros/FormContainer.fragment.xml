<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns="sap.m"
	xmlns:f="sap.ui.layout.form"
	xmlns:macro="sap.fe.macros"
	xmlns:internalMacro="sap.fe.macros.internal"
	xmlns:core="sap.ui.core"
	xmlns:control="sap.fe.core.controls"
	xmlns:dt="sap.ui.dt"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	template:require="{
		MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
		ID: 'sap/fe/core/helpers/StableIdHelper',
		COMMON: 'sap/fe/macros/CommonHelper',
		FORM: 'sap/fe/macros/form/FormHelper',
		UI: 'sap/fe/core/templating/UIFormatters',
		DataField: 'sap/fe/core/templating/DataFieldFormatters',
		FormTemplating: 'sap/fe/macros/internal/form/FormTemplating',
		FieldTemplating: 'sap/fe/macros/field/FieldTemplating',
		Property: 'sap/fe/core/templating/PropertyFormatters',
		FIELD: 'sap/fe/macros/field/FieldHelper'
	}"
>
	<f:FormContainer
		unittest:id="formC"
		dt:designtime="{this>designtimeSettings}"
		id="{= ${this>id} || undefined}"
		title="{this>title}"
		binding="{= FORM.generateBindingExpression(${this>navigationPath},${entitySet>./@com.sap.vocabularies.Common.v1.SemanticKey})}"
		visible="{this>visible}"
		macrodata:navigationPath="{this>navigationPath}"
		macrodata:etName="{entitySet>./@sapui.name}"
	>

		<template:if test="{actions>}">
			<template:then>
				<f:toolbar>
					<OverflowToolbar id="{= ${this>id} ? ID.generate([${this>id}, 'FormActionsToolbar']) : undefined}">
						<Title text="{this>title}" />
						<ToolbarSpacer />
						<template:repeat list="{actions>}" var="action">
							<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.FormActionButtons" type="XML" />
						</template:repeat>
					</OverflowToolbar>
				</f:toolbar>
			</template:then>
		</template:if>
		<f:dependents>
			<!-- Create the value help dialogs for fields inside form container -->
			<template:repeat list="{path:'dataFieldCollection>'}" var="dataField">
				<template:with path="dataField>annotationPath" var="dataField">
				<!-- <template:if test="{= ${dataField>$Type} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction' &amp;&amp; !${formElements>Target}}"> -->
					<template:if test="{this>id}">
						<macro:ValueHelp idPrefix="{= ID.generate([${this>id}, 'FieldValueHelp']) }" property="{dataField>Value}" useMultiValueField="true" />
					</template:if>
				<!-- </template:if> -->
				</template:with>
			</template:repeat>
		</f:dependents>
		<f:formElements>
			<template:with path="dataFieldCollection>" var="formElements">
				<template:if test="{= ${formElements>0/annotationPath}.indexOf('com.sap.vocabularies.UI.v1.DataPoint') > -1 }">
					<template:then>
						<template:with path="formElements>0/annotationPath" var="dataPoint">
							<f:FormElement
								id="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${dataPoint>}]) : undefined}"
								label="{dataPoint>Title@@MODEL.value}"
								visible="{= FieldTemplating.getVisibleExpression(${dataPoint>@@UI.getDataModelObjectPath})}"
							>
								<f:fields>
									<internalMacro:Field
										idPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${dataPoint>}]) : '' }"
										vhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FieldValueHelp']) : ''}"
										entitySet="{entitySet>}"
										dataField="{dataPoint>}"
										editMode="{= ${this>displayMode} === 'true' ? 'Display' : undefined}"
										onChange="{this>onChange}"
									>
										<internalMacro:formatOptions textAlignMode="Form" showEmptyIndicator="true" />
									</internalMacro:Field>
								</f:fields>
							</f:FormElement>
						</template:with>
					</template:then>
					<template:elseif test="{= ${formElements>0/annotationPath}.indexOf('com.sap.vocabularies.Communication.v1.Contact') > -1 }">
						<template:with path="formElements>0/annotationPath" var="contact">
							<f:FormElement>
								<f:label>
									<Label
										text="{contact>fn/$Path@com.sap.vocabularies.Common.v1.Label}"
										visible="{= FieldTemplating.getVisibleExpression(${dataField>@@UI.getDataModelObjectPath})}"
									>
										<layoutData>
											<f:ColumnElementData cellsLarge="12" />
										</layoutData>
									</Label>
								</f:label>
								<f:fields>
									<macro:Contact contact="{contact>}" visible="true" />
								</f:fields>
							</f:FormElement>
						</template:with>
					</template:elseif>
					<template:else>
						<template:repeat list="{path: 'formElements>'}" var="dataField">
							<template:if test="{= ${dataField>type} === 'Annotation'}">
								<template:then>
									<template:with path="dataField>annotationPath" var="annotationDataField">
										<template:if test="{annotationDataField>Target@@DataField.isSemanticallyConnectedFields}">
											<template:then>
												<f:FormElement
													id="{= ${this>id} ? ID.generate([${this>id}, 'SemanticFormElement', ${annotationDataField>}]) : '' }"
													label="{annotationDataField>Target/$AnnotationPath/Label}"
												>
													<f:fields>
														<control:FieldWrapper
															editMode="{ui>/editMode}"
															emptyIndicatorTrigger="true"
															required="{= FIELD.getRequiredForDataField(${annotationDataField>Value/$Path@@FIELD.fieldControl}, '{ui>/editMode}' , ${annotationDataField>@@FIELD.fieldControl})}"
														>
															<control:contentDisplay>
																<Text text="{=FormTemplating.getLabelForConnectedFields(${annotationDataField>Target@@DataField.getDataFieldObjectPath})}" />
															</control:contentDisplay>
															<control:contentEdit>
																<HBox>
																	<template:repeat list="{annotationDataField>Target/$AnnotationPath/Data}" var="data">
																		<template:with path="data>" helper="COMMON.getDataFromTemplate" var="element">
																			<core:Fragment fragmentName="sap.fe.macros.internal.field.ConnectedDataField" type="XML" />
																		</template:with>
																	</template:repeat>
																</HBox>
															</control:contentEdit>
														</control:FieldWrapper>
													</f:fields>
												</f:FormElement>
											</template:then>
											<template:elseif
												test="{= ${annotationDataField>Value} &amp;&amp; ${annotationDataField>Value/$Path} &amp;&amp; UI.isCollectionField(${annotationDataField>Value@@Property.getPropertyObjectPath})}"
											>
												<f:FormElement
													id="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${annotationDataField>}]) : undefined }"
													label="{annotationDataField>@@MODEL.label}"
													visible="{annotationDataField>@@COMMON.getHiddenPathExpression}"
												>
													<f:fields>
														<internalMacro:CollectionField
															idPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${annotationDataField>}]) : '' }"
															vhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FieldValueHelp']) : '' }"
															contextPath="{entitySet>}"
															metaPath="{annotationDataField>}"
														/>
													</f:fields>
												</f:FormElement>
											</template:elseif>
											<template:else>
												<f:FormElement
													id="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${annotationDataField>}]) : undefined }"
													label="{annotationDataField>@@MODEL.label}"
													visible="{= FieldTemplating.getVisibleExpression(${annotationDataField>@@UI.getDataModelObjectPath})}"
												>
													<f:fields>
														<internalMacro:Field
															idPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FormElement', ${annotationDataField>}]) : '' }"
															vhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, 'FieldValueHelp']) : '' }"
															entitySet="{entitySet>}"
															dataField="{annotationDataField>}"
															onChange="{this>onChange}"
														>
															<macro:formatOptions
																textLinesEdit="{dataField>formatOptions/textLinesEdit}"
																textMaxLines="{dataField>formatOptions/textMaxLines}"
																textMaxCharactersDisplay="{dataField>formatOptions/textMaxCharactersDisplay}"
																textExpandBehaviorDisplay="{dataField>formatOptions/textExpandBehaviorDisplay}"
																textAlignMode="Form"
																showEmptyIndicator="true"
															/>
														</internalMacro:Field>
													</f:fields>
												</f:FormElement>
											</template:else>
										</template:if>
									</template:with>
								</template:then>
								<template:elseif test="{= ${dataField>type} === 'Default'}">
									<f:FormElement
										id="{= ${this>id} ? ID.generate([${this>id}, ${dataField>id}]) : '' }"
										label="{dataField>label}"
										visible="{dataField>visible}"
									>
										<f:fields>
											<template:with path="dataField>" var="formElement">
											<core:Fragment fragmentName="sap.fe.macros.fpm.CustomFormElement" type="XML" />
											</template:with>
										</f:fields>
									</f:FormElement>
								</template:elseif>
							</template:if>
						</template:repeat>
					</template:else>
				</template:if>
			</template:with>
		</f:formElements>
	</f:FormContainer>
</core:FragmentDefinition>
