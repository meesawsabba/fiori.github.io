<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns="sap.m"
	xmlns:mdc="sap.ui.mdc"
	xmlns:plugins="sap.m.plugins"
	xmlns:mdcTable="sap.ui.mdc.table"
	xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns:macroTable="sap.fe.macros.table"
	xmlns:mdcat="sap.ui.mdc.actiontoolbar"
	xmlns:macro="sap.fe.macros"
	xmlns:core="sap.ui.core"
	xmlns:control="sap.fe.core.controls"
	xmlns:dt="sap.ui.dt"
	xmlns:fl="sap.ui.fl"
	xmlns:variant="sap.ui.fl.variants"
	xmlns:p13n="sap.ui.mdc.p13n"
	template:require="{
		COMMON: 'sap/fe/macros/CommonHelper',
		TABLE: 'sap/fe/macros/table/TableHelper',
		ID: 'sap/fe/core/helpers/StableIdHelper',
		MACRO: 'sap/fe/macros/MacroTemplating'
	}"
>
	<macro:TableAPI
		id="{this>_apiId}"
		tableDefinition="{tableDefinition>path}"
		metaPath="{metaPath>@@MACRO.getPath}"
		contextPath="{contextPath>@@MACRO.getPath}"
	>
		<macro:layoutData>
			<FlexItemData maxWidth="100%" />
		</macro:layoutData>
		<template:with path="collection>" helper="COMMON.getTargetCollection" var="targetCollection">
			<template:with path="metaPath>" helper="COMMON.createPresentationPathContext" var="presentationPath">
				<template:with path="metaPath>" helper="TABLE.getUiLineItem" var="lineItem">
					<!-- macrodata has to be an expression binding if it needs to be set as attribute via change handler during templating -->
					<mdc:Table
						binding="{= '{internal>controls/' + ${this>id} + '}' }"
						unittest:id="TableMacroFragment"
						core:require="{TableRuntime: 'sap/fe/macros/table/TableRuntime', API: 'sap/fe/macros/TableAPI'}"
						fl:flexibility="{this>fl:flexibility}"
						sortConditions="{tableDefinition>annotation/sortConditions}"
						groupConditions="{= COMMON.stringifyObject(${tableDefinition>annotation/groupConditions})}"
						aggregateConditions="{= COMMON.stringifyObject(${tableDefinition>annotation/aggregateConditions})}"
						dt:designtime="{this>dt:designtime}"
						log:kind="{collection>$kind}"
						log:navigationPath="{this>navigationPath}"
						id="{this>id}"
						busy="{this>busy}"
						busyIndicatorDelay="0"
						enableExport="{this>enableExport}"
						delegate="{= ${this>tableDelegate} || TABLE.getDelegate(${tableDefinition>enableAnalytics}, ${this>isAlp}, ${tableDefinition>annotation/entityName}) }"
						rowPress="{this>rowPress}"
						height="100%"
						rowAction="{this>rowAction}"
						autoBindOnInit="{this>autoBindOnInit}"
						selectionMode="{= ${this>selectionMode} || 'None'}"
						selectionChange="{= 'TableRuntime.setContexts(${$source>/}, \'' + ${targetCollection>@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable/$Path} + '\', \'' + ${collection>@com.sap.vocabularies.Common.v1.DraftRoot} + '\', \'' + ${tableDefinition>operationAvailableMap} + '\', \'' + ${lineItem>@@TABLE.getNavigationAvailableMap} + '\', \'' + ${lineItem>@@TABLE.getMultiSelectDisabledActions} + '\', \'' + ${targetCollection>@Org.OData.Capabilities.V1.UpdateRestrictions/Updatable/$Path} + '\')' }"
						showRowCount="{this>showRowCount}"
						header="{this>header}"
						headerVisible="{this>headerBindingExpression}"
						threshold="{tableDefinition>annotation/threshold}"
						noDataText="{this>noDataText}"
						p13nMode="{this>personalization}"
						filter="{this>filterBarId}"
						paste="API.onPaste($event, $controller)"
						beforeExport="API.onBeforeExport($event)"
						class="{= ${tableDefinition>control/useCondensedTableLayout} === true ? 'sapUiSizeCondensed' : undefined }"
						multiSelectMode="{= ${tableDefinition>control/multiSelectMode} }"
						macrodata:rowsBindingInfo="{=
							TABLE.getRowsBindingInfo(
								${this>},
								${collection>},
								${collection>@sapui.name},
								${targetCollection>@},
								${tableDefinition>operationAvailableProperties},
								!${tableDefinition>enableAnalytics} ? ${lineItem>@@TABLE.addNavigationAvailableFieldsToSelectQuery} : '',
								${metaPath>},
								${presentationPath>},
								${targetCollection>./@com.sap.vocabularies.Common.v1.SemanticKey},
								${lineItem>@@TABLE.addFieldsHavingTextArrangementToSelectQuery},
								${tableDefinition>enableAnalytics}
							)
						}"
						macrodata:enableAnalytics="{tableDefinition>enableAnalytics}"
						macrodata:creationMode="{this>creationMode}"
						macrodata:showCreate="{this>showCreate}"
						macrodata:createAtEnd="{this>createAtEnd}"
						macrodata:enableAutoScroll="{this>enableAutoScroll}"
						macrodata:displayModePropertyBinding="{this>readOnly}"
						macrodata:tableType="{this>tableType}"
						macrodata:targetCollectionPath="{collection>@@COMMON.getContextPath}"
						macrodata:entityType="{= ${collection>@@COMMON.getContextPath} + '/' }"
						macrodata:metaPath="{collection>@@COMMON.getMetaPath}"
						macrodata:onChange="{this>onChange}"
						macrodata:hiddenFilters="{=TABLE.formatHiddenFilters(${tableDefinition>control/filters/hiddenFilters})}"
						macrodata:requestGroupId="$auto.Workers"
						macrodata:columns="{= COMMON.stringifyCustomData(${tableDefinition>columns})}"
						macrodata:aggregates="{= COMMON.stringifyCustomData(${tableDefinition>aggregates})}"
						macrodata:segmentedButtonId="{= ID.generate([${this>id}, 'SegmentedButton', 'TemplateContentView']) }"
						macrodata:enablePaste="{this>enablePaste}"
						macrodata:operationAvailableMap="{= COMMON.stringifyCustomData(${tableDefinition>operationAvailableMap})}"
						visible="{this>visible}"
						enableAutoColumnWidth="{this>enableAutoColumnWidth}"
					>

						<mdc:dataStateIndicator>
							<plugins:DataStateIndicator
								filter="API.shouldFilterDataStateMessage"
								enableFiltering="{tableDefinition>enableDataStateFilter}"
								dataStateChange="API.onDataStateChange"
							/>
						</mdc:dataStateIndicator>
						<mdc:type>
							<template:if test="{= ${this>tableType} === 'GridTable' }">
								<template:then>
									<mdcTable:GridTableType rowCountMode="Auto" rowCount="3" selectionLimit="{this>selectionLimit}" />
								</template:then>
								<template:else>
									<mdcTable:ResponsiveTableType
										showDetailsButton="true"
										detailsButtonSetting="{=['Low', 'Medium', 'None']}"
										growingMode="{= ${collection>$kind} === 'EntitySet' ? 'Scroll' : undefined }"
									/>
								</template:else>
							</template:if>
						</mdc:type>
						<mdc:dependents>
							<template:if test="{tableDefinition>columns}">
								<template:repeat list="{tableDefinition>columns}" var="column">
									<template:if test="{= ${column>availability} === 'Default' &amp;&amp; ${column>type} === 'Annotation'}">
										<template:with path="column>annotationPath" var="dataField">
											<core:Fragment fragmentName="sap.fe.macros.table.ValueHelp" type="XML" />
										</template:with>
									</template:if>
								</template:repeat>
							</template:if>
							<template:if test="{= TABLE.createButtonTemplating(${this>}) &amp;&amp; ${this>creationMode} !== 'CreationRow' }">
								<control:CommandExecution
									execute="{= TABLE.pressEventForCreateButton(${this>}, true)}"
									visible="{= ${this>showCreate} || true }"
									enabled="{= TABLE.isCreateButtonEnabled(
								${collection>},
								${collection>@sapui.name},
								${parentEntitySet>@Org.OData.Capabilities.V1.NavigationRestrictions/RestrictedProperties},
								${targetCollection>@Org.OData.Capabilities.V1.InsertRestrictions/Insertable})}"
									command="Create"
								/>
							</template:if>
							<template:if test="{=  TABLE.deleteButtonTemplating(${this>}) }">
								<control:CommandExecution
									execute="{= TABLE.pressEventForDeleteButton(${this>}, ${collection>@sapui.name})}"
									visible="{this>showDelete}"
									enabled="{= TABLE.isDeleteButtonEnabled(${this>})}"
									command="DeleteEntry"
								/>
							</template:if>
							<control:CommandExecution execute="TableRuntime.displayTableSettings" command="TableSettings" />
							<template:if test="{= ${this>variantManagement} === 'None'}">
								<!-- Persistence provider offers persisting personalization changes without variant management -->
								<p13n:PersistenceProvider id="{= ID.generate([${this>id}, 'PersistenceProvider']) }" for="{this>id}" />
							</template:if>
						</mdc:dependents>
						<mdc:actions>
							<!-- TODO: This should be moved out of macros and should be added as a macro aggregation to macro table-->
							<template:if test="{this>onSegmentedButtonPressed}">
								<mdcat:ActionToolbarAction layoutInformation="{
									aggregationName: 'end',
									alignment: 'End'
								}">
									<SegmentedButton
										id="{= ID.generate([${this>id}, 'SegmentedButton', 'TemplateContentView']) }"
										select="{this>onSegmentedButtonPressed}"
										visible="{= ${pageInternal>alpContentView} === 'Table' }"
										selectedKey="{pageInternal>alpContentView}"
									>
										<items>
											<template:if test="{= COMMON.isDesktop() }">
												<SegmentedButtonItem tooltip="{this.i18n>M_COMMON_HYBRID_SEGMENTED_BUTTON_ITEM_TOOLTIP}" key="Hybrid" icon="sap-icon://chart-table-view" />
											</template:if>
											<SegmentedButtonItem tooltip="{this.i18n>M_COMMON_CHART_SEGMENTED_BUTTON_ITEM_TOOLTIP}" key="Chart" icon="sap-icon://bar-chart" />
											<SegmentedButtonItem tooltip="{this.i18n>M_COMMON_TABLE_SEGMENTED_BUTTON_ITEM_TOOLTIP}" key="Table" icon="sap-icon://table-view" />
										</items>
									</SegmentedButton>
								</mdcat:ActionToolbarAction>
							</template:if>
							<core:Fragment fragmentName="sap.fe.macros.table.Actions" type="XML" />
						</mdc:actions>
						<mdc:rowSettings>
							<mdcTable:RowSettings
								navigated="{tableDefinition>annotation/row/rowNavigated}"
								highlight="{tableDefinition>annotation/row/rowHighlighting}"
							/>
						</mdc:rowSettings>

						<mdc:columns>
							<core:Fragment fragmentName="sap.fe.macros.table.Columns" type="XML" />
						</mdc:columns>
						<template:if test="{= ${this>creationMode} === 'CreationRow'}">
							<mdc:creationRow>
								<core:Fragment fragmentName="sap.fe.macros.table.CreationRow" type="XML" />
							</mdc:creationRow>
						</template:if>
						<template:if test="{= ${this>variantManagement} === 'Control'}">
							<mdc:variant>
								<variant:VariantManagement
									id="{= ID.generate([${this>id}, 'VM']) }"
									for="{this>id}"
									showSetAsDefault="true"
									select="{this>variantSelected}"
									save="{this>variantSaved}"
								/>
							</mdc:variant>
						</template:if>
						<template:if test="{tableDefinition>control/filters/quickFilters}">
							<template:with path="tableDefinition>control/filters/quickFilters" var="quickFilters">
								<mdc:quickFilter>
								<macroTable:QuickFilterContainer
										id="{= ID.generate([${this>id}, 'QuickFilterContainer']) }"
										enabled="{= ${quickFilters>enabled} || true }"
										entitySet="{collection>@@COMMON.getMetaPath}"
										parentEntityType="{parentEntitySet>$Type}"
										showCounts="{= ${quickFilters>showCounts} === true}"
										macrodata:filters="{=TABLE.formatHiddenFilters(${tableDefinition>control/filters/quickFilters})}"
										batchGroupId="{this>requestGroupId}"
									/>
								</mdc:quickFilter>
							</template:with>
						</template:if>
					</mdc:Table>
				</template:with>
			</template:with>
		</template:with>
	</macro:TableAPI>
</core:FragmentDefinition>
