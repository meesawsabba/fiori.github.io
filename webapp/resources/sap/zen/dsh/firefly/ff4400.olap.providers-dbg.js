/*!
 * SAPUI5
  (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
/*global sap*/
sap.ui.define(
[
"sap/zen/dsh/firefly/ff4394.olap.serialization"
],
function(oFF)
{
"use strict";

oFF.XCommandUtil = {

	updateExtendedDimensionPackages:function(extendedDimensions, extendedDimensionsInfo)
	{
			if (!oFF.XCollectionUtils.hasElements(extendedDimensions) || !oFF.XCollectionUtils.hasElements(extendedDimensionsInfo))
		{
			return;
		}
		var extDimSize = extendedDimensions.size();
		for (var i = 0; i < extDimSize; i++)
		{
			var extendedDimension = extendedDimensions.get(i);
			var extendedDimensionInfo = oFF.XCommandUtil.getExtDimInfoByName(extendedDimension.getName(), extendedDimensionsInfo);
			if (oFF.notNull(extendedDimensionInfo))
			{
				var newPackageName = extendedDimensionInfo.getStructureByKey("dataSource").getStringByKey("packageName");
				var dataSource = extendedDimensions.get(i).getDataSource();
				dataSource.setPackageName(newPackageName);
			}
		}
	},
	getExtDimInfoByName:function(extDimName, extendedDimensionInfo)
	{
			var size = extendedDimensionInfo.size();
		for (var i = 0; i < size; i++)
		{
			var extendedDimension = extendedDimensionInfo.getStructureAt(i);
			if (oFF.XString.isEqual(extDimName, extendedDimension.getStringByKey("name")))
			{
				return extendedDimension;
			}
		}
		return null;
	},
	handleInactiveCapabilities:function(serviceConfig, experimentalFeatures, capabilitiesToSwitch)
	{
			oFF.XCommandUtil.activateExperimentalFeatures(serviceConfig, experimentalFeatures);
		if (oFF.notNull(capabilitiesToSwitch))
		{
			var iterator = capabilitiesToSwitch.getKeysAsIteratorOfString();
			while (iterator.hasNext())
			{
				var capabilityName = iterator.next();
				var isActive = capabilitiesToSwitch.getByKey(capabilityName).getBoolean();
				var inactiveCapabilities = oFF.FeatureToggleOlap.lookup(capabilityName);
				if (isActive)
				{
					oFF.XCommandUtil.activate(serviceConfig, inactiveCapabilities);
				}
				else
				{
					var experimentalFeatureSet = serviceConfig.getSession().getFeatureToggles();
					if (oFF.notNull(experimentalFeatureSet))
					{
						var experimentalFeatureSet2 = experimentalFeatureSet;
						experimentalFeatureSet2.removeElement(inactiveCapabilities);
					}
				}
			}
		}
	},
	activateExperimentalFeatures:function(serviceConfig, experimentalFeatures)
	{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(experimentalFeatures))
		{
			if (oFF.XString.containsString(experimentalFeatures, ","))
			{
				var listOfExperimentalFeatures = oFF.XStringTokenizer.splitString(experimentalFeatures, ",");
				var size = listOfExperimentalFeatures.size();
				for (var i = 0; i < size; i++)
				{
					oFF.XCommandUtil.activate(serviceConfig, oFF.FeatureToggleOlap.lookup(listOfExperimentalFeatures.get(i)));
				}
			}
			else
			{
				oFF.XCommandUtil.activate(serviceConfig, oFF.FeatureToggleOlap.lookup(experimentalFeatures));
			}
		}
	},
	activate:function(serviceConfig, capability)
	{
			if (oFF.isNull(capability))
		{
			return;
		}
		var maxXVersion = capability.getMaxXVersion();
		if (maxXVersion >= 0 && maxXVersion <= serviceConfig.getApplication().getXVersion())
		{
			return;
		}
		serviceConfig.getSession().activateFeatureToggle(capability);
	}
};

oFF.QCsnConverter = {

	s_lookupValueType:null,
	s_lookupValueTypeCsn:null,
	staticSetup:function()
	{
			oFF.QCsnConverter.setupDimensionType();
	},
	mapConstant:function(mapToEnum, mapToCSN, ffConstant, csnConstant)
	{
			mapToEnum.put(csnConstant, ffConstant);
		mapToCSN.put(ffConstant.getName(), csnConstant);
	},
	setupDimensionType:function()
	{
			oFF.QCsnConverter.s_lookupValueType = oFF.XHashMapByString.create();
		oFF.QCsnConverter.s_lookupValueTypeCsn = oFF.XHashMapOfStringByString.create();
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.LOWER_CASE_STRING, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.UPPER_CASE_STRING, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.STRING, oFF.CsnConstants.TYPE_LARGE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.STRING, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.CHAR, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.INTEGER, oFF.CsnConstants.TYPE_DECIMAL);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.INTEGER, oFF.CsnConstants.TYPE_INTEGER);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.LONG, oFF.CsnConstants.TYPE_INTEGER64);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.BOOLEAN, oFF.CsnConstants.TYPE_BOOLEAN);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DECIMAL_FLOAT, oFF.CsnConstants.TYPE_DECIMAL_FLOAT);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DOUBLE, oFF.CsnConstants.TYPE_DOUBLE);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE, oFF.CsnConstants.TYPE_LOCAL_DATE);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE, oFF.CsnConstants.TYPE_DATE);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIME, oFF.CsnConstants.TYPE_LOCAL_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIME, oFF.CsnConstants.TYPE_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE_TIME, oFF.CsnConstants.TYPE_LOCAL_DATE_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE_TIME, oFF.CsnConstants.TYPE_DATE_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIMESPAN, oFF.CsnConstants.TYPE_UTC_TIMESTAMP);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIMESPAN, oFF.CsnConstants.TYPE_TIMESTAMP);
	},
	lookupValueType:function(csnValueType, defaultValueType)
	{
			var valueType = oFF.QCsnConverter.s_lookupValueType.getByKey(csnValueType);
		return oFF.notNull(valueType) ? valueType : defaultValueType;
	},
	lookupValueTypeCsn:function(ffValueType, defaultValueType)
	{
			var valueType = oFF.QCsnConverter.s_lookupValueTypeCsn.getByKey(ffValueType.getName());
		return oFF.notNull(valueType) ? valueType : defaultValueType;
	},
	lookupAxis:function(axisType)
	{
			var axisTypeUpperCase = oFF.XString.toUpperCase(axisType);
		if (oFF.XString.isEqual(axisTypeUpperCase, oFF.CsnConstants.AXIS_ROWS))
		{
			return oFF.AxisType.ROWS;
		}
		if (oFF.XString.isEqual(axisTypeUpperCase, oFF.CsnConstants.AXIS_COLUMNS))
		{
			return oFF.AxisType.COLUMNS;
		}
		return oFF.AxisType.FREE;
	},
	lookupAxisCsn:function(axisType)
	{
			if (axisType === oFF.AxisType.ROWS)
		{
			return oFF.CsnConstants.AXIS_ROWS;
		}
		if (axisType === oFF.AxisType.COLUMNS)
		{
			return oFF.CsnConstants.AXIS_COLUMNS;
		}
		return oFF.CsnConstants.AXIS_FREE;
	}
};

oFF.QInADataSourceBlending = {

	exportDataSourceBlending:function(format, blendingDefinition, isBlendingDataRequest)
	{
			var inaRequest = oFF.PrFactory.createStructure();
		var inaMetadata = inaRequest.putNewStructure("Metadata");
		var inaDataSource = inaMetadata.putNewStructure("DataSource");
		inaDataSource.putString("Type", oFF.QueryManagerMode.BLENDING.getName());
		var objectName = oFF.XStringBuffer.create();
		for (var idx = 0; idx < blendingDefinition.getSources().size(); idx++)
		{
			objectName.append(blendingDefinition.getSources().get(idx).getQueryAliasName());
		}
		var objectNameStr = objectName.toString();
		if (objectName.length() >= 256)
		{
			objectNameStr = oFF.XSha1.createSHA1(objectNameStr);
		}
		inaDataSource.putString("ObjectName", objectNameStr);
		var inaBlendingSources = oFF.QInADataSourceBlending.exportBlendingSources(format, blendingDefinition, isBlendingDataRequest);
		inaDataSource.put("Sources", inaBlendingSources);
		var inaBlendingMappings = oFF.QInADataSourceBlending.exportBlendingMappings(blendingDefinition.getMappings());
		inaDataSource.put("Mappings", inaBlendingMappings);
		return inaDataSource;
	},
	exportBlendingSources:function(format, blendingDefinition, isBlendingDataRequest)
	{
			var blendingHost = blendingDefinition.getBlendingHost();
		var blendingHostSource = blendingHost.getSource();
		var blendingSourceFormat = format;
		if (format.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			blendingSourceFormat = oFF.QModelFormat.INA_DATA_BLENDING_SOURCE;
		}
		var inaSources = oFF.PrFactory.createList();
		var sourceIterator = blendingDefinition.getSources().getIterator();
		while (sourceIterator.hasNext())
		{
			var source = sourceIterator.next();
			var queryModel = source.getQueryModel();
			if (oFF.isNull(queryModel))
			{
				return null;
			}
			var inaSource = inaSources.addNewStructure();
			inaSource.putString("Type", "Query");
			inaSource.putString("AliasName", source.getQueryAliasName());
			inaSource.putString("ObjectName", source.getQueryAliasName());
			var inaDefiningContext = inaSource.putNewStructure("DefiningContext");
			var inaQuery = queryModel.serializeToElement(blendingSourceFormat).asStructure();
			oFF.QInADataSourceBlending.exportOptimizerHints(inaQuery, queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS));
			var queryManager = queryModel.getQueryManager();
			var persistenceIdentifier = queryManager.getResultSetPersistenceIdentifier();
			if (source !== blendingHostSource && source.isRemoteSource() && !blendingSourceFormat.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
			{
				oFF.QInADataSourceBlending.updateRemoteDataSource(inaQuery, queryManager, isBlendingDataRequest, blendingHost.getSystemDescription());
			}
			else if (!source.isRemoteSource() && oFF.XStringUtils.isNotNullAndNotEmpty(persistenceIdentifier) && isBlendingDataRequest)
			{
				inaQuery.getStructureByKey("DataSource").putString("InstanceId", persistenceIdentifier);
			}
			var inaResultSetFeatures = oFF.QInADataSourceBlending.exportResultSetFeatures(queryModel, true);
			inaQuery.put("ResultSetFeatureRequest", inaResultSetFeatures);
			inaDefiningContext.put("Definition", inaQuery);
		}
		oFF.XObjectExt.release(sourceIterator);
		return inaSources;
	},
	updateRemoteDataSource:function(inaQuery, queryManager, isBlendingDataRequest, localSystemDescription)
	{
			var dataSource = inaQuery.putNewStructure("DataSource");
		dataSource.putString("Type", "SerializedData");
		dataSource.putString("InstanceId", queryManager.getResultSetPersistenceIdentifier());
		var resultSetContainer = queryManager.getActiveResultSetContainer();
		var systemDescription = queryManager.getSystemDescription();
		var hasSerializedData = oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getSerializedView()) && (!isBlendingDataRequest || oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getSerializedCube()));
		if (!hasSerializedData && localSystemDescription.isSystemMappingValid(systemDescription))
		{
			var mappingRemoteHost = systemDescription.getSystemMapping(localSystemDescription.getSystemName());
			dataSource.putString("ObjectName", mappingRemoteHost.getDeserializeTable());
			dataSource.putString("SchemaName", mappingRemoteHost.getDeserializeSchema());
		}
		else
		{
			var serializedData = dataSource.putNewStructure("SerializedData");
			serializedData.putString("View", resultSetContainer.getSerializedView());
			if (isBlendingDataRequest)
			{
				serializedData.putStringNotNullAndNotEmpty("Cube", resultSetContainer.getSerializedCube());
			}
		}
		oFF.QInADataSourceBlending.updateBWRemoteSource(inaQuery, queryManager.getSystemType(), queryManager.getQueryModel());
	},
	exportOptimizerHints:function(inaDefinition, optimizerHints)
	{
			if (oFF.XCollectionUtils.hasElements(optimizerHints))
		{
			var sortedList = optimizerHints.getKeysAsReadOnlyListOfString();
			sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
			var inaOptimizerHints = inaDefinition.putNewStructure("Hints");
			var inaAEngineHints = inaOptimizerHints.putNewList(oFF.ExecutionEngine.MDS.getName());
			var sortedListSize = sortedList.size();
			for (var i = 0; i < sortedListSize; i++)
			{
				var hintName = sortedList.get(i);
				var inaHint = inaAEngineHints.addNewStructure();
				inaHint.putString("Key", hintName);
				inaHint.putString("Value", optimizerHints.getByKey(hintName));
			}
		}
	},
	updateBWRemoteSource:function(inaQuery, systemType, queryModel)
	{
			if (systemType.isTypeOf(oFF.SystemType.BW) || systemType.isTypeOf(oFF.SystemType.VIRTUAL_INA))
		{
			inaQuery.remove("FixedFilter");
			inaQuery.remove("DynamicFilter");
			inaQuery.remove("Filter");
			inaQuery.remove("Conditions");
			inaQuery.remove("Query");
			inaQuery.remove("QueryDataCells");
			inaQuery.remove("Sort");
			inaQuery.remove("ExtendedSortTypes");
			inaQuery.remove("Variables");
			inaQuery.remove("UniversalDisplayHierarchies");
			var extStructureMemberNames = oFF.QInADataSourceBlending.getExtendedStructureMemberNames(queryModel);
			var inaDimensions = inaQuery.getListByKey("Dimensions");
			var dimensionCount = oFF.PrUtils.getListSize(inaDimensions, 0);
			for (var i = 0; i < dimensionCount; i++)
			{
				var inaMembers = inaDimensions.getStructureAt(i).getListByKey("Members");
				var memberCount = oFF.PrUtils.getListSize(inaMembers, 0);
				for (var k = 0; k < memberCount; k++)
				{
					var inaMember = inaMembers.getStructureAt(k);
					if (extStructureMemberNames.contains(inaMember.getStringByKey("Name")))
					{
						inaMember.remove("Selection");
					}
					inaMember.remove("Formula");
				}
			}
		}
	},
	getExtendedStructureMemberNames:function(queryModel)
	{
			var structureMembers = queryModel.getMeasureDimension().getExtendedStructureMembers();
		return oFF.XCollectionUtils.createListOfNames(structureMembers);
	},
	exportResultSetFeatures:function(sourceQueryModel, isSubQuery)
	{
			var options = oFF.PrFactory.createStructure();
		options.putBoolean("UseDefaultAttributeKey", false);
		var queryManager = sourceQueryModel.getQueryManager();
		if (queryManager.getMaxResultRecords() !== -1)
		{
			options.putLong("MaxResultRecords", queryManager.getMaxResultRecords());
		}
		oFF.QInAOptions.exportPaging(options, queryManager);
		oFF.QInAOptions.exportSuppressKeyfigureCalculation(options, queryManager);
		options.putString("ResultFormat", "Version2");
		options.putString("ResultEncoding", "None");
		if (isSubQuery)
		{
			options.putBoolean("IsCubeBlendingSubquery", true);
		}
		if (!queryManager.isResultSetTransportEnabled())
		{
			options.putBoolean("ReturnEmptyJsonResultSet", true);
		}
		return options;
	},
	exportDimensionMapping:function(dimensionMapping)
	{
			var inaMapping = oFF.PrFactory.createStructure();
		inaMapping.putString("DimensionName", dimensionMapping.getMemberName());
		inaMapping.putString("LinkType", dimensionMapping.getLinkType().getName());
		if (dimensionMapping.isPreservingMembers())
		{
			inaMapping.putBoolean("PreserveMembers", true);
		}
		if (!dimensionMapping.isReturningOriginKeys())
		{
			inaMapping.putBoolean("ReturnOriginKeys", false);
		}
		var definitionIterator = dimensionMapping.getMappingDefinitions().getIterator();
		var inaDefinitions = oFF.QInADataSourceBlending.exportMappingDefinitions(definitionIterator);
		oFF.XObjectExt.release(definitionIterator);
		inaMapping.put("Mapping", inaDefinitions);
		if ((dimensionMapping.getLinkType() === oFF.BlendingLinkType.ALL_DATA || dimensionMapping.getLinkType() === oFF.BlendingLinkType.NONE) && dimensionMapping.getConstantMappings().hasElements())
		{
			oFF.QInADataSourceBlending.exportConstantMapping(inaDefinitions, dimensionMapping.getConstantMappings().getIterator());
		}
		var inaAttributeMappings = oFF.PrFactory.createList();
		var attributeMappingIterator = dimensionMapping.getAttributeMappings().getIterator();
		while (attributeMappingIterator.hasNext())
		{
			var attributeMapping = attributeMappingIterator.next();
			var inaAttributeMapping = oFF.QInADataSourceBlending.exportAttributeMapping(attributeMapping);
			inaAttributeMappings.add(inaAttributeMapping);
		}
		oFF.XObjectExt.release(attributeMappingIterator);
		if (!inaAttributeMappings.isEmpty())
		{
			inaMapping.put("AttributeMappings", inaAttributeMappings);
		}
		return inaMapping;
	},
	exportAttributeMapping:function(attributeMapping)
	{
			var inaAttributeMapping = oFF.PrFactory.createStructure();
		inaAttributeMapping.putString("AttributeName", attributeMapping.getAttributeName());
		inaAttributeMapping.putBoolean("IsLinkKey", attributeMapping.isLinkKey());
		var mappingIterator = attributeMapping.getAttributeMappingDefinitions().getIterator();
		var inaMappings = oFF.QInADataSourceBlending.exportMappingDefinitions(mappingIterator);
		oFF.XObjectExt.release(mappingIterator);
		inaAttributeMapping.put("Mapping", inaMappings);
		oFF.QInADataSourceBlending.exportConstantMapping(inaMappings, attributeMapping.getConstantMappings().getIterator());
		return inaAttributeMapping;
	},
	exportConstantMapping:function(inaDefinitions, definitionIterator)
	{
			while (definitionIterator.hasNext())
		{
			var constantMapping = definitionIterator.next();
			var inaConstantMapping = oFF.PrFactory.createStructure();
			inaConstantMapping.putString("AliasName", constantMapping.getQueryAliasName());
			var inaMappingDefinition = inaConstantMapping.putNewStructure("MappingDefinition");
			var inaMember = inaMappingDefinition.putNewStructure("Constant");
			inaMember.putString("Value", constantMapping.getMemberName());
			inaMember.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(constantMapping.getValueType()));
			inaDefinitions.add(inaConstantMapping);
		}
	},
	exportMappingDefinitions:function(definitionIterator)
	{
			var inaDefinitions = oFF.PrFactory.createList();
		while (definitionIterator.hasNext())
		{
			var definition = definitionIterator.next();
			var inaDefinition = inaDefinitions.addNewStructure();
			inaDefinition.putString("AliasName", definition.getQueryAliasName());
			var inaMappingDefinition = inaDefinition.putNewStructure("MappingDefinition");
			var inaMember = inaMappingDefinition.putNewStructure("Member");
			inaMember.putString("Name", definition.getMemberName());
		}
		return inaDefinitions;
	},
	exportBlendingMappings:function(mappings)
	{
			var inaMappings = oFF.PrFactory.createList();
		var mappingIterator = mappings.getIterator();
		while (mappingIterator.hasNext())
		{
			var mapping = mappingIterator.next();
			var inaMapping = oFF.QInADataSourceBlending.exportDimensionMapping(mapping);
			inaMappings.add(inaMapping);
		}
		return inaMappings;
	}
};

oFF.QInADataSourceExtDims = {

	importQd:function(importer, dataSource, inaDataSource)
	{
			if (importer.capabilities.supportsExtendedDimensions())
		{
			var extendedDimensionsBase = dataSource.getExtendedDimensionsBase();
			extendedDimensionsBase.clear();
			var inaExtendedDimensions = inaDataSource.getListByKey("ExtendedDimensions");
			if (oFF.notNull(inaExtendedDimensions))
			{
				var extDimSize = inaExtendedDimensions.size();
				for (var i = 0; i < extDimSize; i++)
				{
					var inaExtendedDimension = inaExtendedDimensions.getStructureAt(i);
					var name = inaExtendedDimension.getStringByKey("Name");
					var joinFieldName = inaExtendedDimension.getStringByKey("JoinFieldName");
					var joinFieldNameInExtendedDim = inaExtendedDimension.getStringByKey("JoinFieldNameInExtendedDimension");
					var extendedDimension = dataSource.addNewExtendedDimension(name, joinFieldName, joinFieldNameInExtendedDim);
					extendedDimension.setText(inaExtendedDimension.getStringByKey("Description"));
					var joinTypeValue = inaExtendedDimension.getStringByKey("JoinType");
					var joinType = oFF.JoinType.lookup(joinTypeValue);
					extendedDimension.setJoinType(joinType);
					oFF.QInADataSourceExtDims.importJoinParameter(inaExtendedDimension, extendedDimension);
					oFF.QInADataSourceExtDims.importExtendedDataSource(inaExtendedDimension, extendedDimension);
					var renamingMode = inaExtendedDimension.getStringByKey("FieldRenamingMode");
					if (oFF.notNull(renamingMode))
					{
						extendedDimension.setRenamingMode(renamingMode);
					}
					var joinCardinalityValue = inaExtendedDimension.getStringByKey("JoinCardinality");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(joinCardinalityValue))
					{
						var joinCardinality = oFF.JoinCardinality.lookup(joinCardinalityValue);
						extendedDimension.setJoinCardinality(joinCardinality);
					}
					var extendedDimensionVisibility = inaExtendedDimension.getStringByKey("Visibility");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(extendedDimensionVisibility))
					{
						var dimensionVisibility = oFF.DimensionVisibility.lookup(extendedDimensionVisibility);
						if (oFF.notNull(dimensionVisibility))
						{
							extendedDimension.setVisibility(dimensionVisibility);
						}
					}
				}
			}
		}
	},
	importExtendedDataSource:function(inaExtendedDimension, extendedDimension)
	{
			var inaExternalDataSource = inaExtendedDimension.getStructureByKey("DataSource");
		if (oFF.notNull(inaExternalDataSource))
		{
			var externalDataSource = oFF.QFactory.createDataSource();
			oFF.QInADataSourceProperties.importQd(externalDataSource, inaExternalDataSource);
			var type;
			var inaType = inaExternalDataSource.getStringByKey("Type");
			if (oFF.isNull(inaType))
			{
				type = oFF.MetaObjectType.DBVIEW;
			}
			else
			{
				type = oFF.MetaObjectType.lookup(oFF.XString.toLowerCase(inaType));
			}
			externalDataSource.setType(type);
			extendedDimension.setDataSource(externalDataSource);
		}
	},
	importJoinParameter:function(inaExtendedDimension, extendedDimension)
	{
			var inaJoinParameters = inaExtendedDimension.getListByKey("JoinParameters");
		if (oFF.notNull(inaJoinParameters))
		{
			var joinParameters = extendedDimension.getJoinParameters();
			joinParameters.clear();
			var joinParamSize = inaJoinParameters.size();
			for (var j = 0; j < joinParamSize; j++)
			{
				joinParameters.add(inaJoinParameters.getStringAt(j));
			}
		}
	},
	checkIsValid:function(exporter, extDimension)
	{
			var joinType = extDimension.getJoinType();
		if (oFF.isNull(joinType))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' is missing a JoinType"));
			return false;
		}
		var dimensionType = extDimension.getDimensionType();
		if (dimensionType.isTypeOf(oFF.DimensionType.GIS_DIMENSION) && joinType.isTypeOf(oFF.JoinType._TIME))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Spatial extended dimensions must not have join type INNER");
			return false;
		}
		else if ((dimensionType.isTypeOf(oFF.DimensionType.TIME) || dimensionType.isTypeOf(oFF.DimensionType.DATE)) && joinType.isTypeOf(oFF.JoinType._SPATIAL))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Time extended dimensions must not have spatial join type");
			return false;
		}
		var externalDataSource = extDimension.getDataSource();
		if (oFF.isNull(externalDataSource))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' is missing its DataSource"));
			return false;
		}
		var joinParameters = extDimension.getJoinParameters();
		if (joinType === oFF.JoinType.WITHIN_DISTANCE && joinParameters.isEmpty())
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' of joinType 'WITHIN_DISTANCE' is expected to have the 2 parameters 'distance' and 'unit of measure' (in that order)"));
			return false;
		}
		return true;
	},
	exportQd:function(exporter, dataSource, inaDataSource)
	{
			var extendedDimensions = dataSource.getExtendedDimensions();
		if (oFF.XCollectionUtils.hasElements(extendedDimensions))
		{
			var inaExtendedDimensions = inaDataSource.putNewList("ExtendedDimensions");
			for (var extDimIdx = 0; extDimIdx < extendedDimensions.size(); extDimIdx++)
			{
				var extDimension = extendedDimensions.get(extDimIdx);
				if (!oFF.QInADataSourceExtDims.checkIsValid(exporter, extDimension))
				{
					return;
				}
				var inaExtendedDimension = inaExtendedDimensions.addNewStructure();
				inaExtendedDimension.putString("Name", extDimension.getName());
				inaExtendedDimension.putString("Description", extDimension.getText());
				inaExtendedDimension.putInteger("DimensionType", oFF.QInAConverter.lookupDimensionTypeInA(extDimension.getDimensionType()));
				inaExtendedDimension.putString("JoinFieldName", extDimension.getJoinField());
				inaExtendedDimension.putString("JoinFieldNameInExtendedDimension", extDimension.getJoinFieldNameExternal());
				inaExtendedDimension.putString("JoinType", extDimension.getJoinType().getName());
				var joinCardinality = extDimension.getJoinCardinality();
				if (oFF.notNull(joinCardinality))
				{
					inaExtendedDimension.putString("JoinCardinality", joinCardinality.getName());
				}
				var queryManager = dataSource.getQueryManager();
				var modelCapabilities = null;
				if (oFF.notNull(queryManager))
				{
					modelCapabilities = queryManager.getModelCapabilities();
				}
				if (oFF.isNull(modelCapabilities))
				{
					modelCapabilities = exporter.capabilities;
				}
				if (modelCapabilities.supportsDimensionVisibility() && modelCapabilities.supportsExtendedDimensionVisibility())
				{
					var dimensionVisibility = extDimension.getVisibility();
					if (oFF.notNull(dimensionVisibility))
					{
						inaExtendedDimension.putString("Visibility", dimensionVisibility.getName());
					}
				}
				var joinParameters = extDimension.getJoinParameters();
				if (joinParameters.hasElements())
				{
					var inaJoinParameters = inaExtendedDimension.putNewList("JoinParameters");
					inaJoinParameters.addAllStrings(joinParameters);
				}
				var externalDataSource = extDimension.getDataSource();
				var inaExternalDataSource = inaExtendedDimension.putNewStructure("DataSource");
				oFF.QInADataSourceProperties.exportQd(exporter, externalDataSource, inaExternalDataSource, false);
				var type = externalDataSource.getType();
				if (oFF.isNull(type))
				{
					inaExternalDataSource.putString("Type", oFF.MetaObjectType.DBVIEW.getCamelCaseName());
				}
				else
				{
					inaExternalDataSource.putString("Type", type.getCamelCaseName());
				}
				if (modelCapabilities.supportsExtendedDimensionsChangeDefaultRenamingAndDescription())
				{
					inaExtendedDimension.putStringNotNull("FieldRenamingMode", extDimension.getRenamingMode());
				}
			}
		}
	}
};

oFF.QInADataSourceProperties = {

	importQd:function(dataSource, structure)
	{
			var name = structure.getStringByKey("ObjectName");
		dataSource.setName(name);
		var environmentName = structure.getStringByKey("Environment");
		dataSource.setEnvironmentName(environmentName);
		var packageName = structure.getStringByKey("PackageName");
		dataSource.setPackageName(packageName);
		var schemaName = structure.getStringByKey("SchemaName");
		dataSource.setSchemaName(schemaName);
		var sourceQuery = structure.getStringByKey("SourceQuery");
		dataSource.setSourceQuery(sourceQuery);
		var aliasName = structure.getStringByKey("AliasName");
		dataSource.setAlias(aliasName);
		var dataArea = structure.getStringByKey("DataArea");
		dataSource.setDataArea(dataArea);
		var runAsUser = structure.getStringByKey("RunAsUser");
		dataSource.setRunAsUser(runAsUser);
		var text = structure.getStringByKey("Description");
		dataSource.setText(text);
		var inaCustomProperties = structure.getStructureByKey("CustomProperties");
		if (oFF.notNull(inaCustomProperties))
		{
			var customPropertyNames = inaCustomProperties.getKeysAsReadOnlyListOfString();
			var size = customPropertyNames.size();
			for (var i = 0; i < size; i++)
			{
				var key = customPropertyNames.get(i);
				dataSource.addCustomProperty(key, inaCustomProperties.getStringByKey(key));
			}
		}
	},
	exportQd:function(exporter, dataSource, inaDataSource, withRunAsUser)
	{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "ObjectName", dataSource.getObjectName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Environment", dataSource.getEnvironmentName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "PackageName", dataSource.getPackageName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "SchemaName", dataSource.getSchemaName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "AliasName", dataSource.getAlias());
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.UNIVERSE_SOURCE_QUERY))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "SourceQuery", dataSource.getSourceQuery());
		}
		else
		{
			var customProperties = dataSource.getCustomProperties();
			var customPropertiesIt = customProperties.getKeysAsIteratorOfString();
			if (customPropertiesIt.hasNext())
			{
				var inaCustomProperties = inaDataSource.putNewStructure("CustomProperties");
				while (customPropertiesIt.hasNext())
				{
					var key = customPropertiesIt.next();
					oFF.QInAExportUtil.setNonEmptyString(inaCustomProperties, key, customProperties.getByKey(key));
				}
			}
		}
		var dataArea = dataSource.getDataArea();
		if (!oFF.XString.isEqual(dataArea, "DEFAULT"))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "DataArea", dataArea);
		}
		if (withRunAsUser)
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "RunAsUser", dataSource.getRunAsUser());
		}
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || exporter.mode.containsMetadata())
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Description", dataSource.getText());
		}
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.mode === oFF.QModelFormat.INA_VALUE_HELP)
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "InstanceId", dataSource.getInstanceId());
			var rriName = dataSource.getRriName();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(rriName))
			{
				oFF.QInAExportUtil.setNonEmptyString(inaDataSource, rriName, dataSource.getRriValue());
			}
		}
	}
};

oFF.QInASpatialClustering = {

	exportSpatialClusteringRequest:function(exporter, clusterSettings)
	{
			var request = oFF.PrFactory.createStructure();
		var inaAnalytics = request.putNewStructure("Analytics");
		var clusterField = clusterSettings.getClusterField();
		var queryModel = clusterField.getQueryModel();
		var inaDataSource = exporter.exportDataSource(queryModel.getDataSource(), false);
		inaAnalytics.put("DataSource", inaDataSource);
		var inaDimension = exporter.exportDimension(clusterField.getDimension(), null);
		inaDimension.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(oFF.AxisType.ROWS));
		var inaCluster = oFF.QInASpatialClustering.exportSpatialClusterSettings(clusterSettings);
		inaDimension.put("ClusterDefinition", inaCluster);
		var inaMeasure = exporter.exportStructureDimension(queryModel.getMeasureDimension());
		inaMeasure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(oFF.AxisType.COLUMNS));
		if (queryModel.getConvenienceCommands().isTypeOfBw())
		{
			var inaMember = oFF.PrFactory.createStructure();
			inaMember.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(oFF.ResultVisibility.VISIBLE));
			var inaMemberOperand = inaMember.putNewStructure("MemberOperand");
			inaMemberOperand.putString("AttributeName", "Measures");
			inaMemberOperand.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
			inaMemberOperand.putString("Value", "1ROWCOUNT");
			var inaMembers = inaMeasure.getListByKey("Members");
			inaMembers.clear();
			inaMembers.add(inaMember);
		}
		var inaDimensionList = oFF.PrFactory.createList();
		inaDimensionList.add(inaDimension);
		inaDimensionList.add(inaMeasure);
		var freeAxis = queryModel.getAxis(oFF.AxisType.FREE);
		var sizeFreeAxis = freeAxis.size();
		for (var idxFree = 0; idxFree < sizeFreeAxis; idxFree++)
		{
			var freeDimension = freeAxis.get(idxFree);
			var freeDimensionType = freeDimension.getDimensionType();
			if (freeDimensionType.isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
			{
				inaDimensionList.add(exporter.exportDimension(freeDimension, null));
			}
		}
		var inaDefinition = inaAnalytics.putNewStructure("Definition");
		inaDefinition.put("Dimensions", inaDimensionList);
		exporter.exportFilter(queryModel.getFilter(), inaDefinition);
		if (queryModel.getModelCapabilities().supportsConditions() && queryModel.getConditionManager().getEffectiveConditions().size() > 0)
		{
			exporter.exportConditionManager(queryModel.getConditionManager(), inaDefinition);
		}
		exporter.exportVariables(queryModel.getVariableContainer(), inaDefinition);
		inaDefinition.put("ResultSetFeatureRequest", oFF.QInASpatialClustering.exportResultSetFeatures(queryModel));
		return request;
	},
	exportSpatialClusterSettings:function(clusterSettings)
	{
			var inaCluster = oFF.PrFactory.createStructure();
		inaCluster.putBoolean("Active", clusterSettings.isActive());
		inaCluster.putString("ClusterAlgorithm", clusterSettings.getClusterAlgorithm().getName());
		inaCluster.putString("GeometryAttribute", clusterSettings.getClusterField().getName());
		var thresholdNumberOfPoints = clusterSettings.getThresholdNumberOfPoints();
		if (thresholdNumberOfPoints !== -1)
		{
			inaCluster.putInteger("ThresholdNumberOfPoints", thresholdNumberOfPoints);
		}
		var inaParameters = inaCluster.putNewStructure("ClusterParameters");
		var parameters = clusterSettings.getParameters();
		var keys = parameters.getKeysAsIteratorOfString();
		while (keys.hasNext())
		{
			var key = keys.next();
			var value = parameters.getByKey(key);
			if (value.getValueType() === oFF.XValueType.INTEGER)
			{
				inaParameters.putInteger(key, value.getInteger());
			}
			else if (value.getValueType() === oFF.XValueType.DOUBLE)
			{
				inaParameters.putDouble(key, value.getDouble());
			}
			else
			{
				inaParameters.putString(key, value.toString());
			}
		}
		return inaCluster;
	},
	exportResultSetFeatures:function(sourceQueryModel)
	{
			var options = oFF.PrFactory.createStructure();
		options.putBoolean("UseDefaultAttributeKey", false);
		var queryManager = sourceQueryModel.getQueryManager();
		if (queryManager.getMaxResultRecords() !== -1)
		{
			options.putLong("MaxResultRecords", queryManager.getMaxResultRecords());
		}
		oFF.QInAOptions.exportPaging(options, queryManager);
		options.putString("ResultFormat", "Version2");
		options.putString("ResultEncoding", "None");
		return options;
	}
};

oFF.QInAValueHelp = {

	exportPlanningVariableHelpRequest:function(exporter, planningOperation, dimension, variable)
	{
			var request = planningOperation.getCommandForExport();
		var inaPlanning = request.getStructureByKey("Planning");
		var inaDataSource = inaPlanning.getStructureByKey("Command").getStructureByKey("DataSource");
		var inaDefinition = inaPlanning.putNewStructure("Definition");
		oFF.QInAValueHelp.exportValueHelpFilters(exporter, inaDefinition, dimension, planningOperation.getSelector());
		var inaDimension = exporter.exportDimension(dimension, null);
		var dimensionList = inaDefinition.putNewList("Dimensions");
		dimensionList.add(inaDimension);
		if (variable.getHierarchyName() !== null)
		{
			oFF.QInAValueHelp.exportVariableHierarchyInformation(inaDimension, inaDefinition, variable);
		}
		var variables = inaDefinition.putNewList("Variables");
		var newVariable = variables.addNewStructure();
		newVariable.putString("Name", variable.getName());
		var type = inaDataSource.getStringByKey("Type");
		if (oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE_VALUEHELP.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_FUNCTION.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_FUNCTION_VALUEHELP.getCamelCaseName()))
		{
			if (oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE.getCamelCaseName()))
			{
				inaDataSource.putString("Type", oFF.MetaObjectType.PLANNING_SEQUENCE_VALUEHELP.getCamelCaseName());
			}
			else if (oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_FUNCTION.getCamelCaseName()))
			{
				inaDataSource.putString("Type", oFF.MetaObjectType.PLANNING_FUNCTION_VALUEHELP.getCamelCaseName());
			}
			var directives = inaPlanning.putNewStructure("ProcessingDirectives");
			directives.putString("ProcessingStep", "VariableDefinition");
			request.putNewList("Options").addString("StatefulServer");
		}
		else
		{
			inaDefinition.putString("ValuehelpForVariable", variable.getName());
			if (dimension.getReadMode(oFF.QContextType.SELECTOR) === oFF.QMemberReadMode.MASTER)
			{
				inaDefinition.putString("ReadMode", "Master");
			}
			if (inaDefinition.containsKey("FixedFilter"))
			{
				inaDefinition.remove("FixedFilter");
			}
		}
		return request;
	},
	exportVariableHelpRequest:function(exporter, queryModel, dimension, variable)
	{
			var request = oFF.QInAValueHelp.exportMemberHelpRequest(exporter, queryModel, dimension);
		var inaAnalytics = request.getStructureByKey("Analytics");
		var inaDataSource = inaAnalytics.getStructureByKey("DataSource");
		var inaDefinition = inaAnalytics.getStructureByKey("Definition");
		var inaDimension = inaDefinition.getListByKey("Dimensions").getStructureAt(0);
		if (variable.getHierarchyName() !== null)
		{
			oFF.QInAValueHelp.exportVariableHierarchyInformation(inaDimension, inaDefinition, variable);
		}
		var variables = inaDefinition.putNewList("Variables");
		var newVariable = variables.addNewStructure();
		newVariable.putString("Name", variable.getName());
		var type = inaDataSource.getStringByKey("Type");
		if (oFF.XString.isEqual(type, oFF.MetaObjectType.QUERY_VALUEHELP.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE_VALUEHELP.getCamelCaseName()))
		{
			var directives = inaAnalytics.putNewStructure("ProcessingDirectives");
			directives.putString("ProcessingStep", "VariableDefinition");
		}
		else
		{
			inaDefinition.putString("ValuehelpForVariable", variable.getName());
			exporter.exportVariables(queryModel.getVariableContainer(), inaDefinition);
			if (dimension.getReadMode(oFF.QContextType.SELECTOR) === oFF.QMemberReadMode.MASTER)
			{
				inaDefinition.putString("ReadMode", "Master");
			}
			if (inaDefinition.containsKey("FixedFilter"))
			{
				inaDefinition.remove("FixedFilter");
			}
		}
		return request;
	},
	throwErrorForDependentVariable:function(variable, dependentVariable)
	{
			var message = oFF.XStringBuffer.create();
		message.append("The dependent variable '");
		message.append(dependentVariable.getName());
		message.append("' of the variable '");
		message.append(variable.getName());
		message.append("' has no value set.");
		throw oFF.XException.createIllegalStateException(message.toString());
	},
	exportVariableHierarchyInformation:function(dimStructure, inaDefinition, variable)
	{
			var inaHierarchy = dimStructure.putNewStructure("Hierarchy");
		if (variable.getVariableType() === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			inaHierarchy.putStringNotNullAndNotEmpty("Name", variable.getHierarchyName());
			inaHierarchy.putStringNotNullAndNotEmpty("DueDate", variable.getHierarchyKeyDate());
			inaHierarchy.putStringNotNullAndNotEmpty("Version", variable.getHierarchyVersion());
			inaHierarchy.putInteger("InitialDrillLevel", variable.getDimension().getSelectorRootLevel());
			if (oFF.XStringUtils.isNotNullAndNotEmpty(variable.getHierarchyName()))
			{
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, oFF.PrUtils.getStructureProperty(inaDefinition.getStructureByKey("Filter"), "Selection"));
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, oFF.PrUtils.getStructureProperty(inaDefinition.getStructureByKey("VisibilityFilter"), "Selection"));
			}
		}
		else
		{
			var dependentVariables = variable.getDependentVariables();
			var iterator = dependentVariables.getIterator();
			while (iterator.hasNext())
			{
				var someVariable = iterator.next();
				if (someVariable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
				{
					var hierarchyNameVariable = someVariable;
					var hierarchyName = hierarchyNameVariable.getValueByString();
					if (oFF.XStringUtils.isNullOrEmpty(hierarchyName))
					{
						oFF.QInAValueHelp.throwErrorForDependentVariable(variable, hierarchyNameVariable);
					}
					inaHierarchy.putString("Name", hierarchyName);
				}
				else if (someVariable.getVariableType() === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
				{
					var dimensionMemberVariable = someVariable;
					var someValue = dimensionMemberVariable.getValueByString();
					if (oFF.XStringUtils.isNullOrEmpty(someValue))
					{
						oFF.QInAValueHelp.throwErrorForDependentVariable(variable, dimensionMemberVariable);
					}
					if (dimensionMemberVariable.getDimension().getDimensionType() === oFF.DimensionType.DATE)
					{
						inaHierarchy.putStringNotNullAndNotEmpty("DateTo", someValue);
					}
					else
					{
						inaHierarchy.putStringNotNullAndNotEmpty("Version", someValue);
					}
				}
			}
			oFF.XObjectExt.release(iterator);
			inaHierarchy.putInteger("InitialDrillLevel", variable.getDimension().getSelectorRootLevel());
		}
	},
	addVariableHierarchyToFilters:function(variable, selection)
	{
			var dimension = variable.getDimension();
		var operator = oFF.PrUtils.getStructureProperty(selection, "Operator");
		var subSelections = oFF.PrUtils.getListProperty(operator, "SubSelections");
		for (var i = 0; i < oFF.PrUtils.getListSize(subSelections, 0); i++)
		{
			var subSelection = subSelections.getStructureAt(i);
			if (subSelection.containsKey("SetOperand"))
			{
				var setOperand = oFF.PrUtils.getStructureProperty(subSelection, "SetOperand");
				var field = dimension.getFieldByName(setOperand.getStringByKey("FieldName"));
				if (oFF.notNull(field) && (field === dimension.getHierarchyKeyField() || field === dimension.getHierarchyDisplayKeyField() || field === dimension.getHierarchyTextField()))
				{
					setOperand.putNewStructure("Hierarchy").putString("Name", variable.getHierarchyName());
				}
			}
			else if (subSelection.containsKey("Operator"))
			{
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, subSelection);
			}
		}
	},
	exportMemberHelpRequest:function(exporter, queryModel, dimension)
	{
			if (oFF.isNull(queryModel) || oFF.isNull(dimension))
		{
			return null;
		}
		var request = oFF.PrFactory.createStructure();
		var session = queryModel.getSession();
		if (session.hasFeature(oFF.FeatureToggleOlap.CLIENT_INFO_METADATA))
		{
			oFF.QInAClientInfo.exportClientInfo(request, queryModel, queryModel.getModelCapabilities().supportsClientInfo());
		}
		var inaAnalytics = request.putNewStructure("Analytics");
		oFF.QInADataSource.exportDataSource(exporter, queryModel.getDataSource(), false, inaAnalytics);
		var inaDimensionList = oFF.PrFactory.createList();
		inaDimensionList.add(exporter.exportDimension(dimension, null));
		var inaDefinition = inaAnalytics.putNewStructure("Definition");
		inaDefinition.put("Dimensions", inaDimensionList);
		exporter.exportVariables(queryModel.getVariableContainer(), inaDefinition);
		var filter = queryModel.getFilter();
		oFF.QInAValueHelp.exportValueHelpFilters(exporter, inaDefinition, dimension, filter);
		return request;
	},
	exportValueHelpFilters:function(exporter, inaDefinition, dimension, filter)
	{
			exporter.exportFixedFilter(filter, inaDefinition);
		var modelCapabilities = filter.getModelCapabilities();
		if (dimension.getSelectorFilterUsage() === oFF.QueryFilterUsage.SELECTOR_FILTER && oFF.notNull(modelCapabilities) && modelCapabilities.supportsVisibilityFilter())
		{
			exporter.exportVisibilityFilter(filter, inaDefinition);
		}
		oFF.QInAValueHelp.setOptionsVh(exporter, inaDefinition, dimension);
		if (exporter.capabilities.supportsExtendedSort())
		{
			oFF.QInAValueHelp.exportExtendedSortVh(inaDefinition, dimension);
		}
		var isQueryFilter = dimension.getSelectorFilterUsage() !== oFF.QueryFilterUsage.SELECTOR_FILTER || !filter.isValueHelpFilterInitialized();
		var selectionContainer = oFF.QInAValueHelpFilter.getValueHelpFilter(dimension, filter);
		var memberValueForFilter = null;
		var hierarchyNodeFilter = null;
		if (dimension.isSelectorHierarchyActive())
		{
			var selectorHierarchyNode = dimension.getSelectorHierarchyNode();
			var selectorHierarchyNodeName = dimension.getSelectorHierarchyNodeName();
			var selectorHierarchyNodeSid = dimension.getSelectorHierarchyNodeSid();
			if (dimension.isSelectorUseQueryDrillOperations())
			{
				exporter.exportDrillManager(dimension.getDrillManager(), inaDefinition);
			}
			else if (oFF.notNull(selectorHierarchyNode))
			{
				var hierarchyNavigationField = dimension.getHierarchyNavigationField();
				var hierarchyNavigation = inaDefinition.putNewList("HierarchyNavigations");
				var iterator = dimension.getNavigationNodes().getIterator();
				while (iterator.hasNext())
				{
					var dimensionMember = iterator.next().getDimensionMember();
					var fieldValue = dimensionMember.getFieldValue(hierarchyNavigationField);
					if (oFF.isNull(fieldValue))
					{
						fieldValue = dimensionMember.getKeyFieldValue();
					}
					oFF.QInAValueHelp._addHierarchyNavigation(hierarchyNavigation, dimension.getName(), fieldValue.getField().getName(), fieldValue.getString());
				}
				oFF.XObjectExt.release(iterator);
				memberValueForFilter = selectorHierarchyNode.getName();
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(selectorHierarchyNodeSid))
			{
				oFF.QInAValueHelp._addHierarchyNavigation(inaDefinition.putNewList("HierarchyNavigations"), dimension.getName(), dimension.getHierarchyNavigationField().getName(), selectorHierarchyNodeSid);
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(selectorHierarchyNodeName))
			{
				oFF.QInAValueHelp._addHierarchyNavigation(inaDefinition.putNewList("HierarchyNavigations"), dimension.getName(), dimension.getSelectorKeyField().getName(), selectorHierarchyNodeName);
				memberValueForFilter = selectorHierarchyNodeName;
			}
			if (isQueryFilter && oFF.notNull(selectionContainer) && oFF.notNull(memberValueForFilter))
			{
				hierarchyNodeFilter = selectionContainer.addSingleMemberFilterByDimension(dimension, memberValueForFilter, oFF.ComparisonOperator.EQUAL);
			}
		}
		if (oFF.notNull(selectionContainer))
		{
			var inaFilter = dimension.getQueryModel() !== null ? exporter.exportValueHelpFilter(dimension, inaDefinition) : exporter.exportFilterExpression(selectionContainer);
			inaDefinition.putIfNotNull("Filter", inaFilter);
			if (isQueryFilter && oFF.notNull(hierarchyNodeFilter))
			{
				var complexRoot = selectionContainer.getComplexRoot();
				if (oFF.notNull(complexRoot))
				{
					complexRoot.removeElement(hierarchyNodeFilter);
				}
				else
				{
					var cartesianProduct = selectionContainer.getCartesianProduct();
					if (oFF.notNull(cartesianProduct))
					{
						cartesianProduct.removeElement(hierarchyNodeFilter);
					}
				}
			}
		}
	},
	_addHierarchyNavigation:function(hierarchyNavigationList, dimensionName, fieldName, memberValue)
	{
			var hierarchyNavigation = hierarchyNavigationList.addNewStructure();
		hierarchyNavigation.putString("DrillState", oFF.QInAConverter.lookupDrillStateInA(oFF.DrillState.EXPANDED));
		var drillMember = hierarchyNavigation.putNewStructure("DrillMember");
		drillMember.putString("DimensionName", dimensionName);
		drillMember.putString("FieldName", fieldName);
		drillMember.putString("Member", memberValue);
	},
	exportExtendedSortVh:function(inaDefinition, dimension)
	{
			var inaSort = inaDefinition.putNewList("Sort");
		var inaDimensionSort = inaSort.addNewStructure();
		inaDimensionSort.putString("Dimension", dimension.getName());
		inaDimensionSort.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(dimension.getSelectorOrder()));
		var selectorSortType = dimension.getSelectorSortType();
		if (oFF.notNull(selectorSortType))
		{
			inaDimensionSort.putString("SortType", oFF.QInAConverter.lookupSortTypeInA(selectorSortType));
		}
		else
		{
			inaDimensionSort.putString("SortType", "MemberKey");
		}
	},
	setOptionsVh:function(exporter, inaDefinition, dimension)
	{
			var resultSetFeatureRequest = inaDefinition.putNewStructure("ResultSetFeatureRequest");
		resultSetFeatureRequest.putBoolean("UseDefaultAttributeKey", false);
		if (dimension.isSelectorGettingInterval() && exporter.capabilities.supportsResultSetInterval())
		{
			resultSetFeatureRequest.putBoolean("Interval", true);
		}
		resultSetFeatureRequest.putString("ResultFormat", "Version2");
		resultSetFeatureRequest.putString("ResultEncoding", "None");
		var queryModel = dimension.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			var queryManager = dimension.getQueryManager();
			var capabilities = queryModel.getModelCapabilities();
			if (capabilities.supportsAutoVariableSubmit())
			{
				resultSetFeatureRequest.putBoolean("IgnoreAutoSubmit", !queryManager.getInitSettings().isExecuteAutoVariableSubmit());
			}
			if (capabilities.supportsCellDocumentId())
			{
				resultSetFeatureRequest.putBoolean("ReturnDocumentIds", queryManager.isRequestCellDocumentID());
			}
			if (capabilities.supportsKeepOriginalTexts())
			{
				resultSetFeatureRequest.putBoolean("ResultKeepOriginalTexts", queryModel.isKeepingOriginalTexts());
			}
			if (queryModel.isValueHelpIgnoreQueryDynamicFilter())
			{
				resultSetFeatureRequest.putBoolean("ValueHelpIgnoreQueryDynFilter", true);
			}
		}
		if (dimension.getSelectorMaxResultRecords() !== -1)
		{
			resultSetFeatureRequest.putLong("MaxResultRecords", dimension.getSelectorMaxResultRecords());
		}
		var subSetDescription = resultSetFeatureRequest.putNewStructure("SubSetDescription");
		subSetDescription.putInteger("RowFrom", dimension.getSelectorPagingStart());
		subSetDescription.putInteger("RowTo", dimension.getSelectorPagingEnd());
	},
	exportResultSetRequest:function(exporter, lovConfig, queryModel, withVariables, withDataSource)
	{
			var inaRequest = exporter.exportQueryModel(queryModel, withVariables, withDataSource);
		var lovDimension = lovConfig.getDimension();
		var includeMeasures = lovConfig.isIncludeMeasures();
		var lovDimensionInQuery = false;
		var inaDimensions = inaRequest.getListByKey("Dimensions");
		for (var i = inaDimensions.size() - 1; i >= 0; i--)
		{
			var inaDimension = inaDimensions.getStructureAt(i);
			var isOnFreeAxis = oFF.XString.isEqual(inaDimension.getStringByKey("Axis"), "Free");
			var dimension = queryModel.getDimensionByName(inaDimension.getStringByKey("Name"));
			if (oFF.notNull(dimension))
			{
				if (dimension === lovDimension)
				{
					lovDimensionInQuery = true;
					if (isOnFreeAxis)
					{
						inaDimension.putString("Axis", "Rows");
					}
				}
				else if (!isOnFreeAxis && (!dimension.isStructure() || !includeMeasures))
				{
					if (oFF.QInAValueHelp.dimensionRequiredOnFreeAxis(dimension))
					{
						inaDimension.putString("Axis", "Free");
					}
					else
					{
						inaDimensions.removeAt(i);
					}
				}
			}
		}
		if (!lovDimensionInQuery)
		{
			var inaLovDimension = exporter.exportDimension(lovDimension, inaDimensions.addNewStructure());
			inaLovDimension.putString("Axis", "Rows");
		}
		return inaRequest;
	},
	dimensionRequiredOnFreeAxis:function(dimension)
	{
			var queryModel = dimension.getQueryModel();
		if (dimension.getSupportedAxesTypes().contains(oFF.AxisType.FREE))
		{
			var dimensionType = dimension.getDimensionType();
			if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE || dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
			{
				return oFF.QInAValueHelp.getDimensionsUsedInFilter(queryModel).contains(dimension.getName()) || oFF.XCollectionUtils.hasElements(queryModel.getExceptionManager());
			}
			else if (dimensionType === oFF.DimensionType.ACCOUNT)
			{
				return oFF.QInAValueHelp.getDimensionsUsedInFilter(queryModel).contains(dimension.getName());
			}
			else
			{
				return dimensionType === oFF.DimensionType.CALCULATED_DIMENSION;
			}
		}
		return false;
	},
	getDimensionsUsedInFilter:function(queryModel)
	{
			var usedDimensions = oFF.XHashSetOfString.create();
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(queryModel.getFilter().getDynamicFilter(), usedDimensions);
		return usedDimensions;
	}
};

oFF.QInAExpand = {

	createExpandSubmit:function(provider, noSubmitMetadata)
	{
			if (noSubmitMetadata)
		{
			return oFF.PrFactory.createString("#");
		}
		var initSettings = provider.getInitSettings();
		if (initSettings.isRequestingDefaultSettings())
		{
			return null;
		}
		var expand = oFF.PrFactory.createList();
		return oFF.QInAExpand._exportExpandSelection(expand, initSettings, provider);
	},
	createExpandMetadata:function(provider)
	{
			var expand = oFF.PrFactory.createList();
		var initSettings = provider.getInitSettings();
		if (!provider.getCapabilitiesBase().supportsDetailedResponseExpansion() || initSettings.isRequestingDefaultSettings())
		{
			expand.addString("Cube");
			return expand;
		}
		return oFF.QInAExpand._exportExpandSelection(expand, initSettings, provider);
	},
	_exportExpandSelection:function(expand, initSettings, provider)
	{
			var queryServiceConfig = provider.getQueryServiceConfig();
		if (queryServiceConfig.getMinimizedMetadata() && !oFF.XCollectionUtils.hasElements(queryServiceConfig.getRequiredDimensions()))
		{
			return oFF.PrFactory.createString("#");
		}
		oFF.QInAExpand._exportExpandDimensionSelection(expand, queryServiceConfig);
		oFF.QInAExpand._exportExpandFlagSelection(expand, initSettings);
		return expand;
	},
	_exportExpandDimensionSelection:function(expand, queryServiceConfig)
	{
			var requiredDimensions = queryServiceConfig.getRequiredDimensions();
		var requiredAxes = queryServiceConfig.getDimensionsOnAxes();
		if (oFF.XCollectionUtils.hasElements(requiredDimensions))
		{
			oFF.QInAExpand._addExpandFromList("Dimensions?Name=", requiredDimensions, expand);
		}
		else if (oFF.XCollectionUtils.hasElements(requiredAxes))
		{
			oFF.QInAExpand._addExpandFromList("Axis?Name=", requiredAxes, expand);
		}
		else
		{
			expand.addString("Dimensions");
		}
	},
	_addExpandFromList:function(prefix, list, expand)
	{
			var sortedList = oFF.XListOfString.createFromReadOnlyList(list);
		sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
		var iterator = sortedList.getIterator();
		while (iterator.hasNext())
		{
			expand.addString(oFF.XStringUtils.concatenate2(prefix, iterator.next()));
		}
	},
	_exportExpandFlagSelection:function(expand, initSettings)
	{
			if (initSettings.isRequestingVariables())
		{
			expand.addString("Variables");
		}
		if (initSettings.isRequestingSorting())
		{
			expand.addString("Sort");
		}
		if (initSettings.isRequestingDynamicFilter())
		{
			expand.addString("DynamicFilter");
		}
		if (initSettings.isRequestingDataCells())
		{
			expand.addString("QueryDataCells");
		}
		if (initSettings.isRequestingUniversalDisplayHierarchies())
		{
			expand.addString("UniversalDisplayHierarchies");
		}
		if (initSettings.isRequestingConditions())
		{
			expand.addString("Conditions");
		}
		if (initSettings.isRequestingExceptions())
		{
			expand.addString("Exceptions");
		}
	}
};

oFF.QInANewLines = {

	exportNewLines:function(inaDefinition, provider)
	{
			var resultSetContainer = provider.getActiveResultSetContainer();
		if (oFF.isNull(resultSetContainer))
		{
			return;
		}
		if (!resultSetContainer.hasNewLineCollection())
		{
			return;
		}
		var newLineCollection = resultSetContainer.getNewLineCollection();
		var validNewLines = newLineCollection.getValidNewLines();
		if (oFF.isNull(validNewLines))
		{
			return;
		}
		if (provider.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			oFF.QInANewLines.exportNewLinesBw(inaDefinition, validNewLines);
		}
		else
		{
			oFF.QInANewLines.exportNewLinesHana(inaDefinition, validNewLines);
		}
	},
	exportNewLinesBw:function(inaDefinition, validNewLines)
	{
			var newLines = inaDefinition.putNewList("NewLines");
		for (var i = 0; i < validNewLines.size(); i++)
		{
			var newLineObj = newLines.addNewStructure();
			var contextList = newLineObj.putNewList("DimensionContext");
			var newLine = validNewLines.get(i);
			var dimensionMembers = newLine.getDimensionMembers();
			for (var j = 0; j < dimensionMembers.size(); j++)
			{
				var dimensionMember = dimensionMembers.get(j);
				var keyField = dimensionMember.getKeyFieldValue();
				var contextObj = contextList.addNewStructure();
				contextObj.putString("FieldName", keyField.getField().getName());
				contextObj.putString("Value", keyField.getValue().getStringRepresentation());
			}
			var cellList = newLineObj.putNewList("CellValues");
			for (var k = 0; k < newLine.getNewLineEntries().size(); k++)
			{
				var cellObj = cellList.addNewStructure();
				var entry = newLine.getNewLineEntries().get(k);
				cellObj.putString("QueryCellsId", entry.getQueryDataCell().getName());
				var value = entry.getNewXValue();
				if (value.getValueType() === oFF.XValueType.DOUBLE)
				{
					cellObj.putDouble("Value", value.getDouble());
				}
				else if (value.getValueType() === oFF.XValueType.STRING)
				{
					cellObj.putString("Value", value.getString());
				}
			}
		}
	},
	exportNewLinesHana:function(inaDefinition, validNewLines)
	{
			var newLines = inaDefinition.putNewStructure("DataEntries");
		var dimensionContext = newLines.putNewList("DimensionContext");
		var dimensionMembers = validNewLines.get(0).getDimensionMembers();
		var dimensionMembersSize = dimensionMembers.size();
		for (var idxDimMember = 0; idxDimMember < dimensionMembersSize; idxDimMember++)
		{
			var dimensionMember = dimensionMembers.get(idxDimMember);
			dimensionContext.addString(dimensionMember.getDimension().getName());
		}
		var values = newLines.putNewList("Values");
		var validNewLinesSize = validNewLines.size();
		for (var idxNewLines = 0; idxNewLines < validNewLinesSize; idxNewLines++)
		{
			var prNewLine = values.addNewStructure();
			var newLine = validNewLines.get(idxNewLines);
			prNewLine.putString("Action", "NewLine");
			prNewLine.putInteger("LineId", newLine.getLineId());
			var keys = prNewLine.putNewList("Keys");
			oFF.QInANewLines.addDimensionMemberKeys(keys, newLine.getDimensionMembers());
			var cellValues = prNewLine.putNewList("CellValues");
			oFF.QInANewLines.addCellValues(newLine, cellValues);
		}
	},
	addDimensionMemberKeys:function(keys, dimensionMembers)
	{
			var dimensionMembersSize = dimensionMembers.size();
		for (var idxDimMember = 0; idxDimMember < dimensionMembersSize; idxDimMember++)
		{
			var dimensionMember = dimensionMembers.get(idxDimMember);
			keys.addString(dimensionMember.getKeyFieldValue().getString());
		}
	},
	addCellValues:function(newLine, cellValues)
	{
			var newEntries = newLine.getNewLineEntries();
		var newEntriesSize = newEntries.size();
		for (var idxNewEntries = 0; idxNewEntries < newEntriesSize; idxNewEntries++)
		{
			var newEntry = newEntries.get(idxNewEntries);
			if (!newEntry.isValueChanged())
			{
				continue;
			}
			var prNewEntry = oFF.PrFactory.createStructure();
			prNewEntry.putString("QueryDataCell", newEntry.getQueryDataCell().getName());
			var newXValue = newEntry.getNewXValue();
			var newXValueType = newXValue.getValueType();
			if (newXValueType === oFF.XValueType.DOUBLE)
			{
				prNewEntry.putDouble("NewValue", newXValue.getDouble());
			}
			else if (newXValueType === oFF.XValueType.STRING)
			{
				prNewEntry.putString("NewValueExternal", newXValue.getString());
			}
			else
			{
				oFF.noSupport();
			}
			cellValues.add(prNewEntry);
		}
	}
};

oFF.QInANewValues = {

	exportNewValues:function(inaDefinition, planningExtension, provider)
	{
			var resultSetContainer = provider.getActiveResultSetContainer();
		if (oFF.isNull(resultSetContainer))
		{
			return;
		}
		if (!resultSetContainer.hasDataEntryCollection())
		{
			return;
		}
		var newValues = oFF.PrFactory.createList();
		var dataEntryCollection = resultSetContainer.getDataEntryCollection();
		oFF.QInANewValues.exportRsDataEntries(newValues, dataEntryCollection, provider);
		oFF.QInANewValues.exportRsDataEntriesViaMember(newValues, dataEntryCollection, provider);
		if (newValues.isEmpty())
		{
			return;
		}
		inaDefinition.put("NewValues", newValues);
		oFF.QInANewValues.exportPublicVersionEdit(planningExtension, provider);
	},
	exportPublicVersionEdit:function(planningExtension, provider)
	{
			if (provider.getPlanningMode() !== oFF.PlanningMode.FORCE_PLANNING)
		{
			return;
		}
		var planningModel = provider.getPlanningModel();
		if (oFF.isNull(planningModel) || !planningModel.supportsPublicVersionEdit() || !planningModel.isPublicVersionEditInProgress())
		{
			return;
		}
		var versionList = planningExtension.putNewList("RefreshVersionStates");
		var versions = planningModel.getVersions();
		var versionsSize = versions.size();
		for (var j = 0; j < versionsSize; j++)
		{
			var version = versions.get(j);
			var sourceVersionName = version.getSourceVersionName();
			if (version.isShowingAsPublicVersion() && oFF.XStringUtils.isNotNullAndNotEmpty(sourceVersionName))
			{
				versionList.addString(sourceVersionName);
				version.setShowingAsPublicVersion(false);
				version.setSourceVersionName(null);
			}
		}
		planningModel.setPublicVersionEditInProgress(false);
	},
	exportRsDataEntries:function(newValues, dataEntryCollection, provider)
	{
			var changedEntries = dataEntryCollection.getChangedDataEntries();
		if (changedEntries.isEmpty())
		{
			return;
		}
		var newValuesImplicitUnlock = provider.getCapabilitiesBase().supportsNewValuesImplicitUnlock();
		var newValuesExtendedFormat = provider.getCapabilitiesBase().supportsNewValuesExtendedFormat();
		var isBW = provider.getSystemType().isTypeOf(oFF.SystemType.BW);
		var isHana = provider.getSystemType().isTypeOf(oFF.SystemType.HANA);
		var changedEntriesSize = changedEntries.size();
		for (var i = 0; i < changedEntriesSize; i++)
		{
			var dataEntry = changedEntries.get(i);
			if (!dataEntry.isNewValueForced() && !dataEntry.isValueChanged() && !dataEntry.isValueLockChanged())
			{
				if (isHana && dataEntry.getPlanningCommand() === null)
				{
					continue;
				}
				else if (isBW && newValuesExtendedFormat)
				{
					continue;
				}
			}
			if (!newValuesExtendedFormat && newValuesImplicitUnlock && !dataEntry.isNewValueForced() && !dataEntry.isValueChanged() && !dataEntry.isValueLocked())
			{
				continue;
			}
			if (isBW && !newValuesExtendedFormat)
			{
				oFF.QInANewValues.exportValuesAbapNotExtended(dataEntry, newValues);
			}
			else if (isHana || isBW && newValuesExtendedFormat)
			{
				oFF.QInANewValues.exportValues(dataEntry, newValues, provider);
			}
		}
	},
	exportRsDataEntriesViaMember:function(newValues, dataEntryCollection, provider)
	{
			var entries = dataEntryCollection.getDataEntriesViaMember();
		if (entries.isEmpty())
		{
			return;
		}
		for (var i = 0; i < entries.size(); i++)
		{
			var entry = entries.get(i);
			var planningCommands = entry.getPlanningCommands();
			var xValue = entry.getXValue();
			var memberContext = entry.getMemberContext();
			var keys = memberContext.getKeysAsReadOnlyListOfString();
			keys.sortByDirection(oFF.XSortDirection.ASCENDING);
			if (!oFF.XCollectionUtils.hasElements(planningCommands))
			{
				oFF.QInANewValues.exportRsValueInfoViaMember(newValues, xValue, keys, memberContext, entry, null, provider);
			}
			else
			{
				for (var pli = 0; pli < planningCommands.size(); pli++)
				{
					oFF.QInANewValues.exportRsValueInfoViaMember(newValues, xValue, keys, memberContext, entry, planningCommands.get(pli), provider);
				}
			}
		}
	},
	exportRsValueInfoViaMember:function(newValues, xValue, keys, memberContext, entry, command, provider)
	{
			var newValue = oFF.PrFactory.createStructure();
		if (xValue.getValueType() === oFF.XValueType.STRING)
		{
			newValue.putString("NewValue", xValue.getString());
		}
		else if (xValue.getValueType() === oFF.XValueType.DOUBLE)
		{
			newValue.putDouble("NewValue", xValue.getDouble());
		}
		else
		{
			return;
		}
		var memberList = newValue.putNewList("Context");
		for (var j = 0; j < keys.size(); j++)
		{
			var dimensionName = keys.get(j);
			var memberName = memberContext.getByKey(dimensionName);
			var correctedAccountDimensionMemberName = provider.getConvenienceCommands().getRuntimeMemberNameByAlias(provider.getQueryModel(), memberName);
			if (oFF.notNull(correctedAccountDimensionMemberName))
			{
				memberName = correctedAccountDimensionMemberName;
			}
			var member = memberList.addNewStructure();
			member.putString("Dimension", dimensionName);
			member.putString("Member", memberName);
		}
		oFF.QInANewValues.exportValueInfo(newValue, entry, command, provider);
		newValues.add(newValue);
	},
	exportValuesAbapNotExtended:function(dataEntry, newValues)
	{
			var newValueBW = newValues.addNewList();
		newValueBW.addInteger(dataEntry.getRow() + 1);
		newValueBW.addInteger(dataEntry.getColumn() + 1);
		newValueBW.addDouble(dataEntry.getDouble());
		if (dataEntry.isValueLocked())
		{
			newValueBW.addInteger(1);
		}
		else
		{
			newValueBW.addInteger(0);
		}
	},
	exportValues:function(dataEntry, newValues, provider)
	{
			var commands = dataEntry.getPlanningCommands();
		var pat = null;
		if (oFF.XCollectionUtils.hasElements(commands))
		{
			for (var i = 0; i < commands.size(); i++)
			{
				pat = oFF.QInANewValues.exportValuesOfAction(dataEntry, newValues, commands.get(i), provider);
			}
		}
		if (oFF.isNull(pat) || !pat.isTypeOf(oFF.PlanningActionType.DATA_ENTRY) && (dataEntry.isValueChanged() || dataEntry.isNewValueForced()))
		{
			oFF.QInANewValues.exportValuesOfAction(dataEntry, newValues, null, provider);
		}
	},
	exportValuesOfAction:function(dataEntry, newValues, planningCommand, provider)
	{
			var newValue = newValues.addNewStructure();
		var coordinates = newValue.putNewList("Coordinates");
		coordinates.addInteger(dataEntry.getRow());
		coordinates.addInteger(dataEntry.getColumn());
		var isBW = provider.getSystemType().isTypeOf(oFF.SystemType.BW);
		var isHana = provider.getSystemType().isTypeOf(oFF.SystemType.HANA);
		var actionType = oFF.QInANewValues.exportValueInfo(newValue, dataEntry, planningCommand, provider);
		if ((oFF.isNull(actionType) || actionType.isTypeOf(oFF.PlanningActionType.DATA_ENTRY)) && (dataEntry.isValueChanged() || dataEntry.isNewValueForced()))
		{
			var entryValue = dataEntry.getXValue();
			var entryType = entryValue.getValueType();
			if (entryType === oFF.XValueType.DOUBLE)
			{
				newValue.putDouble("NewValue", entryValue.getDouble());
			}
			else if (entryType === oFF.XValueType.STRING)
			{
				if (isHana)
				{
					newValue.putString("NewValueAsString", entryValue.getString());
				}
				else if (isBW)
				{
					newValue.putString("NewValueExternal", entryValue.getString());
				}
			}
			else if (entryType === oFF.XValueType.DATE && isBW)
			{
				newValue.putString("NewValueExternal", entryValue.toSAPFormat());
			}
			else
			{
				oFF.noSupport();
			}
			if (dataEntry.isNewValueForced() && isHana && !provider.getCapabilitiesBase().supportsSortNewValues())
			{
				newValue.putBoolean("KeepValue", true);
			}
			var dataEntryGroup = dataEntry.getDataEntryGroup();
			if (oFF.isNull(actionType) && oFF.XStringUtils.isNotNullAndNotEmpty(dataEntryGroup))
			{
				newValue.putString("Group", dataEntryGroup);
			}
		}
		return actionType;
	},
	exportValueInfo:function(newValue, dataEntry, command, provider)
	{
			if (dataEntry.isValueLockChanged())
		{
			newValue.putBoolean("LockedCell", dataEntry.isValueLocked());
		}
		if (provider.getCapabilitiesBase().supportsSortNewValues())
		{
			newValue.putInteger("Priority", dataEntry.getPriority());
		}
		oFF.QInAExportUtil.setNameIfNotNull(newValue, "ProcessingType", dataEntry.getProcessingType());
		if (oFF.notNull(command) && command.getCommandType() === oFF.PlanningCommandType.PLANNING_ACTION)
		{
			var action = command;
			newValue.putString("ActionId", action.getActionForQueryIdentifier().getActionId());
			var actionGroup = action.getActionGroup();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(actionGroup))
			{
				newValue.putString("Group", actionGroup);
			}
			var params = oFF.PrFactory.createStructureDeepCopy(action.getActionParameters());
			if (oFF.notNull(params))
			{
				newValue.put("ActionParameters", params);
			}
			if (action.hasTargetCell())
			{
				var targetCoordinates = newValue.putNewList("TargetCoordinates");
				targetCoordinates.addInteger(action.getTargetRow());
				targetCoordinates.addInteger(action.getTargetColumn());
			}
			if (action.getActionForQueryIdentifier().getActionType().isTypeOf(oFF.PlanningActionType.QUERY_SINGLE))
			{
				var targetVersionId = action.getTargetVersionId();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(targetVersionId))
				{
					newValue.putString("TargetVersionId", targetVersionId);
				}
			}
			return action.getActionForQueryIdentifier().getActionType();
		}
		return null;
	}
};

oFF.QInAOptions = {

	exportOptions:function(provider)
	{
			var inaOptions = oFF.PrFactory.createStructure();
		inaOptions.putBoolean("UseDefaultAttributeKey", false);
		var resultSetContainer = provider.getActiveResultSetContainer();
		if (resultSetContainer.getMaxResultRecords() !== -1)
		{
			inaOptions.putLong("MaxResultRecords", resultSetContainer.getMaxResultRecords());
		}
		var dataRefreshEnabled = resultSetContainer.getDataRefreshEnabled();
		if (dataRefreshEnabled === oFF.ActionChoice.ON || dataRefreshEnabled === oFF.ActionChoice.ONCE)
		{
			inaOptions.putBoolean("Refresh", true);
		}
		var hasSchemaAndTable = false;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getResultSetPersistenceTable()))
		{
			inaOptions.putString("ResultSetPersistanceTable", resultSetContainer.getResultSetPersistenceTable());
			if (oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getResultSetPersistenceSchema()))
			{
				inaOptions.putString("ResultSetPersistanceSchema", resultSetContainer.getResultSetPersistenceSchema());
				hasSchemaAndTable = true;
			}
		}
		if (!resultSetContainer.isResultSetTransportEnabled())
		{
			inaOptions.putBoolean("ReturnEmptyJsonResultSet", true);
		}
		oFF.QInAOptions.exportPaging(inaOptions, provider);
		oFF.QInAOptions.exportSuppressKeyfigureCalculation(inaOptions, provider);
		if (provider.getExecuteRequestOnOldResultSet())
		{
			inaOptions.putBoolean("ExecuteRequestOnOldResultSet", true);
		}
		if (provider.isIncludePerformanceNotDefault())
		{
			inaOptions.putBoolean("IncludePerformanceData", provider.isRequestingPerformanceData());
		}
		var capabilitiesBase = provider.getCapabilitiesBase();
		if (capabilitiesBase.supportsAutoVariableSubmit())
		{
			inaOptions.putBoolean("IgnoreAutoSubmit", !provider.getInitSettings().isExecuteAutoVariableSubmit());
		}
		if (capabilitiesBase.supportsCellDocumentId())
		{
			inaOptions.putBoolean("ReturnDocumentIds", provider.isRequestCellDocumentID());
		}
		var queryModel = provider.getQueryModel();
		if (capabilitiesBase.supportsPagingTupleCountBeforeSlicing())
		{
			inaOptions.putBoolean("TupleCountTotal", queryModel.isReturnTupleCountTotal());
		}
		if (capabilitiesBase.supportsEncodedResultset())
		{
			inaOptions.putString("ResultFormat", "Version2");
			inaOptions.putString("ResultEncoding", "None");
			if (resultSetContainer.getResultSetPersistenceIdentifier() !== null)
			{
				var isBlendingSubQuery = !resultSetContainer.isRemotePreQuery();
				if (isBlendingSubQuery)
				{
					inaOptions.putBoolean("IsCubeBlendingSubquery", true);
				}
				if (hasSchemaAndTable)
				{
					inaOptions.putString("ResultSetPersistanceIdentifier", resultSetContainer.getResultSetPersistenceIdentifier());
					inaOptions.putString("ResultFormat", "SerializedData");
				}
				else if (oFF.QInAOptions.isCubeCacheQuery(queryModel))
				{
					inaOptions.putString("ResultSetPersistanceIdentifier", resultSetContainer.getResultSetPersistenceIdentifier());
				}
				else
				{
					inaOptions.putString("ResultFormat", "SerializedData");
				}
				if (provider.getSystemType().isTypeOf(oFF.SystemType.BW))
				{
					if (isBlendingSubQuery && provider.getResultSetPersistenceType() === oFF.BlendingPersistenceType.VIEW)
					{
						inaOptions.putString("ResultSetPersistanceType", "View");
					}
					else if (isBlendingSubQuery && provider.getResultSetPersistenceType() === oFF.BlendingPersistenceType.CUBE)
					{
						inaOptions.putString("ResultSetPersistanceType", "Cube");
					}
				}
			}
		}
		if (oFF.notNull(queryModel) && capabilitiesBase.supportsKeepOriginalTexts())
		{
			inaOptions.putBoolean("ResultKeepOriginalTexts", queryModel.isKeepingOriginalTexts());
		}
		if (resultSetContainer.getSuppressCalculatedMembersWithoutBookedData() !== -1)
		{
			inaOptions.putInteger("SuppressCalculatedMembersWithoutBookedData", resultSetContainer.getSuppressCalculatedMembersWithoutBookedData());
		}
		return inaOptions;
	},
	isCubeCacheQuery:function(queryModel)
	{
			var hints = queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS);
		return oFF.notNull(hints) && hints.containsKey(oFF.OptimizerHint.CUBE_CACHE_WITH_ID.getName());
	},
	fillOptions:function(requestStructure, capabilities, session, initSettings)
	{
			var options = oFF.PrFactory.createList();
		if (capabilities.supportsServerState())
		{
			options.addString("StatefulServer");
		}
		var serverCustomizations = initSettings.getServerCustomizations();
		options.addAllStrings(serverCustomizations.getValuesAsReadOnlyListOfString());
		if (session.hasFeature(oFF.FeatureToggleOlap.NO_EMPTY_OPTIONS) === false || options.hasElements())
		{
			requestStructure.put("Options", options);
		}
	},
	setRequestTimeZone:function(requestStructure, provider)
	{
			if (oFF.notNull(requestStructure) && provider.getModelCapabilities().supportsRequestTimezone())
		{
			requestStructure.putStringNotNullAndNotEmpty("Timezone", provider.getQueryServiceConfig().getRequestTimeZone());
		}
	},
	setLanguage:function(requestStructure, provider)
	{
			var language = provider.getConnection().getSystemDescription().getLanguage();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(language))
		{
			requestStructure.putString("Language", language);
		}
	},
	importReturnedDataSelections:function(inaResultStructureFeature, provider)
	{
			if (oFF.notNull(inaResultStructureFeature))
		{
			if (provider.supportsReturnedDataSelection())
			{
				var inaReturnedDataSelection = inaResultStructureFeature.getStructureByKey("ReturnedDataSelection");
				if (oFF.notNull(inaReturnedDataSelection) && inaReturnedDataSelection.hasElements())
				{
					var inaElementNames = inaReturnedDataSelection.getKeysAsReadOnlyListOfString();
					var size = inaElementNames.size();
					provider.clearDataSelections();
					for (var i = 0; i < size; i++)
					{
						var dataSelection = oFF.ReturnedDataSelection.lookup(inaElementNames.get(i));
						if (oFF.notNull(dataSelection))
						{
							if (dataSelection === oFF.ReturnedDataSelection.TUPLE_ELEMENT_IDS)
							{
								provider.enableReturnedDataSelection(dataSelection);
								continue;
							}
							if (inaReturnedDataSelection.getBooleanByKey(dataSelection.getName()))
							{
								provider.enableReturnedDataSelection(dataSelection);
							}
							else
							{
								provider.disableReturnedDataSelection(dataSelection);
							}
						}
					}
				}
			}
		}
	},
	exportReturnedDataSelections:function(inaOptions, provider)
	{
			if (provider.supportsReturnedDataSelection())
		{
			var inaReturnedDataSelection = inaOptions.putNewStructure("ReturnedDataSelection");
			var itActive = provider.getAllEnabledReturnedDataSelections().getIterator();
			while (itActive.hasNext())
			{
				inaReturnedDataSelection.putBoolean(itActive.next(), true);
			}
			oFF.XObjectExt.release(itActive);
			var itInactive = provider.getAllDisabledReturnedDataSelections().getIterator();
			while (itInactive.hasNext())
			{
				inaReturnedDataSelection.putBoolean(itInactive.next(), false);
			}
			oFF.XObjectExt.release(itInactive);
		}
	},
	importOptimizerHints:function(inaDefinition, provider)
	{
			if (provider.getModelCapabilities().supportsCeScenarioParams())
		{
			provider.getQueryModel().clearAllOptimizerHints();
			var inaOptimizerHints = inaDefinition.getStructureByKey("Hints");
			if (oFF.notNull(inaOptimizerHints))
			{
				oFF.QInAOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.CALC_ENGINE, provider);
				oFF.QInAOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.MDS, provider);
				oFF.QInAOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.SQL, provider);
			}
		}
	},
	importOptimizerHintsByEngine:function(inaOptimizerHints, engine, provider)
	{
			var queryModel = provider.getQueryModel();
		var listByEngine = inaOptimizerHints.getListByKey(engine.getName());
		if (oFF.notNull(listByEngine))
		{
			var numberOfHints = listByEngine.size();
			for (var i = 0; i < numberOfHints; i++)
			{
				var hintElement = listByEngine.getStructureAt(i);
				var key = hintElement.getStringByKey("Key");
				var value = hintElement.getStringByKey("Value");
				queryModel.addOptimizerHint(engine, key, value);
			}
		}
	},
	exportOptimizerHints:function(inaDefinition, queryModel)
	{
			if (queryModel.getModelCapabilities().supportsCeScenarioParams())
		{
			var inaOptimizerHints = oFF.PrFactory.createStructure();
			oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.CALC_ENGINE);
			oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.MDS);
			oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.SQL);
			if (inaOptimizerHints.hasElements())
			{
				inaDefinition.put("Hints", inaOptimizerHints);
			}
		}
	},
	exportOptimizerHintsByEngine:function(inaOptimizerHints, queryModel, engine)
	{
			var optimizerHints = queryModel.getOptimizerHintsByExecutionEngine(engine);
		if (oFF.notNull(optimizerHints) && optimizerHints.hasElements())
		{
			var sortedList = optimizerHints.getKeysAsReadOnlyListOfString();
			sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
			var inaAEngineHints = inaOptimizerHints.putNewList(engine.getName());
			var sortedListSize = sortedList.size();
			for (var i = 0; i < sortedListSize; i++)
			{
				var hintName = sortedList.get(i);
				var inaHint = inaAEngineHints.addNewStructure();
				inaHint.putString("Key", hintName);
				inaHint.putString("Value", optimizerHints.getByKey(hintName));
			}
		}
	},
	importSuppressKeyfigureCalculation:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions) && oFF.notNull(provider) && inaOptions.containsKey("SuppressKeyfigureCalculation"))
		{
			oFF.QInAOptions.getPagingSetter(provider).setSuppressKeyfigureCalculation(inaOptions.getBooleanByKeyExt("SuppressKeyfigureCalculation", false));
		}
	},
	exportSuppressKeyfigureCalculation:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions) && oFF.notNull(provider) && provider.isKeyfigureCalculationSuppressed())
		{
			inaOptions.putBoolean("SuppressKeyfigureCalculation", true);
		}
	},
	getPagingSetter:function(provider)
	{
			var pagingSetter = provider;
		if (provider.isShallow())
		{
			pagingSetter = provider.getActiveResultSetContainer();
		}
		return pagingSetter;
	},
	importPaging:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions))
		{
			var inaSubset = inaOptions.getStructureByKey("SubSetDescription");
			if (oFF.isNull(inaSubset) || !provider.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) && !provider.isApplyingRepoState())
			{
				return;
			}
			var offsetRows = inaSubset.getIntegerByKey("RowFrom");
			var pagingSetter = oFF.QInAOptions.getPagingSetter(provider);
			if (offsetRows > -1)
			{
				pagingSetter.setOffsetRows(offsetRows);
				pagingSetter.setMaxRows(inaSubset.getIntegerByKey("RowTo") - offsetRows);
			}
			else
			{
				pagingSetter.setMaxRows(inaSubset.getIntegerByKey("RowTo"));
			}
			var offsetCols = inaSubset.getIntegerByKey("ColumnFrom");
			if (offsetCols > -1)
			{
				pagingSetter.setOffsetColumns(offsetCols);
				pagingSetter.setMaxColumns(inaSubset.getIntegerByKey("ColumnTo") - offsetCols);
			}
			else
			{
				pagingSetter.setMaxColumns(inaSubset.getIntegerByKey("ColumnTo"));
			}
		}
	},
	exportPaging:function(inaOptions, provider)
	{
			var resultSetContainer = provider.getActiveResultSetContainer();
		var subSetDescription = inaOptions.putNewStructure("SubSetDescription");
		var maxRows = resultSetContainer.getMaxRows();
		var offsetRows = resultSetContainer.getOffsetRows();
		subSetDescription.putInteger("RowFrom", offsetRows);
		if (maxRows === -1)
		{
			subSetDescription.putInteger("RowTo", -1);
		}
		else
		{
			subSetDescription.putInteger("RowTo", offsetRows + maxRows);
		}
		var maxColumns = resultSetContainer.getMaxColumns();
		var offsetColumns = resultSetContainer.getOffsetColumns();
		subSetDescription.putInteger("ColumnFrom", offsetColumns);
		if (maxColumns === -1)
		{
			subSetDescription.putInteger("ColumnTo", -1);
		}
		else
		{
			subSetDescription.putInteger("ColumnTo", offsetColumns + maxColumns);
		}
	}
};

oFF.QInAVariableVariants = {

	exportVariableVariant:function(inaDefinition, variant)
	{
			if (oFF.notNull(variant))
		{
			var inaVariableVariant = inaDefinition.putNewStructure("VariableVariant");
			inaVariableVariant.putStringNotNullAndNotEmpty("Name", variant.getName());
			inaVariableVariant.putString("Description", variant.getText());
			inaVariableVariant.putString("Scope", variant.getScope().getName());
		}
	}
};

oFF.QInAVersion = {

	exportPlanningVersions:function(planningExtension, provider)
	{
			oFF.QInAVersion.exportPlanningVersionRestriction(planningExtension, provider);
		oFF.QInAVersion.exportPlanningVersionSettings(planningExtension, provider);
		oFF.QInAVersion.exportPlanningVersionAliases(planningExtension, provider);
	},
	exportPlanningVersionSettings:function(planningExtension, provider)
	{
			var allVersionSettings = oFF.QInAVersion.getAllPlanningActionSequenceSettingsEffective(provider);
		if (oFF.isNull(allVersionSettings))
		{
			return;
		}
		var versionsList = null;
		var versionRestriction = oFF.QInAVersion.getPlanningVersionRestrictionEffective(provider);
		var allVersionSettingsSize = allVersionSettings.size();
		for (var i = 0; i < allVersionSettingsSize; i++)
		{
			var sequenceSettings = allVersionSettings.get(i);
			var hasActionSequence = sequenceSettings.getActionSequenceId() !== null;
			if (!hasActionSequence)
			{
				if (versionRestriction !== oFF.PlanningVersionRestrictionType.ONLY_PRIVATE_VERSIONS)
				{
					continue;
				}
				if (!sequenceSettings.getIsRestrictionEnabled())
				{
					continue;
				}
			}
			if (oFF.isNull(versionsList))
			{
				versionsList = planningExtension.putNewList("Versions");
			}
			var versionStructure = versionsList.addNewStructure();
			versionStructure.putBoolean("UseExternalView", sequenceSettings.getUseExternalView());
			var versionId = sequenceSettings.getVersionId();
			if (versionId === -1)
			{
				versionStructure.putString("Version", sequenceSettings.getVersionUniqueName());
			}
			else
			{
				versionStructure.putInteger("Version", versionId);
			}
			if (hasActionSequence)
			{
				versionStructure.putString("SequenceId", sequenceSettings.getActionSequenceId());
			}
			if (sequenceSettings.isSharedVersion())
			{
				versionStructure.putString("Owner", sequenceSettings.getVersionOwner());
			}
		}
	},
	getPlanningActionSequenceSettingsModeEffective:function(provider)
	{
			if (!provider.isDataEntryEnabled())
		{
			return null;
		}
		var currentSystemtype = provider.getSystemType();
		if (!currentSystemtype.isTypeOf(oFF.SystemType.HANA))
		{
			return null;
		}
		var settingsMode = provider.getPlanningVersionSettingsMode();
		if (settingsMode === oFF.PlanningVersionSettingsMode.SERVER_DEFAULT)
		{
			return null;
		}
		return settingsMode;
	},
	getAllPlanningActionSequenceSettingsEffective:function(provider)
	{
			var settingsMode = oFF.QInAVersion.getPlanningActionSequenceSettingsModeEffective(provider);
		if (oFF.isNull(settingsMode))
		{
			return null;
		}
		var allSettings = null;
		if (settingsMode === oFF.PlanningVersionSettingsMode.PLANNING_SERVICE)
		{
			var planningService = oFF.PlanningModelUtil.getPlanningServiceFromQueryDataSource(provider.getApplication(), provider.getSystemName(), provider.getDataSource());
			if (oFF.notNull(planningService))
			{
				var planningModel = planningService.getPlanningContext();
				var allVersions = planningModel.getAllVersions();
				if (oFF.XCollectionUtils.hasElements(allVersions))
				{
					var versionsSettings = oFF.XList.create();
					var allVersionsSize = allVersions.size();
					for (var i = 0; i < allVersionsSize; i++)
					{
						var version = allVersions.get(i);
						versionsSettings.add(version);
					}
					allSettings = versionsSettings;
				}
			}
		}
		else if (settingsMode === oFF.PlanningVersionSettingsMode.QUERY_SERVICE)
		{
			allSettings = provider.getAllPlanningVersionSettings();
		}
		if (!oFF.XCollectionUtils.hasElements(allSettings))
		{
			return null;
		}
		var settingsMap = oFF.XHashMapByString.create();
		var allSettingsSize = allSettings.size();
		for (var j = 0; j < allSettingsSize; j++)
		{
			var settings = allSettings.get(j);
			settingsMap.put(settings.getVersionUniqueName(), settings.createVersionSettings());
		}
		if (!oFF.XCollectionUtils.hasElements(settingsMap))
		{
			return null;
		}
		var keys = oFF.XListOfString.createFromReadOnlyList(settingsMap.getKeysAsReadOnlyListOfString());
		keys.sortByDirection(oFF.XSortDirection.ASCENDING);
		var result = oFF.XList.create();
		var keysSize = keys.size();
		for (var k = 0; k < keysSize; k++)
		{
			result.add(settingsMap.getByKey(keys.get(k)));
		}
		return result;
	},
	exportPlanningVersionAliases:function(planningExtension, provider)
	{
			var versionAliases = provider.getVersionAliases();
		if (!oFF.XCollectionUtils.hasElements(versionAliases))
		{
			return;
		}
		var aliasMapping = planningExtension.putNewList("AliasMapping");
		var keys = versionAliases.getKeysAsReadOnlyListOfString();
		keys.sortByDirection(oFF.XSortDirection.ASCENDING);
		var len = keys.size();
		for (var i = 0; i < len; i++)
		{
			var aliasName = keys.get(i);
			var versionName = versionAliases.getByKey(aliasName);
			var mapping = oFF.PrFactory.createStructure();
			mapping.putString("Alias", aliasName);
			mapping.putString("Version", versionName);
			aliasMapping.add(mapping);
		}
	},
	exportPlanningVersionRestriction:function(planningExtension, provider)
	{
			var versionRestriction = oFF.QInAVersion.getPlanningVersionRestrictionEffective(provider);
		if (versionRestriction === oFF.PlanningVersionRestrictionType.SERVER_DEFAULT)
		{
			return;
		}
		var isVersionRestricted = versionRestriction === oFF.PlanningVersionRestrictionType.ONLY_PRIVATE_VERSIONS;
		planningExtension.putBoolean("RestrictToPrivateVersions", isVersionRestricted);
	},
	getPlanningVersionRestrictionEffective:function(provider)
	{
			if (!provider.isDataEntryEnabled())
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		var currentSystemtype = provider.getSystemType();
		if (!currentSystemtype.isTypeOf(oFF.SystemType.HANA))
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		var settingsMode = provider.getPlanningVersionSettingsMode();
		if (settingsMode === oFF.PlanningVersionSettingsMode.SERVER_DEFAULT)
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		var planningRestriction = provider.getPlanningRestriction();
		if (oFF.isNull(planningRestriction))
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		return planningRestriction;
	}
};

oFF.PlanningStateHandler = {

	s_planningStateUpdater:null,
	setInstance:function(planningStateUpdater)
	{
			oFF.PlanningStateHandler.s_planningStateUpdater = planningStateUpdater;
	},
	update:function(application, systemName, response, messageCollector)
	{
			oFF.PlanningStateHandler.s_planningStateUpdater.update(application, systemName, response, messageCollector);
	},
	updateFromResponse:function(application, systemName, request, response, messageCollector)
	{
			oFF.PlanningStateHandler.s_planningStateUpdater.updateFromResponse(application, systemName, request, response, messageCollector);
	},
	getDataAreaStateByName:function(application, systemName, dataArea)
	{
			return oFF.PlanningStateHandler.s_planningStateUpdater.getDataAreaStateByName(application, systemName, dataArea);
	}
};

oFF.PlanningStateHandlerDummyImpl = function() {};
oFF.PlanningStateHandlerDummyImpl.prototype = new oFF.XObject();
oFF.PlanningStateHandlerDummyImpl.prototype._ff_c = "PlanningStateHandlerDummyImpl";

oFF.PlanningStateHandlerDummyImpl.prototype.update = function(application, systemName, response, messageCollector)
{
	return;
};
oFF.PlanningStateHandlerDummyImpl.prototype.updateFromResponse = function(application, systemName, request, response, messageCollector)
{
	return;
};
oFF.PlanningStateHandlerDummyImpl.prototype.getDataAreaStateByName = function(application, systemName, dataArea)
{
	return null;
};

oFF.FunctionalValueHelpFactoryImpl = function() {};
oFF.FunctionalValueHelpFactoryImpl.prototype = new oFF.XObject();
oFF.FunctionalValueHelpFactoryImpl.prototype._ff_c = "FunctionalValueHelpFactoryImpl";

oFF.FunctionalValueHelpFactoryImpl.createFactory = function()
{
	return new oFF.FunctionalValueHelpFactoryImpl();
};
oFF.FunctionalValueHelpFactoryImpl.prototype.createForSelectFunctions = function(dimension)
{
	return oFF.FunctionalValueHelpSelectFunctions.create(dimension);
};
oFF.FunctionalValueHelpFactoryImpl.prototype.createForFunctionParameters = function(selectFunction)
{
	return oFF.FunctionalValueHelpParameters.create(selectFunction);
};
oFF.FunctionalValueHelpFactoryImpl.prototype.createForParameterValues = function(parameter)
{
	return oFF.FunctionalValueHelpParameterValues.create(parameter);
};
oFF.FunctionalValueHelpFactoryImpl.prototype.createForResolveValues = function(selectFunction, parameterValues)
{
	return oFF.FunctionalValueHelpResolveValues.create(selectFunction, parameterValues);
};

oFF.InADimensionLazyLoader = function() {};
oFF.InADimensionLazyLoader.prototype = new oFF.XObject();
oFF.InADimensionLazyLoader.prototype._ff_c = "InADimensionLazyLoader";

oFF.InADimensionLazyLoader.createLazyLoader = function(queryModel, useDesignTimeMetadata)
{
	var obj = new oFF.InADimensionLazyLoader();
	obj.setupExt(queryModel, useDesignTimeMetadata);
	return obj;
};
oFF.InADimensionLazyLoader.prototype.m_importer = null;
oFF.InADimensionLazyLoader.prototype.m_queryModel = null;
oFF.InADimensionLazyLoader.prototype.m_useDesignTimeMetadata = false;
oFF.InADimensionLazyLoader.prototype.setupExt = function(queryModel, useDesignTimeMetadata)
{
	this.m_queryModel = queryModel;
	this.m_useDesignTimeMetadata = useDesignTimeMetadata;
	this.m_importer = oFF.QInAImportFactory.createWithQueryManagerCapabilities(queryModel.getApplication(), oFF.QModelFormat.INA_METADATA, queryModel.getQueryManager());
};
oFF.InADimensionLazyLoader.prototype.releaseObject = function()
{
	this.m_queryModel = null;
	this.m_importer = oFF.XObjectExt.release(this.m_importer);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.InADimensionLazyLoader.prototype.lazyLoadDimension = function(dimensionName)
{
	var dim = null;
	var inaDim = this.getInaDimension(dimensionName);
	if (oFF.notNull(inaDim))
	{
		dim = this.m_importer.importDimension(inaDim, this.m_queryModel);
	}
	return dim;
};
oFF.InADimensionLazyLoader.prototype.getInaDimension = function(dimensionName)
{
	var result = null;
	var queryMetadata;
	if (this.m_useDesignTimeMetadata)
	{
		queryMetadata = this.m_queryModel.getServerBaseSerializationForBaseState();
	}
	else
	{
		queryMetadata = this.m_queryModel.getServerBaseSerialization();
	}
	if (oFF.notNull(queryMetadata))
	{
		var inaDims = queryMetadata.getListByKey("Dimensions");
		var len = inaDims.size();
		for (var i = 0; i < len; i++)
		{
			var inaDim = inaDims.getStructureAt(i);
			var name = inaDim.getStringByKey("Name");
			if (oFF.XString.isEqual(name, dimensionName))
			{
				result = inaDim;
				break;
			}
		}
	}
	return result;
};
oFF.InADimensionLazyLoader.prototype.hasFieldWithName = function(dimensionName, fieldName)
{
	var inaDim = this.getInaDimension(dimensionName);
	return oFF.notNull(inaDim) && this.hasFieldWithProperty(inaDim, "Name", fieldName);
};
oFF.InADimensionLazyLoader.prototype.hasFieldWithNameOrAlias = function(dimensionName, fieldNameOrAlias)
{
	var hasFieldWithNameOrAlias = false;
	var inaDim = this.getInaDimension(dimensionName);
	if (oFF.notNull(inaDim))
	{
		if (this.hasFieldWithProperty(inaDim, "Name", fieldNameOrAlias))
		{
			hasFieldWithNameOrAlias = true;
		}
		else
		{
			hasFieldWithNameOrAlias = this.hasFieldWithProperty(inaDim, "AliasName", fieldNameOrAlias);
		}
	}
	return hasFieldWithNameOrAlias;
};
oFF.InADimensionLazyLoader.prototype.hasFieldWithProperty = function(inaDim, propertyName, propertyValue)
{
	var inaAttributes = inaDim.getListByKey("Attributes");
	if (oFF.isNull(inaAttributes))
	{
		inaAttributes = inaDim.getListByKey("AttributesMd");
	}
	return oFF.PrUtils.getStructureWithKeyValuePair(inaAttributes, propertyName, propertyValue) !== null;
};
oFF.InADimensionLazyLoader.prototype.copyDimensionLazyLoader = function(queryModel)
{
	return oFF.InADimensionLazyLoader.createLazyLoader(queryModel, this.m_useDesignTimeMetadata);
};
oFF.InADimensionLazyLoader.prototype.isUseDesignTimeMetadata = function()
{
	return this.m_useDesignTimeMetadata;
};
oFF.InADimensionLazyLoader.prototype.setUseDesignTimeMetadata = function(useDesignTimeMetadata)
{
	this.m_useDesignTimeMetadata = useDesignTimeMetadata;
};

oFF.InAQMgrMergeSettings = function() {};
oFF.InAQMgrMergeSettings.prototype = new oFF.XObject();
oFF.InAQMgrMergeSettings.prototype._ff_c = "InAQMgrMergeSettings";

oFF.InAQMgrMergeSettings.create = function(isInitialBWMerge)
{
	var newObj = new oFF.InAQMgrMergeSettings();
	newObj.m_isInitialBWMerge = isInitialBWMerge;
	return newObj;
};
oFF.InAQMgrMergeSettings.prototype.m_isInitialBWMerge = false;
oFF.InAQMgrMergeSettings.prototype.isInitialBWMerge = function()
{
	return this.m_isInitialBWMerge;
};

oFF.InARsEncodedValues = function() {};
oFF.InARsEncodedValues.prototype = new oFF.XObject();
oFF.InARsEncodedValues.prototype._ff_c = "InARsEncodedValues";

oFF.InARsEncodedValues.createByStructure = function(inaValueElement)
{
	var inaEncoding = inaValueElement.getStringByKey("Encoding");
	var encoding = oFF.QInAConverter.lookupEncoding(inaEncoding);
	var inaValues = inaValueElement.getListByKey("Values");
	return oFF.InARsEncodedValues.create(encoding, inaValues);
};
oFF.InARsEncodedValues.create = function(encoding, values)
{
	var object = new oFF.InARsEncodedValues();
	object.setupExt(encoding, values);
	return object;
};
oFF.InARsEncodedValues.prototype.m_values = null;
oFF.InARsEncodedValues.prototype.m_index = 0;
oFF.InARsEncodedValues.prototype.m_size = 0;
oFF.InARsEncodedValues.prototype.cloneExt = function(flags)
{
	return oFF.InARsEncodedValues.create(oFF.ResultSetEncoding.NONE, this.m_values.getPermaCopy());
};
oFF.InARsEncodedValues.prototype.setupExt = function(encoding, values)
{
	this.m_values = values;
	this.m_index = -1;
	if (encoding !== oFF.ResultSetEncoding.NONE)
	{
		throw oFF.XException.createIllegalStateException("Wrong or no encoding given");
	}
	this.m_size = values.size();
};
oFF.InARsEncodedValues.prototype.releaseObject = function()
{
	this.m_values = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.InARsEncodedValues.prototype.getIndexForIntegerValue = function(value)
{
	if (value > -1)
	{
		var size = this.m_values.size();
		for (var i = 0; i < size; i++)
		{
			if (this.m_values.getIntegerAt(i) === value)
			{
				return i;
			}
		}
		oFF.XLogger.println(oFF.XStringUtils.concatenate3("WARNING: Invalid hierarchy: parent index ", oFF.XInteger.convertToString(value), " refers to non-existing value."));
	}
	return value;
};
oFF.InARsEncodedValues.prototype.getNextIntegerValue = function()
{
	this.m_index++;
	return this.m_values.getIntegerAt(this.m_index);
};
oFF.InARsEncodedValues.prototype.getNextStringValue = function()
{
	this.m_index++;
	return this.m_values.getStringAt(this.m_index);
};
oFF.InARsEncodedValues.prototype.getNextDoubleValue = function()
{
	this.m_index++;
	return this.m_values.getDoubleAt(this.m_index);
};
oFF.InARsEncodedValues.prototype.hasNextValue = function()
{
	return this.m_index + 1 < this.m_size;
};
oFF.InARsEncodedValues.prototype.resetCursor = function()
{
	this.m_index = -1;
};
oFF.InARsEncodedValues.prototype.skip = function()
{
	this.m_index++;
};
oFF.InARsEncodedValues.prototype.size = function()
{
	return this.m_size;
};

oFF.MeasureValueHelpRsDataCellProvider = function() {};
oFF.MeasureValueHelpRsDataCellProvider.prototype = new oFF.XObject();
oFF.MeasureValueHelpRsDataCellProvider.prototype._ff_c = "MeasureValueHelpRsDataCellProvider";

oFF.MeasureValueHelpRsDataCellProvider.create = function()
{
	return new oFF.MeasureValueHelpRsDataCellProvider();
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.notifyCursorChange = function(cell, x, y) {};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAvailableDataCellCount = function()
{
	return 0;
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAvailableDataCellColumns = function()
{
	return 0;
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAvailableDataCellRows = function()
{
	return 0;
};

oFF.RuntimeRemoteBlendingQueryUpdateResult = function() {};
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype = new oFF.XObject();
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype._ff_c = "RuntimeRemoteBlendingQueryUpdateResult";

oFF.RuntimeRemoteBlendingQueryUpdateResult.create = function(isSuccess)
{
	var result = new oFF.RuntimeRemoteBlendingQueryUpdateResult();
	result.m_success = isSuccess;
	return result;
};
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype.m_success = false;
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype.isSuccess = function()
{
	return this.m_success;
};

oFF.QInADataSource = function() {};
oFF.QInADataSource.prototype = new oFF.QInAComponent();
oFF.QInADataSource.prototype._ff_c = "QInADataSource";

oFF.QInADataSource.importQd = function(importer, inaParent, name, context)
{
	var inaStructure = inaParent;
	if (oFF.notNull(name))
	{
		if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
		{
			inaStructure = inaStructure.getStructureByKey("Analytics");
			if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
			{
				inaStructure = inaStructure.getStructureByKey("Definition");
			}
		}
		if (oFF.notNull(inaStructure) && inaStructure.containsKey(name))
		{
			var type = inaStructure.getElementTypeByKey(name);
			if (type === oFF.PrElementType.STRING)
			{
				return oFF.QFactory.createDataSourceWithType(oFF.MetaObjectType.INFOPROVIDER, inaStructure.getStringByKey(name));
			}
			else if (type === oFF.PrElementType.STRUCTURE)
			{
				inaStructure = inaStructure.getStructureByKey(name);
			}
		}
		else if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
		{
			inaStructure = null;
		}
	}
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	var dataSource = oFF.QFactory.createDataSource();
	var systemName = inaStructure.getStringByKey("System");
	if (oFF.notNull(systemName))
	{
		dataSource.setSystemName(systemName);
	}
	var typeValue = inaStructure.getStringByKey("Type");
	var metaObjectType = null;
	if (oFF.notNull(typeValue))
	{
		typeValue = oFF.XString.toLowerCase(typeValue);
		metaObjectType = oFF.MetaObjectType.lookup(typeValue);
	}
	if (oFF.isNull(metaObjectType))
	{
		metaObjectType = oFF.MetaObjectType.DBVIEW;
	}
	dataSource.setType(metaObjectType);
	oFF.QInADataSourceProperties.importQd(dataSource, inaStructure);
	if (metaObjectType === oFF.MetaObjectType.MULTI_SOURCE || metaObjectType === oFF.MetaObjectType.BLENDING)
	{
		var sources = oFF.PrUtils.getListProperty(inaStructure, "Sources");
		if (oFF.notNull(sources))
		{
			var multiSources = dataSource.getMultiSourcesBase();
			var sourceSize = sources.size();
			for (var i = 0; i < sourceSize; i++)
			{
				var sourceStructure = oFF.PrUtils.getStructureElement(sources, i);
				var multiSource = oFF.QInADataSource.importQd(importer, sourceStructure, null, context);
				multiSources.add(multiSource);
			}
		}
		var mappings = oFF.PrUtils.getListProperty(inaStructure, "Mappings");
		dataSource.setMappings(mappings);
	}
	oFF.QInADataSourceExtDims.importQd(importer, dataSource, inaStructure);
	var validationHash = inaParent.getStringByKey("ValidationHash");
	if (oFF.isNull(validationHash))
	{
		validationHash = inaStructure.getStringByKey("ValidationHash");
	}
	dataSource.setValidationHash(validationHash);
	var genericServiceDescription = inaParent.getStructureByKey("GenericServiceDescription");
	if (oFF.notNull(genericServiceDescription))
	{
		dataSource.setGenericServiceDescription(genericServiceDescription);
	}
	return dataSource;
};
oFF.QInADataSource.exportDataSource = function(exporter, dataSource, withRunAsUser, inaQueryModel)
{
	var inaDataSource = oFF.PrFactory.createStructure();
	var type = dataSource.getType();
	if (oFF.notNull(type))
	{
		if (exporter.mode === oFF.QModelFormat.INA_VALUE_HELP && type === oFF.MetaObjectType.QUERY)
		{
			inaDataSource.putString("Type", oFF.MetaObjectType.QUERY_VALUEHELP.getCamelCaseName());
		}
		else if (exporter.mode === oFF.QModelFormat.INA_VALUE_HELP && type === oFF.MetaObjectType.MODEL)
		{
			inaDataSource.putString("Type", oFF.MetaObjectType.MODEL_VALUEHELP.getCamelCaseName());
		}
		else
		{
			inaDataSource.putString("Type", type.getCamelCaseName());
		}
		var systemName = dataSource.getSystemName();
		if (oFF.notNull(systemName) && exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			inaDataSource.putString("System", systemName);
		}
		var sources;
		if (type === oFF.MetaObjectType.MULTI_SOURCE)
		{
			sources = inaDataSource.putNewList("Sources");
			var multiSources = dataSource.getMultiSources();
			var multiSourcesSize = multiSources.size();
			for (var i = 0; i < multiSourcesSize; i++)
			{
				var multiSource = multiSources.get(i);
				var source = oFF.QInADataSource.exportDataSource(exporter, multiSource, withRunAsUser, null);
				sources.add(source);
			}
			inaDataSource.put("Mappings", dataSource.getMappings());
		}
		else if (type === oFF.MetaObjectType.BLENDING)
		{
			var blendingDefinition = dataSource.getBlendingDefinition();
			if (oFF.notNull(blendingDefinition))
			{
				sources = oFF.QInADataSourceBlending.exportBlendingSources(exporter.getMode(), blendingDefinition, true);
				inaDataSource.put("Sources", sources);
				var exportBlendingMappings = oFF.QInADataSourceBlending.exportBlendingMappings(blendingDefinition.getMappings());
				inaDataSource.put("Mappings", exportBlendingMappings);
			}
		}
	}
	oFF.QInADataSourceProperties.exportQd(exporter, dataSource, inaDataSource, withRunAsUser);
	oFF.QInADataSourceExtDims.exportQd(exporter, dataSource, inaDataSource);
	var genericServiceDescription = dataSource.getGenericServiceDescription();
	if (oFF.notNull(genericServiceDescription))
	{
		inaDataSource.put("GenericServiceDescription", genericServiceDescription);
	}
	if (oFF.notNull(inaQueryModel))
	{
		inaQueryModel.put("DataSource", inaDataSource);
	}
	return inaDataSource;
};
oFF.QInADataSource.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_SOURCE;
};
oFF.QInADataSource.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	return oFF.QInADataSource.importQd(importer, inaElement, "DataSource", context);
};
oFF.QInADataSource.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	var withRunAsUser = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.RUN_AS_USER) > 0;
	return oFF.QInADataSource.exportDataSource(exporter, modelComponent, withRunAsUser, null);
};

oFF.QInAExportFactoryImpl = function() {};
oFF.QInAExportFactoryImpl.prototype = new oFF.QInAExportFactory();
oFF.QInAExportFactoryImpl.prototype._ff_c = "QInAExportFactoryImpl";

oFF.QInAExportFactoryImpl.staticSetupImpl = function()
{
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_CLONE, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_CLONE_RENDERING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_NO_VARS, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DELTA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA_CORE, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA_BLENDING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA_RENDERING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_DATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_VALUE_HELP, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.LAYER, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.CSN_METADATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.RENDER_INFO, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.SFX, new oFF.QInAExportFactoryImpl());
};
oFF.QInAExportFactoryImpl.prototype.createExporter = function(application, modelFormat, capabilities, memberReadModeContext)
{
	if (modelFormat === oFF.QModelFormat.RENDER_INFO)
	{
		var infoExporter = new oFF.QRsInfoExport();
		infoExporter.setupImportExport(application, modelFormat, capabilities, memberReadModeContext);
		return infoExporter;
	}
	var object = new oFF.QInAExportImpl();
	object.setupImportExport(application, modelFormat, capabilities, memberReadModeContext);
	return object;
};

oFF.QInAImportFactoryImpl = function() {};
oFF.QInAImportFactoryImpl.prototype = new oFF.QInAImportFactory();
oFF.QInAImportFactoryImpl.prototype._ff_c = "QInAImportFactoryImpl";

oFF.QInAImportFactoryImpl.staticSetupImpl = function()
{
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_CLONE, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_CLONE_RENDERING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_NO_VARS, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DELTA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA_CORE, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA_BLENDING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA_RENDERING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_DATA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_DATA_REINIT, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.LAYER, new oFF.QInAImportFactoryImpl());
};
oFF.QInAImportFactoryImpl.prototype.createImporter = function(application, modelFormat, capabilities)
{
	var object = new oFF.QInAImportImpl();
	object.setupImportExport(application, modelFormat, capabilities, null);
	return object;
};
oFF.QInAImportFactoryImpl.prototype.createImporterWithQueryManagerCapabilities = function(application, modelFormat, queryManager)
{
	return this.createImporter(application, modelFormat, queryManager.getModelCapabilities());
};

oFF.QInAFilterCartesianList = function() {};
oFF.QInAFilterCartesianList.prototype = new oFF.QInAComponent();
oFF.QInAFilterCartesianList.prototype._ff_c = "QInAFilterCartesianList";

oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull = function(filterBag, exporter, inaSetOperand, name)
{
	if (oFF.notNull(filterBag) && filterBag.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, name, inaSetOperand, filterBag, oFF.XValueType.STRING);
	}
};
oFF.QInAFilterCartesianList.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_LIST;
};
oFF.QInAFilterCartesianList.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	var inaCartesianList = inaElement;
	var cartesianListExt = modelComponent;
	var filterExpression = parentComponent;
	var fieldAccessor = context.getFieldAccessorSingle();
	var fieldName = inaCartesianList.getStringByKey("FieldName");
	var cartesianList = cartesianListExt;
	if (oFF.notNull(fieldName))
	{
		var field = fieldAccessor.getFieldByName(fieldName);
		if (oFF.isNull(field))
		{
			var queryModel = filterExpression.getQueryModel();
			if (oFF.notNull(queryModel))
			{
				var dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
				if (oFF.notNull(dimensionByName))
				{
					var inaHierarchy2 = inaCartesianList.getStructureByKey("Hierarchy");
					if (oFF.isNull(inaHierarchy2))
					{
						field = dimensionByName.getFlatKeyField();
					}
					else
					{
						field = dimensionByName.getHierarchyKeyField();
					}
				}
			}
		}
		if (oFF.notNull(field))
		{
			var inaHierarchy = inaCartesianList.getStructureByKey("Hierarchy");
			var inaHierarchyName = null;
			var inaHierarchyDueDate = null;
			var inaHierarchyVersion = null;
			if (oFF.notNull(inaHierarchy))
			{
				inaHierarchyName = inaHierarchy.getStringByKey("Name");
				if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && importer.isAbap(field))
				{
					var hierarchyDueDateValue = inaHierarchy.getStringByKey("DueDate");
					if (oFF.notNull(hierarchyDueDateValue))
					{
						inaHierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
					}
					inaHierarchyVersion = inaHierarchy.getStringByKey("Version");
				}
			}
			if (oFF.isNull(cartesianList))
			{
				cartesianList = oFF.QFilterCartesianList._createMd(context, filterExpression, field.getMetadata(), inaHierarchyName);
				cartesianList.setHierarchyInfo(inaHierarchyName, inaHierarchyDueDate, inaHierarchyVersion);
			}
			else
			{
				cartesianList.clear();
			}
			var convertToFlatFilter = inaCartesianList.getBooleanByKeyExt("ConvertToFlatSelection", false);
			cartesianList.setConvertToFlatFilter(convertToFlatFilter);
			var supplementsFieldsNamesList = inaCartesianList.getListByKey("SupplementsFieldNames");
			if (oFF.notNull(supplementsFieldsNamesList))
			{
				var len = supplementsFieldsNamesList.size();
				for (var y = 0; y < len; y++)
				{
					var name = supplementsFieldsNamesList.getStringAt(y);
					var supplField = fieldAccessor.getFieldByName(name);
					cartesianList.addSupplementField(supplField);
				}
			}
			var elements = inaCartesianList.getListByKey("Elements");
			if (oFF.notNull(elements))
			{
				var size = elements.size();
				for (var i = 0; i < size; i++)
				{
					var setOperandElement = elements.getStructureAt(i);
					var element = importer.importFilterOperation(setOperandElement, cartesianList, context);
					cartesianList.add(element);
				}
			}
		}
	}
	return cartesianList;
};
oFF.QInAFilterCartesianList.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	var cartesianList = modelComponent;
	if (cartesianList.hasElements())
	{
		var element = cartesianList.getOp(0);
		var comparisonOperator = element.getComparisonOperator();
		if (oFF.notNull(comparisonOperator))
		{
			if (comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
			{
				return this.exportSpatialList(exporter, cartesianList, inaParentStructure);
			}
			else if (comparisonOperator === oFF.ComparisonOperator.SEARCH)
			{
				return this.exportSearchList(exporter, cartesianList, inaParentStructure);
			}
		}
		return this.exportStandardList(exporter, cartesianList, inaParentStructure);
	}
	return null;
};
oFF.QInAFilterCartesianList.prototype.exportStandardList = function(exporter, modelComponent, inaParentStructure)
{
	var cartesianList = modelComponent;
	if (cartesianList.isEmpty())
	{
		return null;
	}
	var fieldMd = cartesianList.getFieldMetadata();
	if (oFF.isNull(fieldMd))
	{
		exporter.addWarning(oFF.ErrorCodes.INVALID_FIELD, "A field has to be provided to the cartesian list.");
		return null;
	}
	var inaCartesianList = oFF.PrFactory.createStructure();
	inaCartesianList.putString("FieldName", fieldMd.getName());
	var hierarchyName = cartesianList.getHierarchyName();
	if (oFF.notNull(hierarchyName))
	{
		var filterExpr = cartesianList.getFilterExpression() !== null ? cartesianList.getFilterExpression() : cartesianList.getParent().getFilterExpression();
		oFF.QInAHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(modelComponent), inaCartesianList, null, filterExpr, cartesianList.getQueryManager(), fieldMd.getName(), hierarchyName, cartesianList.getHierarchyDueDate(), cartesianList.getHierarchyVersion());
	}
	if (!exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) && exporter.capabilities.supportsSupplements())
	{
		var supplementFieldsNames = cartesianList.getSupplementFieldNames();
		if (oFF.XCollectionUtils.hasElements(supplementFieldsNames))
		{
			var inaSupplements = inaCartesianList.putNewList("SupplementsFieldNames");
			inaSupplements.addAllStrings(supplementFieldsNames);
		}
	}
	var isConvertToFlatFilter = cartesianList.isConvertToFlatFilter();
	var inaElements = inaCartesianList.putNewList("Elements");
	var size = cartesianList.size();
	for (var j = 0; j < size; j++)
	{
		var cartesianElement = cartesianList.getOp(j);
		exporter.exportFilterOperation(cartesianElement, inaElements.addNewStructure());
		isConvertToFlatFilter = isConvertToFlatFilter || cartesianElement.isConvertToFlatFilter();
	}
	if (exporter.capabilities.supportsConvertToFlatFilter() && isConvertToFlatFilter)
	{
		inaCartesianList.putBoolean("ConvertToFlatSelection", true);
	}
	if (oFF.notNull(inaParentStructure))
	{
		inaParentStructure.put("SetOperand", inaCartesianList);
	}
	return inaCartesianList;
};
oFF.QInAFilterCartesianList.prototype.exportSpatialList = function(exporter, cartesianList, inaParentStructure)
{
	if (!exporter.capabilities.supportsSpatialFilter())
	{
		exporter.addWarning(oFF.ErrorCodes.INVALID_OPERATOR, "System does not support spatial filtering.");
		return null;
	}
	var fieldMd = cartesianList.getFieldMetadata();
	var inaParentStructure2 = oFF.isNull(inaParentStructure) ? oFF.PrFactory.createStructure() : inaParentStructure;
	var inaOperator = inaParentStructure2.putNewStructure("Operator");
	inaOperator.putString("Code", "Or");
	var inaSubSelections = inaOperator.putNewList("SubSelections");
	var size = cartesianList.size();
	for (var j = 0; j < size; j++)
	{
		var qFilterSelection = cartesianList.getOp(j);
		var comparisonOperator = qFilterSelection.getComparisonOperator();
		if (oFF.isNull(comparisonOperator))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Comparison operator is not set");
			return null;
		}
		if (!comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Comparison operator not spatial");
			return null;
		}
		var inaOrElement = inaSubSelections.addNewStructure();
		var inaGeoOperation = inaOrElement.putNewStructure("GeometryOperand");
		inaGeoOperation.putString("FieldName", fieldMd.getName());
		inaGeoOperation.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
		if (qFilterSelection.getSetSign() === oFF.SetSign.EXCLUDING)
		{
			inaGeoOperation.putBoolean("IsExcluding", true);
		}
		var geoValueA1 = qFilterSelection.getLow();
		oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull(geoValueA1, exporter, inaGeoOperation, "Value1");
		if (geoValueA1.getValueType().isSpatial())
		{
			var srid = geoValueA1.getGeometry().getSrid();
			if (exporter.capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
			{
				inaGeoOperation.putInteger("SRID", srid.getInteger());
			}
		}
		var geoValueA2 = qFilterSelection.getHigh();
		oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull(geoValueA2, exporter, inaGeoOperation, "Value2");
		var geoValueA3 = qFilterSelection.getThird();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(geoValueA3.getString()))
		{
			oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull(geoValueA3, exporter, inaGeoOperation, "Value3");
		}
	}
	return inaParentStructure2;
};
oFF.QInAFilterCartesianList.prototype.exportSearchList = function(exporter, cartesianList, inaParentStructure)
{
	var fieldMd = cartesianList.getFieldMetadata();
	var fieldValueType = fieldMd.getValueType();
	var inaParentStructure2 = oFF.isNull(inaParentStructure) ? oFF.PrFactory.createStructure() : inaParentStructure;
	var inaOperator = inaParentStructure2.putNewStructure("Operator");
	inaOperator.putString("Code", "Or");
	var inaSubSelections = inaOperator.putNewList("SubSelections");
	var size = cartesianList.size();
	for (var j = 0; j < size; j++)
	{
		var qFilterSelection = cartesianList.getOp(j);
		if (qFilterSelection.getComparisonOperator() !== oFF.ComparisonOperator.SEARCH)
		{
			exporter.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Comparison operator is not search");
			return null;
		}
		var inaOrElement = inaSubSelections.addNewStructure();
		var inaSearchOperation = inaOrElement.putNewStructure("SearchOperand");
		if (exporter.isAbap(cartesianList))
		{
			inaSearchOperation.putString("FieldName", fieldMd.getName());
		}
		inaSearchOperation.putString("AttributeName", fieldMd.getName());
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value", inaSearchOperation, qFilterSelection.getLow(), fieldValueType);
		inaSearchOperation.putDouble("Exactness", qFilterSelection.getExactness());
	}
	return inaParentStructure2;
};

oFF.QInAFilterCartesianProduct = function() {};
oFF.QInAFilterCartesianProduct.prototype = new oFF.QInAComponent();
oFF.QInAFilterCartesianProduct.prototype._ff_c = "QInAFilterCartesianProduct";

oFF.QInAFilterCartesianProduct.iterateCartesianDimensionsNew = function(exporter, cartesianProduct, parentList)
{
	var size = cartesianProduct.size();
	for (var i = 0; i < size; i++)
	{
		var msl = cartesianProduct.getCartesianChild(i);
		var parentElement = oFF.PrFactory.createStructure();
		if (msl.hasElements())
		{
			exporter.exportCartesianList(msl, parentElement);
			parentList.add(parentElement);
		}
	}
};
oFF.QInAFilterCartesianProduct.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_PRODUCT;
};
oFF.QInAFilterCartesianProduct.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	var inaStructure = inaElement;
	var filterExpression = parentComponent;
	var cartesianProduct = null;
	var inaElements = inaStructure.getListByKey("Elements");
	if (oFF.isNull(inaElements))
	{
		inaElements = inaStructure.getListByKey("SubSelections");
	}
	if (oFF.notNull(inaElements))
	{
		cartesianProduct = oFF.QFilterCartesianProduct._create(context, filterExpression);
		var size = inaElements.size();
		for (var i = 0; i < size; i++)
		{
			var inaCartesianChild = inaElements.getStructureAt(i);
			if (oFF.notNull(inaCartesianChild))
			{
				var cartesianList = importer.importCartesianList(inaCartesianChild, null, filterExpression, context);
				cartesianProduct.add(cartesianList);
			}
		}
	}
	return cartesianProduct;
};
oFF.QInAFilterCartesianProduct.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	var cartesianProduct = modelComponent;
	if (oFF.notNull(cartesianProduct))
	{
		var filterDimCount = 0;
		var singleMemberSelection = null;
		var size = cartesianProduct.size();
		for (var i = 0; i < size; i++)
		{
			var msl = cartesianProduct.getCartesianChild(i);
			if (msl.hasElements())
			{
				filterDimCount++;
				singleMemberSelection = msl;
				if (filterDimCount > 1)
				{
					break;
				}
			}
		}
		if (filterDimCount > 0)
		{
			var inaParentStructure2;
			if (oFF.isNull(inaParentStructure))
			{
				inaParentStructure2 = oFF.PrFactory.createStructure();
			}
			else
			{
				inaParentStructure2 = inaParentStructure;
			}
			if (filterDimCount === 1 && exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				return exporter.exportCartesianList(singleMemberSelection, inaParentStructure);
			}
			var inaLogicalOperator = inaParentStructure2.putNewStructure("Operator");
			inaLogicalOperator.putString("Code", "And");
			var inaSubSelections = inaLogicalOperator.putNewList("SubSelections");
			oFF.QInAFilterCartesianProduct.iterateCartesianDimensionsNew(exporter, cartesianProduct, inaSubSelections);
			return inaLogicalOperator;
		}
	}
	return null;
};

oFF.InADocConverterSfxRepo = function() {};
oFF.InADocConverterSfxRepo.prototype = new oFF.DocConverterFactory();
oFF.InADocConverterSfxRepo.prototype._ff_c = "InADocConverterSfxRepo";

oFF.InADocConverterSfxRepo.staticSetupInAConverter = function()
{
	oFF.DocConverterFactory.registerFactory(oFF.QModelFormat.SFX, oFF.QModelFormat.INA_REPOSITORY, new oFF.InADocConverterSfxRepo());
};
oFF.InADocConverterSfxRepo.getAccountMemberName = function(accountName, accountHierarchy, memberName)
{
	if (oFF.notNull(accountName) && oFF.notNull(accountHierarchy))
	{
		var prefix = oFF.XStringUtils.concatenate5("[", accountName, "].[", accountHierarchy, "].&[");
		return oFF.XStringUtils.concatenate3(prefix, memberName, "]");
	}
	return memberName;
};
oFF.InADocConverterSfxRepo.processAccountMembers = function(sCData, accountDimension, accountHierarchy, application)
{
	if (oFF.notNull(accountDimension) && sCData.getStructureByKey(oFF.SfxConstants.FORMULAS) !== null)
	{
		var capabilities = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
		var hasUserDefinedMeasures = oFF.notNull(capabilities) && capabilities.getBooleanByKeyExt(oFF.SfxConstants.HAS_USER_DEFINED_MEASURES, false);
		var sFormulas = sCData.getStructureByKey(oFF.SfxConstants.FORMULAS);
		var calculationMembersPrefix = sFormulas.getStringByKey(oFF.SfxConstants.CALCULATION_MEMBERS_PREFIX);
		if (oFF.isNull(calculationMembersPrefix))
		{
			calculationMembersPrefix = oFF.SfxConstants.CALCULATION_MEMBERS_PREFIX_DEFAULT;
		}
		var sFormulasData = sFormulas.getListByKey(oFF.SfxConstants.FORMULA_DATA);
		var tFormulas = accountDimension.putNewList("MembersRepo");
		var tPlaceholdeIds = accountDimension.putNewList("PlaceholderIds");
		var accountName = accountDimension.getStringByKey("Name");
		if (oFF.notNull(sFormulasData))
		{
			for (var j = 0; j < sFormulasData.size(); j++)
			{
				var sFormula = sFormulasData.get(j).asStructure();
				var member = sFormula.getStringByKey(oFF.SfxConstants.MEMBER);
				var memberName = oFF.InADocConverterSfxRepo.getAccountMemberName(accountName, accountHierarchy, member);
				var isPlaceHolderId = oFF.XString.startsWith(member, calculationMembersPrefix);
				if (isPlaceHolderId)
				{
					tPlaceholdeIds.addString(application.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && hasUserDefinedMeasures ? member : memberName);
					continue;
				}
				var tFormula = tFormulas.addNewStructure();
				tFormula.putBoolean("ModelDefinedMember", true);
				tFormula.putString("Name", memberName);
				tFormula.putString("Description", sFormula.getStringByKey(oFF.SfxConstants.MEMBER_DESCRIPTION));
				tFormula.putString("HierarchyDisplayKey", member);
				var accountType = sFormula.getStringByKey(oFF.SfxConstants.ACCOUNTTYPE);
				tFormula.putString("AccountType", accountType);
				tFormula.putString("Aggregation", sFormula.getStringByKey(oFF.SfxConstants.AGGREGATIONTYPE));
				if (sFormula.containsKey(oFF.SfxConstants.SCALE) && !sFormula.hasNullByKey(oFF.SfxConstants.SCALE))
				{
					tFormula.putInteger("NumericScale", sFormula.getIntegerByKey(oFF.SfxConstants.SCALE));
				}
				if (sFormula.containsKey(oFF.SfxConstants.NUMERIC_SHIFT) && !sFormula.hasNullByKey(oFF.SfxConstants.NUMERIC_SHIFT))
				{
					tFormula.putInteger("NumericShift", sFormula.getIntegerByKey(oFF.SfxConstants.NUMERIC_SHIFT));
				}
				tFormula.putString("ExceptionAggregation", sFormula.getStringByKey(oFF.SfxConstants.EXCEPTIONAGGREGATIONTYPE));
				var exceptionAggregationDims = sFormula.getListByKey(oFF.SfxConstants.AGGRDIMNAME);
				if (oFF.notNull(exceptionAggregationDims))
				{
					var tExceptionAggregationDims = tFormula.putNewList("ExceptionAggregationDimensions");
					for (var k = 0; k < exceptionAggregationDims.size(); k++)
					{
						tExceptionAggregationDims.addString(exceptionAggregationDims.get(k).asString().getString());
					}
				}
				var jsonFormula = sFormula.getStringByKey(oFF.SfxConstants.JSONFORMULA);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(jsonFormula))
				{
					var jsonParser = oFF.JsonParserFactory.newInstance();
					var parsedFormula = jsonParser.parse(jsonFormula).asStructure();
					if (parsedFormula.containsKey("Operator"))
					{
						tFormula.putString("CType", oFF.MemberType.RESTRICTED_MEASURE.getName());
						tFormula.putString("MemberType", "SelectionMeasure");
						if (oFF.notNull(accountType) && (oFF.XString.isEqual(accountType, oFF.AccountType.INC.getName()) || oFF.XString.isEqual(accountType, oFF.AccountType.LEQ.getName())))
						{
							tFormula.putBoolean("PresentationSignReversal", true);
						}
						var restrictedMeasure = tFormula.putNewStructure("InAFilterExpression");
						restrictedMeasure.put("Selection", parsedFormula);
					}
					else
					{
						tFormula.putString("CType", oFF.MemberType.FORMULA.getName());
						tFormula.putString("MemberType", "FormulaMeasure");
						tFormula.put("Formula", parsedFormula);
						if (sFormula.getBooleanByKeyExt(oFF.SfxConstants.CALC_BEFORE_AGGR, false))
						{
							tFormula.putString("ExecutionStep", "CalculationBeforeAggregation");
						}
					}
				}
				else
				{
					tFormula.putString("MemberType", "Measure");
					tFormula.putString("CType", oFF.MemberType.BASIC_MEASURE.getName());
				}
				var formulaType = sFormula.getStringByKey(oFF.SfxConstants.FORMULA_TYPE);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(formulaType))
				{
					tFormula.putString("FormulaType", formulaType);
				}
				var ignoreExternalDimensions = sFormula.getListByKey(oFF.SfxConstants.IGNORE_EXTERNAL_DIMENSIONS);
				if (oFF.notNull(ignoreExternalDimensions))
				{
					var tIgnoreExternalDimensions = tFormula.putNewList("IgnoreExternalDimensions");
					for (var m = 0; m < ignoreExternalDimensions.size(); m++)
					{
						tIgnoreExternalDimensions.addString(ignoreExternalDimensions.get(m).asString().getString());
					}
				}
				var unitType = sFormula.getStringByKey(oFF.SfxConstants.UNITTYPE);
				tFormula.putString("UnitType", unitType);
				if (oFF.XString.isEqual(unitType, oFF.UnitType.UNIT.getName()))
				{
					tFormula.putString("UnitFixed", sFormula.getStringByKey(oFF.SfxConstants.UNITOFMEASURE));
				}
				oFF.InADocConverterSfxRepo.setVisibility(tFormula, oFF.XString.isEqual(tFormula.getStringByKeyExt(oFF.SfxConstants.VISIBLE, oFF.SfxConstants.NO), oFF.SfxConstants.NO));
				oFF.InADocConverterSfxRepo.setMinimumDrillState(sFormula, tFormula, application);
			}
		}
	}
};
oFF.InADocConverterSfxRepo.setMinimumDrillState = function(sFormula, tFormula, application)
{
	if (application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_MINIMUM_DRILL_STATE))
	{
		var minimumDrillStateParamType = sFormula.getElementTypeByKey(oFF.SfxConstants.MINIMUM_DRILL_STATE);
		if (oFF.notNull(minimumDrillStateParamType))
		{
			var minimumDrillStateList = tFormula.putNewList("MinimumDrillState");
			if (minimumDrillStateParamType === oFF.PrElementType.LIST)
			{
				minimumDrillStateList.addAll(sFormula.getListByKey(oFF.SfxConstants.MINIMUM_DRILL_STATE));
			}
			else if (minimumDrillStateParamType === oFF.PrElementType.STRING)
			{
				minimumDrillStateList.addString(sFormula.getStringByKey(oFF.SfxConstants.MINIMUM_DRILL_STATE));
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula = function(element)
{
	if (element.isStructure())
	{
		var structure = element.asStructure();
		var keys = structure.getKeysAsIteratorOfString();
		while (keys.hasNext())
		{
			var key = keys.next();
			if (oFF.XString.isEqual(key, "FieldName") && oFF.XString.isEqual(structure.getStringByKey(key), ".ID"))
			{
				structure.putString("FieldName", "[Measures].[Measures]");
			}
			else
			{
				oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula(structure.getByKey(key));
			}
		}
	}
	else if (element.isList())
	{
		var list = element.asList();
		for (var i = 0; i < list.size(); i++)
		{
			oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula(list.get(i));
		}
	}
};
oFF.InADocConverterSfxRepo.processMeasures = function(sCData, tModellerDefn, accountDimension, application)
{
	var hasAccountDimension = oFF.notNull(accountDimension);
	var isAnalyticModel = oFF.XString.isEqual(sCData.getStringByKey(oFF.SfxConstants.TYPE), oFF.SfxConstants.ANALYTIC);
	var isIntegratedMode = oFF.XString.isEqual(sCData.getStringByKey(oFF.SfxConstants.MODE), oFF.SfxConstants.INTEGRATED);
	var capabilitySettings = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
	var hasUserDefinedMeasures = oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.HAS_USER_DEFINED_MEASURES, false);
	var hasUniversalCurrencyTranslation = oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.QUERY_BASED_CURRENCY_TRANSLATION, false);
	var hasDatasetSource = oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.HAS_DATASET_SOURCE, false);
	var hasSfxFeatureToggle = application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_MINIMUM_DRILL_STATE);
	if (hasAccountDimension && !hasUserDefinedMeasures || !hasSfxFeatureToggle && !hasUniversalCurrencyTranslation && (!isAnalyticModel || !isIntegratedMode) || hasSfxFeatureToggle && hasDatasetSource)
	{
		return;
	}
	var tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
	var tDimensions = tModellerDimensions.getListByKey("Dimensions");
	var measureDim = tDimensions.addNewStructure();
	measureDim.putBoolean("MeasureStructure", true);
	measureDim.putString("CType", oFF.DimensionType.MEASURE_STRUCTURE.getName());
	measureDim.putBoolean("IsDelta", true);
	var tMeasures = measureDim.putNewList("MembersRepo");
	var ctListItem = null;
	var modellerVariables = tModellerDefn.getStructureByKey("ModellerVariables");
	var customVariableNames = oFF.isNull(modellerVariables) ? null : oFF.XStream.of(modellerVariables.getListByKey("Variables")).collect(oFF.XStreamCollector.toSetOfString( function(el){
		return el.asStructure().getStringByKey("Name");
	}.bind(this)));
	if (oFF.XCollectionUtils.hasElements(customVariableNames))
	{
		var ctrepo = tModellerDefn.getStructureByKey("ModellerCurrencyTranslation");
		if (oFF.XCollectionUtils.hasElements(ctrepo))
		{
			ctListItem = ctrepo.putNewList("CurrencyTranslations");
		}
	}
	var sMeasures = sCData.getListByKey(oFF.SfxConstants.MEASURES);
	if (oFF.notNull(sMeasures))
	{
		for (var i = 0; i < sMeasures.size(); i++)
		{
			var sMeasure = sMeasures.getStructureAt(i);
			var measureName = sMeasure.getStringByKey(oFF.SfxConstants.MEASURE);
			var tMeasure = tMeasures.addNewStructure();
			tMeasure.putBoolean("ModelDefinedMember", true);
			tMeasure.putString("Name", measureName);
			if (sMeasure.containsKey(oFF.SfxConstants.NUMERIC_SCALE) && !sMeasure.hasNullByKey(oFF.SfxConstants.NUMERIC_SCALE))
			{
				tMeasure.putInteger("NumericScale", sMeasure.getIntegerByKey(oFF.SfxConstants.NUMERIC_SCALE));
			}
			if (sMeasure.containsKey(oFF.SfxConstants.NUMERIC_SHIFT) && !sMeasure.hasNullByKey(oFF.SfxConstants.NUMERIC_SHIFT))
			{
				tMeasure.putInteger("NumericShift", sMeasure.getIntegerByKey(oFF.SfxConstants.NUMERIC_SHIFT));
			}
			if (sMeasure.containsKey(oFF.SfxConstants.NUMERIC_PRECISION) && !sMeasure.hasNullByKey(oFF.SfxConstants.NUMERIC_PRECISION))
			{
				tMeasure.putInteger("NumericPrecision", sMeasure.getIntegerByKey(oFF.SfxConstants.NUMERIC_PRECISION));
			}
			if (sMeasure.containsKey(oFF.SfxConstants.SOLVE_ORDER) && !sMeasure.hasNullByKey(oFF.SfxConstants.SOLVE_ORDER))
			{
				tMeasure.putInteger("SolveOrder", sMeasure.getIntegerByKeyExt(oFF.SfxConstants.SOLVE_ORDER, 0));
			}
			var scale = sMeasure.getIntegerByKeyExt(oFF.SfxConstants.SCALE, -1);
			if (scale > -1)
			{
				tMeasure.putInteger("DataTypeScale", scale);
			}
			var precision = sMeasure.getIntegerByKeyExt(oFF.SfxConstants.LENGTH, -1);
			if (precision > -1)
			{
				tMeasure.putInteger("DataTypePrecision", precision);
			}
			tMeasure.putString("UnitType", sMeasure.getStringByKey(oFF.SfxConstants.UNITTYPE));
			tMeasure.putStringNotNullAndNotEmpty("UnitFixed", sMeasure.getStringByKey(oFF.SfxConstants.MEASURE_UNITS));
			if (sMeasure.hasStringByKey(oFF.SfxConstants.DATA_TYPE_NAME))
			{
				switch (sMeasure.getStringByKey(oFF.SfxConstants.DATA_TYPE_NAME))
				{
					case oFF.SfxConstants.DATA_TYPE_DECIMAL:
						tMeasure.putString("DataTypeInternal", "DecimalFloat");
						break;

					case oFF.SfxConstants.DATA_TYPE_INTEGER:
						tMeasure.putString("DataTypeInternal", "Int");
						break;
				}
			}
			tMeasure.putStringNotNullAndNotEmpty("UnitDimension", sMeasure.getStringByKey(oFF.SfxConstants.UNIT_DIMENSION));
			tMeasure.putStringNotNullAndNotEmpty("UnitDimensionProperty", sMeasure.getStringByKey(oFF.SfxConstants.UNIT_DIMENSION_PROPERTY));
			tMeasure.putBoolean("OverrideDescription", true);
			tMeasure.putString("RateType", sMeasure.getStringByKey(oFF.SfxConstants.RATE_TYPE));
			if (sMeasure.containsKey(oFF.SfxConstants.EXTENDED))
			{
				tMeasure.putBoolean("Extended", sMeasure.getBooleanByKey(oFF.SfxConstants.EXTENDED));
			}
			var aggregationType = sMeasure.getStringByKey(oFF.SfxConstants.AGGREGATIONTYPE);
			var description = sMeasure.getStringByKey(oFF.SfxConstants.DESCRIPTION);
			tMeasure.putStringNotNullAndNotEmpty("ExceptionAggregation", sMeasure.getStringByKey(oFF.SfxConstants.EXCEPTIONAGGREGATIONTYPE));
			var exceptionAggregationDims = sMeasure.getListByKey(oFF.SfxConstants.AGGREGATION_DIMENSION_NAME);
			if (oFF.notNull(exceptionAggregationDims))
			{
				var tExceptionAggregationDims = tMeasure.putNewList("ExceptionAggregationDimensions");
				for (var k = 0; k < exceptionAggregationDims.size(); k++)
				{
					tExceptionAggregationDims.addString(exceptionAggregationDims.get(k).asString().getString());
				}
			}
			var formula = sMeasure.getStringByKey(oFF.SfxConstants.FORMULA);
			var jsonFormula = sMeasure.getStringByKey(oFF.SfxConstants.JSONFORMULA);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(formula) && oFF.XStringUtils.isNotNullAndNotEmpty(jsonFormula))
			{
				var jsonParser = oFF.JsonParserFactory.newInstance();
				var parsedFormula = jsonParser.parse(jsonFormula).asStructure();
				if (oFF.XStringUtils.isNullOrEmpty(description))
				{
					description = measureName;
				}
				if (parsedFormula.containsKey("Operator") || parsedFormula.containsKey("Selection"))
				{
					tMeasure.putString("CType", oFF.MemberType.RESTRICTED_MEASURE.getName());
					tMeasure.putString("MemberType", "SelectionMeasure");
					oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula(parsedFormula);
					if (parsedFormula.containsKey("Selection"))
					{
						tMeasure.put("InAFilterExpression", parsedFormula);
					}
					else
					{
						var restrictedMeasure = tMeasure.putNewStructure("InAFilterExpression");
						restrictedMeasure.put("Selection", parsedFormula);
					}
				}
				else
				{
					tMeasure.putString("MemberType", "FormulaMeasure");
					tMeasure.putString("CType", oFF.MemberType.FORMULA.getName());
					tMeasure.put("Formula", parsedFormula);
				}
			}
			else
			{
				tMeasure.putString("CType", oFF.MemberType.BASIC_MEASURE.getName());
				tMeasure.putString("MemberType", "Measure");
				var memberOperand = tMeasure.putNewStructure("MemberOperand");
				memberOperand.putString("AttributeName", "Measures");
				memberOperand.putString("Comparison", "=");
				memberOperand.putString("Value", measureName);
			}
			tMeasure.putString("Aggregation", aggregationType);
			tMeasure.putString("Description", description);
			var refDimensions = sMeasure.getStringByKeyExt(oFF.SfxConstants.REF_DIMENSIONS, "");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(refDimensions))
			{
				var ignoreExternalDimensions = oFF.XStringTokenizer.splitString(refDimensions, ",");
				var tIgnoreExternalDimensions = tMeasure.putNewList("IgnoreExternalDimensions");
				for (var m = 0; m < ignoreExternalDimensions.size(); m++)
				{
					tIgnoreExternalDimensions.addString(ignoreExternalDimensions.get(m));
				}
			}
			oFF.InADocConverterSfxRepo.setVisibility(tMeasure, sMeasure.getBooleanByKeyExt(oFF.SfxConstants.VISIBLE, true));
			oFF.InADocConverterSfxRepo.setMinimumDrillState(sMeasure, tMeasure, application);
			var currencyTranslationStructure = sMeasure.getStructureByKey(oFF.SfxConstants.CURRENCY_TRANSLATION);
			if (oFF.notNull(ctListItem) && oFF.notNull(currencyTranslationStructure) && currencyTranslationStructure.hasStringByKey(oFF.SfxConstants.CURRENCY_VARIABLE) && customVariableNames.contains(currencyTranslationStructure.getStringByKey(oFF.SfxConstants.CURRENCY_VARIABLE)))
			{
				var ctVariableName = currencyTranslationStructure.getStringByKey(oFF.SfxConstants.CURRENCY_VARIABLE);
				var currencyTranslationName = oFF.XStringUtils.concatenate5("CurrencyTranslation", "_", "CustomVariable", "_", measureName);
				tMeasure.putString("CurrencyTranslationName", currencyTranslationName);
				var ctConfigString = currencyTranslationStructure.getStringByKey(oFF.SfxConstants.CURRENCY_TRANSLATION_CONFIG);
				if (oFF.notNull(ctConfigString))
				{
					var ctConfigStructure = oFF.JsonParserFactory.createFromString(ctConfigString);
					if (oFF.notNull(ctConfigStructure) && ctConfigStructure.isStructure())
					{
						var currencyTranslationRepoElement = ctListItem.addNewStructure();
						currencyTranslationRepoElement.putAll(ctConfigStructure.asStructure());
						currencyTranslationRepoElement.putString("CType", "CurrencyTranslationItem");
						currencyTranslationRepoElement.putString("Name", currencyTranslationName);
						currencyTranslationRepoElement.putString("Description", currencyTranslationName);
						currencyTranslationRepoElement.putNewStructure("TargetCurrency").putString("Variable", ctVariableName);
					}
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.setVisibility = function(tMember, isVisible)
{
	if (isVisible)
	{
		tMember.putString("Visibility", "Visible");
	}
	else
	{
		tMember.putString("Visibility", "Hidden");
	}
};
oFF.InADocConverterSfxRepo.isNormalizeIntervals = function(tModellerDefn, accountDimension, memberName)
{
	var membersRepo = null;
	if (oFF.isNull(accountDimension))
	{
		var tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
		var tDimensions = tModellerDimensions.getListByKey("Dimensions");
		for (var i = 0; i < tDimensions.size(); i++)
		{
			var dimension = tDimensions.getStructureAt(i);
			if (dimension.getBooleanByKeyExt("MeasureStructure", false))
			{
				membersRepo = dimension.getListByKey("MembersRepo");
			}
		}
	}
	else
	{
		membersRepo = accountDimension.getListByKey("MembersRepo");
	}
	if (oFF.notNull(membersRepo))
	{
		for (var j = 0; j < membersRepo.size(); j++)
		{
			var member = membersRepo.getStructureAt(j);
			if (oFF.XString.isEqual(member.getStringByKey("Name"), memberName))
			{
				return member.getIntegerByKeyExt("NumericShift", 0) === 2;
			}
		}
	}
	return false;
};
oFF.InADocConverterSfxRepo.processThresholds = function(sCData, tModellerDefn, accountDimension, accountHierarchy)
{
	var sFormulaExceptions = sCData.getStructureByKey(oFF.SfxConstants.VISUALIZATIONS);
	if (oFF.isNull(sFormulaExceptions))
	{
		return;
	}
	var accountName = null;
	if (oFF.notNull(accountDimension))
	{
		accountName = accountDimension.getStringByKey("Name");
	}
	var sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	var dataSourceName = sDataSource.getStringByKey(oFF.SfxConstants.OBJECT_NAME);
	var tFormulaExceptions = null;
	var formulaExMemberIterator = sFormulaExceptions.getKeysAsIteratorOfString();
	while (formulaExMemberIterator.hasNext())
	{
		var formulaExMember = formulaExMemberIterator.next();
		var formulaException = sFormulaExceptions.getStructureByKey(formulaExMember);
		var sThresholds = formulaException.getStructureByKey(oFF.SfxConstants.THRESHOLDS);
		if (oFF.isNull(sThresholds) || sThresholds.isEmpty())
		{
			continue;
		}
		if (oFF.isNull(tFormulaExceptions))
		{
			var tFormulaExceptionManager = tModellerDefn.putNewStructure("FormulaExceptionManager");
			tFormulaExceptionManager.putString("CType", "FormulaExceptions");
			tFormulaExceptions = tFormulaExceptionManager.putNewList("FormulaExceptionsModeler");
		}
		var formulaExMemberName = oFF.InADocConverterSfxRepo.getAccountMemberName(accountName, accountHierarchy, formulaExMember);
		var formulaExStructure = tFormulaExceptions.addNewStructure();
		formulaExStructure.putString("CType", "FormulaException");
		var formulaExName = oFF.XStringUtils.concatenate5(oFF.QFormulaExceptionConstants.MODEL_THRESHOLD_PREFIX.getName(), "_[", dataSourceName, "]_", formulaExMember);
		formulaExStructure.putString("Name", formulaExName);
		formulaExStructure.putString("Type", oFF.FormulaExceptionType.BASE_MEASURE_ONLY.getName());
		formulaExStructure.putNewList("EvaluateOn");
		var formulaExStructureContext = formulaExStructure.putNewList("StructureContext");
		formulaExStructureContext.addNewStructure();
		var formulaExBaseMeasure = formulaExStructureContext.addNewStructure();
		formulaExStructureContext.addNewStructure();
		formulaExBaseMeasure.putString("MemberName", formulaExMemberName);
		if (oFF.notNull(accountName))
		{
			formulaExBaseMeasure.putString("DimensionName", accountName);
		}
		else
		{
			formulaExBaseMeasure.putBoolean("MeasureStructure", true);
		}
		var sIntervals = sThresholds.getListByKey(oFF.SfxConstants.INTERVALS);
		if (oFF.isNull(sIntervals))
		{
			continue;
		}
		var formulaExThresholds = formulaExStructure.putNewList("Threshold");
		var normalizeIntervals = oFF.InADocConverterSfxRepo.isNormalizeIntervals(tModellerDefn, accountDimension, formulaExMemberName);
		for (var l = 0; l < sIntervals.size(); l++)
		{
			var sInterval = sIntervals.getStructureAt(l);
			var text = sInterval.getStringByKey(oFF.SfxConstants.NAME);
			var low = sInterval.getStringByKey(oFF.SfxConstants.LOW);
			var lowValue = oFF.XDouble.convertFromStringWithDefault(low, 0);
			var lowInclusive = sInterval.getBooleanByKey(oFF.SfxConstants.LOW_INCLUSIVE);
			var high = sInterval.getStringByKey(oFF.SfxConstants.HIGH);
			var highValue = oFF.XDouble.convertFromStringWithDefault(high, 0);
			var highInclusive = sInterval.getBooleanByKey(oFF.SfxConstants.HIGH_INCLUSIVE);
			var color = sInterval.getStringByKey(oFF.SfxConstants.COLOR);
			if (normalizeIntervals)
			{
				lowValue = lowValue / 100;
				highValue = highValue / 100;
			}
			var formulaExThreshold = formulaExThresholds.addNewStructure();
			formulaExThreshold.putString("Name", oFF.XStringUtils.concatenate3(formulaExName, ":", oFF.XInteger.convertToString(l)));
			formulaExThreshold.putString("Text", text);
			formulaExThreshold.putInteger("AlertLevel", oFF.AlertLevel.GOOD_1.getLevel());
			formulaExThreshold.putString("Color", color);
			if (!oFF.XStringUtils.isNullOrEmpty(low) && oFF.XStringUtils.isNullOrEmpty(high))
			{
				formulaExThreshold.putDouble("Low", lowValue);
				if (lowInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.GREATER_EQUAL));
				}
				else
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.GREATER_THAN));
				}
			}
			else if (oFF.XStringUtils.isNullOrEmpty(low) && !oFF.XStringUtils.isNullOrEmpty(high))
			{
				formulaExThreshold.putDouble("Low", highValue);
				if (highInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.LESS_EQUAL));
				}
				else
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.LESS_THAN));
				}
			}
			else if (!oFF.XStringUtils.isNullOrEmpty(low) && !oFF.XStringUtils.isNullOrEmpty(high))
			{
				if (lowInclusive && highInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.BETWEEN));
					formulaExThreshold.putDouble("Low", lowValue);
					formulaExThreshold.putDouble("High", highValue);
				}
				else if (!lowInclusive && !highInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.BETWEEN_EXCLUDING));
					formulaExThreshold.putDouble("Low", lowValue);
					formulaExThreshold.putDouble("High", highValue);
				}
				else
				{
					formulaExThreshold.remove("Name");
					formulaExThreshold.putString("Name", oFF.XStringUtils.concatenate4(formulaExName, ":", oFF.XInteger.convertToString(l), "A"));
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
					if (lowInclusive)
					{
						formulaExThreshold.putDouble("Low", lowValue);
					}
					else
					{
						formulaExThreshold.putDouble("Low", highValue);
					}
					formulaExThreshold = formulaExThresholds.addNewStructure();
					formulaExThreshold.putString("Name", oFF.XStringUtils.concatenate4(formulaExName, ":", oFF.XInteger.convertToString(l), "B"));
					formulaExThreshold.putString("Text", text);
					formulaExThreshold.putInteger("AlertLevel", oFF.AlertLevel.GOOD_1.getLevel());
					formulaExThreshold.putString("Color", color);
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.BETWEEN_EXCLUDING));
					formulaExThreshold.putDouble("Low", lowValue);
					formulaExThreshold.putDouble("High", highValue);
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processCurrencyTranslationSettings = function(sCData, tModellerDefn, capabilitySettings, hasAccountDimension)
{
	if (oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.CT_ENABLED, false))
	{
		var currencyTranslationManager = tModellerDefn.putNewStructure("ModellerCurrencyTranslation");
		currencyTranslationManager.putBoolean("PlanningParametersForCurrencyTranslation", capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.QUERY_BASED_CURRENCY_TRANSLATION, false));
		currencyTranslationManager.putInteger("MaxNumberOfCurrencyTranslations", sCData.getIntegerByKeyExt(oFF.SfxConstants.NUM_OF_CONVERSIONS, -1));
		currencyTranslationManager.putBoolean("RateTypeFromAccount", hasAccountDimension && oFF.XString.isEqual(oFF.SfxConstants.LEADING_STRUCTURE_ACCOUNT, sCData.getStringByKeyExt(oFF.SfxConstants.LEADING_STRUCTURE, oFF.SfxConstants.LEADING_STRUCTURE_MEASURES)));
		currencyTranslationManager.putStringNotNullAndNotEmpty("CurrencyTranslationTimeDimension", sCData.getStringByKey(oFF.SfxConstants.CURRENCY_CONVERSION_TIME_DIMENSION));
		currencyTranslationManager.putStringNotNullAndNotEmpty("DefaultCurrency", sCData.getStringByKey(oFF.SfxConstants.DEFAULT_CURRENCY));
		currencyTranslationManager.putStringNotNullAndNotEmpty("CurrencyRateTableId", sCData.getStringByKey(oFF.SfxConstants.CURRENCY_RATE_TABLE_ID));
		var categoryList = sCData.getListByKey(oFF.SfxConstants.CATEGORIES);
		var i;
		var size;
		var subStructure;
		var name;
		if (oFF.XCollectionUtils.hasElements(categoryList))
		{
			var ctCategoriesTarget = currencyTranslationManager.putNewList("Categories");
			size = categoryList.size();
			for (i = 0; i < size; i++)
			{
				subStructure = ctCategoriesTarget.addNewStructure();
				name = categoryList.getStructureAt(i).getStringByKey(oFF.SfxConstants.CATEGORY);
				subStructure.putString("Name", name);
			}
		}
		var currencyDetails = sCData.getStructureByKey(oFF.SfxConstants.CURRENCY_DETAILS);
		if (oFF.XCollectionUtils.hasElements(currencyDetails))
		{
			currencyTranslationManager.putStringNotNullAndNotEmpty("CurrencyDimension", currencyDetails.getStringByKey(oFF.SfxConstants.CURRENCY_DIMENSION));
		}
		var rateData = sCData.getStructureByKey(oFF.SfxConstants.RATE_DATA);
		if (oFF.XCollectionUtils.hasElements(rateData))
		{
			var currencies = rateData.getListByKey(oFF.SfxConstants.CURRENCIES);
			var ctCurrenciesTarget = currencyTranslationManager.putNewList("Currencies");
			if (oFF.XCollectionUtils.hasElements(currencies))
			{
				size = currencies.size();
				for (i = 0; i < size; i++)
				{
					subStructure = ctCurrenciesTarget.addNewStructure();
					name = currencies.getStringAt(i);
					subStructure.putString("Name", name);
					subStructure.putString("Text", name);
				}
			}
			var rateVersions = rateData.getListByKey(oFF.SfxConstants.RATE_VERSIONS);
			var ctRateVersionsTarget = currencyTranslationManager.putNewList("RateVersions");
			if (oFF.XCollectionUtils.hasElements(rateVersions))
			{
				size = rateVersions.size();
				for (i = 0; i < size; i++)
				{
					subStructure = ctRateVersionsTarget.addNewStructure();
					name = rateVersions.getStringAt(i);
					subStructure.putString("Name", name);
					subStructure.putString("Text", name);
				}
			}
			var rateTypes = rateData.getListByKey(oFF.SfxConstants.RATE_TYPES);
			var ctRateTypesTarget = currencyTranslationManager.putNewList("RateTypes");
			if (oFF.XCollectionUtils.hasElements(rateTypes))
			{
				size = rateTypes.size();
				for (i = 0; i < size; i++)
				{
					subStructure = ctRateTypesTarget.addNewStructure();
					name = rateTypes.getStringAt(i);
					subStructure.putString("Name", name);
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processMetadataProperties = function(sCData, tModellerDefn)
{
	var metadataProperties = tModellerDefn.putNewStructure("ModellerMetadataProperties");
	oFF.InADocConverterSfxRepo.processEpmObjectProperties(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processHasUserDefinedMeasuresProperty(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processIsPlanningProperty(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processLeadingStructure(sCData, metadataProperties);
};
oFF.InADocConverterSfxRepo.processEpmObjectProperties = function(sCData, metadataProperties)
{
	metadataProperties.putString("Mode", sCData.getStringByKey(oFF.SfxConstants.MODE));
	metadataProperties.putString("EpmQuerySourceName", sCData.getStringByKey(oFF.SfxConstants.EPM_QUERY_SOURCE_NAME));
	metadataProperties.putString("SchemaName", sCData.getStringByKey(oFF.SfxConstants.SCHEMA_NAME));
	metadataProperties.putString("PackageName", sCData.getStringByKey(oFF.SfxConstants.PACKAGE_NAME));
	metadataProperties.putString("Name", sCData.getStringByKey(oFF.SfxConstants.NAME));
	metadataProperties.putString("ShortDescription", sCData.getStringByKey(oFF.SfxConstants.SHORT_DESCRIPTION));
};
oFF.InADocConverterSfxRepo.processHasUserDefinedMeasuresProperty = function(sCData, metadataProperties)
{
	var capabilities = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
	var hasUserDefinedMeasures = oFF.notNull(capabilities) && capabilities.getBooleanByKeyExt(oFF.SfxConstants.HAS_USER_DEFINED_MEASURES, false);
	metadataProperties.putBoolean("HasUserDefinedMeasures", hasUserDefinedMeasures);
};
oFF.InADocConverterSfxRepo.processIsPlanningProperty = function(sCData, metadataProperties)
{
	var sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	var isPlanning = oFF.notNull(sDataSource) && oFF.XString.isEqual(sDataSource.getStringByKey(oFF.SfxConstants.DATA_SOURCE_TYPE), oFF.SfxConstants.DATA_SOURCE_TYPE_PLANNING);
	metadataProperties.putBoolean("IsPlanning", isPlanning);
};
oFF.InADocConverterSfxRepo.processLeadingStructure = function(sCData, metadataProperties)
{
	var scString = sCData.getStringByKeyExt(oFF.SfxConstants.LEADING_STRUCTURE, oFF.SfxConstants.LEADING_STRUCTURE_MEASURES);
	if (oFF.XString.isEqual(scString, oFF.SfxConstants.LEADING_STRUCTURE_ACCOUNT))
	{
		metadataProperties.putString("LeadingStructure", "AccountStructure");
	}
	else if (oFF.XString.isEqual(scString, oFF.SfxConstants.LEADING_STRUCTURE_MEASURES))
	{
		metadataProperties.putString("LeadingStructure", "MeasureStructure");
	}
	else if (oFF.XString.isEqual(scString, oFF.SfxConstants.LEADING_STRUCTURE_NON_MEASURES))
	{
		metadataProperties.putString("LeadingStructure", "SecondaryStructure");
	}
};
oFF.InADocConverterSfxRepo.processExtendedDimensions = function(sCData, tModellerDefn)
{
	var sExtendedDimensions = sCData.getListByKey(oFF.SfxConstants.EXTENDED_DIMENSIONS);
	if (oFF.notNull(sExtendedDimensions) && !sExtendedDimensions.isEmpty())
	{
		var tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
		var tExtendedDimensions = tModellerDimensions.putNewList("ExtendedDimensions");
		for (var index = 0; index < sExtendedDimensions.size(); index++)
		{
			var sExtendedDimension = sExtendedDimensions.getStructureAt(index);
			var sExtensionDefinition = sExtendedDimension.getStructureByKey(oFF.SfxConstants.EXTENSION_DEFINITION);
			if (oFF.notNull(sExtensionDefinition))
			{
				var locationType = sExtensionDefinition.getStringByKey(oFF.SfxConstants.LOCATION_TYPE);
				if (oFF.notNull(locationType))
				{
					var sDimensionDefinition = sExtensionDefinition.getStructureByKey(oFF.SfxConstants.DIMENSION);
					if (oFF.notNull(sDimensionDefinition))
					{
						var name = sDimensionDefinition.getStringByKey(oFF.SfxConstants.NAME);
						if (oFF.isNull(name))
						{
							name = sDimensionDefinition.getStructureByKey(oFF.SfxConstants.DATA_SOURCE_1).getStringByKey(oFF.SfxConstants.OBJECT_NAME_1);
						}
						if (oFF.notNull(name))
						{
							var tExtendedDimension = tExtendedDimensions.addNewStructure();
							tExtendedDimension.putString("Name", name);
							tExtendedDimension.putString("LocationType", locationType);
						}
					}
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processCustomVariableSettings = function(sCData, tModellerDefn)
{
	var i;
	var size;
	var variables = sCData.getListByKey(oFF.SfxConstants.VARIABLES);
	if (oFF.notNull(variables))
	{
		var optionList = oFF.PrFactory.createList();
		var rateData = sCData.getStructureByKey(oFF.SfxConstants.RATE_DATA);
		if (oFF.XCollectionUtils.hasElements(rateData))
		{
			var currencies = rateData.getListByKey(oFF.SfxConstants.CURRENCIES);
			if (oFF.XCollectionUtils.hasElements(currencies))
			{
				size = currencies.size();
				for (i = 0; i < size; i++)
				{
					var subStructure = optionList.addNewStructure();
					var name = currencies.getStringAt(i);
					subStructure.putString("Name", name);
					subStructure.putString("Text", name);
				}
			}
		}
		var variablesInA = tModellerDefn.putNewStructure("ModellerVariables").putNewList("Variables");
		size = variables.size();
		for (i = 0; i < size; i++)
		{
			var variable = variables.getStructureAt(i);
			var vType = variable.getStringByKey(oFF.SfxConstants.VARIABLE_TYPE);
			if (oFF.XString.isEqual(vType, oFF.SfxConstants.VARIABLE_TYPE_LOCAL))
			{
				var variableInA = variablesInA.addNewStructure();
				variableInA.putStringNotNullAndNotEmpty("Name", variable.getStringByKey(oFF.SfxConstants.VARIABLE));
				variableInA.putStringNotNullAndNotEmpty("Text", variable.getStringByKey(oFF.SfxConstants.DESCRIPTION));
				variableInA.putBoolean("CustomVariable", true);
				var mandatory = oFF.XString.isEqual(variable.getStringByKey(oFF.SfxConstants.VARIABLE_MANDATORY), "true") || variable.getBooleanByKeyExt(oFF.SfxConstants.VARIABLE_MANDATORY, false);
				variableInA.putString("InputType", mandatory ? "Mandatory" : "Optional");
				variableInA.putString("CType", "OptionListVariable");
				variableInA.putString("ProcessingType", variable.getStringByKey(oFF.SfxConstants.VARIABLE_PROCESSING_TYPE));
				var defaultValue = variable.getStringByKey(oFF.SfxConstants.DEFAULT_VALUE);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultValue))
				{
					variableInA.putNewList("OptionValues").addString(defaultValue);
				}
				variableInA.put("Options", oFF.PrFactory.createListDeepCopy(optionList));
			}
		}
		if (!oFF.XCollectionUtils.hasElements(variablesInA))
		{
			tModellerDefn.remove("ModellerVariables");
		}
	}
};
oFF.InADocConverterSfxRepo.prototype.newDocConverter = function(sourceType, targetType)
{
	return new oFF.InADocConverterSfxRepo();
};
oFF.InADocConverterSfxRepo.prototype.processJsonContent = function(application, content)
{
	var targetRoot = oFF.PrFactory.createStructure();
	var jsonContent = content.getJsonContent();
	if (oFF.isNull(jsonContent))
	{
		return targetRoot;
	}
	var sourceRoot = jsonContent.asStructure();
	var sData = sourceRoot.getStructureByKey(oFF.SfxConstants.DATA);
	if (oFF.isNull(sData))
	{
		return targetRoot;
	}
	var sCData = sData.getStructureByKey(oFF.SfxConstants.CDATA);
	if (oFF.isNull(sCData))
	{
		return targetRoot;
	}
	var sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	targetRoot.put("DataSource", sDataSource);
	var tModellerDefn = targetRoot.putNewStructure("ModellerDefinition");
	var isBlendedCube = sCData.getBooleanByKeyExt(oFF.SfxConstants.IS_BLENDED_CUBE, false);
	if (isBlendedCube)
	{
		return targetRoot;
	}
	var sDimensions = sCData.getListByKey(oFF.SfxConstants.DIMENSIONS);
	var isIntegratedMode = oFF.XString.isEqual(sCData.getStringByKey(oFF.SfxConstants.MODE), oFF.SfxConstants.INTEGRATED);
	var tModellerDimensions = tModellerDefn.putNewStructure("ModellerDimensions");
	var tDimensions = tModellerDimensions.putNewList("Dimensions");
	var accountDimension = null;
	var accountHierarchy = null;
	for (var i = 0; i < sDimensions.size(); i++)
	{
		var sDim = sDimensions.getStructureAt(i);
		var dimName = isIntegratedMode ? sDim.getStringByKey(oFF.SfxConstants.COLUMN_NAME) : sDim.getStringByKey(oFF.SfxConstants.DIMENSION_ID);
		var type = sDim.getStringByKey(oFF.SfxConstants.TYPE);
		var fiscalConfig = sDim.getStructureByKey(oFF.SfxConstants.FISCAL_CONFIG);
		var timeConfig = sDim.getStructureByKey(oFF.SfxConstants.TIME_CONFIG);
		var isUserManaged = sDim.getBooleanByKey(oFF.SfxConstants.IS_USER_MANAGED);
		var customizedDescription = application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_DIMENSION_CUSTOMIZED_DESC) ? sDim.getStringByKey(oFF.SfxConstants.CUSTOMIZED_DESCRIPTION) : null;
		var hasHiddenDim = application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_HIDDEN_DIMENSIONS) && sDim.getBooleanByKey(oFF.SfxConstants.IS_HIDDEN);
		var tDim = null;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dimName) && (oFF.XString.isEqual(type, "Account") || oFF.notNull(fiscalConfig) || hasHiddenDim || oFF.XStringUtils.isNotNullAndNotEmpty(customizedDescription)))
		{
			tDim = tDimensions.addNewStructure();
			tDim.putString("Name", dimName);
			tDim.putBoolean("IsDelta", true);
			tDim.putBoolean("IsUserManaged", isUserManaged);
			if (oFF.XString.isEqual(type, "Account"))
			{
				tDim.putString("CType", oFF.DimensionType.ACCOUNT.getName());
				tDim.putString("AccountTypeAttributeName", sDim.getStringByKey(oFF.SfxConstants.ACCOUNTTYPEATTRIBUTENAME));
				accountHierarchy = sDim.getStringByKey(oFF.SfxConstants.DEFAULT_HIERARCHY);
				accountDimension = tDim;
			}
			else
			{
				tDim.putString("CType", oFF.OlapComponentType.ABSTRACT_DIMENSION.getName());
			}
			if (oFF.notNull(fiscalConfig))
			{
				tDim.putBoolean("FiscalEnabled", fiscalConfig.getBooleanByKeyExt(oFF.SfxConstants.ENABLED, false));
				var monthShift = fiscalConfig.getByKey(oFF.SfxConstants.MONTH_SHIFT);
				if (oFF.notNull(monthShift) && monthShift.isNumeric())
				{
					tDim.putInteger("FiscalShift", oFF.XLong.convertToInt(fiscalConfig.getLongByKey(oFF.SfxConstants.MONTH_SHIFT)));
				}
				else
				{
					tDim.putInteger("FiscalShift", oFF.XInteger.convertFromStringWithDefault(fiscalConfig.getStringByKey(oFF.SfxConstants.MONTH_SHIFT), 0));
				}
				tDim.putString("FiscalDisplayPeriod", fiscalConfig.getStringByKey(oFF.SfxConstants.DISPLAY_PERIOD));
			}
			if (hasHiddenDim)
			{
				tDim.putBoolean("IsHidden", true);
			}
			if (oFF.XStringUtils.isNotNullAndNotEmpty(customizedDescription))
			{
				tDim.putString("Description", customizedDescription);
			}
		}
		if (oFF.notNull(timeConfig) && timeConfig.hasElements())
		{
			if (oFF.isNull(tDim))
			{
				tDim = tDimensions.addNewStructure();
			}
			var periodPrefixLabel = "";
			var additionalPeriods = timeConfig.getIntegerByKey(oFF.SfxConstants.ADDITIONAL_PERIODS);
			var periodPrefix = timeConfig.getStringByKey(oFF.SfxConstants.PERIOD_PREFIX);
			var usePrefix = timeConfig.getBooleanByKey(oFF.SfxConstants.USE_PREFIX);
			var timeConfigEnablePattern = timeConfig.getBooleanByKey(oFF.SfxConstants.ENABLE_PATTERN);
			if (usePrefix && oFF.XStringUtils.isNotNullAndNotEmpty(periodPrefix))
			{
				periodPrefixLabel = periodPrefix;
			}
			else if (!usePrefix && additionalPeriods === 0)
			{
				periodPrefixLabel = "";
			}
			else if (!usePrefix && additionalPeriods > 0)
			{
				periodPrefixLabel = "P";
			}
			tDim.putInteger("additionalPeriods", additionalPeriods);
			tDim.putBoolean("useMonthLabel", !usePrefix);
			tDim.putString("periodPrefix", periodPrefixLabel);
			tDim.putBoolean("TimeConfigEnablePattern", timeConfigEnablePattern);
		}
	}
	var capabilitySettings = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
	oFF.InADocConverterSfxRepo.processCurrencyTranslationSettings(sCData, tModellerDefn, capabilitySettings, oFF.notNull(accountDimension));
	oFF.InADocConverterSfxRepo.processCustomVariableSettings(sCData, tModellerDefn);
	var bSkipMemberAndThresholdProcessing = sourceRoot.getBooleanByKeyExt(oFF.SfxConstants.SKIP_MEMBER_AND_THRESHOLD_PROCESSING, false);
	if (!bSkipMemberAndThresholdProcessing)
	{
		oFF.InADocConverterSfxRepo.processAccountMembers(sCData, accountDimension, accountHierarchy, application);
		oFF.InADocConverterSfxRepo.processMeasures(sCData, tModellerDefn, accountDimension, application);
		oFF.InADocConverterSfxRepo.processThresholds(sCData, tModellerDefn, accountDimension, accountHierarchy);
	}
	oFF.InADocConverterSfxRepo.processMetadataProperties(sCData, tModellerDefn);
	oFF.InADocConverterSfxRepo.processExtendedDimensions(sCData, tModellerDefn);
	return targetRoot;
};
oFF.InADocConverterSfxRepo.prototype.convert = function(application, content, targetContentType)
{
	var messages = oFF.MessageManager.createMessageManagerExt(application.getSession());
	var tContent = oFF.XContent.createContent();
	tContent.setJsonObject(this.processJsonContent(application, content));
	tContent.setContentType(oFF.QModelFormat.INA_REPOSITORY);
	var extResult = oFF.ExtResult.create(tContent, messages);
	return extResult;
};

oFF.InADocConverterUqmRepo = function() {};
oFF.InADocConverterUqmRepo.prototype = new oFF.DocConverterFactory();
oFF.InADocConverterUqmRepo.prototype._ff_c = "InADocConverterUqmRepo";

oFF.InADocConverterUqmRepo.staticSetupInAConverter = function()
{
	oFF.DocConverterFactory.registerFactory(oFF.QModelFormat.UQM, oFF.QModelFormat.INA_REPOSITORY, new oFF.InADocConverterUqmRepo());
};
oFF.InADocConverterUqmRepo.prototype.newDocConverter = function(sourceType, targetType)
{
	return new oFF.InADocConverterUqmRepo();
};
oFF.InADocConverterUqmRepo.prototype.convert = function(application, content, targetContentType)
{
	var jsonContent = content.getJsonContent();
	var definitionAsStructure = jsonContent.asStructure();
	var messages = oFF.MessageManager.createMessageManagerExt(application.getSession());
	var dataSourceName = definitionAsStructure.getStringByKey("DataSourceName");
	var targetRoot = oFF.PrFactory.createStructure();
	if (oFF.notNull(dataSourceName))
	{
		var dataSource = oFF.QFactory.createDataSourceWithFqn(dataSourceName);
		var exporter = oFF.QInAExportFactory.createForData(application, null);
		var sDataSource = exporter.exportDataSource(dataSource, false);
		targetRoot.put("DataSource", sDataSource);
	}
	var tContent = oFF.XContent.createContent();
	tContent.setJsonObject(targetRoot);
	tContent.setContentType(oFF.QModelFormat.INA_REPOSITORY);
	var extResult = oFF.ExtResult.create(tContent, messages);
	return extResult;
};

oFF.InAFusion = function() {};
oFF.InAFusion.prototype = new oFF.QDocFusionFactory();
oFF.InAFusion.prototype._ff_c = "InAFusion";

oFF.InAFusion.staticSetup = function()
{
	oFF.QDocFusionFactory.registerFactory(new oFF.InAFusion());
};
oFF.InAFusion.prototype.m_application = null;
oFF.InAFusion.prototype.newDocFusion = function(application)
{
	var newObj = new oFF.InAFusion();
	newObj.setupApplicationContext(application);
	return newObj;
};
oFF.InAFusion.prototype.setupApplicationContext = function(application)
{
	this.m_application = application;
};
oFF.InAFusion.prototype.processFusion = function(syncType, listener, customIdentifier, config)
{
	var carrier = oFF.InAFusionResult.create(this.m_application, config);
	return oFF.InAFusionMainAction.createAndRun(syncType, listener, customIdentifier, carrier);
};

oFF.InAQMgrStartupBlending = function() {};
oFF.InAQMgrStartupBlending.prototype = new oFF.XObject();
oFF.InAQMgrStartupBlending.prototype._ff_c = "InAQMgrStartupBlending";

oFF.InAQMgrStartupBlending.create = function(syncAction)
{
	var newObject = new oFF.InAQMgrStartupBlending();
	newObject.m_syncAction = syncAction;
	newObject.m_executedQueryManagers = oFF.XList.create();
	newObject.m_metadataSerializationFunctions = oFF.XList.create();
	return newObject;
};
oFF.InAQMgrStartupBlending.prototype.m_syncAction = null;
oFF.InAQMgrStartupBlending.prototype.m_implicitBatchStarted = false;
oFF.InAQMgrStartupBlending.prototype.m_hasPreQueries = false;
oFF.InAQMgrStartupBlending.prototype.m_executedQueryManagers = null;
oFF.InAQMgrStartupBlending.prototype.m_metadataSerializationFunctions = null;
oFF.InAQMgrStartupBlending.prototype.m_blendingMgrFunctionSupplier = null;
oFF.InAQMgrStartupBlending.prototype.m_blendingMgrSyncType = null;
oFF.InAQMgrStartupBlending.prototype.m_mainSequence = null;
oFF.InAQMgrStartupBlending.prototype.releaseObject = function()
{
	this.m_syncAction = null;
	this.m_executedQueryManagers = oFF.XObjectExt.release(this.m_executedQueryManagers);
	this.m_metadataSerializationFunctions = oFF.XObjectExt.release(this.m_metadataSerializationFunctions);
	this.m_blendingMgrFunctionSupplier = null;
	this.m_blendingMgrSyncType = null;
	this.m_mainSequence = oFF.XObjectExt.release(this.m_mainSequence);
};
oFF.InAQMgrStartupBlending.prototype.prepare = function(syncType)
{
	var queryManager = this.m_syncAction.getQueryManager();
	var serviceConfig = queryManager.getServiceConfig();
	var blendingDefinition = serviceConfig.getBlendingDefinition();
	var blendingSources = blendingDefinition.getSources();
	if (blendingSources.isEmpty())
	{
		this.m_syncAction.addError(oFF.ErrorCodes.INVALID_STATE, "No blending sources set");
		return;
	}
	var blendingHost = blendingDefinition.getBlendingHost();
	if (oFF.isNull(blendingHost))
	{
		this.m_syncAction.addError(oFF.ErrorCodes.INVALID_STATE, "Could not find a suitable blending host");
		return;
	}
	serviceConfig.setSystemName(blendingHost.getSystemName());
	this.m_implicitBatchStarted = false;
	this.m_hasPreQueries = false;
	if (blendingDefinition.isRemoteBlending())
	{
		if (!this.executeRemoteQueries(syncType, blendingSources, blendingHost))
		{
			return;
		}
	}
	else
	{
		if (this.m_syncAction.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS))
		{
			for (var i = 0; i < blendingSources.size(); i++)
			{
				var leafQueryModel = blendingSources.get(i).getQueryModel();
				var filterAcrossModels = oFF.QFilterUtil.collectFilterAcrossModels(leafQueryModel);
				oFF.XCollectionUtils.forEach(filterAcrossModels,  function(filterAcrossModel){
					var action = filterAcrossModel.processLovQueriesExecution(leafQueryModel, syncType, null, null);
					if (oFF.notNull(action))
					{
						if (oFF.isNull(this.m_mainSequence))
						{
							this.m_mainSequence = oFF.SyncActionSequence.create(syncType, this, oFF.QueryManagerMode.BLENDING, this.m_syncAction);
						}
						this.m_mainSequence.addAction(action);
					}
				}.bind(this));
			}
		}
		if (oFF.isNull(this.m_mainSequence))
		{
			oFF.XCollectionUtils.forEach(blendingSources,  function(blendingSource){
				blendingSource.getQueryModel().generateTransientObjects();
			}.bind(this));
		}
	}
	var preQueries = this.getBlendingPreQueries(blendingSources);
	if (preQueries.hasElements())
	{
		var preQueryExecutor = queryManager.getPreQueryExecutor();
		if (!preQueryExecutor.serializeRemotePreQueries(oFF.SyncType.BLOCKING, blendingHost.getSystemName(), preQueries, null))
		{
			this.m_syncAction.addAllMessages(preQueryExecutor);
			return;
		}
		this.startImplicitBatchMode();
		this.executePreQueries(preQueries, blendingHost);
		this.m_hasPreQueries = true;
	}
};
oFF.InAQMgrStartupBlending.prototype.process = function(rpcFunctionSupplier, syncType)
{
	this.m_blendingMgrFunctionSupplier = rpcFunctionSupplier;
	this.m_blendingMgrSyncType = syncType;
	if (this.allQueriesExecuted())
	{
		if (this.m_syncAction.isValid())
		{
			this.executeBlendingQueryManagerCreation();
		}
		oFF.XObjectExt.release(this);
	}
};
oFF.InAQMgrStartupBlending.prototype.executeBlendingQueryManagerCreation = function()
{
	var blendingFunction = this.m_blendingMgrFunctionSupplier.createBlendingFunction();
	if (this.m_hasPreQueries)
	{
		if (oFF.notNull(this.m_mainSequence))
		{
			this.m_mainSequence.setMainAction(oFF.RpcBlendFunctionProcessExecutionAction.createAction(blendingFunction, this.m_syncAction.getQueryManager()));
			this.stopImplicitBatchMode(this.m_implicitBatchStarted, this.m_blendingMgrSyncType);
			this.m_mainSequence.processSyncAction(oFF.SyncType.NON_BLOCKING, this, oFF.QueryManagerMode.BLENDING);
		}
		else
		{
			blendingFunction.processFunctionExecution(oFF.SyncType.NON_BLOCKING, this.m_syncAction, oFF.QueryManagerMode.BLENDING);
			this.stopImplicitBatchMode(this.m_implicitBatchStarted, this.m_blendingMgrSyncType);
		}
	}
	else
	{
		blendingFunction.processFunctionExecution(this.m_blendingMgrSyncType, this.m_syncAction, oFF.QueryManagerMode.BLENDING);
	}
	var serviceConfig = this.m_syncAction.getQueryManager().getServiceConfig();
	var blendingSources = serviceConfig.getBlendingDefinition().getSources();
	for (var i = 0; i < blendingSources.size(); i++)
	{
		blendingSources.get(i).getQueryModel().destroyTransientObjects();
	}
};
oFF.InAQMgrStartupBlending.prototype.allQueriesExecuted = function()
{
	for (var i = 0; i < this.m_executedQueryManagers.size(); i++)
	{
		if (this.m_executedQueryManagers.get(i).getResultSetSyncState().isNotInSync())
		{
			return false;
		}
	}
	for (var k = 0; k < this.m_metadataSerializationFunctions.size(); k++)
	{
		if (this.m_metadataSerializationFunctions.get(k).getSyncState().isNotInSync())
		{
			return false;
		}
	}
	return true;
};
oFF.InAQMgrStartupBlending.prototype.executeRemoteQueries = function(syncType, blendingSources, blendingHost)
{
	for (var i = 0; i < blendingSources.size(); i++)
	{
		var source = blendingSources.get(i);
		var queryModel = source.getQueryModel();
		var queryManager = queryModel.getQueryManager();
		source.setIsRemoteSource(!oFF.XString.isEqual(blendingHost.getSystemName(), this.getSystemName(source)));
		if (!queryModel.getModelCapabilities().supportsRemoteBlending() || !blendingHost.supportsRemoteBlending())
		{
			oFF.noSupport();
		}
		if (source.isRemoteSource())
		{
			queryModel.getUniversalDisplayHierarchiesBase().updateIncludedDimensions();
			queryModel.generateTransientObjects();
			source.updatePersistenceIdentifier(blendingHost);
			queryModel.destroyTransientObjects();
			var olapEnv = queryManager.getOlapEnv();
			var cache = !blendingHost.getSystemDescription().isSystemMappingValid(queryManager.getSystemDescription()) ? olapEnv.getCachedRemoteBlendingData(queryManager.getResultSetPersistenceIdentifier()) : null;
			if (oFF.isNull(cache) || oFF.XStringUtils.isNullOrEmpty(cache.getView()))
			{
				if (source.isDelayCubeRequest() && queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA))
				{
					queryManager.setResultSetPersistenceTargetType(oFF.BlendingPersistenceType.VIEW);
					var serializationFunction = this.createHanaMetadataSerializationFunction(queryManager);
					this.m_metadataSerializationFunctions.add(serializationFunction);
					serializationFunction.processFunctionExecution(syncType, this, source);
				}
				else
				{
					this.m_executedQueryManagers.add(queryManager);
					queryManager.processQueryExecutionAsBlendingSource(syncType, source.isDelayCubeRequest() ? oFF.BlendingPersistenceType.VIEW : oFF.BlendingPersistenceType.ALL_DATA, this, source);
				}
			}
			else
			{
				queryManager.getActiveResultSetContainer().setSerializedData(cache.getView(), cache.getCube());
			}
		}
		else
		{
			queryModel.generateTransientObjects();
			if (queryModel.getModelCapabilities().supportsCubeCache())
			{
				source.updatePersistenceIdentifier(null);
				queryModel.addOptimizerHint(oFF.ExecutionEngine.MDS, oFF.OptimizerHint.CUBE_CACHE_WITH_ID.getName(), "true");
				this.m_executedQueryManagers.add(queryManager);
				queryManager.processQueryExecutionAsBlendingSource(syncType, oFF.BlendingPersistenceType.ALL_DATA, this, source);
			}
		}
	}
	return this.m_syncAction.isValid();
};
oFF.InAQMgrStartupBlending.prototype.onRemoteQueryExecuted = function(messageCollection, blendingSource)
{
	var queryModel = blendingSource.getQueryModel();
	queryModel.addQueryModelIdToMessages(messageCollection.getMessages());
	this.m_syncAction.addAllMessages(messageCollection);
	if (oFF.notNull(this.m_blendingMgrFunctionSupplier) && this.allQueriesExecuted())
	{
		if (this.m_syncAction.isValid())
		{
			this.executeBlendingQueryManagerCreation();
		}
		else
		{
			this.m_syncAction.callListeners(true);
		}
		oFF.XObjectExt.release(this);
	}
};
oFF.InAQMgrStartupBlending.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.onRemoteQueryExecuted(extResult, customIdentifier);
};
oFF.InAQMgrStartupBlending.prototype.createHanaMetadataSerializationFunction = function(queryManager)
{
	var inaRequestStructure = oFF.PrFactory.createStructure();
	var inaMetadata = queryManager.setInnerStructure(inaRequestStructure, "Metadata", null);
	inaMetadata.getStructureByKey("DataSource").remove("ValidationHash");
	var schema = queryManager.getResultSetPersistenceSchema();
	var table = queryManager.getResultSetPersistenceTable();
	var inaFeatureRequest = inaMetadata.putNewStructure("ResultSetFeatureRequest");
	inaFeatureRequest.putString("ResultFormat", "SerializedData");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(schema) && oFF.XStringUtils.isNotNullAndNotEmpty(table))
	{
		inaFeatureRequest.putString("ResultSetPersistanceSchema", schema);
		inaFeatureRequest.putString("ResultSetPersistanceTable", table);
		inaFeatureRequest.putString("ResultSetPersistanceIdentifier", queryManager.getResultSetPersistenceIdentifier());
	}
	var rpcFunction = queryManager.createFunction();
	rpcFunction.getRpcRequest().setRequestStructure(inaRequestStructure);
	return rpcFunction;
};
oFF.InAQMgrStartupBlending.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	var blendingSource = customIdentifier;
	var queryManager = blendingSource.getQueryModel().getQueryManager();
	var view = null;
	var cube = null;
	var serializedData = response.getRootElement().getStructureByKey("SerializedData");
	if (extResult.isValid() && oFF.notNull(serializedData))
	{
		view = serializedData.getStringByKey("View");
		cube = serializedData.getStringByKey("Cube");
		queryManager.getOlapEnv().cacheRemoteBlendingData(queryManager, view, cube);
	}
	queryManager.getActiveResultSetContainer().setSerializedData(view, cube);
	this.onRemoteQueryExecuted(extResult, blendingSource);
};
oFF.InAQMgrStartupBlending.prototype.getBlendingPreQueries = function(blendingSources)
{
	var preQueries = oFF.XList.create();
	for (var i = 0; i < blendingSources.size(); i++)
	{
		var source = blendingSources.get(i);
		var sourceModel = source.getQueryModel();
		if (!source.isRemoteSource() || source.isDelayCubeRequest())
		{
			preQueries.addAll(sourceModel.getPreQueries());
		}
		if (sourceModel.isBlendingModel())
		{
			preQueries.addAll(this.getBlendingPreQueries(sourceModel.getBlendingSources()));
		}
	}
	return preQueries;
};
oFF.InAQMgrStartupBlending.prototype.startImplicitBatchMode = function()
{
	var connectionPool = this.m_syncAction.getApplication().getConnectionPool();
	var systemName = this.m_syncAction.getQueryManager().getSystemName();
	if (connectionPool.isBatchModeEnabled(systemName))
	{
		this.m_implicitBatchStarted = false;
	}
	else
	{
		connectionPool.enableBatchMode(systemName);
		this.m_implicitBatchStarted = true;
	}
};
oFF.InAQMgrStartupBlending.prototype.stopImplicitBatchMode = function(implicitBatchStarted, syncType)
{
	if (implicitBatchStarted && this.m_syncAction.getQueryManagerBase().getPreQueryName() === null)
	{
		var connectionPool = this.m_syncAction.getApplication().getConnectionPool();
		var systemName = this.m_syncAction.getQueryManager().getSystemName();
		connectionPool.disableBatchMode(syncType, systemName);
	}
};
oFF.InAQMgrStartupBlending.prototype.executePreQueries = function(preQueries, blendingHost)
{
	for (var i = 0; i < preQueries.size(); i++)
	{
		var preQueryPair = preQueries.get(i);
		var preQueryManager = preQueryPair.getObject().getQueryManager();
		preQueryManager.getPreQueryExecutor().processExecutionAsPreQueryInBatch(blendingHost.getSystemName(), preQueryPair.getName(), null);
	}
};
oFF.InAQMgrStartupBlending.prototype.getSystemName = function(source)
{
	var queryManager = source.getQueryModel().getQueryManager();
	return queryManager.getSystemName();
};

oFF.XCmdCreateQueryManager = function() {};
oFF.XCmdCreateQueryManager.prototype = new oFF.XCommand();
oFF.XCmdCreateQueryManager.prototype._ff_c = "XCmdCreateQueryManager";

oFF.XCmdCreateQueryManager.CLAZZ = null;
oFF.XCmdCreateQueryManager.staticSetup = function()
{
	oFF.XCmdCreateQueryManager.CLAZZ = oFF.XClass.create(oFF.XCmdCreateQueryManager);
};
oFF.XCmdCreateQueryManager.prototype.getCommandResultClass = function()
{
	return oFF.XCmdCreateQueryManagerResult.CLAZZ;
};

oFF.XCmdCreateQueryManagerResult = function() {};
oFF.XCmdCreateQueryManagerResult.prototype = new oFF.XCommandResult();
oFF.XCmdCreateQueryManagerResult.prototype._ff_c = "XCmdCreateQueryManagerResult";

oFF.XCmdCreateQueryManagerResult.CLAZZ = null;
oFF.XCmdCreateQueryManagerResult.staticSetup = function()
{
	oFF.XCmdCreateQueryManagerResult.CLAZZ = oFF.XClass.create(oFF.XCmdCreateQueryManagerResult);
};
oFF.XCmdCreateQueryManagerResult.prototype.process = function()
{
	var application = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION);
	var system = this.getParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM);
	var dataSource = this.getParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE);
	var inaQueryModel = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY);
	var serviceConfig = oFF.QueryServiceConfig.create(application);
	serviceConfig.setSystemName(system);
	serviceConfig.setDataSource(this.createDataSource(dataSource, inaQueryModel, serviceConfig));
	var inaRepoContent = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_MODELLER_CONTENT_INA_REPOSITORY);
	if (oFF.notNull(inaRepoContent))
	{
		serviceConfig.setModellerContent(inaRepoContent);
	}
	if (oFF.notNull(inaQueryModel))
	{
		serviceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_REPOSITORY, inaQueryModel);
		var experimentalFeatures = inaQueryModel.getStringByKeyExt("ExperimentalFeatures", null);
		var capabilitiesToSwitch = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
		oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	}
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};
oFF.XCmdCreateQueryManagerResult.prototype.createDataSource = function(dataSourceName, inaQueryModel, queryServiceConfig)
{
	var dataSource = oFF.QFactory.createDataSource();
	dataSource.setFullQualifiedName(dataSourceName);
	if (oFF.notNull(inaQueryModel))
	{
		var inaDataSource = inaQueryModel.getStructureByKey("DataSource");
		if (oFF.notNull(inaDataSource))
		{
			var importer = oFF.QInAImportFactory.createForMetadata(queryServiceConfig.getApplication(), null);
			importer.importDataSourceExternalDimensions(inaDataSource, dataSource);
			var extendedDimensionsInfo = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_EXT_DIMS_INFO);
			oFF.XCommandUtil.updateExtendedDimensionPackages(dataSource.getExtendedDimensionsBase(), extendedDimensionsInfo);
		}
	}
	return dataSource;
};
oFF.XCmdCreateQueryManagerResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		this.addResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};

oFF.XCmdDeserializeBlending = function() {};
oFF.XCmdDeserializeBlending.prototype = new oFF.XCommand();
oFF.XCmdDeserializeBlending.prototype._ff_c = "XCmdDeserializeBlending";

oFF.XCmdDeserializeBlending.CLAZZ = null;
oFF.XCmdDeserializeBlending.staticSetup = function()
{
	oFF.XCmdDeserializeBlending.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlending);
};
oFF.XCmdDeserializeBlending.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeBlendingResult.CLAZZ;
};

oFF.XCmdDeserializeBlendingResultBase = function() {};
oFF.XCmdDeserializeBlendingResultBase.prototype = new oFF.XCommandResult();
oFF.XCmdDeserializeBlendingResultBase.prototype._ff_c = "XCmdDeserializeBlendingResultBase";

oFF.XCmdDeserializeBlendingResultBase.prototype.m_queryManagers = null;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_aliases = null;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_sourceCount = 0;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_importedSourcesCount = 0;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_rootElement = null;
oFF.XCmdDeserializeBlendingResultBase.prototype.releaseObject = function()
{
	oFF.XCommandResult.prototype.releaseObject.call( this );
	this.m_queryManagers = oFF.XObjectExt.release(this.m_queryManagers);
	this.m_aliases = oFF.XObjectExt.release(this.m_aliases);
	this.m_rootElement = oFF.XObjectExt.release(this.m_rootElement);
};
oFF.XCmdDeserializeBlendingResultBase.prototype.process = function()
{
	var strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
	var application = this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION);
	var jsonParser = oFF.JsonParserFactory.newInstance();
	this.m_rootElement = jsonParser.parse(strQueryModel);
	oFF.XObjectExt.release(jsonParser);
	var inaDataSource = this.m_rootElement.getStructureByKey("DataSource");
	var inaSources = inaDataSource.getListByKey("Sources");
	this.m_aliases = oFF.XListOfString.create();
	this.m_queryManagers = oFF.XList.create();
	this.m_sourceCount = inaSources.size();
	this.m_importedSourcesCount = 0;
	for (var i = 0; i < this.m_sourceCount; i++)
	{
		var inaSource = inaSources.getStructureAt(i);
		var alias = inaSource.getStringByKey("AliasName");
		this.m_aliases.add(alias);
		this.importSourceQueryModel(application, inaSource, alias, oFF.XIntegerValue.create(i));
	}
};
oFF.XCmdDeserializeBlendingResultBase.prototype.onCommandProcessed = function(extResult, commandResult, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	oFF.MessageUtil.checkNoError(extResult);
	this.onQueryManagerImported(commandResult, customIdentifier.getInteger());
	this.m_importedSourcesCount++;
	if (this.m_importedSourcesCount === this.m_sourceCount)
	{
		this.onAllQueryManagersImported();
	}
};
oFF.XCmdDeserializeBlendingResultBase.prototype.getDataSourceName = function(inaDataSource)
{
	var dataSource = oFF.QFactory.createDataSource();
	dataSource.setType(oFF.MetaObjectType.lookup(inaDataSource.getStringByKey("Type")));
	dataSource.setSchemaName(inaDataSource.getStringByKey("SchemaName"));
	dataSource.setPackageName(inaDataSource.getStringByKey("PackageName"));
	dataSource.setObjectName(inaDataSource.getStringByKey("ObjectName"));
	dataSource.setDataArea(inaDataSource.getStringByKey("DataArea"));
	return dataSource.getFullQualifiedName();
};
oFF.XCmdDeserializeBlendingResultBase.prototype.getSystemName = function(queryAlias)
{
	var systems = this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS);
	if (oFF.notNull(systems) && systems.containsKey(queryAlias))
	{
		return systems.getByKey(queryAlias);
	}
	var system = this.getParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM);
	if (oFF.notNull(system))
	{
		return system;
	}
	throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("No system found for query ", queryAlias, ". Either parameter PARAM_I_SYSTEMS or PARAM_I_SYSTEM must be set."));
};

oFF.XCmdDeserializeBlendingSources = function() {};
oFF.XCmdDeserializeBlendingSources.prototype = new oFF.XCommand();
oFF.XCmdDeserializeBlendingSources.prototype._ff_c = "XCmdDeserializeBlendingSources";

oFF.XCmdDeserializeBlendingSources.CLAZZ = null;
oFF.XCmdDeserializeBlendingSources.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingSources.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingSources);
};
oFF.XCmdDeserializeBlendingSources.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeBlendingSourcesResult.CLAZZ;
};

oFF.XCmdDeserializeCalculatedDimension = function() {};
oFF.XCmdDeserializeCalculatedDimension.prototype = new oFF.XCommand();
oFF.XCmdDeserializeCalculatedDimension.prototype._ff_c = "XCmdDeserializeCalculatedDimension";

oFF.XCmdDeserializeCalculatedDimension.CLAZZ = null;
oFF.XCmdDeserializeCalculatedDimension.staticSetup = function()
{
	oFF.XCmdDeserializeCalculatedDimension.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeCalculatedDimension);
};
oFF.XCmdDeserializeCalculatedDimension.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeCalculatedDimensionResult.CLAZZ;
};

oFF.XCmdDeserializeCalculatedDimensionResult = function() {};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype = new oFF.XCommandResult();
oFF.XCmdDeserializeCalculatedDimensionResult.prototype._ff_c = "XCmdDeserializeCalculatedDimensionResult";

oFF.XCmdDeserializeCalculatedDimensionResult.CLAZZ = null;
oFF.XCmdDeserializeCalculatedDimensionResult.staticSetup = function()
{
	oFF.XCmdDeserializeCalculatedDimensionResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeCalculatedDimensionResult);
};
oFF.XCmdDeserializeCalculatedDimensionResult.getDataSourceName = function(inaDataSource)
{
	var dataSourceName = oFF.XStringBuffer.create();
	dataSourceName.append(inaDataSource.getStringByKey("Type"));
	dataSourceName.append(":[");
	dataSourceName.append(inaDataSource.getStringByKey("SchemaName"));
	dataSourceName.append("][");
	dataSourceName.append(inaDataSource.getStringByKey("PackageName"));
	dataSourceName.append("][");
	dataSourceName.append(inaDataSource.getStringByKey("ObjectName"));
	dataSourceName.append("]");
	return dataSourceName.toString();
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.m_inaQueryModels = null;
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.m_systemName = null;
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.m_application = null;
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.releaseObject = function()
{
	this.m_inaQueryModels = null;
	this.m_systemName = null;
	this.m_application = null;
	oFF.XCommandResult.prototype.releaseObject.call( this );
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.process = function()
{
	var strQueryModels = this.getParameterStringStrict(oFF.CmdDeserializeCalculatedDimension.PARAM_I_QUERY_MODELS_STRING_INA_REPOSITORY);
	var jsonParser = oFF.JsonParserFactory.newInstance();
	var rootElement = jsonParser.parse(strQueryModels);
	oFF.XObjectExt.release(jsonParser);
	this.m_inaQueryModels = rootElement.getListByKey("Queries");
	this.m_application = this.getParameterStrict(oFF.CmdDeserializeCalculatedDimension.PARAM_I_APPLICATION);
	this.m_systemName = this.getParameterStringStrict(oFF.CmdDeserializeCalculatedDimension.PARAM_I_SYSTEM);
	var inaMainQuery = this.m_inaQueryModels.getStructureAt(this.m_inaQueryModels.size() - 1);
	this.importQueryModel(inaMainQuery, null);
	this.onProcessFinished();
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.importQueryModel = function(inaQueryModel, consumingQuery)
{
	var serviceConfig = oFF.QueryServiceConfig.createWithDataSourceName(this.m_application, this.m_systemName, oFF.XCmdDeserializeCalculatedDimensionResult.getDataSourceName(inaQueryModel.getStructureByKey("DataSource")));
	serviceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_REPOSITORY, inaQueryModel);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, consumingQuery);
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		if (oFF.notNull(customIdentifier))
		{
			var queryPair = customIdentifier;
			queryPair.getObject().getQueryModel().addPreQueryWithName(queryManager.getQueryModel(), queryPair.getName());
		}
		var preQueryNames = queryManager.getInitSettings().getDefinitionAsStructure().getListByKey("PreQueryNames");
		if (oFF.notNull(preQueryNames))
		{
			var sizeNames = preQueryNames.size();
			var sizePreQueries = this.m_inaQueryModels.size() - 1;
			for (var idxPreQueryName = 0; idxPreQueryName < sizeNames; idxPreQueryName++)
			{
				var preQueryName = preQueryNames.getStringAt(idxPreQueryName);
				for (var idxPreQuery = 0; idxPreQuery < sizePreQueries; idxPreQuery++)
				{
					var inaPreQuery = this.m_inaQueryModels.getStructureAt(idxPreQuery);
					if (oFF.XString.isEqual(preQueryName, inaPreQuery.getStringByKey("Name")))
					{
						this.importQueryModel(inaPreQuery, oFF.XNameWeakGenericPair.create(preQueryName, queryManager));
					}
				}
			}
		}
	}
	if (oFF.isNull(customIdentifier))
	{
		this.addResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER, queryManager);
	}
};

oFF.XCmdDeserializeExtendedDimension = function() {};
oFF.XCmdDeserializeExtendedDimension.prototype = new oFF.XCommand();
oFF.XCmdDeserializeExtendedDimension.prototype._ff_c = "XCmdDeserializeExtendedDimension";

oFF.XCmdDeserializeExtendedDimension.CLAZZ = null;
oFF.XCmdDeserializeExtendedDimension.staticSetup = function()
{
	oFF.XCmdDeserializeExtendedDimension.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeExtendedDimension);
};
oFF.XCmdDeserializeExtendedDimension.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeExtendedDimensionResult.CLAZZ;
};

oFF.XCmdDeserializeExtendedDimensionResult = function() {};
oFF.XCmdDeserializeExtendedDimensionResult.prototype = new oFF.XCommandResult();
oFF.XCmdDeserializeExtendedDimensionResult.prototype._ff_c = "XCmdDeserializeExtendedDimensionResult";

oFF.XCmdDeserializeExtendedDimensionResult.CLAZZ = null;
oFF.XCmdDeserializeExtendedDimensionResult.staticSetup = function()
{
	oFF.XCmdDeserializeExtendedDimensionResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeExtendedDimensionResult);
};
oFF.XCmdDeserializeExtendedDimensionResult.prototype.process = function()
{
	var strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeExtendedDimension.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
	var jsonParser = oFF.JsonParserFactory.newInstance();
	var rootElement = jsonParser.parse(strQueryModel);
	oFF.XObjectExt.release(jsonParser);
	var inaDataSource = rootElement.getStructureByKey("DataSource");
	var queryModel = this.getParameterStrict(oFF.CmdDeserializeExtendedDimension.PARAM_I_QUERY_MODEL);
	var dataSource = queryModel.getDataSource().cloneOlapComponent(null, null);
	var importer = oFF.QInAImportFactory.createForRepository(queryModel.getApplication(), null);
	importer.importDataSourceExternalDimensions(inaDataSource, dataSource);
	var extendedDimensionsInfo = this.getParameter(oFF.CmdDeserializeExtendedDimension.PARAM_I_EXT_DIMS_INFO);
	oFF.XCommandUtil.updateExtendedDimensionPackages(dataSource.getExtendedDimensionsBase(), extendedDimensionsInfo);
	var serviceConfig = oFF.QueryServiceConfig.createWithDataSource(queryModel.getApplication(), dataSource.getSystemName(), dataSource);
	var experimentalFeatures = rootElement.getStringByKeyExt("ExperimentalFeatures", null);
	var capabilitiesToSwitch = this.getParameter(oFF.CmdDeserializeExtendedDimension.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
	oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};
oFF.XCmdDeserializeExtendedDimensionResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		var strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
		var deserializeExt = queryManager.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, strQueryModel);
		this.getMessageManager().addAllMessages(deserializeExt);
		this.addResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};

oFF.QCsnComponentMetadata = function() {};
oFF.QCsnComponentMetadata.prototype = new oFF.QInAComponentWithStructure();
oFF.QCsnComponentMetadata.prototype._ff_c = "QCsnComponentMetadata";

oFF.QCsnComponentMetadata.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.CSN_METADATA;
};
oFF.QCsnComponentMetadata.prototype.getDimExternalName = function(dimension)
{
	var externalName = dimension.getExternalName();
	return oFF.XStringUtils.isNotNullAndNotEmpty(externalName) ? externalName : dimension.getName();
};
oFF.QCsnComponentMetadata.prototype.getFieldName = function(field)
{
	var name = field.getName();
	var dimensionName = field.getDimension().getName();
	if (oFF.XString.startsWith(name, dimensionName))
	{
		name = oFF.XString.substring(name, oFF.XString.size(dimensionName) + 1, oFF.XString.size(name));
	}
	return name;
};

oFF.QRsInfoExport = function() {};
oFF.QRsInfoExport.prototype = new oFF.XObjectExt();
oFF.QRsInfoExport.prototype._ff_c = "QRsInfoExport";

oFF.QRsInfoExport.prototype.setupImportExport = function(application, mode, capabilities, memberReadModeContext) {};
oFF.QRsInfoExport.prototype.exportComponent = function(componentType, modelComponent, inaParentStructure, flags)
{
	var rsiRoot = oFF.PrFactory.createStructure();
	var modelComponentType = modelComponent.getComponentType();
	if (modelComponentType === oFF.OlapComponentType.QUERY_MODEL)
	{
		var queryModel = modelComponent;
		var rsiDimensions = rsiRoot.putNewStructure(oFF.RenderConstants.DIMENSIONS);
		var rsiAxes = rsiRoot.putNewStructure(oFF.RenderConstants.AXES);
		var rowsAxis = queryModel.getRowsAxis();
		this.exportAxis(rowsAxis, rsiDimensions, rsiAxes);
		var colsAxis = queryModel.getColumnsAxis();
		this.exportAxis(colsAxis, rsiDimensions, rsiAxes);
	}
	return rsiRoot;
};
oFF.QRsInfoExport.prototype.exportAxis = function(axis, rsiDimensions, rsiAxes)
{
	var rsiRows = rsiAxes.putNewStructure(axis.getName());
	var rsiAxisLayout = rsiRows.putNewList(oFF.RenderConstants.LAYOUT);
	for (var i = 0; i < axis.size(); i++)
	{
		var rsiDimLayout = rsiAxisLayout.addNewStructure();
		var dimension = axis.get(i);
		rsiDimLayout.putString(oFF.RenderConstants.DIMENSION_NAME, dimension.getName());
		var rsiDimension = rsiDimensions.putNewStructure(dimension.getName());
		var allMembers = dimension.getLoadedStructureMembers();
		rsiDimension.putString(oFF.RenderConstants.NAME, dimension.getName());
		rsiDimension.putString(oFF.RenderConstants.TEXT, dimension.getText());
		if (oFF.notNull(allMembers))
		{
			var rsiMembers = rsiDimension.putNewStructure(oFF.RenderConstants.MEMBERS);
			for (var k = 0; k < allMembers.size(); k++)
			{
				var member = allMembers.get(k);
				if (oFF.notNull(member))
				{
					var rsiMember = rsiMembers.putNewStructure(member.getName());
					rsiMember.putString(oFF.RenderConstants.NAME, member.getName());
					rsiMember.putString(oFF.RenderConstants.ALIAS_NAME, member.getAliasName());
					rsiMember.putString(oFF.RenderConstants.TEXT, member.getAliasName());
				}
			}
		}
	}
};
oFF.QRsInfoExport.prototype.exportMemberHelpRequest = function(queryModel, dimension)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportPlanningVariableHelpRequest = function(planningOperation, dimension, variable)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportVariableHelpRequest = function(queryModel, dimension, variable)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportDataSource = function(datasource, withRunAsUser)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportQueryModel = function(queryModel, withVariables, withDataSource)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportLovRequest = function(queryModel, withVariables, withDataSource, lovProcessConfig)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportVariables = function(variableContainer, parentStructure)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportVariableList = function(variableContainer)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportStructureDimension = function(structureDimension)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportBlendingMappings = function(mappings)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportHierarchy = function(dimension, inaParentStructure) {};

oFF.QInAComponentMetadata = function() {};
oFF.QInAComponentMetadata.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAComponentMetadata.prototype._ff_c = "QInAComponentMetadata";

oFF.QInAComponentMetadata.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_METADATA_CORE;
};
oFF.QInAComponentMetadata.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	var olapComponentType = this.getComponentType();
	var ctypeValue = oFF.QInAConverter.lookupComponentTypeInA(olapComponentType);
	if (oFF.notNull(ctypeValue))
	{
		inaStructure.putString("CType", ctypeValue);
	}
	return inaStructure;
};

oFF.QInAAttribute = function() {};
oFF.QInAAttribute.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAAttribute.prototype._ff_c = "QInAAttribute";

oFF.QInAAttribute.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE;
};
oFF.QInAAttribute.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = parentComponent;
	var name = inaStructure.getStringByKey("Name");
	var attribute = dimension.getAttributeByName(name);
	if (oFF.notNull(attribute))
	{
		var inaResultSetFields = inaStructure.getListByKey("ResultSetFields");
		if (oFF.notNull(inaResultSetFields))
		{
			var resultSetFields = attribute.getResultSetFields();
			resultSetFields.clear();
			var len = inaResultSetFields.size();
			for (var i = 0; i < len; i++)
			{
				var field = attribute.getFieldByName(inaResultSetFields.getStringAt(i));
				if (oFF.notNull(field))
				{
					resultSetFields.add(field);
				}
			}
		}
	}
	return attribute;
};
oFF.QInAAttribute.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var attribute = modelComponent;
	inaStructure.putString("Name", attribute.getName());
	var inaResultSetFields = inaStructure.putNewList("ResultSetFields");
	var resultSetFields = attribute.getResultSetFields();
	var len = resultSetFields.size();
	for (var i = 0; i < len; i++)
	{
		inaResultSetFields.addString(resultSetFields.get(i).getName());
	}
	return inaStructure;
};

oFF.QInAAxesSettings = function() {};
oFF.QInAAxesSettings.prototype = new oFF.QInAComponentWithList();
oFF.QInAAxesSettings.prototype._ff_c = "QInAAxesSettings";

oFF.QInAAxesSettings.isDefinedZeroSuppression = function(axis)
{
	return oFF.notNull(axis) && oFF.XCollectionUtils.hasElements(axis) && axis.getZeroSuppressionType() !== oFF.ZeroSuppressionType.NONE;
};
oFF.QInAAxesSettings.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXES_SETTINGS;
};
oFF.QInAAxesSettings.prototype.getTagName = function()
{
	return "Axes";
};
oFF.QInAAxesSettings.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var queryModel = context.getQueryModel();
	if (oFF.notNull(inaList))
	{
		if (importer.capabilities.supportsZeroSuppression() || importer.capabilities.supportsNullZeroSuppression())
		{
			var all = oFF.AxisType.getAll();
			var allSize = all.size();
			for (var k = 0; k < allSize; k++)
			{
				var axis = queryModel.getAxisBase(all.get(k));
				if (oFF.notNull(axis))
				{
					axis.setSupportsZeroSuppression(true);
				}
			}
		}
		var len = inaList.size();
		for (var i = 0; i < len; i++)
		{
			importer.importAxis(inaList.getStructureAt(i), null, context);
		}
	}
	else if (importer.capabilities.supportsNullZeroSuppression())
	{
		this.initializeAxisForNullSuppression(queryModel.getAxisBase(oFF.AxisType.ROWS));
		this.initializeAxisForNullSuppression(queryModel.getAxisBase(oFF.AxisType.COLUMNS));
	}
	return null;
};
oFF.QInAAxesSettings.prototype.initializeAxisForNullSuppression = function(axis)
{
	axis.setSupportsZeroSuppression(true);
	axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_ZERO);
	axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_NULL);
};
oFF.QInAAxesSettings.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var queryModel = modelComponent;
	var inaAxisStructureList = oFF.PrFactory.createList();
	var columnsAxis = queryModel.getColumnsAxis();
	if (exporter.isAbap(queryModel) || oFF.QInAAxesSettings.isDefinedZeroSuppression(columnsAxis))
	{
		var inaColumns = exporter.exportAxis(columnsAxis, null);
		inaAxisStructureList.add(inaColumns);
	}
	var rowsAxis = queryModel.getRowsAxis();
	if (exporter.isAbap(queryModel) || oFF.QInAAxesSettings.isDefinedZeroSuppression(rowsAxis))
	{
		var inaRows = exporter.exportAxis(rowsAxis, null);
		inaAxisStructureList.add(inaRows);
	}
	return inaAxisStructureList;
};

oFF.QInAAxis = function() {};
oFF.QInAAxis.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAAxis.prototype._ff_c = "QInAAxis";

oFF.QInAAxis.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXIS;
};
oFF.QInAAxis.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var supportsZeroSuppression = importer.capabilities.supportsZeroSuppression();
	var supportsNullZeroSuppression = importer.capabilities.supportsNullZeroSuppression();
	var axisType;
	var axisTypeValue = inaStructure.getStringByKey("Axis");
	if (oFF.isNull(axisTypeValue))
	{
		axisType = oFF.QInAConverter.lookupAxisTypeInt(inaStructure.getIntegerByKey("Type"));
	}
	else
	{
		axisType = oFF.QInAConverter.lookupAxisType(axisTypeValue);
	}
	var queryModel = context.getQueryModel();
	var axis = queryModel.getAxisBase(axisType);
	if (oFF.notNull(axis))
	{
		if (supportsZeroSuppression || supportsNullZeroSuppression)
		{
			var valueType = inaStructure.getIntegerByKey("ZeroSuppressionType");
			var zeroSuppressionType = oFF.QInAConverter.lookupSuppressionType(valueType);
			axis.setZeroSuppressionType(zeroSuppressionType);
			axis.setDefaultZeroSuppression(zeroSuppressionType);
			axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_ZERO);
		}
		if (supportsZeroSuppression)
		{
			axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.TOTAL_IS_ZERO);
		}
		else if (supportsNullZeroSuppression)
		{
			axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_NULL);
		}
		importer.importTotals(inaStructure, axis.getResultStructureControllerBase(), context);
	}
	return axis;
};
oFF.QInAAxis.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var axis = modelComponent;
	var axisType = axis.getType();
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(axisType));
	inaStructure.putInteger("Type", oFF.QInAConverter.lookupAxisTypeInAInt(axisType));
	var typeZeroSuppression = axis.getZeroSuppressionType();
	inaStructure.putInteger("ZeroSuppressionType", oFF.QInAConverter.lookupSuppressionTypeInA(typeZeroSuppression));
	exporter.exportTotals(axis.getResultStructureController(), inaStructure);
	return inaStructure;
};

oFF.QInAConditionManager = function() {};
oFF.QInAConditionManager.prototype = new oFF.QInAComponentWithList();
oFF.QInAConditionManager.prototype._ff_c = "QInAConditionManager";

oFF.QInAConditionManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_MANAGER;
};
oFF.QInAConditionManager.prototype.getTagName = function()
{
	return "Conditions";
};
oFF.QInAConditionManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		var queryModelBase = context.getQueryModel();
		var queryManager = queryModelBase.getQueryManagerBase();
		var isAutoSubmitUpdate = oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive() && (queryManager.getVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || queryManager.getVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT);
		if (!isAutoSubmitUpdate)
		{
			conditionManager.clear();
		}
		if (oFF.notNull(inaList))
		{
			var len = inaList.size();
			for (var i = 0; i < len; i++)
			{
				var inaCurrentCondition = inaList.getStructureAt(i);
				if (isAutoSubmitUpdate)
				{
					var conditionName = inaCurrentCondition.getStringByKey("Name");
					var existingCondition = conditionManager.getByKey(conditionName);
					importer.importCondition(queryModelBase, inaCurrentCondition, existingCondition);
				}
				else
				{
					var currentCondition = importer.importCondition(queryModelBase, inaCurrentCondition, null);
					conditionManager.add(currentCondition);
				}
			}
		}
	}
	return conditionManager;
};
oFF.QInAConditionManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		var conditions;
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			conditions = conditionManager.getEffectiveConditions();
		}
		else
		{
			conditions = conditionManager;
		}
		var len = conditions.size();
		if (len > 0)
		{
			var inaConditionsList = oFF.PrFactory.createList();
			for (var i = 0; i < len; i++)
			{
				var condition = exporter.exportCondition(conditions.get(i));
				if (oFF.notNull(condition) && !condition.isEmpty())
				{
					inaConditionsList.add(condition);
				}
			}
			if (inaConditionsList.isEmpty())
			{
				return null;
			}
			return inaConditionsList;
		}
	}
	return null;
};

oFF.QInAConditionsCondition = function() {};
oFF.QInAConditionsCondition.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAConditionsCondition.prototype._ff_c = "QInAConditionsCondition";

oFF.QInAConditionsCondition.exportBreakGroupDimensionList = function(condition)
{
	if (oFF.isNull(condition))
	{
		return null;
	}
	var inaBreakGroupDimensionList = oFF.PrFactory.createList();
	var breakGroupDimensions = condition.getBreakGroupDimensions();
	var len = breakGroupDimensions.size();
	for (var i = 0; i < len; i++)
	{
		inaBreakGroupDimensionList.addString(breakGroupDimensions.get(i).getName());
	}
	return inaBreakGroupDimensionList;
};
oFF.QInAConditionsCondition.exportEvaluateOnDimensionsList = function(condition)
{
	if (oFF.isNull(condition))
	{
		return null;
	}
	var inaEvaluationDimensionList = oFF.PrFactory.createList();
	var evaluationDimensions = condition.getEvaluationDimensions();
	var len = evaluationDimensions.size();
	for (var i = 0; i < len; i++)
	{
		inaEvaluationDimensionList.addString(evaluationDimensions.get(i).getName());
	}
	return inaEvaluationDimensionList;
};
oFF.QInAConditionsCondition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITION;
};
oFF.QInAConditionsCondition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return modelComponent;
	}
	var newCondition;
	var inACondName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(modelComponent))
	{
		if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY)
		{
			var isBackendCondition = inaStructure.getBooleanByKeyExt("IsBackendCondition", true);
			newCondition = oFF.QCondition.create(context, parentComponent, inACondName, isBackendCondition);
		}
		else
		{
			newCondition = oFF.QCondition.create(context, parentComponent, inACondName, true);
		}
	}
	else
	{
		newCondition = modelComponent;
		newCondition.clearThresholds();
		newCondition.clearEvaluationDimensions();
	}
	newCondition.setActive(inaStructure.getBooleanByKey("Active"));
	newCondition.setUsedState(inaStructure.getStringByKey("IsUsed"));
	newCondition.setDescription(inaStructure.getStringByKey("Description"));
	var onDisabled = inaStructure.getStringByKey("OnDisabled");
	newCondition.setApplyConditionAfterVisibilityFilter(inaStructure.getBooleanByKeyExt("AfterVisibilityFilter", false));
	if (oFF.notNull(onDisabled))
	{
		if (oFF.XString.isEqual(onDisabled, "Error"))
		{
			newCondition.setOnDisabledToWarning(false);
		}
	}
	var inAEvaluateOnDimensionTypeString = inaStructure.getStringByKey("EvaluateOnDimensions");
	var conditionDimensionEvaluationType = oFF.ConditionDimensionEvaluationType.lookupName(inAEvaluateOnDimensionTypeString);
	if (oFF.notNull(conditionDimensionEvaluationType))
	{
		newCondition.setDimensionEvaluationType(conditionDimensionEvaluationType);
	}
	var queryModel = context.getQueryModel();
	var inADimensionList = inaStructure.getListByKey("EvaluateOnDimensionsList");
	var dimSize;
	var idxDim;
	if (!oFF.PrUtils.isListEmpty(inADimensionList) && oFF.notNull(queryModel))
	{
		dimSize = inADimensionList.size();
		for (idxDim = 0; idxDim < dimSize; idxDim++)
		{
			var inACurrentDimensionName = inADimensionList.getStringAt(idxDim);
			if (oFF.notNull(inACurrentDimensionName))
			{
				var currentDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentDimensionName);
				if (oFF.notNull(currentDimension))
				{
					newCondition.addEvaluationDimension(currentDimension);
				}
			}
		}
	}
	var inAThresholds = inaStructure.getListByKey("Threshold");
	if (!oFF.PrUtils.isListEmpty(inAThresholds))
	{
		var thresholdSize = inAThresholds.size();
		for (var idxThreshold = 0; idxThreshold < thresholdSize; idxThreshold++)
		{
			var inACurrentThreshold = inAThresholds.getStructureAt(idxThreshold);
			if (oFF.notNull(inACurrentThreshold))
			{
				newCondition.addThreshold(importer.importConditionThreshold(queryModel, inACurrentThreshold, null, newCondition));
			}
		}
	}
	newCondition.setBreakGroup(inaStructure.getBooleanByKeyExt("BreakGroup", false));
	var inABreakDimensionList = inaStructure.getListByKey("BreakGroupList");
	if (!oFF.PrUtils.isListEmpty(inABreakDimensionList) && oFF.notNull(queryModel))
	{
		dimSize = inABreakDimensionList.size();
		for (idxDim = 0; idxDim < dimSize; idxDim++)
		{
			var inACurrentBreakDimensionName = inABreakDimensionList.getStringAt(idxDim);
			if (oFF.notNull(inACurrentBreakDimensionName))
			{
				var currentBreakDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentBreakDimensionName);
				if (oFF.notNull(currentBreakDimension))
				{
					newCondition.addBreakGroupDimension(currentBreakDimension);
				}
			}
		}
	}
	return newCondition;
};
oFF.QInAConditionsCondition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var condition = modelComponent;
	var queryModel = condition.getQueryModel();
	var isMds = queryModel.getSystemType().isTypeOf(oFF.SystemType.HANA);
	if (exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY)
	{
		inaStructure.putBoolean("IsBackendCondition", condition.isBackendCondition());
	}
	inaStructure.putBoolean("Active", condition.isActive());
	if (condition.isApplyingConditionAfterVisibilityFilter())
	{
		inaStructure.putBoolean("AfterVisibilityFilter", true);
	}
	if (isMds)
	{
		inaStructure.putStringNotNullAndNotEmpty("Description", condition.getDescription());
	}
	else
	{
		inaStructure.putString("Description", condition.getDescription());
	}
	inaStructure.putString("Name", condition.getName());
	var dimensionEvaluationType = condition.getDimensionEvaluationType();
	inaStructure.putString("EvaluateOnDimensions", dimensionEvaluationType.getName());
	if (dimensionEvaluationType === oFF.ConditionDimensionEvaluationType.GIVEN_LIST)
	{
		var exportEvaluateOnDimensionsList = oFF.QInAConditionsCondition.exportEvaluateOnDimensionsList(condition);
		inaStructure.put("EvaluateOnDimensionsList", exportEvaluateOnDimensionsList);
	}
	var thresholds = condition.getThresholds();
	var thresholdSize = thresholds.size();
	if (thresholdSize > 0)
	{
		var inAThresholdList = oFF.PrFactory.createList();
		for (var i = 0; i < thresholdSize; i++)
		{
			var currentInAThreshold = exporter.exportConditionThreshold(thresholds.get(i));
			if (oFF.notNull(currentInAThreshold))
			{
				inAThresholdList.add(currentInAThreshold);
			}
		}
		if (!inAThresholdList.isEmpty())
		{
			inaStructure.put("Threshold", inAThresholdList);
		}
		else
		{
			return null;
		}
	}
	if (isMds)
	{
		if (oFF.XCollectionUtils.hasElements(queryModel.getPreQueries()) && !condition.getOnDisabledToWarning())
		{
			inaStructure.putString("OnDisabled", "Error");
		}
		var isGroupBreaking = condition.isBreakGroup();
		if (isGroupBreaking)
		{
			inaStructure.putBoolean("BreakGroup", true);
			var exportBreakGroupDimensionList = oFF.QInAConditionsCondition.exportBreakGroupDimensionList(condition);
			inaStructure.put("BreakGroupList", exportBreakGroupDimensionList);
		}
		if (condition.isBreakHierarchy())
		{
			inaStructure.putBoolean("BreakHierarchy", true);
		}
	}
	return inaStructure;
};

oFF.QInAConditionsThreshold = function() {};
oFF.QInAConditionsThreshold.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAConditionsThreshold.prototype._ff_c = "QInAConditionsThreshold";

oFF.QInAConditionsThreshold.importSingleMeasureCoordinate = function(queryModelBase, threshold, measureCoordinate)
{
	if (oFF.isNull(threshold) || oFF.isNull(measureCoordinate))
	{
		return;
	}
	var inADimensionName = measureCoordinate.getStringByKey("DimensionName");
	var inAMemberName = measureCoordinate.getStringByKey("MemberName");
	if (oFF.XStringUtils.isNullOrEmpty(inADimensionName) || oFF.XStringUtils.isNullOrEmpty(inAMemberName))
	{
		return;
	}
	var queryModel = queryModelBase;
	if (oFF.isNull(queryModel))
	{
		queryModel = threshold.getContext().getQueryModel();
	}
	if (oFF.notNull(queryModel))
	{
		var dimension = queryModel.getDimensionByNameFromExistingMetadata(inADimensionName);
		if (oFF.notNull(dimension))
		{
			var dimensionMember = dimension.getDimensionMember(inAMemberName);
			if (oFF.notNull(dimensionMember))
			{
				threshold.addMeasureCoordinate(dimensionMember);
			}
		}
	}
};
oFF.QInAConditionsThreshold.importThresholdValue = function(filterBag, inAValue)
{
	if (oFF.isNull(filterBag) || oFF.isNull(inAValue))
	{
		return;
	}
	if (inAValue.isBoolean())
	{
		filterBag.setBoolean(inAValue.getBoolean());
	}
	else if (inAValue.isString())
	{
		filterBag.setString(inAValue.getString());
	}
	else if (inAValue.isDouble())
	{
		filterBag.setDouble(inAValue.getDouble());
	}
	else if (inAValue.isInteger())
	{
		filterBag.setInteger(inAValue.getInteger());
	}
	else if (inAValue.isLong())
	{
		filterBag.setLong(inAValue.getLong());
	}
};
oFF.QInAConditionsThreshold.setValue = function(exporter, parameterName, inaElement, value, valueType)
{
	if (valueType === oFF.XValueType.VARIABLE)
	{
		var variableValue = value.getVariableValue();
		if (oFF.notNull(variableValue))
		{
			inaElement.putString(parameterName, variableValue.getName());
			if (oFF.XString.isEqual(parameterName, "Low"))
			{
				inaElement.putString("LowIs", "Variable");
			}
			else if (oFF.XString.isEqual(parameterName, "High"))
			{
				inaElement.putString("HighIs", "Variable");
			}
		}
	}
	else
	{
		oFF.QInAValueUtils.exportPlaceholderValue(exporter, parameterName, inaElement, value, valueType, value.getQueryModel());
	}
};
oFF.QInAConditionsThreshold.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_THRESHOLD;
};
oFF.QInAConditionsThreshold.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return modelComponent;
	}
	var newThreshold;
	if (oFF.isNull(modelComponent))
	{
		newThreshold = oFF.QConditionThreshold.create(context, parentComponent);
	}
	else
	{
		newThreshold = modelComponent;
	}
	var inAComparisonOperator = inaStructure.getStringByKey("Comparison");
	var conditionComparisonOperator = oFF.ConditionComparisonOperator.lookupName(inAComparisonOperator);
	if (oFF.notNull(conditionComparisonOperator))
	{
		newThreshold.setComparisonOperator(conditionComparisonOperator);
	}
	var inALow = inaStructure.getByKey("Low");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getLow(), inALow);
	var inALowIs = inaStructure.getByKey("LowIs");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getLowIs(), inALowIs);
	var inAHigh = inaStructure.getByKey("High");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getHigh(), inAHigh);
	var inAHighIs = inaStructure.getByKey("HighIs");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getHighIs(), inAHighIs);
	var inAMeasureCoordinates = inaStructure.getListByKey("MeasureCoordinate");
	if (oFF.notNull(inAMeasureCoordinates))
	{
		var queryModel = context.getQueryModel();
		var len = inAMeasureCoordinates.size();
		for (var i = 0; i < len; i++)
		{
			oFF.QInAConditionsThreshold.importSingleMeasureCoordinate(queryModel, newThreshold, inAMeasureCoordinates.getStructureAt(i));
		}
	}
	newThreshold.setLeavesOnly(inaStructure.getBooleanByKeyExt("LeavesOnly", false));
	var inaLevel = inaStructure.getByKey("Level");
	if (oFF.notNull(inaLevel))
	{
		newThreshold.setLevel(oFF.XIntegerValue.create(inaLevel.getInteger()));
	}
	return newThreshold;
};
oFF.QInAConditionsThreshold.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var conditionThreshold = modelComponent;
	var measureCoordinates = conditionThreshold.getMeasureCoordinates();
	var inAMeasureCoordinates = oFF.PrFactory.createList();
	var len = measureCoordinates.size();
	var queryModel = conditionThreshold.getQueryModel();
	for (var i = 0; i < len; i++)
	{
		var currentDimensionMember = measureCoordinates.get(i);
		var singleInACoordinate = oFF.PrFactory.createStructure();
		var conditionDimensionName = currentDimensionMember.getDimension().getName();
		var conditionDimension = queryModel.getDimensionByName(conditionDimensionName);
		var memberName = currentDimensionMember.getName();
		var memberNameByAlias = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, memberName, exporter);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(memberNameByAlias) && (conditionDimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE || conditionDimension.getDimensionType() === oFF.DimensionType.ACCOUNT))
		{
			memberName = memberNameByAlias;
		}
		if (conditionDimension.getDimensionType() !== oFF.DimensionType.MEASURE_STRUCTURE || conditionDimension.getStructureMember(memberName) !== null)
		{
			singleInACoordinate.putString("DimensionName", conditionDimensionName);
			singleInACoordinate.putString("MemberName", memberName);
			inAMeasureCoordinates.add(singleInACoordinate);
		}
	}
	if (len === 0 || inAMeasureCoordinates.isEmpty())
	{
		return null;
	}
	inaStructure.put("MeasureCoordinate", inAMeasureCoordinates);
	var isMds = queryModel.getSystemType().isTypeOf(oFF.SystemType.HANA);
	var lowValue = conditionThreshold.getLow();
	var highValue = conditionThreshold.getHigh();
	if (isMds)
	{
		if (lowValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "Low", inaStructure, lowValue, oFF.XValueType.INTEGER);
		}
		if (highValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "High", inaStructure, highValue, oFF.XValueType.INTEGER);
		}
		var level = conditionThreshold.getLevel();
		if (oFF.notNull(level))
		{
			inaStructure.putInteger("Level", level.getInteger());
		}
	}
	else
	{
		if (lowValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "Low", inaStructure, lowValue, lowValue.getValueType());
		}
		if (highValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "High", inaStructure, highValue, highValue.getValueType());
		}
		var lowValueIs = conditionThreshold.getLowIs();
		if (lowValueIs.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "LowIs", inaStructure, lowValueIs, lowValueIs.getValueType());
		}
		var highValueIs = conditionThreshold.getHighIs();
		if (highValueIs.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "HighIs", inaStructure, highValueIs, highValueIs.getValueType());
		}
	}
	var comparisonOperator = conditionThreshold.getComparisonOperator();
	inaStructure.putString("Comparison", comparisonOperator.getName());
	return inaStructure;
};

oFF.QInACurrencyTranslationItem = function() {};
oFF.QInACurrencyTranslationItem.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACurrencyTranslationItem.prototype._ff_c = "QInACurrencyTranslationItem";

oFF.QInACurrencyTranslationItem.createConditonalFormula = function(versionFieldName, categoryFieldName, rateTypeItem)
{
	if (oFF.isNull(versionFieldName) && oFF.isNull(categoryFieldName))
	{
		return null;
	}
	if (oFF.isNull(versionFieldName))
	{
		return oFF.QInACurrencyTranslationItem.createRateTypeCategory(categoryFieldName, rateTypeItem);
	}
	if (oFF.isNull(categoryFieldName))
	{
		return oFF.QInACurrencyTranslationItem.createRateTypeVersion(versionFieldName, rateTypeItem);
	}
	var formulaItemIf = oFF.QFactory.createFormulaFunction(null);
	formulaItemIf.setFunctionName(oFF.FormulaOperator.IF.getName());
	var formulaItemEq = oFF.QFactory.createFormulaFunction(null);
	var attributeRateVersion = oFF.QFactory.createFormulaAttributeWithName(null, versionFieldName);
	formulaItemEq.setFunctionName(oFF.FormulaOperator.EQ.getName());
	formulaItemEq.add(attributeRateVersion);
	var emptyString = oFF.QFactory.createFormulaConstant(null);
	emptyString.setString("");
	formulaItemEq.add(emptyString);
	formulaItemIf.add(formulaItemEq);
	formulaItemIf.add(oFF.QInACurrencyTranslationItem.createRateTypeCategory(categoryFieldName, rateTypeItem));
	formulaItemIf.add(oFF.QInACurrencyTranslationItem.createRateTypeVersion(versionFieldName, rateTypeItem));
	return formulaItemIf;
};
oFF.QInACurrencyTranslationItem.createRateTypeVersion = function(versionFieldName, rateTypeItem)
{
	var formulaItem = oFF.QFactory.createFormulaFunction(null);
	formulaItem.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
	var prefix = oFF.QFactory.createFormulaConstant(null);
	prefix.setString("Version$");
	var separatorToken = oFF.QFactory.createFormulaConstant(null);
	separatorToken.setString("$");
	var attributeVersion = oFF.QFactory.createFormulaAttributeWithName(null, versionFieldName);
	formulaItem.add(prefix);
	formulaItem.add(rateTypeItem);
	formulaItem.add(separatorToken);
	formulaItem.add(attributeVersion);
	return formulaItem;
};
oFF.QInACurrencyTranslationItem.createRateTypeCategory = function(categoryFieldName, rateTypeItem)
{
	var formulaItem = oFF.QFactory.createFormulaFunction(null);
	formulaItem.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
	var attributeCategory = oFF.QFactory.createFormulaAttributeWithName(null, categoryFieldName);
	var separatorToken = oFF.QFactory.createFormulaConstant(null);
	separatorToken.setString("$");
	formulaItem.add(attributeCategory);
	formulaItem.add(separatorToken);
	formulaItem.add(rateTypeItem);
	return formulaItem;
};
oFF.QInACurrencyTranslationItem.resolveRateName = function(measureCurrencyTranslation)
{
	var result = null;
	var rateName = measureCurrencyTranslation.getRateName();
	if (oFF.notNull(rateName) && (rateName.isFieldBased() || rateName.isFixed() || rateName.isFormulaBased()))
	{
		result = rateName;
	}
	else
	{
		var currencyTranslationManager = oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager(measureCurrencyTranslation);
		var rateTypeFieldName = currencyTranslationManager.getRateTypeFieldName();
		var rateVersionFieldName = currencyTranslationManager.getRateVersionFieldName();
		var categoryFieldName = currencyTranslationManager.getCategoryFieldName();
		var rateType = measureCurrencyTranslation.getFixedRateType();
		var category = measureCurrencyTranslation.getFixedCategory();
		var rateVersion = measureCurrencyTranslation.getFixedRateVersion();
		if (oFF.CtRateType.isDefined(rateType))
		{
			if (oFF.CtCategory.isDefined(category))
			{
				result = oFF.QCurrencyLookupValue.createFixedByValue(null, oFF.XStringValue.create(oFF.XStringUtils.concatenate3(oFF.QInAConverter.lookupCategoryInA(category), "$", oFF.QInAConverter.lookupRateTypeInA(rateType))));
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(rateVersion))
			{
				result = oFF.QCurrencyLookupValue.createFixedByValue(null, oFF.XStringValue.create(oFF.XStringUtils.concatenate4("Version$", oFF.QInAConverter.lookupRateTypeInA(rateType), "$", rateVersion)));
			}
			else
			{
				var rateTypeConstant = oFF.QFactory.createFormulaConstant(null);
				rateTypeConstant.setString(oFF.QInAConverter.lookupRateTypeInA(rateType));
				var formula = oFF.QInACurrencyTranslationItem.createConditonalFormula(rateVersionFieldName, categoryFieldName, rateTypeConstant);
				if (oFF.notNull(formula))
				{
					result = oFF.QCurrencyLookupValue.createByFormulaItem(null, formula);
				}
			}
		}
		else if (currencyTranslationManager.deriveRateTypeFromAccount() && oFF.notNull(rateTypeFieldName))
		{
			var rateTypeFieldParam = oFF.QFactory.createFormulaAttributeWithName(null, rateTypeFieldName);
			if (oFF.CtCategory.isDefined(category))
			{
				var catConcat = oFF.QFactory.createFormulaFunction(null);
				catConcat.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
				var catParam = oFF.QFactory.createFormulaConstant(null);
				catParam.setString(oFF.QInAConverter.lookupCategoryInA(category));
				var catDollar = oFF.QFactory.createFormulaConstant(null);
				catDollar.setString("$");
				catConcat.add(catParam);
				catConcat.add(catDollar);
				catConcat.add(rateTypeFieldParam);
				result = oFF.QCurrencyLookupValue.createByFormulaItem(null, catConcat);
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(rateVersion))
			{
				var versionConcat = oFF.QFactory.createFormulaFunction(null);
				versionConcat.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
				var versionPrefix = oFF.QFactory.createFormulaConstant(null);
				versionPrefix.setString("Version$");
				var versionDollar = oFF.QFactory.createFormulaConstant(null);
				versionDollar.setString("$");
				var versionParam = oFF.QFactory.createFormulaConstant(null);
				versionParam.setString(rateVersion);
				versionConcat.add(versionPrefix);
				versionConcat.add(rateTypeFieldParam);
				versionConcat.add(versionDollar);
				versionConcat.add(versionParam);
				result = oFF.QCurrencyLookupValue.createByFormulaItem(null, versionConcat);
			}
			else
			{
				var formula2 = oFF.QInACurrencyTranslationItem.createConditonalFormula(rateVersionFieldName, categoryFieldName, rateTypeFieldParam);
				if (oFF.notNull(formula2))
				{
					result = oFF.QCurrencyLookupValue.createByFormulaItem(null, formula2);
				}
			}
		}
		else
		{
			var message = oFF.XStringBuffer.create();
			message.append("The currency translation object '");
			message.append(measureCurrencyTranslation.getName());
			message.append("' is not fully specified. The rate type cannot be derived from the model properties.");
			throw oFF.XException.createIllegalStateException(message.toString());
		}
	}
	return result;
};
oFF.QInACurrencyTranslationItem.resolveReferenceDate = function(measureCurrencyTranslation)
{
	var result = null;
	var ctrdFieldName = oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager(measureCurrencyTranslation).getDefaultReferenceDateFieldName();
	var referenceDate = measureCurrencyTranslation.getReferenceDate();
	if (measureCurrencyTranslation.getDateOffset() === 0)
	{
		if (oFF.notNull(referenceDate) && (referenceDate.isFixed() || referenceDate.isFieldBased() || referenceDate.isFormulaBased()))
		{
			result = referenceDate;
		}
		else if (oFF.notNull(ctrdFieldName))
		{
			result = oFF.QCurrencyLookupValue.createByFieldName(null, ctrdFieldName);
		}
	}
	else
	{
		var referenceFieldName;
		if (oFF.notNull(referenceDate) && referenceDate.isFieldBased())
		{
			referenceFieldName = referenceDate.getFieldName();
		}
		else
		{
			referenceFieldName = ctrdFieldName;
		}
		if (oFF.notNull(referenceFieldName))
		{
			var formulaItem = oFF.QFactory.createFormulaFunction(null);
			var attribute = oFF.QFactory.createFormulaAttributeWithName(null, referenceFieldName);
			formulaItem.add(attribute);
			var element = oFF.QFactory.createFormulaConstant(null);
			var dateOffsetGranularity = measureCurrencyTranslation.getDateOffsetGranularity();
			var dateOffset = measureCurrencyTranslation.getDateOffset();
			if (dateOffsetGranularity === oFF.DateOffsetGranularity.DAY)
			{
				formulaItem.setFunctionName("CALCADDDAYS");
				element.setInteger(dateOffset);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.WEEK)
			{
				formulaItem.setFunctionName("CALCADDDAYS");
				element.setInteger(dateOffset * 7);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.MONTH)
			{
				formulaItem.setFunctionName("CALCADDMONTHS");
				element.setInteger(dateOffset);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.QUARTER)
			{
				formulaItem.setFunctionName("CALCADDMONTHS");
				element.setInteger(dateOffset * 3);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.YEAR)
			{
				formulaItem.setFunctionName("CALCADDYEARS");
				element.setInteger(dateOffset);
			}
			formulaItem.add(element);
			result = oFF.QCurrencyLookupValue.createByFormulaItem(null, formulaItem);
		}
	}
	return result;
};
oFF.QInACurrencyTranslationItem.resolveTargetCurrency = function(measureCurrencyTranslation)
{
	var result;
	if (measureCurrencyTranslation.isDefaultCurrency())
	{
		var currencyTranslationManager = oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager(measureCurrencyTranslation);
		result = oFF.QCurrencyLookupValue.createFixedByValue(null, oFF.XStringValue.create(currencyTranslationManager.getDefaultCurrency()));
	}
	else
	{
		result = measureCurrencyTranslation.getTargetCurrency();
	}
	return result;
};
oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager = function(measureCurrencyTranslation)
{
	var result = null;
	var queryModel = measureCurrencyTranslation.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		result = queryModel.getCurrencyTranslationManager();
	}
	else
	{
		var parent = measureCurrencyTranslation.getParentComponent();
		if (oFF.notNull(parent) && parent.getComponentType() === oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER)
		{
			result = parent;
		}
	}
	return result;
};
oFF.QInACurrencyTranslationItem.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM;
};
oFF.QInACurrencyTranslationItem.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var currencyTranslation = modelComponent;
	if (oFF.notNull(currencyTranslation) && oFF.XCollectionUtils.hasElements(inaStructure))
	{
		currencyTranslation.setMetadataDefined(true);
		currencyTranslation.setErrorHandling(oFF.QInAConverter.lookupCtErrorHandlingMode(inaStructure.getStringByKey("ErrorHandling")));
		currencyTranslation.setSourceCurrency(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure, "SourceCurrency"));
		currencyTranslation.setTargetCurrency(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure, "TargetCurrency"));
		currencyTranslation.setReferenceDate(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.DATE, inaStructure, "ReferenceDate"));
		currencyTranslation.setRateName(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure, "RateName"));
	}
	return currencyTranslation;
};
oFF.QInACurrencyTranslationItem.prototype.importSpecificCurrencyTranslationElement = function(importer, specificCurrencyTranslationBase, valueType, enclosingStructure, key)
{
	if (enclosingStructure.containsKey(key))
	{
		var structure = enclosingStructure.getStructureByKey(key);
		if (structure.containsKey("Fixed"))
		{
			var stringValue = structure.getStringByKey("Fixed");
			if (valueType === oFF.XValueType.STRING)
			{
				return oFF.QCurrencyLookupValue.createFixedByValue(specificCurrencyTranslationBase, oFF.XStringValue.create(stringValue));
			}
			if (valueType === oFF.XValueType.DATE)
			{
				return oFF.QCurrencyLookupValue.createFixedByValue(specificCurrencyTranslationBase, oFF.XDate.createDateSafe(stringValue));
			}
			return null;
		}
		else if (structure.containsKey("DimensionAttribute"))
		{
			return oFF.QCurrencyLookupValue.createByFieldName(specificCurrencyTranslationBase, structure.getStringByKey("DimensionAttribute"));
		}
		else if (structure.containsKey("Formula"))
		{
			var formulaItem = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, specificCurrencyTranslationBase.getQueryModel().getMeasureDimension(), structure.getStructureByKey("Formula"), null, null);
			return oFF.QCurrencyLookupValue.createByFormulaItem(specificCurrencyTranslationBase, formulaItem);
		}
		else if (structure.containsKey("Variable"))
		{
			return oFF.QCurrencyLookupValue.createByVariableName(specificCurrencyTranslationBase, structure.getStringByKey("Variable"));
		}
	}
	return null;
};
oFF.QInACurrencyTranslationItem.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var measureCurrencyTranslation = modelComponent;
	if (oFF.notNull(measureCurrencyTranslation))
	{
		var queryModel = measureCurrencyTranslation.getQueryModel();
		inaStructure.putString("Name", measureCurrencyTranslation.getName());
		inaStructure.putString("Description", measureCurrencyTranslation.getText());
		inaStructure.putStringNotNullAndNotEmpty("ErrorHandling", oFF.QInAConverter.lookupCtErrorHandlingModeInA(measureCurrencyTranslation.getErrorHandling()));
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "SourceCurrency", measureCurrencyTranslation.getSourceCurrency(), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "TargetCurrency", oFF.QInACurrencyTranslationItem.resolveTargetCurrency(measureCurrencyTranslation), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "ReferenceDate", oFF.QInACurrencyTranslationItem.resolveReferenceDate(measureCurrencyTranslation), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "RateName", oFF.QInACurrencyTranslationItem.resolveRateName(measureCurrencyTranslation), queryModel);
	}
	return inaStructure;
};
oFF.QInACurrencyTranslationItem.prototype.exportSpecificCurrencyTranslationProperty = function(exporter, inaCurrencyTranslation, propertyName, lookupValue, queryModel)
{
	if (oFF.notNull(lookupValue))
	{
		if (lookupValue.isFixed())
		{
			inaCurrencyTranslation.putNewStructure(propertyName).putString("Fixed", lookupValue.getFixedValue().getStringRepresentation());
		}
		else if (lookupValue.isFieldBased())
		{
			inaCurrencyTranslation.putNewStructure(propertyName).putString("DimensionAttribute", lookupValue.getFieldName());
		}
		else if (lookupValue.isFormulaBased())
		{
			var formula = inaCurrencyTranslation.putNewStructure(propertyName).putNewStructure("Formula");
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, lookupValue.getFormulaItem(), formula, queryModel);
		}
		else if (lookupValue.isVariableBased())
		{
			var variableName = lookupValue.getVariableName();
			if (oFF.isNull(queryModel))
			{
				inaCurrencyTranslation.putNewStructure(propertyName).putString("Variable", variableName);
			}
			else
			{
				var variable = queryModel.getVariable(variableName);
				if (oFF.notNull(variable))
				{
					if (variable.isCustomVariable())
					{
						var externalVariable = variable.getExternalRepresentation();
						if (oFF.notNull(externalVariable))
						{
							variable = externalVariable;
						}
						var stringValue = variable.getValueByString();
						if (oFF.XStringUtils.isNotNullAndNotEmpty(stringValue))
						{
							inaCurrencyTranslation.putNewStructure(propertyName).putString("Fixed", stringValue);
						}
						else
						{
							exporter.addError(oFF.ErrorCodes.NO_VALUE_EXTRACTED_FROM_FRONTEND_CURRENCY_TRANSLATION_VARIABLE, "Cannot Extract Variable Value from Currency Translation Variable");
						}
					}
					else
					{
						inaCurrencyTranslation.putNewStructure(propertyName).putString("Variable", variableName);
					}
				}
				else
				{
					exporter.addError(oFF.ErrorCodes.CURRENCY_VARIABLE_NOT_AVAILABLE_FOR_CURRENT_QUERY_MODEL, "Currency variable not available for current query model");
				}
			}
		}
	}
};

oFF.QInACurrencyTranslationListManager = function() {};
oFF.QInACurrencyTranslationListManager.prototype = new oFF.QInAComponentWithList();
oFF.QInACurrencyTranslationListManager.prototype._ff_c = "QInACurrencyTranslationListManager";

oFF.QInACurrencyTranslationListManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST;
};
oFF.QInACurrencyTranslationListManager.prototype.getTagName = function()
{
	return "CurrencyTranslations";
};
oFF.QInACurrencyTranslationListManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var currencyTranslationManagerBase = context.getQueryModel().getCurrencyTranslationManager();
	if (oFF.notNull(currencyTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
	{
		var size = inaList.size();
		for (var i = 0; i < size; i++)
		{
			var inaCurrencyTranslation = inaList.getStructureAt(i);
			var name = inaCurrencyTranslation.getStringByKey("Name");
			var description = inaCurrencyTranslation.getStringByKey("Description");
			var currencyTranslation = currencyTranslationManagerBase.addNewMeasureCurrencyTranslationBase(name, description);
			importer.importCurrencyTranslationElement(inaCurrencyTranslation, currencyTranslation, context);
		}
		currencyTranslationManagerBase.postImportInitialization();
	}
	return currencyTranslationManagerBase;
};
oFF.QInACurrencyTranslationListManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var inaCurTransList = null;
	var currencyTranslationManager = modelComponent;
	var specificCurrencyTranslations = currencyTranslationManager.getMeasureCurrencyTranslationsForInaData();
	if (oFF.XCollectionUtils.hasElements(specificCurrencyTranslations))
	{
		inaCurTransList = oFF.PrFactory.createList();
		var size = specificCurrencyTranslations.size();
		for (var i = 0; i < size; i++)
		{
			var specificTranslation = specificCurrencyTranslations.get(i);
			exporter.exportCurrencyTranslationElement(specificTranslation, inaCurTransList.addNewStructure());
		}
	}
	return inaCurTransList;
};

oFF.QInACurrencyTranslationManager = function() {};
oFF.QInACurrencyTranslationManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACurrencyTranslationManager.prototype._ff_c = "QInACurrencyTranslationManager";

oFF.QInACurrencyTranslationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER;
};
oFF.QInACurrencyTranslationManager.prototype.getTagName = function()
{
	return "CurrencyTranslation";
};
oFF.QInACurrencyTranslationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var currencyTranslationManagerBase = modelComponent;
	return currencyTranslationManagerBase;
};
oFF.QInACurrencyTranslationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var currencyTranslationManager = modelComponent;
	if (oFF.isNull(currencyTranslationManager) || !currencyTranslationManager.getModelCapabilities().supportsQueryCurrencyTranslation())
	{
		return inaStructure;
	}
	var currencyTranslationDetails = currencyTranslationManager.getCurrencyTranslationDetails();
	if (oFF.notNull(currencyTranslationDetails))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(currencyTranslationDetails.getCurrencyTranslationName()))
		{
			if (currencyTranslationDetails.getCurrencyTranslationOperation() === null)
			{
				throw oFF.XException.createIllegalArgumentException("CurrencyTranslation Operation required.");
			}
			inaStructure.putString("Operation", currencyTranslationDetails.getCurrencyTranslationOperation().getName());
			inaStructure.putString("Name", currencyTranslationDetails.getCurrencyTranslationName());
			if (currencyTranslationDetails.getCurrencyTranslationOperation() === oFF.CurrencyTranslationOperation.BOTH || currencyTranslationDetails.getCurrencyTranslationOperation() === oFF.CurrencyTranslationOperation.TARGET)
			{
				if (currencyTranslationDetails.getCurrencyTranslationTarget() === null)
				{
					throw oFF.XException.createIllegalArgumentException("CurrencyTranslation Target Currency required.");
				}
				inaStructure.putString("Target", currencyTranslationDetails.getCurrencyTranslationTarget());
			}
		}
		else if (currencyTranslationManager.getCurrencyTranslationDetailsReset())
		{
			inaStructure.putString("Operation", "");
			inaStructure.putString("Name", "");
			inaStructure.putString("Target", "");
			currencyTranslationManager.setCurrencyTranslationDetailsReset(false);
		}
	}
	return inaStructure;
};

oFF.QInACustomHierarchyDefinition = function() {};
oFF.QInACustomHierarchyDefinition.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACustomHierarchyDefinition.prototype._ff_c = "QInACustomHierarchyDefinition";

oFF.QInACustomHierarchyDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION;
};
oFF.QInACustomHierarchyDefinition.prototype.getTagName = function()
{
	return null;
};
oFF.QInACustomHierarchyDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (!importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		return null;
	}
	var inaDimensions = oFF.PrUtils.getListProperty(inaStructure, "Dimensions");
	var inaDimension = oFF.PrUtils.getStructureElement(inaDimensions, 0);
	if (oFF.notNull(inaDimension))
	{
		var system = inaDimension.getStringByKey("System");
		var dataSource = inaDimension.getStringByKey("DataSource");
		var dimensionName = inaDimension.getStringByKey("Name");
		var inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		if (oFF.notNull(inaHierarchy) && oFF.XStringUtils.isNotNullAndNotEmpty(system) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
		{
			var ignoreDatasource = true;
			var application = importer.getApplication();
			if (oFF.notNull(application))
			{
				var systemDescription = application.getSystemLandscape().getSystemDescription(system);
				ignoreDatasource = oFF.isNull(systemDescription) ? true : systemDescription.getSystemType().isTypeOf(oFF.SystemType.ABAP);
			}
			var hierarchyDefinition = oFF.QCustomHierarchyDefinition.createByData(system, dataSource, dimensionName, inaHierarchy.getStringByKey("Description"), ignoreDatasource);
			hierarchyDefinition.setName(inaHierarchy.getStringByKey("Name"));
			this.addHierarchyNodesFromStructure(hierarchyDefinition, inaHierarchy.getStructureByKey("Nodes"));
			return hierarchyDefinition;
		}
	}
	return null;
};
oFF.QInACustomHierarchyDefinition.prototype.addHierarchyNodesFromStructure = function(hierarchyDefinition, nodes)
{
	var nodeIds = oFF.PrUtils.getListProperty(nodes, "NodeId");
	var nodeParentIds = oFF.PrUtils.getListProperty(nodes, "ParentId");
	var nodeNames = oFF.PrUtils.getListProperty(nodes, "NodeName");
	var nodeTypes = oFF.PrUtils.getListProperty(nodes, "NodeType");
	var size = oFF.PrUtils.getListSize(nodeIds, 0);
	if (oFF.PrUtils.isListEmpty(nodeIds) || oFF.PrUtils.isListEmpty(nodeParentIds) || oFF.PrUtils.isListEmpty(nodeNames) || oFF.PrUtils.isListEmpty(nodeTypes) || nodeParentIds.size() !== size || nodeNames.size() !== size || nodeTypes.size() !== size)
	{
		return;
	}
	var nodeMap = oFF.XSimpleMap.create();
	for (var i = 0; i < size; i++)
	{
		var nodeId = nodeIds.getIntegerAt(i);
		var nodeName = nodeNames.getStringAt(i);
		var nodeType = nodeTypes.getStringAt(i);
		var nodeParentId = nodeParentIds.getIntegerAt(i);
		var parent = nodeParentId === -1 ? hierarchyDefinition : nodeMap.getByKey(oFF.XIntegerValue.create(nodeParentId));
		if (oFF.notNull(parent))
		{
			if (oFF.XString.isEqual(nodeType, "1HIER_NODE_SIMPLE"))
			{
				nodeMap.put(oFF.XIntegerValue.create(nodeId), parent.addTextNode(nodeName));
			}
			else
			{
				parent.addMemberNode(nodeName);
			}
		}
	}
	oFF.XObjectExt.release(nodeMap);
};
oFF.QInACustomHierarchyDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var customHierarchyDefinition = modelComponent;
	var inaCustomHierarchyDimension = oFF.PrFactory.createStructure();
	inaCustomHierarchyDimension.putString("Name", customHierarchyDefinition.getDimensionName());
	if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		inaCustomHierarchyDimension.putString("System", customHierarchyDefinition.getSystemName());
		inaCustomHierarchyDimension.putString("DataSource", customHierarchyDefinition.getDataSourceName());
	}
	else
	{
		inaCustomHierarchyDimension.putString("Axis", "Free");
	}
	var inaCustomHierarchy = oFF.PrFactory.createStructure();
	this.exportCustomHierarchy(customHierarchyDefinition, inaCustomHierarchy);
	inaCustomHierarchyDimension.put("Hierarchy", inaCustomHierarchy);
	var inaDefStructure = oFF.PrFactory.createStructure();
	var inaDimensionsList = inaDefStructure.putNewList("Dimensions");
	inaDimensionsList.add(inaCustomHierarchyDimension);
	return inaDefStructure;
};
oFF.QInACustomHierarchyDefinition.prototype.exportCustomHierarchy = function(customHierarchyDefinition, inaCustomHierarchy)
{
	var emptyString = "";
	var name = customHierarchyDefinition.getName();
	var customHierarchyDesc = customHierarchyDefinition.getDescription();
	inaCustomHierarchy.putString("Name", oFF.XStringUtils.isNotNullAndNotEmpty(name) ? name : emptyString);
	inaCustomHierarchy.putString("Version", emptyString);
	inaCustomHierarchy.putString("DueDate", emptyString);
	inaCustomHierarchy.putString("Description", oFF.notNull(customHierarchyDesc) ? customHierarchyDesc : emptyString);
	inaCustomHierarchy.putBoolean("IsTransient", true);
	inaCustomHierarchy.putBoolean("NoRestNodes", true);
	inaCustomHierarchy.put("Nodes", this.getHierarchyNodesAsStructure(customHierarchyDefinition));
};
oFF.QInACustomHierarchyDefinition.prototype.getHierarchyNodesAsStructure = function(customHierarchyDefinition)
{
	var structure = oFF.PrFactory.createStructure();
	structure.putNewList("NodeId");
	structure.putNewList("NodeName");
	structure.putNewList("Description");
	structure.putNewList("NodeType");
	structure.putNewList("ParentId");
	var nodes = customHierarchyDefinition.getChildNodes();
	var size = nodes.size();
	for (var i = 0; i < size; i++)
	{
		this.addHierarchyElementToStructure(nodes.get(i), structure, -1, customHierarchyDefinition.getDimensionName());
	}
	return structure;
};
oFF.QInACustomHierarchyDefinition.prototype.addHierarchyElementToStructure = function(element, structure, parentIndex, dimensionName)
{
	var nodeIds = structure.getListByKey("NodeId");
	var nodeId = nodeIds.size();
	nodeIds.addInteger(nodeId);
	structure.getListByKey("NodeName").addString(element.getName());
	structure.getListByKey("ParentId").addInteger(parentIndex);
	if (element.isMemberElement())
	{
		structure.getListByKey("Description").addString("");
		structure.getListByKey("NodeType").addString(element.isNode() ? dimensionName : "");
	}
	else
	{
		structure.getListByKey("Description").addString(element.getName());
		structure.getListByKey("NodeType").addString("1HIER_NODE_SIMPLE");
	}
	if (element.isNode())
	{
		var childNodes = element.getChildNodes();
		var size = childNodes.size();
		for (var i = 0; i < size; i++)
		{
			this.addHierarchyElementToStructure(childNodes.get(i), structure, nodeId, dimensionName);
		}
	}
};

oFF.QInADataCell = function() {};
oFF.QInADataCell.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADataCell.prototype._ff_c = "QInADataCell";

oFF.QInADataCell.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELL;
};
oFF.QInADataCell.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = context.getQueryModel();
	var queryDataCellList = queryModel.getQueryDataCellsBase();
	var dataCell = queryDataCellList.newQueryDataCell(inaStructure.getStringByKey("Name"));
	dataCell.setSignReversal(inaStructure.getBooleanByKeyExt("SignReversal", false));
	dataCell.setEmphasized(inaStructure.getBooleanByKeyExt("Emphasized", false));
	dataCell.setCumulation(inaStructure.getBooleanByKeyExt("Cumulation", false));
	dataCell.setInputEnabled(inaStructure.getBooleanByKeyExt("InputEnabled", false));
	dataCell.setDisaggregationMode(oFF.DisaggregationMode.lookupWithDefault(inaStructure.getStringByKeyExt("DisaggregationMode", null), oFF.DisaggregationMode.NONE));
	dataCell.setDisaggregationRefCellName(inaStructure.getStringByKeyExt("DisaggregationReferenceCellName", null));
	dataCell.setScalingFactor(inaStructure.getIntegerByKeyExt("ScalingFactor", 1));
	dataCell.setDecimalPlaces(inaStructure.getIntegerByKeyExt("Decimals", 0));
	var inaBaseValueType = inaStructure.getIntegerByKeyExt("CellValueType", 0);
	var cellValueType = oFF.QInAConverter.lookupValueTypeByInt(inaBaseValueType);
	dataCell.setBaseCellValueType(cellValueType);
	if (cellValueType === oFF.XValueType.DIMENSION_MEMBER)
	{
		var dimensionReferenceName = inaStructure.getStringByKey("CellDimensionReference");
		dataCell.setDimensionReference(queryModel.getDimensions().getByKey(dimensionReferenceName));
	}
	var inaMemberReferences = inaStructure.getListByKey("DimensionMemberReferences");
	if (oFF.notNull(inaMemberReferences))
	{
		for (var k = 0; k < inaMemberReferences.size(); k++)
		{
			dataCell.addDimensionMemberReference(inaMemberReferences.getStringAt(k));
		}
	}
	if (importer.mode === oFF.QModelFormat.INA_METADATA && dataCell.getReferenceStructureElement1() === null && dataCell.getReferenceStructureElement2() === null)
	{
		queryDataCellList.removeElement(dataCell);
		return null;
	}
	return dataCell;
};
oFF.QInADataCell.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dataCell = modelComponent;
	inaStructure.putString("Name", dataCell.getName());
	var disaggregationMode = dataCell.getDisaggregationMode();
	oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "DisaggregationMode", oFF.isNull(disaggregationMode) ? oFF.DisaggregationMode.NONE : disaggregationMode);
	var referenceDataCell = dataCell.getDisaggregationRefCell();
	inaStructure.putString("DisaggregationReferenceCellName", oFF.isNull(referenceDataCell) ? "0" : referenceDataCell.getName());
	inaStructure.putInteger("ScalingFactor", dataCell.getScalingFactor());
	inaStructure.putInteger("Decimals", dataCell.getDecimalPlaces());
	inaStructure.putBoolean("SignReversal", dataCell.hasSignReversal());
	inaStructure.putBoolean("Emphasized", dataCell.isEmphasized());
	inaStructure.putBoolean("Cumulation", dataCell.isCumulated());
	var baseValueType = dataCell.getBaseValueType();
	var inaBaseValueType = oFF.QInAConverter.lookupIntByValueType(baseValueType);
	inaStructure.putInteger("CellValueType", inaBaseValueType);
	var inaMemberReferences = inaStructure.putNewList("DimensionMemberReferences");
	var referenceStructureElement = dataCell.getReferenceStructureElement1();
	if (oFF.notNull(referenceStructureElement))
	{
		inaMemberReferences.addString(referenceStructureElement.getName());
		referenceStructureElement = dataCell.getReferenceStructureElement2();
		if (oFF.notNull(referenceStructureElement))
		{
			inaMemberReferences.addString(referenceStructureElement.getName());
		}
	}
	this.exportRestrictedMeasureSignReversal(exporter, inaStructure, dataCell);
	return inaStructure;
};
oFF.QInADataCell.prototype.exportRestrictedMeasureSignReversal = function(exporter, inaStructure, dataCell)
{
	if (exporter.getMode() !== oFF.QModelFormat.INA_DATA || !dataCell.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.BW) || dataCell.getReferenceStructureElement1() === null || dataCell.getReferenceStructureElement1().getOlapComponentType() !== oFF.MemberType.RESTRICTED_MEASURE)
	{
		return;
	}
	var restrictedMeasure = dataCell.getReferenceStructureElement1();
	if (!restrictedMeasure.isAutoSignFlip())
	{
		return;
	}
	var queryModel = restrictedMeasure.getQueryModel();
	var memberName = oFF.QInAMemberRestrictedMeasure.getMemberForSignFlip(queryModel, restrictedMeasure);
	if (oFF.notNull(memberName))
	{
		var measureStructure = queryModel.getMeasureDimension();
		var member = measureStructure.getStructureMember(memberName);
		if (oFF.notNull(member))
		{
			var queryDataCells = member.getQueryDataCells();
			if (!queryDataCells.isEmpty())
			{
				var dataCellOfInterest = queryDataCells.get(0);
				if (oFF.notNull(dataCellOfInterest))
				{
					inaStructure.putBoolean("SignReversal", dataCellOfInterest.hasSignReversal());
				}
			}
		}
	}
};

oFF.QInADataCellsAll = function() {};
oFF.QInADataCellsAll.prototype = new oFF.QInAComponentWithList();
oFF.QInADataCellsAll.prototype._ff_c = "QInADataCellsAll";

oFF.QInADataCellsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELLS;
};
oFF.QInADataCellsAll.prototype.getTagName = function()
{
	return "QueryDataCells";
};
oFF.QInADataCellsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var capabilities = context.getModelCapabilities();
	var queryModel = context.getQueryModel();
	if (capabilities.supportsDataCells() && importer.mode !== oFF.QModelFormat.INA_DATA_REINIT && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		var queryDataCellList = queryModel.getQueryDataCellsBase();
		queryDataCellList.clear();
		if (oFF.notNull(inaList))
		{
			for (var i = 0; i < inaList.size(); i++)
			{
				importer.importDataCell(inaList.getStructureAt(i), queryModel);
			}
		}
	}
	return null;
};
oFF.QInADataCellsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var queryModel = modelComponent;
	var inaQueryDataCellList = null;
	var capabilities = queryModel.getModelCapabilities();
	if (capabilities.supportsDataCells() && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		var queryDataCells = queryModel.getQueryDataCells();
		inaQueryDataCellList = oFF.PrFactory.createList();
		var size = queryDataCells.size();
		for (var i = 0; i < size; i++)
		{
			var cellStructure = exporter.exportDataCell(queryDataCells.get(i), null);
			inaQueryDataCellList.add(cellStructure);
		}
	}
	return inaQueryDataCellList;
};

oFF.QInADimension = function() {};
oFF.QInADimension.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADimension.prototype._ff_c = "QInADimension";

oFF.QInADimension.exportQdReadMode = function(exporter, dimension, inaStructure)
{
	var readModeContext;
	var isValuehelp = exporter.getMode() === oFF.QModelFormat.INA_VALUE_HELP;
	var isBW = exporter.isAbap(dimension);
	if (isValuehelp)
	{
		readModeContext = oFF.QContextType.SELECTOR;
	}
	else
	{
		readModeContext = oFF.QContextType.RESULT_SET;
	}
	var readMode = oFF.QInADimension.getReadMode(dimension, readModeContext);
	if (oFF.isNull(readMode))
	{
		exporter.addError(oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("No read mode given for dimension '", dimension.getName(), "'!"));
		return;
	}
	var inaReadModeName;
	if (isBW)
	{
		if (isValuehelp)
		{
			inaReadModeName = "ReadMode";
		}
		else
		{
			inaReadModeName = "ResultSetReadMode";
		}
	}
	else
	{
		inaReadModeName = "ReadMode";
	}
	var inaReadMode = oFF.QInAConverter.lookupReadModeInA(readMode);
	inaStructure.putStringNotNull(inaReadModeName, inaReadMode);
	if (isBW && isValuehelp)
	{
		inaStructure.putStringNotNull("VariableReadMode", oFF.QInAConverter.lookupReadModeInA(oFF.QInADimension.getReadMode(dimension, oFF.QContextType.VARIABLE)));
	}
};
oFF.QInADimension.getReadMode = function(dimension, contextType)
{
	var readMode = dimension.getReadMode(contextType);
	return readMode === oFF.QMemberReadMode.DEFAULT_VALUE ? dimension.getReadModeDefault(contextType) : readMode;
};
oFF.QInADimension.exportQdReadModeLegacy = function(exporter, dimension, inaStructure)
{
	var readModeContext;
	var inaReadModeName;
	var isBW = exporter.isAbap(dimension);
	if (exporter.getMode() === oFF.QModelFormat.INA_VALUE_HELP)
	{
		readModeContext = oFF.QContextType.SELECTOR;
		inaReadModeName = "SelectorReadMode";
		if (isBW)
		{
			inaStructure.putStringNotNull("VariableReadMode", oFF.QInAConverter.lookupReadModeInA(oFF.QInADimension.getReadMode(dimension, oFF.QContextType.VARIABLE)));
		}
	}
	else
	{
		readModeContext = oFF.QContextType.RESULT_SET;
		inaReadModeName = "ResultSetReadMode";
	}
	var readMode = oFF.QInADimension.getReadMode(dimension, readModeContext);
	if (oFF.isNull(readMode))
	{
		exporter.addError(oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("No read mode given for dimension '", dimension.getName(), "'!"));
		return;
	}
	var inaReadMode = oFF.QInAConverter.lookupReadModeInA(readMode);
	if (!exporter.getSession().hasFeature(oFF.FeatureToggleOlap.NO_NON_EMPTY))
	{
		inaStructure.putBoolean("NonEmpty", readMode === oFF.QMemberReadMode.BOOKED);
	}
	inaStructure.putStringNotNull("ReadMode", inaReadMode);
	if (isBW)
	{
		inaStructure.putStringNotNull(inaReadModeName, inaReadMode);
	}
};
oFF.QInADimension.importDimReadModes = function(importer, queryModel, dimension, inaDimension)
{
	if (oFF.notNull(queryModel))
	{
		if (importer.isAbap(queryModel))
		{
			oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.RESULT_SET, "ResultSetReadMode");
			oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.VARIABLE, "VariableReadMode");
		}
		else
		{
			oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.RESULT_SET, "ResultSetMemberReadMode");
		}
	}
	oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.SELECTOR, "SelectorReadMode");
};
oFF.QInADimension.importReadModeSettings = function(inaDimension, dimension, context, activeReadMode)
{
	var inaReadMode = inaDimension.getStringByKey(activeReadMode);
	if (oFF.notNull(inaReadMode))
	{
		var readMode = oFF.QInAConverter.lookupReadMode(inaReadMode);
		if (oFF.notNull(readMode) && readMode !== oFF.QMemberReadMode.UNDEFINED)
		{
			dimension.setReadMode(context, readMode);
		}
	}
	var givenReadMode = dimension.getReadMode(context);
	if (oFF.isNull(givenReadMode))
	{
		var defaultReadMode = dimension.getReadModeDefault(context);
		if (oFF.notNull(defaultReadMode) && defaultReadMode !== oFF.QMemberReadMode.UNDEFINED)
		{
			dimension.setReadMode(context, defaultReadMode);
		}
		else if (oFF.QContextType.VARIABLE === context)
		{
			var supportedReadModes = dimension.getSupportedReadModes(context);
			dimension.setReadMode(context, supportedReadModes.getValuesAsReadOnlyList().get(0));
		}
	}
};
oFF.QInADimension.importRsAttributeNodes = function(inaDimension, dimension)
{
	var inaResultSetAttributes = inaDimension.getListByKey("ResultSetAttributeNodes");
	if (oFF.isNull(inaResultSetAttributes))
	{
		inaResultSetAttributes = inaDimension.getListByKey("DefaultResultSetAttributeNodes");
	}
	if (oFF.notNull(inaResultSetAttributes))
	{
		var resultSetAttributes = dimension.getResultSetAttributes();
		resultSetAttributes.clear();
		var attributeSize = inaResultSetAttributes.size();
		for (var idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++)
		{
			var attributeName = inaResultSetAttributes.getStringAt(idxAttribute);
			var attribute = dimension.getAttributeByName(attributeName);
			if (oFF.notNull(attribute))
			{
				resultSetAttributes.add(attribute);
			}
		}
	}
};
oFF.QInADimension.importRsFields = function(inaDimension, dimension)
{
	var inaResultSetFields = inaDimension.getListByKey("ResultSetFields");
	if (oFF.isNull(inaResultSetFields))
	{
		inaResultSetFields = inaDimension.getListByKey("DefaultResultSetAttributes");
	}
	if (oFF.notNull(inaResultSetFields))
	{
		var resultSetFields = dimension.getResultSetFields();
		resultSetFields.clear();
		var fieldSize = inaResultSetFields.size();
		for (var idxField = 0; idxField < fieldSize; idxField++)
		{
			var fieldName = inaResultSetFields.getStringAt(idxField);
			var field = dimension.getFieldByName(fieldName);
			if (oFF.notNull(field))
			{
				resultSetFields.add(field);
			}
		}
	}
};
oFF.QInADimension.resetFieldsToDefault = function(dimension)
{
	var fieldLayoutType = dimension.getFieldLayoutType();
	var defaultFieldLayoutType = dimension.getDefaultFieldLayoutType();
	if (fieldLayoutType !== defaultFieldLayoutType)
	{
		dimension.setFieldLayoutType(defaultFieldLayoutType);
	}
	if (defaultFieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
	{
		var dimDefaultResultSetFields = dimension.getDefaultResultSetFields();
		var dimResultSetFields = dimension.getResultSetFields();
		dimResultSetFields.clear();
		dimResultSetFields.addAll(dimDefaultResultSetFields);
	}
	else
	{
		var defaultResultSetAttributes = dimension.getDefaultResultSetAttributes();
		var dimResultSetAttributes = dimension.getResultSetAttributes();
		dimResultSetAttributes.clear();
		for (var j = 0; j < defaultResultSetAttributes.size(); j++)
		{
			var currentAttribute = defaultResultSetAttributes.get(j);
			var attributeDefaultResultSetFields = currentAttribute.getDefaultResultSetFields();
			var attributeResultSetFields = currentAttribute.getResultSetFields();
			attributeResultSetFields.clear();
			attributeResultSetFields.addAll(attributeDefaultResultSetFields);
			dimResultSetAttributes.add(currentAttribute);
		}
	}
};
oFF.QInADimension.exportFieldLayout = function(exporter, inaDimension, dimension)
{
	var exportingFields;
	var context = exporter.modelContext;
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA))
	{
		inaDimension.putString("FieldLayoutType", dimension.getFieldLayoutType().toString());
		oFF.QInADimension.exportRsFields(inaDimension, dimension);
	}
	if (dimension.getFieldLayoutTypeExt(context) === oFF.FieldLayoutType.FIELD_BASED)
	{
		exportingFields = dimension.getFieldsExt(context);
	}
	else
	{
		exportingFields = dimension.getAttributesExt(context).getEffectiveFields(context);
	}
	var inaFieldList = inaDimension.putNewList("Attributes");
	oFF.QInADimension.exportListOfFields(exportingFields, inaFieldList, exporter, false);
	var hiddenFields = oFF.QInADimension.getHiddenFields(exporter, dimension, exportingFields);
	oFF.QInADimension.exportListOfFields(hiddenFields, inaFieldList, exporter, true);
};
oFF.QInADimension.exportRsFields = function(inaDimension, dimension)
{
	var resFieldList = inaDimension.putNewList("ResultSetFields");
	var resultSetFields = dimension.getResultSetFields();
	for (var i = 0; i < resultSetFields.size(); i++)
	{
		resFieldList.addString(resultSetFields.get(i).getName());
	}
};
oFF.QInADimension.exportListOfFields = function(fields, inaFields, exporter, hide)
{
	var flagVisible = oFF.QImExFlag.DEFAULT_ALL;
	var flagHidden = oFF.XMath.binaryOr(flagVisible, oFF.QImExFlag.HIDE);
	var fieldsSize = fields.size();
	for (var i = 0; i < fieldsSize; i++)
	{
		if (hide)
		{
			inaFields.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, fields.get(i), null, flagHidden));
		}
		else
		{
			inaFields.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, fields.get(i), null, flagVisible));
		}
	}
};
oFF.QInADimension.getHiddenFields = function(exporter, dimension, exportingFields)
{
	var allFields;
	if (exporter.modelContext === oFF.QContextType.SELECTOR)
	{
		var fields = oFF.XList.create();
		fields.add(dimension.getKeyFieldExt(oFF.QContextType.SELECTOR));
		var hierarchyTextField = dimension.getHierarchyTextField();
		if (oFF.notNull(hierarchyTextField) && dimension.isSelectorHierarchyActive())
		{
			fields.add(hierarchyTextField);
		}
		allFields = fields;
	}
	else
	{
		allFields = dimension.getFieldsListByActiveUsageType();
	}
	var hiddenFields = oFF.XList.create();
	hiddenFields.addAll(allFields);
	var exportSize = exportingFields.size();
	for (var i = 0; i < exportSize; i++)
	{
		hiddenFields.removeElement(exportingFields.get(i));
	}
	var keyField = dimension.getKeyFieldExt(exporter.modelContext);
	var textField = dimension.getTextField();
	if (textField === keyField)
	{
		textField = null;
	}
	for (var idxHidden = 0; idxHidden < hiddenFields.size(); )
	{
		var hiddenField = hiddenFields.get(idxHidden);
		if (hiddenField !== keyField)
		{
			if (hiddenField !== textField)
			{
				if (!hiddenField.isAlwaysRequested())
				{
					if (hiddenField.hasSorting())
					{
						if (hiddenField.getResultSetSorting().getDirection() === oFF.XSortDirection.DEFAULT_VALUE)
						{
							hiddenFields.removeAt(idxHidden);
							continue;
						}
					}
					else
					{
						hiddenFields.removeAt(idxHidden);
						continue;
					}
				}
			}
		}
		idxHidden++;
	}
	if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.DONT_ALWAYS_REQUEST_TEXTFIELD))
	{
		hiddenFields.removeElement(textField);
	}
	else
	{
		oFF.QInADimension.moveFieldToStart(hiddenFields, textField);
	}
	oFF.QInADimension.moveFieldToStart(hiddenFields, keyField);
	return hiddenFields;
};
oFF.QInADimension.moveFieldToStart = function(hiddenFields, field)
{
	var hiddenSize = hiddenFields.size();
	for (var idxField = 0; idxField < hiddenSize; idxField++)
	{
		var hiddenField = hiddenFields.get(idxField);
		if (hiddenField === field)
		{
			if (idxField !== 0)
			{
				hiddenFields.removeAt(idxField);
				hiddenFields.insert(0, hiddenField);
			}
			break;
		}
	}
};
oFF.QInADimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QInADimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = context.getQueryModel();
	var dimension = modelComponent;
	if (oFF.isNull(dimension))
	{
		var dimName = inaStructure.getStringByKey("Name");
		if (oFF.notNull(queryModel))
		{
			dimension = queryModel.getDimensionManagerBase().getDimensionByNameInternal(dimName);
		}
		if (oFF.isNull(dimension))
		{
			return null;
		}
	}
	if (importer.mode !== oFF.QModelFormat.INA_DATA_REINIT)
	{
		dimension.setSelectorGettingInterval(false);
		oFF.QInADimension.importDimReadModes(importer, queryModel, dimension, inaStructure);
		importer.importMembers(inaStructure, dimension, context);
		this.importFieldsLayout(importer, inaStructure, dimension, context);
		this.importQdFieldTransformations(importer, inaStructure, dimension);
		importer.importHierarchy(dimension, inaStructure);
		if (oFF.notNull(queryModel) && !queryModel.getModelCapabilities().supportsExtendedSort())
		{
			var modelCapabilities = queryModel.getModelCapabilities();
			if (modelCapabilities.supportsDimensionSorting(dimension, oFF.SortType.MEMBER_KEY))
			{
				var inaSortOrder = inaStructure.getIntegerByKeyExt("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(oFF.XSortDirection.DEFAULT_VALUE));
				var sortOrder = oFF.QInAConverter.lookupSortDirection(inaSortOrder);
				dimension.getResultSetSorting().setDirection(sortOrder);
			}
		}
		if (importer.capabilities.supportsCummulative() && dimension.supportsCumulative())
		{
			dimension.setIsCumulative(inaStructure.getBooleanByKeyExt("IsCummulative", false));
		}
		var skipEntries = inaStructure.getIntegerByKeyExt("Skip", 0);
		dimension.setSkipEntries(skipEntries);
		var topEntries = inaStructure.getIntegerByKeyExt("Top", 0);
		dimension.setTopEntries(topEntries);
		var inaReadMode = inaStructure.getStringByKey("ReadMode");
		if (oFF.notNull(inaReadMode))
		{
			var readMode = oFF.QInAConverter.lookupReadMode(inaReadMode);
			dimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, readMode);
		}
		importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
		this.importAlternativeFieldValues(inaStructure, dimension);
	}
	else
	{
		var variableContainer = dimension.getVariableContainer();
		if (oFF.notNull(variableContainer))
		{
			var variables = variableContainer.getVariables();
			var size = variables.size();
			for (var i = 0; i < size; i++)
			{
				var variable = variables.get(i);
				if (variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE && oFF.XString.isEqual(variable.getHierarchyNameDimension().getName(), dimension.getName()))
				{
					importer.importHierarchy(dimension, inaStructure);
					break;
				}
			}
		}
	}
	return dimension;
};
oFF.QInADimension.prototype.importAlternativeFieldValues = function(inaStructure, dimension)
{
	var alternativeFieldValuesList = inaStructure.getListByKey("AlternativeFieldValues");
	if (oFF.notNull(alternativeFieldValuesList))
	{
		var size = alternativeFieldValuesList.size();
		for (var i = 0; i < size; i++)
		{
			var currentElement = alternativeFieldValuesList.get(i);
			if (currentElement.isStructure())
			{
				var currentStructure = currentElement;
				var strValueType = currentStructure.getStringByKey("ValueType");
				var valueType = oFF.QInAConverter.lookupValueType(strValueType);
				var valueAsString = currentStructure.getStringByKey("Value");
				var value = null;
				if (valueType === oFF.XValueType.INTEGER)
				{
					value = oFF.XIntegerValue.create(oFF.XInteger.convertFromStringWithRadix(valueAsString, 10));
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					value = oFF.XLongValue.create(oFF.XLong.convertFromString(valueAsString));
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					value = oFF.XDoubleValue.create(oFF.XDouble.convertFromString(valueAsString));
				}
				else if (valueType === oFF.XValueType.STRING)
				{
					value = oFF.XStringValue.create(valueAsString);
				}
				else if (valueType === oFF.XValueType.DATE)
				{
					value = oFF.XDate.createDateFromIsoFormat(valueAsString);
				}
				else if (valueType === oFF.XValueType.DATE_TIME)
				{
					value = oFF.XDateTime.createDateTimeFromIsoFormat(valueAsString);
				}
				if (oFF.notNull(value))
				{
					var hierarchyKey = currentStructure.getBooleanByKey("HierarchyKey");
					var memberKey = currentStructure.getStringByKey("MemberKey");
					var fieldName = currentStructure.getStringByKey("FieldName");
					var language = currentStructure.getStringByKey("Language");
					dimension.setAlternativeFieldValue(hierarchyKey, memberKey, fieldName, value, language);
				}
			}
		}
	}
};
oFF.QInADimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	inaStructure.putString("Name", dimension.getName());
	var session = exporter.getSession();
	var skipReadmode = session.hasFeature(oFF.FeatureToggleOlap.NO_MEASURE_READMODE) && dimension.isStructure();
	if (!skipReadmode)
	{
		if (session.hasFeature(oFF.FeatureToggleOlap.NO_DUPLICATED_READMODE))
		{
			oFF.QInADimension.exportQdReadMode(exporter, dimension, inaStructure);
		}
		else
		{
			oFF.QInADimension.exportQdReadModeLegacy(exporter, dimension, inaStructure);
		}
	}
	var type;
	if (exporter.mode === oFF.QModelFormat.INA_VALUE_HELP)
	{
		type = oFF.AxisType.ROWS;
	}
	else
	{
		type = dimension.getAxisType();
	}
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(type));
	var designTimeMode = dimension.isDesignTimeMode();
	if (designTimeMode)
	{
		inaStructure.putBoolean("DesignTimeMode", designTimeMode);
	}
	var skipEntries = dimension.getSkipEntries();
	if (skipEntries > 0)
	{
		inaStructure.putInteger("Skip", skipEntries);
	}
	var topEntries = dimension.getTopEntries();
	if (topEntries > 0)
	{
		inaStructure.putInteger("Top", topEntries);
	}
	if (dimension.supportsCumulative())
	{
		inaStructure.putBoolean("IsCummulative", dimension.isCumulative());
	}
	if (!oFF.QInAUniversalDisplayHierarchies.isHierarchyConverted(exporter, dimension))
	{
		exporter.exportHierarchy(dimension, inaStructure);
	}
	if (exporter.mode !== oFF.QModelFormat.INA_VALUE_HELP)
	{
		if (dimension.supportsTotals())
		{
			exporter.exportTotals(dimension, inaStructure);
		}
		if (dimension.getStructureLayout() !== null)
		{
			exporter.exportMembers(dimension, inaStructure);
		}
	}
	oFF.QInADimension.exportFieldLayout(exporter, inaStructure, dimension);
	return inaStructure;
};
oFF.QInADimension.prototype.importQdFieldTransformations = function(importer, inaDimension, dimension)
{
	var fieldList = inaDimension.getListByKey("Fields");
	if (oFF.notNull(fieldList))
	{
		var fieldSize = fieldList.size();
		for (var i = 0; i < fieldSize; i++)
		{
			var currentElement = fieldList.get(i);
			if (currentElement.isStructure())
			{
				var fieldName = currentElement.getStringByKey("Name");
				var textTransType = currentElement.getStringByKey("TextTransformation");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(fieldName) && oFF.XStringUtils.isNotNullAndNotEmpty(textTransType))
				{
					var field = dimension.getFieldByName(fieldName);
					var transformationType = oFF.TextTransformationType.lookupName(textTransType);
					if (oFF.notNull(field) && oFF.notNull(transformationType))
					{
						if (transformationType.isTypeOf(oFF.TextTransformationType.SPATIAL_TRANSFORMATION) && !importer.capabilities.supportsSpatialTransformation())
						{
							continue;
						}
						field.setTextTransformation(transformationType);
					}
				}
			}
		}
	}
};
oFF.QInADimension.prototype.importFieldsLayout = function(importer, inaDimension, dimension, context)
{
	var fieldLayoutType;
	var inaFieldLayoutType = inaDimension.getStringByKey("FieldLayoutType");
	if (oFF.notNull(inaFieldLayoutType))
	{
		fieldLayoutType = oFF.QInAConverter.lookupFieldLayoutType(inaFieldLayoutType);
		var inaAllFields = inaDimension.getListByKey("FieldSettings");
		if (oFF.notNull(inaAllFields))
		{
			var inaAllFieldSize = inaAllFields.size();
			for (var p1 = 0; p1 < inaAllFieldSize; p1++)
			{
				importer.importComponent(oFF.OlapComponentType.FIELD, inaAllFields.getStructureAt(p1), null, dimension, context);
			}
		}
		var inaAllAttributes = inaDimension.getListByKey("AttributeSettings");
		if (oFF.notNull(inaAllAttributes))
		{
			var inaAllAttributesSize = inaAllAttributes.size();
			for (var p2 = 0; p2 < inaAllAttributesSize; p2++)
			{
				var inaAttribute = inaAllAttributes.getStructureAt(p2);
				importer.importAttribute(inaAttribute, dimension, context);
			}
		}
		oFF.QInADimension.importRsFields(inaDimension, dimension);
		oFF.QInADimension.importRsAttributeNodes(inaDimension, dimension);
		dimension.setFieldLayoutType(fieldLayoutType);
	}
	else
	{
		var inaResultSetFields2 = inaDimension.getListByKey("ResultSetFields");
		if (oFF.isNull(inaResultSetFields2))
		{
			inaResultSetFields2 = inaDimension.getListByKey("DefaultResultSetAttributes");
		}
		if (oFF.notNull(inaResultSetFields2))
		{
			fieldLayoutType = oFF.FieldLayoutType.ATTRIBUTE_BASED;
			if (dimension.supportsFieldLayoutType(fieldLayoutType))
			{
				dimension.setFieldLayoutType(fieldLayoutType);
			}
			fieldLayoutType = dimension.getFieldLayoutType();
			if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
			{
				var resultSetFields2 = dimension.getResultSetFields();
				resultSetFields2.clear();
				var mainAttribute = dimension.getMainAttribute();
				if (oFF.notNull(mainAttribute))
				{
					mainAttribute.getResultSetFields().clear();
				}
				var fieldName2;
				var iRsField;
				var resultsetSize = inaResultSetFields2.size();
				var duplicateNames = oFF.XHashSetOfString.create();
				for (iRsField = 0; iRsField < resultsetSize; iRsField++)
				{
					fieldName2 = inaResultSetFields2.getStringAt(iRsField);
					if (!duplicateNames.contains(fieldName2))
					{
						duplicateNames.add(fieldName2);
						var rsField = dimension.getFieldByName(fieldName2);
						if (oFF.isNull(rsField))
						{
							importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate2("Field not found: ", fieldName2));
							return;
						}
						resultSetFields2.add(rsField);
					}
				}
				inaResultSetFields2 = inaDimension.getListByKey("Attributes");
				if (oFF.notNull(inaResultSetFields2))
				{
					resultsetSize = inaResultSetFields2.size();
					for (iRsField = 0; iRsField < resultsetSize; iRsField++)
					{
						var inaStructure = inaResultSetFields2.getStructureAt(iRsField);
						fieldName2 = inaStructure.getStringByKey("Name");
						if (!duplicateNames.contains(fieldName2))
						{
							duplicateNames.add(fieldName2);
							var field2 = dimension.getFieldByNameOrAlias(fieldName2);
							if (oFF.isNull(field2))
							{
								importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate2("Field not found: ", fieldName2));
								return;
							}
							resultSetFields2.add(field2);
						}
					}
				}
			}
		}
		else if (dimension.isStructure())
		{
			oFF.QInADimension.resetFieldsToDefault(dimension);
		}
	}
};

oFF.QInADimensionsAll = function() {};
oFF.QInADimensionsAll.prototype = new oFF.QInAComponentWithList();
oFF.QInADimensionsAll.prototype._ff_c = "QInADimensionsAll";

oFF.QInADimensionsAll.exportTechnicalDimension = function(exporter, query, inaDimensionList, exportedDimensions)
{
	if (!exporter.capabilities.supportsUniversalModel())
	{
		return;
	}
	var queryCellManager = query.getQueryCellManager();
	if (queryCellManager.isEmpty())
	{
		return;
	}
	var dimensionByName = query.getDimensionByName("$$Cells$$");
	oFF.QInADimensionsAll.exportDimension(exporter, dimensionByName, inaDimensionList, exportedDimensions);
};
oFF.QInADimensionsAll.exportAxisDimensionsWithHeuristic = function(exporter, axis, parameterDimensionList, usedDimensions, exportedDimensions)
{
	var queryModel = axis.getQueryModel();
	var repositoryData = exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA);
	var optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	var dimCount = axis.getDimensionCount();
	for (var i = 0; i < dimCount; i++)
	{
		var dimension = axis.get(i);
		if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport())
		{
			continue;
		}
		if (repositoryData && !usedDimensions.contains(dimension.getName()))
		{
			continue;
		}
		oFF.QInADimensionsAll.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInADimensionsAll.exportAxisDimensions = function(exporter, axis, parameterDimensionList, exportedDimensions)
{
	var dimCount = axis.getDimensionCount();
	if (!oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionRequired(exporter, axis))
	{
		for (var i = 0; i < dimCount; i++)
		{
			var dimension = axis.get(i);
			oFF.QInADimensionsAll.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
		}
	}
	else
	{
		var dimensionWithLeveledHierarchy = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis).getName();
		var udhDimensions = oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, axis);
		for (var k = 0; k < dimCount; k++)
		{
			var dim = axis.get(k);
			var dimName = dim.getName();
			if (oFF.XString.isEqual(dimName, dimensionWithLeveledHierarchy))
			{
				oFF.QInADimensionsAll.exportUdhDimensionsForConvertedLbh(exporter, axis, parameterDimensionList, udhDimensions, exportedDimensions, dim);
			}
			else if (!udhDimensions.contains(dimName))
			{
				oFF.QInADimensionsAll.exportDimension(exporter, dim, parameterDimensionList, exportedDimensions);
			}
		}
	}
};
oFF.QInADimensionsAll.exportUdhDimensionsForConvertedLbh = function(exporter, axis, parameterDimensionList, udhDimensions, exportedDimensions, dimensionWithLeveledHierarchy)
{
	var size = udhDimensions.size();
	for (var i = 0; i < size; i++)
	{
		var dim = axis.getQueryModel().getDimensionByName(udhDimensions.get(i));
		dim.stopEventing();
		var tmpAxis = dim.getAxisBase();
		var tmpHierarchyActive = dim.isHierarchyActive();
		var tmpResultVisibility = dim.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL);
		dim.setAxis(axis);
		if (tmpHierarchyActive)
		{
			dim.setHierarchyActive(false);
		}
		dim.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, i === 0 ? dimensionWithLeveledHierarchy.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL) : oFF.ResultVisibility.VISIBLE);
		oFF.QInADimensionsAll.exportDimension(exporter, dim, parameterDimensionList, exportedDimensions);
		dim.setAxis(tmpAxis);
		if (tmpHierarchyActive)
		{
			dim.setHierarchyActive(true);
		}
		dim.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, tmpResultVisibility);
		dim.resumeEventing();
	}
};
oFF.QInADimensionsAll.exportDimension = function(exporter, dimension, inaDimensionList, exportedDimensions)
{
	if (!exportedDimensions.contains(dimension.getName()))
	{
		exportedDimensions.add(dimension.getName());
		inaDimensionList.add(exporter.exportDimension(dimension, null));
	}
};
oFF.QInADimensionsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QInADimensionsAll.prototype.getTagName = function()
{
	return "Dimensions";
};
oFF.QInADimensionsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaList))
	{
		var queryModel = modelComponent;
		var dimensionManager = queryModel.getDimensionManagerBase();
		if (importer.mode !== oFF.QModelFormat.INA_DATA_REINIT)
		{
			var freeAxis = queryModel.getFreeAxis();
			freeAxis.addAll(dimensionManager);
		}
		var size = inaList.size();
		var dimensionReferences = dimensionManager.getDimensionReferences();
		for (var k = 0; k < size; k++)
		{
			var inaDimension = inaList.getStructureAt(k);
			var dimName = inaDimension.getStringByKey("Name");
			var dimAxisString = inaDimension.getStringByKey("Axis");
			var dimension = null;
			if (inaDimension.containsKey("FieldMappings"))
			{
				var importCalculatedDimension = importer.importCalculatedDimension(inaDimension, queryModel);
				dimensionManager.addDimension(importCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importCalculatedDimension);
			}
			else if (inaDimension.containsKey("CType") && oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				var importFormulaCalculatedDimension = importer.importFormulaCalculatedDimension(inaDimension, queryModel, null);
				dimensionManager.addDimension(importFormulaCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importFormulaCalculatedDimension);
			}
			else
			{
				if (dimensionReferences.containsKey(dimName))
				{
					var dimAxis = oFF.AxisType.lookup(dimAxisString);
					if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY || dimAxis === oFF.AxisType.COLUMNS || dimAxis === oFF.AxisType.ROWS)
					{
						dimension = dimensionManager.getDimensionByNameFromExistingMetadata(dimName);
					}
				}
				importer.importDimension(inaDimension, queryModel);
			}
			if (importer.mode !== oFF.QModelFormat.INA_DATA_REINIT)
			{
				if (oFF.isNull(dimension))
				{
					dimension = dimensionManager.getDimensionByNameInternal(dimName);
					if (oFF.isNull(dimension))
					{
						continue;
					}
				}
				if (oFF.isNull(dimAxisString))
				{
					dimAxisString = inaDimension.getStringByKeyExt("AxisDefault", "Free");
				}
				queryModel.getAxis(oFF.QInAConverter.lookupAxisType(dimAxisString)).add(dimension);
			}
		}
	}
	return modelComponent;
};
oFF.QInADimensionsAll.prototype.exportDimensionIfOnFreeAxis = function(dimension)
{
	var queryModel = dimension.getQueryModel();
	var usedDimensions = oFF.XHashSetOfString.create();
	var filter = queryModel.getFilter();
	if (filter.isDynamicFilterInitialized())
	{
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getDynamicFilter(), usedDimensions);
		var linkedFilters = filter.getLinkedFilters().getValuesAsReadOnlyList();
		for (var i = 0; i < linkedFilters.size(); i++)
		{
			var linkedFilter = linkedFilters.get(i);
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(linkedFilter, usedDimensions);
		}
	}
	var isDimensionFiltered = usedDimensions.contains(dimension.getName());
	if (dimension.isMeasureStructure())
	{
		var exceptionManager = queryModel.getExceptionManager();
		var hasExceptions = oFF.XCollectionUtils.hasElements(exceptionManager);
		return isDimensionFiltered || hasExceptions;
	}
	return isDimensionFiltered;
};
oFF.QInADimensionsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var inaDimensionList = oFF.PrFactory.createList();
	if (exporter.mode !== oFF.QModelFormat.INA_VALUE_HELP)
	{
		var query = modelComponent;
		var capabilities = query.getModelCapabilities();
		var exportedDimensions = oFF.XHashSetOfString.create();
		oFF.QInADimensionsAll.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.ROWS), inaDimensionList, exportedDimensions);
		oFF.QInADimensionsAll.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.COLUMNS), inaDimensionList, exportedDimensions);
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			var usedDimensions = oFF.XHashSetOfString.create();
			if (exporter.mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
			{
				oFF.DimensionUsageAnalyzer2.setupHeuristic(query, usedDimensions);
			}
			oFF.QInADimensionsAll.exportAxisDimensionsWithHeuristic(exporter, query.getAxis(oFF.AxisType.FREE), inaDimensionList, usedDimensions, exportedDimensions);
		}
		else if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			var isOutOfContextBlending = capabilities.supportsCubeBlendingOutOfContext() && query.isBlendingModel();
			var doExportFreeAxisForPlanning = query.getDataSource().getType() === oFF.MetaObjectType.PLANNING && exporter.getSession().hasFeature(oFF.FeatureToggleOlap.EXPORT_FREE_AXIS_FOR_PLANNING);
			var freeAxis = query.getAxis(oFF.AxisType.FREE);
			var sizeFreeAxis = freeAxis.size();
			var isAbap = exporter.isAbap(query);
			for (var idxFree = 0; idxFree < sizeFreeAxis; idxFree++)
			{
				var freeDimension = freeAxis.get(idxFree);
				var freeDimensionType = freeDimension.getDimensionType();
				if (freeDimensionType === oFF.DimensionType.MEASURE_STRUCTURE || freeDimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					var exportStructure = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportStructure)
					{
						oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType === oFF.DimensionType.ACCOUNT)
				{
					var exportAccountOnFreeAxis = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportAccountOnFreeAxis)
					{
						oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType.isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION) || isOutOfContextBlending || (isAbap || doExportFreeAxisForPlanning) && (freeDimension.isHierarchyActive() || freeDimension.hasPlaceHolderForHierarchyInfo()))
				{
					oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
				}
			}
			oFF.QInADimensionsAll.exportTechnicalDimension(exporter, query, inaDimensionList, exportedDimensions);
		}
	}
	return inaDimensionList;
};

oFF.QInADrillManager = function() {};
oFF.QInADrillManager.prototype = new oFF.QInAComponentWithList();
oFF.QInADrillManager.prototype._ff_c = "QInADrillManager";

oFF.QInADrillManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QInADrillManager.prototype.getTagName = function()
{
	return "HierarchyNavigations";
};
oFF.QInADrillManager.prototype.getZoomDrillPath = function(importer, drillManager, inaStructure, context)
{
	var drillPath = oFF.XList.create();
	var drillContext = inaStructure.getListByKey("DrillContextMembers");
	if (oFF.notNull(drillContext))
	{
		var size = drillContext.size();
		for (var idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
		{
			var drillCtx = drillContext.getStructureAt(idxHierCtx);
			var drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
			drillPath.add(drillPathElement);
		}
	}
	var drillState = inaStructure.getStringByKey("DrillState");
	var drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.isNull(drillMember) || oFF.isNull(drillState))
	{
		return null;
	}
	var drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
	drillPath.add(drillPathElementMember);
	return drillPath;
};
oFF.QInADrillManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var drillManager = modelComponent;
	var size;
	drillManager.removeAllContextDrillOperations();
	drillManager.removeZoomDrillOperationsByDimension(null);
	if (oFF.notNull(inaList))
	{
		var previousZoomStackPosition = -1;
		size = inaList.size();
		for (var idxHierNav = 0; idxHierNav < size; idxHierNav++)
		{
			var subStructure = inaList.getStructureAt(idxHierNav);
			var zoomDrillStackPosition = subStructure.getIntegerByKeyExt("ZoomDrillStackPosition", -1);
			if (zoomDrillStackPosition === -1)
			{
				importer.importDrillOperation(subStructure, drillManager, context);
			}
			else if (zoomDrillStackPosition > -1)
			{
				var zoomDrillPath = this.getZoomDrillPath(importer, drillManager, subStructure, context);
				if (oFF.XCollectionUtils.hasElements(zoomDrillPath))
				{
					if (zoomDrillStackPosition !== previousZoomStackPosition)
					{
						drillManager.pushEmptyZoomDrillForDimension(zoomDrillPath.get(zoomDrillPath.size() - 1).getDimension());
						previousZoomStackPosition = zoomDrillStackPosition;
					}
					var hideRoots = subStructure.getIntegerByKeyExt("DrillOffset", 0) > 0;
					drillManager.addZoomDrillPath(zoomDrillPath, hideRoots);
				}
			}
		}
	}
	return modelComponent;
};
oFF.QInADrillManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var drillManager = modelComponent;
	var capabilities = drillManager.getModelCapabilities();
	var inaOperationsList = null;
	var drillOperations;
	if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.getMode().isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
	{
		drillOperations = drillManager.getDrillOperationsForInAData();
	}
	else
	{
		drillOperations = drillManager.getDrillOperationsForInARepo();
	}
	var drillOpCount = drillOperations.size();
	if (drillOpCount > 0)
	{
		var queryModel = drillManager.getQueryModel();
		var inaDeltaOperation = null;
		var deltaDimension = null;
		inaOperationsList = oFF.PrFactory.createList();
		var deltaOperation = null;
		if (capabilities.supportsHierarchyNavigationDeltaMode())
		{
			deltaOperation = drillOperations.get(drillOpCount - 1);
			var targetDimensionDelta = deltaOperation.getTargetDimension();
			if (oFF.notNull(targetDimensionDelta) && targetDimensionDelta.isHierarchyNavigationDeltaMode())
			{
				deltaDimension = targetDimensionDelta;
				inaDeltaOperation = exporter.exportDrillOperation(deltaOperation);
			}
		}
		var isAbap = exporter.isAbap(queryModel);
		if (!isAbap && exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.getMode().isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
		{
			drillOperations = drillOperations.createListCopy();
			if (oFF.notNull(deltaDimension))
			{
				drillOperations.removeElement(deltaOperation);
				drillOpCount = drillOperations.size();
			}
			if (drillOpCount > 0)
			{
				drillOperations.sortByComparator(oFF.XComparatorDrill.create());
			}
		}
		var i;
		for (i = 0; i < drillOpCount; i++)
		{
			var operation = drillOperations.get(i);
			if (operation.getType() === oFF.DrillOperationType.CONTEXT)
			{
				var targetDimension = operation.getTargetDimension();
				if (oFF.isNull(deltaDimension) || deltaDimension !== targetDimension)
				{
					if (!isAbap && targetDimension.getInitialDrillLevel() < 0 && operation.getDrillState() === oFF.DrillState.EXPANDED)
					{
						continue;
					}
					inaOperationsList.add(exporter.exportDrillOperation(operation));
				}
			}
		}
		if (oFF.notNull(inaDeltaOperation))
		{
			inaOperationsList.add(inaDeltaOperation);
		}
		if (inaOperationsList.isEmpty())
		{
			inaOperationsList = null;
		}
	}
	return inaOperationsList;
};

oFF.QInADrillPathElement = function() {};
oFF.QInADrillPathElement.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADrillPathElement.prototype._ff_c = "QInADrillPathElement";

oFF.QInADrillPathElement.prototype.getComponentType = function()
{
	return oFF.MemberType.DRILL_PATH_ELEMENT;
};
oFF.QInADrillPathElement.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var drillManager = parentComponent;
	var queryModel = drillManager.getContext().getQueryModel();
	var fieldName = inaStructure.getStringByKey("FieldName");
	var dimensionName = inaStructure.getStringByKey("DimensionName");
	var dimension;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensionName);
	}
	else
	{
		var field = queryModel.getFieldByNameOrAlias(fieldName);
		if (oFF.isNull(field))
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimension))
			{
				field = dimension.getKeyField();
				fieldName = field.getName();
			}
		}
		else
		{
			dimension = field.getDimension();
		}
	}
	var element = oFF.QDrillPathElement._create(context);
	element.setDimension(dimension);
	var member = inaStructure.getStringByKey("Member");
	element.setName(member);
	element.setFieldName(fieldName);
	return element;
};
oFF.QInADrillPathElement.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var element = modelComponent;
	var name = element.getNameForInAExport();
	if (oFF.isNull(name))
	{
		inaStructure.putNull("Member");
	}
	else
	{
		var queryModel = element.getQueryModel();
		if (oFF.isNull(queryModel) && element.getDimension() !== null)
		{
			queryModel = element.getDimension().getQueryModel();
		}
		var memberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, name, exporter);
		inaStructure.putString("Member", memberName);
	}
	inaStructure.putString("FieldName", element.getFieldName());
	if (exporter.mode === oFF.QModelFormat.INA_REPOSITORY)
	{
		var dimension = element.getDimension();
		oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "DimensionName", dimension);
	}
	return inaStructure;
};

oFF.QInADrillPathOperation = function() {};
oFF.QInADrillPathOperation.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADrillPathOperation.prototype._ff_c = "QInADrillPathOperation";

oFF.QInADrillPathOperation.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_OPERATION;
};
oFF.QInADrillPathOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var drillManager = parentComponent;
	var drillState = inaStructure.getStringByKey("DrillState");
	var drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.isNull(drillMember) || oFF.isNull(drillState))
	{
		return null;
	}
	var drillPath = oFF.XList.create();
	var drillContext = inaStructure.getListByKey("DrillContextMembers");
	if (oFF.notNull(drillContext))
	{
		var size = drillContext.size();
		for (var idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
		{
			var drillCtx = drillContext.getStructureAt(idxHierCtx);
			var drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
			drillPath.add(drillPathElement);
		}
	}
	var drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
	drillPath.add(drillPathElementMember);
	var drillOperation = drillManager.setDrillState(drillPath, oFF.QInAConverter.lookupDrillStateOp(drillState));
	var level = inaStructure.getIntegerByKeyExt("DrillLevel", 1);
	drillOperation.setRelativeLevelCount(level);
	return drillOperation;
};
oFF.QInADrillPathOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var operation = modelComponent;
	if (operation.getType() === oFF.DrillOperationType.CONTEXT)
	{
		var inADrillState = oFF.QInAConverter.lookupDrillStateInA(operation.getDrillState());
		inaStructure.putString("DrillState", inADrillState);
		var relativeLevelCount = operation.getRelativeLevelCount();
		if (relativeLevelCount !== 1)
		{
			inaStructure.putInteger("DrillLevel", relativeLevelCount);
		}
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
		{
			if (operation.supportsDrillCounter())
			{
				inaStructure.putInteger("HierarchyNavigationCounter", operation.getDrillCounter());
			}
		}
		else
		{
			if (operation.getZoomStackPosition() !== -1)
			{
				inaStructure.putInteger("ZoomDrillStackPosition", operation.getZoomStackPosition());
			}
			if (operation.getRelativeLevelOffset() !== 0)
			{
				inaStructure.putInteger("DrillOffset", operation.getRelativeLevelOffset());
			}
		}
		var drillPath = operation.getDrillPath();
		var drillPathCount = drillPath.size();
		if (drillPathCount > 0)
		{
			var element = drillPath.get(drillPathCount - 1);
			var inaPathElement = exporter.exportDrillPathElement(element, false);
			inaStructure.put("DrillMember", inaPathElement);
			if (drillPathCount > 1)
			{
				var inaDrillContextMembers = oFF.PrFactory.createList();
				inaStructure.put("DrillContextMembers", inaDrillContextMembers);
				for (var k = 0; k < drillPathCount - 1; k++)
				{
					element = drillPath.get(k);
					inaPathElement = exporter.exportDrillPathElement(element, true);
					inaDrillContextMembers.add(inaPathElement);
				}
			}
		}
	}
	return inaStructure;
};

oFF.QInAExceptions = function() {};
oFF.QInAExceptions.prototype = new oFF.QInAComponentWithList();
oFF.QInAExceptions.prototype._ff_c = "QInAExceptions";

oFF.QInAExceptions.importEvaluates = function(inaException, member, newException, importer)
{
	var inaEvaluates = inaException.getListByKey("EvaluateOn");
	if (oFF.isNull(inaEvaluates))
	{
		return;
	}
	var size = inaEvaluates.size();
	var queryModel = member.getQueryModel();
	for (var evalIdx = 0; evalIdx < size; evalIdx++)
	{
		var inaEvaluate = inaEvaluates.getStructureAt(evalIdx);
		var fieldName = inaEvaluate.getStringByKey("Name");
		var someField = queryModel.getFieldByName(fieldName);
		if (oFF.isNull(someField))
		{
			var dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimensionByName))
			{
				someField = dimensionByName.getKeyField();
			}
		}
		if (oFF.isNull(someField))
		{
			someField = member.getKeyFieldValue().getField();
		}
		if (oFF.isNull(someField))
		{
			importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Could not find field '", fieldName, "'!"));
			return;
		}
		if (!inaEvaluate.containsKey("Low"))
		{
			importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("No low value for field: ", fieldName));
			return;
		}
		var valueType = someField.getValueType();
		var lowValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "Low", valueType);
		if (importer.hasErrors())
		{
			importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected low valuetype for field: ", valueType.getName()));
			return;
		}
		var newEvaluate = newException._addNewEvaluateWithFieldInternal(someField, lowValue);
		if (inaEvaluate.containsKey("High"))
		{
			var highValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "High", valueType);
			if (importer.hasErrors())
			{
				importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected high valuetype for field: ", valueType.getName()));
				return;
			}
			newEvaluate.setHighValue(highValue);
		}
		newEvaluate.setEvaluate(oFF.QExceptionEvalType.lookupExceptionEvalType(inaEvaluate.getStringByKey("Evaluate")));
		var operatorName = inaEvaluate.getStringByKey("Comparison");
		var operator = oFF.QInAConverter.lookupComparison(operatorName);
		if (oFF.isNull(operator))
		{
			importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate3("Unexpected comparison operator for evaluate: Operator: '", operatorName, "'"));
			return;
		}
		newEvaluate.setOperator(operator);
	}
};
oFF.QInAExceptions.importThresholds = function(inaException, newException)
{
	var inaThresholds = inaException.getListByKey("Threshold");
	if (oFF.notNull(inaThresholds))
	{
		var size = inaThresholds.size();
		for (var thresholdIdx = 0; thresholdIdx < size; thresholdIdx++)
		{
			var inaThreshold = inaThresholds.getStructureAt(thresholdIdx);
			var alertLevel = inaThreshold.getIntegerByKeyExt("AlertLevel", -9999);
			var newThreshold;
			var isDouble = !inaThreshold.hasStringByKey("Low");
			if (isDouble)
			{
				newThreshold = newException._addNewThresholdInternal(inaThreshold.getDoubleByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			else
			{
				newThreshold = newException._addNewThresholdWithStringInternal(inaThreshold.getStringByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			var name = inaThreshold.getStringByKey("Name");
			if (oFF.notNull(name))
			{
				newThreshold.setName(name);
			}
			var operator = oFF.QInAConverter.lookupComparison(inaThreshold.getStringByKey("Comparison"));
			newThreshold.setOperator(operator);
			if (operator.getNumberOfParameters() === 2)
			{
				if (isDouble)
				{
					var highDouble = inaThreshold.getDoubleByKey("High");
					newThreshold.setHighValue(highDouble);
				}
				else
				{
					var highString = inaThreshold.getStringByKey("High");
					newThreshold.setHigh(highString);
				}
			}
			oFF.QInAExceptions.importSettings(inaThreshold.getListByKey("Settings"), newThreshold);
		}
	}
};
oFF.QInAExceptions.importSettings = function(inaSettings, newThreshold)
{
	if (oFF.isNull(inaSettings))
	{
		return;
	}
	var size = inaSettings.size();
	for (var iSetting = 0; iSetting < size; iSetting++)
	{
		var inaSetting = inaSettings.getStructureAt(iSetting);
		var name = inaSetting.getStringByKey("Name");
		var priority = inaSetting.getIntegerByKey("Priority");
		var value = inaSetting.getStringByKey("Value");
		if (oFF.notNull(value) && !oFF.XString.isEqual(value, ""))
		{
			var newSetting = newThreshold.addNewSetting(name, priority);
			newSetting.setValue(value);
		}
	}
};
oFF.QInAExceptions.exportStructureContextItem = function(structureContext, member, exception)
{
	if (oFF.notNull(member))
	{
		var structure = structureContext.addNewStructure();
		var dimension = member.getDimension();
		structure.putString("DimensionName", dimension.getName());
		structure.putString("MemberName", member.getName());
		if (exception.isEvaluateAllMembers(dimension))
		{
			structure.putBoolean("EvaluateAllMembers", true);
		}
		var memberForDisplay = exception.getDisplayOnOtherMember(member);
		oFF.QInAExportUtil.setNameIfNotNull(structure, "DisplayOnOtherMember", memberForDisplay);
	}
};
oFF.QInAExceptions.exportEvaluates = function(evaluates, exporter, inaStructure, isBw)
{
	if (evaluates.isEmpty())
	{
		return;
	}
	var inaEvaluatesList = inaStructure.putNewList("EvaluateOn");
	var sizeEvaluates = evaluates.size();
	for (var iEvaluate = 0; iEvaluate < sizeEvaluates; iEvaluate++)
	{
		var inaEvaluateStruct = inaEvaluatesList.addNewStructure();
		var evaluate = evaluates.get(iEvaluate);
		inaEvaluateStruct.putString("Name", evaluate.getField().getName());
		inaEvaluateStruct.putString("Evaluate", evaluate.getEvaluate().toString());
		var comparisonOperator = evaluate.getOperator();
		var comparison;
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			comparison = "NOTBETWEEN";
		}
		else
		{
			comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
		}
		inaEvaluateStruct.putString("Comparison", comparison);
		oFF.QInAValueUtils.exportPlaceholderValue(exporter, "Low", inaEvaluateStruct, evaluate.getLowValue(), evaluate.getValueType(), evaluate.getQueryModel());
		if (!inaEvaluateStruct.containsKey("Low"))
		{
			inaEvaluateStruct.putString("Low", "");
		}
		if (comparisonOperator.getNumberOfParameters() > 1)
		{
			oFF.QInAValueUtils.exportPlaceholderValue(exporter, "High", inaEvaluateStruct, evaluate.getHighValue(), evaluate.getValueType(), evaluate.getQueryModel());
		}
	}
};
oFF.QInAExceptions.exportThresholds = function(thresholds, exporter, inaStructure, isBw)
{
	var inaThresholdsList = inaStructure.putNewList("Threshold");
	var sizeThresholds = thresholds.size();
	for (var iThreshold = 0; iThreshold < sizeThresholds; iThreshold++)
	{
		var threshold = thresholds.get(iThreshold);
		var inaThresholdStruct = inaThresholdsList.addNewStructure();
		var name = threshold.getName();
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && !oFF.XString.isEqual(name, "Settings"))
		{
			inaThresholdStruct.putStringNotNull("Name", name);
		}
		var comparisonOperator = threshold.getOperator();
		var comparison;
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			comparison = "NOTBETWEEN";
		}
		else
		{
			comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
		}
		inaThresholdStruct.putString("Comparison", comparison);
		var isDouble = threshold.getValueType() === oFF.XValueType.DOUBLE;
		if (threshold.getLowXValue() !== null)
		{
			if (isDouble)
			{
				inaThresholdStruct.putDouble("Low", threshold.getLowValue());
			}
			else
			{
				inaThresholdStruct.putString("Low", threshold.getLow());
			}
		}
		if (threshold.getHighXValue() !== null && comparisonOperator.getNumberOfParameters() > 1)
		{
			if (isDouble)
			{
				inaThresholdStruct.putDouble("High", threshold.getHighValue());
			}
			else
			{
				inaThresholdStruct.putString("High", threshold.getHigh());
			}
		}
		if (!threshold.isEmpty())
		{
			oFF.QInAExceptions.exportSettings(threshold, exporter, inaThresholdStruct);
		}
		else
		{
			inaThresholdStruct.putInteger("AlertLevel", threshold.getAlertLevel().getLevel());
		}
	}
};
oFF.QInAExceptions.exportSettings = function(threshold, exporter, inaThresholdStruct)
{
	var inaSettings = inaThresholdStruct.putNewList("Settings");
	var size = threshold.size();
	for (var iSetting = 0; iSetting < size; iSetting++)
	{
		var setting = threshold.get(iSetting);
		var inaSetting = inaSettings.addNewStructure();
		inaSetting.putString("Name", setting.getName());
		inaSetting.putInteger("Priority", setting.getPriority());
		var value = setting.getValue();
		if (oFF.isNull(value) || oFF.XString.isEqual(value, ""))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Exception Threshold Setting is missing it's value");
		}
		else
		{
			inaSetting.putString("Value", value);
		}
	}
};
oFF.QInAExceptions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_MANAGER;
};
oFF.QInAExceptions.prototype.getTagName = function()
{
	return "Exceptions";
};
oFF.QInAExceptions.prototype.isVersion1 = function(qInA, modelComponent)
{
	var componentType = modelComponent.getOlapComponentType();
	return !qInA.capabilities.supportsExceptionsV2() && componentType.isTypeOf(oFF.MemberType.ABSTRACT_MEMBER);
};
oFF.QInAExceptions.prototype.isVersion2 = function(qInA, modelComponent)
{
	var componentType = modelComponent.getOlapComponentType();
	return qInA.capabilities.supportsExceptionsV2() && componentType.isTypeOf(oFF.OlapComponentType.QUERY_MODEL);
};
oFF.QInAExceptions.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var modelComponent2 = modelComponent;
	var exceptionManager = modelComponent2.getQueryModel().getExceptionManager();
	exceptionManager.queueEventing();
	if (this.isVersion1(importer, modelComponent))
	{
		exceptionManager.removeAllExceptionsOfMeasure(modelComponent);
		this.importFormatV1(importer, inaList, modelComponent, exceptionManager);
	}
	else if (this.isVersion2(importer, modelComponent))
	{
		exceptionManager.clear();
		this.importFormatV2(importer, inaList, modelComponent, exceptionManager);
	}
	exceptionManager.resumeEventing();
	return exceptionManager;
};
oFF.QInAExceptions.prototype.importFormatV1 = function(importer, inaList, member, exceptionManager)
{
	if (oFF.notNull(inaList))
	{
		var size = inaList.size();
		for (var exceptionIdx = 0; exceptionIdx < size; exceptionIdx++)
		{
			var inaException = inaList.getStructureAt(exceptionIdx);
			var newException = this.importException(importer, member, exceptionManager, inaException);
			newException.setMeasure(member);
			newException.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
		}
	}
};
oFF.QInAExceptions.prototype.importException = function(importer, member, exceptionManager, inaException)
{
	var exceptionName = inaException.getStringByKey("Name");
	var exceptionText = inaException.getStringByKey("Text");
	var evalType = oFF.QExceptionEvalType.lookupExceptionEvalType(inaException.getStringByKey("EvaluateDefault"));
	var headerSettings = oFF.QExceptionHeaderSettings.lookupExceptionHeaderSetting(inaException.getStringByKey("ApplySettingsToHeader"));
	var isActive = inaException.getBooleanByKeyExt("Active", true);
	var isEvalAfterCalc = inaException.getBooleanByKeyExt("EvaluateBeforePostAggregation", true);
	var newException = exceptionManager._addNewExceptionInternal(exceptionName, exceptionText, evalType, headerSettings, isActive, !isEvalAfterCalc);
	newException.queueEventing();
	oFF.QInAExceptions.importEvaluates(inaException, member, newException, importer);
	oFF.QInAExceptions.importThresholds(inaException, newException);
	newException.resumeEventing();
	return newException;
};
oFF.QInAExceptions.prototype.importFormatV2 = function(importer, inaList, queryModel, exceptionManager)
{
	if (oFF.isNull(inaList))
	{
		return;
	}
	var sizeExceptions = inaList.size();
	for (var iException = 0; iException < sizeExceptions; iException++)
	{
		var inaException = inaList.getStructureAt(iException);
		var structureContext = inaException.getListByKey("StructureContext");
		if (!oFF.PrUtils.isListEmpty(structureContext))
		{
			var exception = this.importContextItem(structureContext.getStructureAt(0), queryModel, exceptionManager, null, importer, inaException);
			if (oFF.notNull(exception))
			{
				if (structureContext.size() > 1)
				{
					this.importContextItem(structureContext.getStructureAt(1), queryModel, exceptionManager, exception, importer, inaException);
				}
				exception.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
			}
		}
	}
};
oFF.QInAExceptions.prototype.importContextItem = function(structure, queryModel, exceptionManager, exception, importer, inaException)
{
	var importedException = exception;
	var dimension = queryModel.getDimensionByNameFromExistingMetadata(structure.getStringByKey("DimensionName"));
	if (oFF.notNull(dimension))
	{
		var member = this.getMemberFromContextItem(structure, dimension);
		if (oFF.notNull(member))
		{
			if (oFF.isNull(importedException))
			{
				importedException = this.importException(importer, member, exceptionManager, inaException);
			}
			if (dimension.isMeasureStructure())
			{
				importedException.setMeasure(member);
			}
			else
			{
				importedException.setStructure(member);
			}
			importedException.displayOnOtherMember(member, dimension.getStructureMember(structure.getStringByKey("DisplayOnOtherMember")));
			importedException.setEvaluateAllMembers(dimension, structure.getBooleanByKeyExt("EvaluateAllMembers", false));
		}
	}
	return importedException;
};
oFF.QInAExceptions.prototype.getMemberFromContextItem = function(structure, dimension)
{
	var member = dimension.getStructureMember(structure.getStringByKey("MemberName"));
	if (oFF.isNull(member))
	{
		var evaluateAllMembers = structure.getBooleanByKeyExt("EvaluateAllMembers", false);
		var allStructureMembers = dimension.getAllStructureMembers();
		if (evaluateAllMembers && !allStructureMembers.isEmpty())
		{
			return allStructureMembers.get(0);
		}
	}
	return member;
};
oFF.QInAExceptions.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	if (this.isVersion1(exporter, modelComponent))
	{
		return this.exportFormatV1(exporter, modelComponent);
	}
	else if (this.isVersion2(exporter, modelComponent))
	{
		return this.exportFormatV2(exporter, modelComponent);
	}
	return null;
};
oFF.QInAExceptions.prototype.exportFormatV1 = function(exporter, structureMember)
{
	var inaExceptionsList = null;
	var exceptions = structureMember.getExceptions();
	if (oFF.notNull(exceptions))
	{
		var sizeExceptions = exceptions.size();
		if (sizeExceptions > 0)
		{
			inaExceptionsList = oFF.PrFactory.createList();
			var isBw = exporter.isAbap(structureMember);
			for (var iException = 0; iException < sizeExceptions; iException++)
			{
				var exception = exceptions.get(iException);
				var structure = this.exportException(exporter, exception, isBw);
				if (oFF.isNull(structure))
				{
					break;
				}
				inaExceptionsList.add(structure);
			}
		}
	}
	return inaExceptionsList;
};
oFF.QInAExceptions.prototype.exportException = function(exporter, exception, isBw)
{
	var inaExceptionStruct = oFF.PrFactory.createStructure();
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		inaExceptionStruct.putBoolean("Active", exception.isActive());
		inaExceptionStruct.putBoolean("EvaluateBeforePostAggregation", !exception.isEvaluatedAfterCalculations());
		inaExceptionStruct.putBoolean("Changegable", exception.isChangeable());
	}
	else if (isBw)
	{
		inaExceptionStruct.putBoolean("Active", exception.isActive());
	}
	else if (!exception.isActive())
	{
		exporter.addWarning(oFF.ErrorCodes.IMPORT_EXCEPTION_INACTIVE, oFF.XStringUtils.concatenate3("Exception '", exception.getName(), "' is inactive."));
		return null;
	}
	var thresholds = exception.getThresholds();
	if (thresholds.isEmpty() && !exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		exporter.addWarning(oFF.ErrorCodes.IMPORT_EXCEPTION_NO_THRESHOLDS, oFF.XStringUtils.concatenate3("Exception '", exception.getName(), "' has no threshold."));
		return null;
	}
	oFF.QInAExceptions.exportThresholds(thresholds, exporter, inaExceptionStruct, isBw);
	oFF.QInAExceptions.exportEvaluates(exception.getEvaluates(), exporter, inaExceptionStruct, isBw);
	inaExceptionStruct.putString("Name", exception.getName());
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || isBw)
	{
		inaExceptionStruct.putString("Text", exception.getText());
	}
	var headerSetting = exception.getHeaderSetting();
	if (headerSetting !== oFF.QExceptionHeaderSettings.NONE)
	{
		inaExceptionStruct.putString("ApplySettingsToHeader", headerSetting.getName());
	}
	inaExceptionStruct.putString("EvaluateDefault", exception.getEvaluateDefault().toString());
	return inaExceptionStruct;
};
oFF.QInAExceptions.prototype.exportFormatV2 = function(exporter, queryModel)
{
	var exceptionManager = queryModel.getExceptionManager();
	var size = exceptionManager.size();
	if (size === 0)
	{
		return null;
	}
	var exceptions = oFF.PrFactory.createList();
	var isBw = exporter.isAbap(queryModel);
	for (var i = 0; i < size; i++)
	{
		var exception = exceptionManager.get(i);
		var inaException = this.getExportedExceptionStructureByName(exceptions, exception.getName());
		if (oFF.isNull(inaException))
		{
			inaException = this.exportException(exporter, exception, isBw);
			if (oFF.isNull(inaException))
			{
				continue;
			}
			inaException.putNewList("StructureContext");
			exceptions.add(inaException);
		}
		var structureContext = inaException.getListByKey("StructureContext");
		oFF.QInAExceptions.exportStructureContextItem(structureContext, exception.getMeasure(), exception);
		oFF.QInAExceptions.exportStructureContextItem(structureContext, exception.getStructure(), exception);
	}
	return exceptions;
};
oFF.QInAExceptions.prototype.getExportedExceptionStructureByName = function(exceptions, exceptionName)
{
	var size = exceptions.size();
	for (var i = 0; i < size; i++)
	{
		var inaStructure = exceptions.getStructureAt(i);
		if (oFF.XString.isEqual(inaStructure.getStringByKey("Name"), exceptionName))
		{
			return inaStructure;
		}
	}
	return null;
};

oFF.QInAField = function() {};
oFF.QInAField.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAField.prototype._ff_c = "QInAField";

oFF.QInAField.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.QInAField.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var field = context.getFieldAccessorSingle().getFieldByName(inaStructure.getStringByKey("Name"));
	if (oFF.isNull(field))
	{
		return null;
	}
	var inaTextTransformation = inaStructure.getStringByKey("TextTransformation");
	if (oFF.notNull(inaTextTransformation))
	{
		field.setTextTransformation(oFF.QInAConverter.lookupTextTransformation(inaTextTransformation));
	}
	field.setDisplayFormat(inaStructure.getStringByKey("DisplayFormat"));
	if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		var inaFormula = inaStructure.getStructureByKey("Formula");
		if (oFF.notNull(inaFormula))
		{
			var newFieldFormula = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, field.getDimension(), inaStructure.getStructureByKey("Formula"), null, context);
			field.setFormulaItem(newFieldFormula);
		}
	}
	return field;
};
oFF.QInAField.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var field = modelComponent;
	var obtainabilityType = field.getObtainability();
	var hide = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.HIDE) > 0 || oFF.notNull(obtainabilityType) && obtainabilityType !== oFF.ObtainabilityType.ALWAYS;
	inaStructure.putString("Name", field.getName());
	if (!exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE))
	{
		inaStructure.putStringNotNull("DisplayFormat", field.getDisplayFormat());
	}
	var textTransformationType = field.getTextTransformation();
	if (oFF.notNull(textTransformationType))
	{
		inaStructure.putString("TextTransformation", oFF.QInAConverter.lookupTextTransformationInA(textTransformationType));
	}
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.mode === oFF.QModelFormat.INA_VALUE_HELP)
	{
		if (!exporter.capabilities.supportsExtendedSort() && !exporter.isVirtualInA(field.getQueryModel()))
		{
			var direction;
			if (exporter.modelContext === oFF.QContextType.SELECTOR)
			{
				if (field.isEqualTo(field.getDimension().getSelectorKeyField()))
				{
					direction = field.getDimension().getSelectorOrder();
					inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(direction));
				}
				else
				{
					inaStructure.putInteger("SortOrder", 0);
				}
			}
			else
			{
				if (field.hasSorting())
				{
					direction = field.getResultSetSorting().getDirection();
					inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(direction));
				}
				else if (field.getDimension().hasSorting())
				{
					var dimension = field.getDimension();
					direction = dimension.getResultSetSorting().getDirection();
					inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(direction));
				}
				else
				{
					inaStructure.putInteger("SortOrder", 0);
				}
			}
		}
		if (hide)
		{
			inaStructure.putString("Obtainability", "UserInterface");
		}
		else
		{
			inaStructure.putString("Obtainability", "Always");
		}
	}
	else if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		var calcField = field;
		if (calcField.getFormulaItem() !== null)
		{
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, calcField.getFormulaItem(), inaStructure.putNewStructure("Formula"), field.getQueryModel());
		}
	}
	if (exporter.isVirtualInA(field.getQueryModel()))
	{
		inaStructure.putBoolean("IsKey", field.isKeyField());
	}
	return inaStructure;
};

oFF.QInAFilter = function() {};
oFF.QInAFilter.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilter.prototype._ff_c = "QInAFilter";

oFF.QInAFilter.mergeAndExportFilterStateList = function(exporter, filterStateList)
{
	var mergedStructure = null;
	var selectionSize = filterStateList.size();
	if (selectionSize > 0)
	{
		if (selectionSize > 1)
		{
			var exportedFilters = oFF.XList.create();
			for (var i = 0; i < selectionSize; i++)
			{
				var currentFilterStructureElement = exporter.exportFilterExpression(filterStateList.get(i));
				if (oFF.notNull(currentFilterStructureElement))
				{
					exportedFilters.add(currentFilterStructureElement);
				}
			}
			var exportedSize = exportedFilters.size();
			if (exportedSize > 0)
			{
				if (exportedSize > 1)
				{
					mergedStructure = oFF.PrFactory.createStructure();
					var mergedSelectionStructure = mergedStructure.putNewStructure("Selection");
					var inaLogicalOperator = mergedSelectionStructure.putNewStructure("Operator");
					inaLogicalOperator.putString("Code", "And");
					var mergedSubSelections = inaLogicalOperator.putNewList("SubSelections");
					for (var j = 0; j < exportedSize; j++)
					{
						var exportedFilterSelection = exportedFilters.get(j).getStructureByKey("Selection");
						if (oFF.notNull(exportedFilterSelection))
						{
							mergedSubSelections.add(exportedFilterSelection);
						}
					}
				}
				else
				{
					mergedStructure = exportedFilters.get(0);
				}
			}
		}
		else
		{
			mergedStructure = exporter.exportFilterExpression(filterStateList.get(0));
		}
	}
	return mergedStructure;
};
oFF.QInAFilter.prototype.exportFilter = function(exporter, filter, filterExpressionState, layeredFilter, tmpFilter, zoomDisplayFilter, zoomDataFilter)
{
	if (!exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) && !exporter.mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
	{
		return exporter.exportFilterExpression(filterExpressionState);
	}
	if (oFF.notNull(layeredFilter) && layeredFilter.size() === 1 && oFF.notNull(zoomDataFilter) && !oFF.XCollectionUtils.hasElements(zoomDisplayFilter) && !exporter.mode.isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA))
	{
		var filterExpressionExternal = layeredFilter.getIterator().next();
		if (oFF.notNull(filterExpressionExternal) && !filterExpressionExternal.isReleased() && !filterExpressionExternal.getModelCapabilities().supportsMultiComplexFilter())
		{
			var effectiveSelectionContainer = filter.getEffectiveFilter();
			var effSelectContainerStructure = exporter.exportFilterExpression(effectiveSelectionContainer);
			if (oFF.notNull(effSelectContainerStructure))
			{
				return effSelectContainerStructure;
			}
		}
	}
	var transientReleasableObjects = oFF.XList.create();
	var selectionList = oFF.XList.create();
	if (this.isValidFilterExpression(filterExpressionState) && !this.shouldBeIgnored(exporter, filterExpressionState))
	{
		if (filter.isIgnoreInternalNonMeasureFilter())
		{
			selectionList.add(this.extractMeasureFilter(filterExpressionState, filterExpressionState.getContext(), transientReleasableObjects));
		}
		else
		{
			selectionList.add(this.decorateWithZoomFilter(filterExpressionState, zoomDisplayFilter, transientReleasableObjects));
		}
	}
	if (oFF.notNull(layeredFilter))
	{
		var externalizedDynamicFilterKey = filter.getExternalizedFilterName();
		var firstLayer = layeredFilter.getByKey(externalizedDynamicFilterKey);
		if (this.isValidFilterExpression(firstLayer) && !this.shouldBeIgnored(exporter, firstLayer))
		{
			var firstRuntimeExternalFilter = this.getRuntimeExternalFilter(firstLayer, filter, transientReleasableObjects);
			if (filter.isIgnoreInternalNonMeasureFilter())
			{
				selectionList.add(this.extractMeasureFilter(firstRuntimeExternalFilter, filterExpressionState.getContext(), transientReleasableObjects));
			}
			else
			{
				selectionList.add(this.decorateWithZoomFilter(firstRuntimeExternalFilter, zoomDisplayFilter, transientReleasableObjects));
			}
		}
		var keyIterator = layeredFilter.getKeysAsIteratorOfString();
		while (keyIterator.hasNext())
		{
			var key = keyIterator.next();
			if (!oFF.XString.isEqual(key, externalizedDynamicFilterKey))
			{
				var filterLayer = layeredFilter.getByKey(key);
				if (this.isValidFilterExpression(filterLayer) && !this.shouldBeIgnored(exporter, filterLayer))
				{
					var runtimeExternalFilter = this.getRuntimeExternalFilter(filterLayer, filter, transientReleasableObjects);
					selectionList.add(this.decorateWithZoomFilter(runtimeExternalFilter, zoomDisplayFilter, transientReleasableObjects));
				}
			}
		}
	}
	if (oFF.notNull(tmpFilter) && this.isValidFilterExpression(tmpFilter))
	{
		selectionList.add(this.decorateWithZoomFilter(tmpFilter, zoomDisplayFilter, transientReleasableObjects));
	}
	var additionalZoomFilter;
	if (oFF.XCollectionUtils.hasElements(zoomDisplayFilter))
	{
		additionalZoomFilter = oFF.QFilterExpression.createTransient(filterExpressionState.getContext());
		additionalZoomFilter.setComplexRoot(zoomDisplayFilter);
		selectionList.add(additionalZoomFilter);
		transientReleasableObjects.add(additionalZoomFilter);
	}
	if (oFF.XCollectionUtils.hasElements(zoomDataFilter))
	{
		var zoomDataLayer = oFF.QFilterExpression.createTransient(filterExpressionState.getContext());
		zoomDataLayer.setComplexRoot(zoomDataFilter);
		selectionList.add(zoomDataLayer);
		transientReleasableObjects.add(zoomDataLayer);
	}
	var exportResult = oFF.QInAFilter.mergeAndExportFilterStateList(exporter, selectionList);
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(transientReleasableObjects);
	return exportResult;
};
oFF.QInAFilter.prototype.shouldBeIgnored = function(exporter, filterExpression)
{
	return exporter.mode.isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA) && filterExpression.getTagging().containsKey("PersistedQueryIgnoreFilter");
};
oFF.QInAFilter.prototype.getRuntimeExternalFilter = function(inputFilterExpression, filter, transientReleasableObjects)
{
	var backProjectionFilterIds = filter.getBackProjectionFilterIds();
	var runtimeExternalFilter;
	if (oFF.notNull(backProjectionFilterIds) && backProjectionFilterIds.contains(inputFilterExpression.getUniqueId()))
	{
		runtimeExternalFilter = oFF.QFilterExpression.createTransient(filter.getContext());
		runtimeExternalFilter.copyFrom(inputFilterExpression, null);
		transientReleasableObjects.add(runtimeExternalFilter);
	}
	else
	{
		runtimeExternalFilter = inputFilterExpression;
	}
	return runtimeExternalFilter;
};
oFF.QInAFilter.prototype.extractMeasureFilter = function(filterExpressionState, context, transientReleasableObjects)
{
	var result;
	var filterRootElement = filterExpressionState.getFilterRootElement();
	if (oFF.isNull(filterRootElement))
	{
		result = filterExpressionState;
	}
	else
	{
		result = oFF.QFilterExpression.createTransient(context);
		result.setComplexRoot(this.copyAndSkipNonMeasureFilter(filterRootElement, context.getQueryModel()));
		transientReleasableObjects.add(result);
	}
	return result;
};
oFF.QInAFilter.prototype.copyAndSkipNonMeasureFilter = function(filterElement, queryModel)
{
	var childrenIterator;
	var modelComponentType = filterElement.getComponentType();
	if (modelComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) || modelComponentType.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		var dimension = queryModel.getDimensionByName(filterElement.getDimensionName());
		if (oFF.notNull(dimension) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.MEASURE_STRUCTURE))
		{
			return filterElement;
		}
	}
	else if (modelComponentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA) && !modelComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		var subCollector = this.createFilterAlgebraList(modelComponentType, queryModel);
		childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			var subClone = this.copyAndSkipNonMeasureFilter(childrenIterator.next(), queryModel);
			if (oFF.notNull(subClone))
			{
				subCollector.add(subClone);
			}
		}
		return subCollector;
	}
	return null;
};
oFF.QInAFilter.prototype.decorateWithZoomFilter = function(filterExpressionState, displayFilter, transientReleasableObjects)
{
	var result;
	var filterRootElement = filterExpressionState.getFilterRootElement();
	if (!oFF.XCollectionUtils.hasElements(displayFilter) || oFF.isNull(filterRootElement))
	{
		result = filterExpressionState;
	}
	else
	{
		var isConflicting = this.checkConflicting(filterRootElement, displayFilter, false);
		if (isConflicting)
		{
			result = oFF.QFilterExpression.createTransient(displayFilter.getContext());
			result.setComplexRoot(this.copyAndSkipConflicting(filterRootElement, displayFilter));
			transientReleasableObjects.add(result);
		}
		else
		{
			result = filterExpressionState;
		}
	}
	return result;
};
oFF.QInAFilter.prototype.copyAndSkipConflicting = function(filterElement, displayFilter)
{
	var childrenIterator;
	var modelComponentType = filterElement.getComponentType();
	if (modelComponentType.isTypeOf(oFF.OlapComponentType.FILTER_ELEMENT) && !this.checkConflicting(filterElement, displayFilter, false))
	{
		return filterElement;
	}
	else if (modelComponentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA) && !modelComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		var subCollector = this.createFilterAlgebraList(modelComponentType, displayFilter.getContext());
		childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			var subClone = this.copyAndSkipConflicting(childrenIterator.next(), displayFilter);
			if (oFF.notNull(subClone))
			{
				subCollector.add(subClone);
			}
		}
		return subCollector;
	}
	return null;
};
oFF.QInAFilter.prototype.createFilterAlgebraList = function(componentType, context)
{
	if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_PRODUCT))
	{
		return oFF.QFilterCartesianProduct._create(context, null);
	}
	if (componentType.isTypeOf(oFF.FilterComponentType.AND))
	{
		return oFF.QFilterAnd._create(context, null);
	}
	if (componentType.isTypeOf(oFF.FilterComponentType.OR))
	{
		return oFF.QFilterOr._create(context, null);
	}
	if (componentType.isTypeOf(oFF.FilterComponentType.NOT))
	{
		return oFF.QFilterNot._create(context, null);
	}
	return oFF.QFilterCartesianProduct._create(context, null);
};
oFF.QInAFilter.prototype.checkConflicting = function(filterElement, displayFilter, hierarchySet)
{
	var componentType = filterElement.getComponentType();
	var isConflicting;
	var childrenIterator;
	if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		var cartesianList = filterElement;
		if (!cartesianList.isConvertToFlatFilter() && displayFilter.getCartesianListByDimensionName(cartesianList.getDimensionName()) !== null)
		{
			var hierarchySetLocal = oFF.XStringUtils.isNotNullAndNotEmpty(cartesianList.getHierarchyName());
			childrenIterator = filterElement.getChildrenIterator();
			while (childrenIterator.hasNext())
			{
				isConflicting = this.checkConflicting(childrenIterator.next(), displayFilter, hierarchySetLocal);
				if (isConflicting)
				{
					return true;
				}
			}
		}
	}
	else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			isConflicting = this.checkConflicting(childrenIterator.next(), displayFilter, false);
			if (isConflicting)
			{
				return true;
			}
		}
	}
	else if (componentType.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		var operation = filterElement;
		var dimensionName = operation.getDimensionName();
		return !operation.isConvertToFlatFilter() && (hierarchySet || oFF.XStringUtils.isNotNullAndNotEmpty(operation.getHierarchyName())) && (oFF.isNull(dimensionName) || displayFilter.getCartesianListByDimensionName(dimensionName) !== null);
	}
	return false;
};
oFF.QInAFilter.prototype.isValidFilterExpression = function(filterExpressionState)
{
	if (oFF.isNull(filterExpressionState))
	{
		return false;
	}
	var filterRootElement = filterExpressionState.getFilterRootElement();
	if (oFF.isNull(filterRootElement))
	{
		return false;
	}
	var filterComponentType = filterRootElement.getOlapComponentType();
	return filterComponentType !== oFF.FilterComponentType.FILTER_ACROSS_MODELS && filterComponentType !== oFF.FilterComponentType.FILTER_MEASURE_BASED;
};

oFF.QInAFilterAlgebra = function() {};
oFF.QInAFilterAlgebra.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterAlgebra.prototype._ff_c = "QInAFilterAlgebra";

oFF.QInAFilterAlgebra.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.BOOLEAN_ALGEBRA;
};
oFF.QInAFilterAlgebra.prototype.getTagName = function()
{
	return "Operator";
};
oFF.QInAFilterAlgebra.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filterExpression = parentComponent;
	var inaSubSelections = inaStructure.getListByKey("SubSelections");
	if (oFF.notNull(inaSubSelections))
	{
		var code = inaStructure.getStringByKey("Code");
		var setWithChildren;
		if (oFF.XString.isEqual(code, "And"))
		{
			setWithChildren = oFF.QFilterAnd._create(context, filterExpression);
		}
		else if (oFF.XString.isEqual(code, "Not"))
		{
			setWithChildren = oFF.QFilterNot._create(context, filterExpression);
		}
		else
		{
			setWithChildren = oFF.QFilterOr._create(context, filterExpression);
		}
		var size = inaSubSelections.size();
		for (var i = 0; i < size; i++)
		{
			var subSelection = inaSubSelections.getStructureAt(i);
			var child = importer.importFilterElement(subSelection, null, filterExpression, context);
			if (oFF.notNull(child))
			{
				setWithChildren.add(child);
			}
		}
		if (setWithChildren.hasElements())
		{
			return setWithChildren;
		}
	}
	return null;
};
oFF.QInAFilterAlgebra.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var logicalContainer = modelComponent;
	var size = logicalContainer.size();
	if (size === 0)
	{
		return null;
	}
	var inaSubSelections = oFF.PrFactory.createList();
	for (var i = 0; i < size; i++)
	{
		var currentComponent = logicalContainer.get(i);
		var inaChildElement;
		if (currentComponent.getOlapComponentType() === oFF.FilterComponentType.TUPLE)
		{
			inaChildElement = exporter.exportFilterTuple(currentComponent);
		}
		else
		{
			inaChildElement = exporter.exportFilterElement(currentComponent);
		}
		if (oFF.notNull(inaChildElement) && inaChildElement.hasElements())
		{
			inaSubSelections.add(inaChildElement);
		}
	}
	if (inaSubSelections.isEmpty())
	{
		return null;
	}
	inaStructure.put("SubSelections", inaSubSelections);
	var type = logicalContainer.getComponentType();
	if (type.isTypeOf(oFF.FilterComponentType.AND))
	{
		inaStructure.putString("Code", "And");
	}
	else if (type.isTypeOf(oFF.FilterComponentType.OR))
	{
		inaStructure.putString("Code", "Or");
	}
	else if (type === oFF.FilterComponentType.NOT)
	{
		inaStructure.putString("Code", "Not");
	}
	return inaStructure;
};

oFF.QInAFilterAll = function() {};
oFF.QInAFilterAll.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterAll.prototype._ff_c = "QInAFilterAll";

oFF.QInAFilterAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QInAFilterAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filterComponent = modelComponent;
	importer.importFixedFilter(inaStructure, filterComponent, context);
	importer.importDynamicFilter(inaStructure, filterComponent, context);
	importer.importVisibilityFilter(inaStructure, filterComponent, context);
	return filterComponent;
};
oFF.QInAFilterAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var filter = modelComponent;
	if (filter.getQueryModel().isExportingFixedFilter())
	{
		exporter.exportFixedFilter(filter, inaStructure);
	}
	exporter.exportDynamicFilter(filter, inaStructure);
	exporter.exportVisibilityFilter(filter, inaStructure);
	return inaStructure;
};

oFF.QInAFilterCellValueOperand = function() {};
oFF.QInAFilterCellValueOperand.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterCellValueOperand.prototype._ff_c = "QInAFilterCellValueOperand";

oFF.QInAFilterCellValueOperand.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
};
oFF.QInAFilterCellValueOperand.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var low = inaStructure.getStringByKey("Low");
	if (oFF.XString.isEqual(low, ""))
	{
		low = null;
	}
	var high = inaStructure.getStringByKey("High");
	if (oFF.XString.isEqual(high, ""))
	{
		high = null;
	}
	var operator = oFF.QInAConverter.lookupComparison(inaStructure.getStringByKey("Comparison"));
	var operand = oFF.QFilterCellValueOperand._create(context, null, low, high, operator);
	operand.setIsExcluding(inaStructure.getBooleanByKey("IsExcluding"));
	return operand;
};
oFF.QInAFilterCellValueOperand.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var cellValueOperand = modelComponent;
	inaStructure.putBoolean("IsExcluding", cellValueOperand.isExcluding());
	var comparisonOperator = cellValueOperand.getComparisonOperator();
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	var lowValue = cellValueOperand.getLow();
	inaStructure.putString("Low", lowValue);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(lowValue) && cellValueOperand.isLowVariable())
	{
		inaStructure.putString("LowIs", "Variable");
	}
	if (comparisonOperator.getNumberOfParameters() === 2)
	{
		var highValue = cellValueOperand.getHigh();
		inaStructure.putString("High", highValue);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(highValue) && cellValueOperand.isHighVariable())
		{
			inaStructure.putString("HighIs", "Variable");
		}
	}
	return inaStructure;
};

oFF.QInAFilterConvertedTimeCartesianList = function() {};
oFF.QInAFilterConvertedTimeCartesianList.prototype = new oFF.QInAFilterCartesianList();
oFF.QInAFilterConvertedTimeCartesianList.prototype._ff_c = "QInAFilterConvertedTimeCartesianList";

oFF.QInAFilterConvertedTimeCartesianList.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST;
};

oFF.QInAFilterElement = function() {};
oFF.QInAFilterElement.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterElement.prototype._ff_c = "QInAFilterElement";

oFF.QInAFilterElement.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_ELEMENT;
};
oFF.QInAFilterElement.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filterExpression = parentComponent;
	var filterElement = modelComponent;
	if (inaStructure.containsKey("Operator"))
	{
		filterElement = importer.importFilterAlgebra(filterExpression, inaStructure, context);
	}
	else
	{
		var inaSetOperand = inaStructure.getStructureByKey("SetOperand");
		if (oFF.isNull(inaSetOperand))
		{
			if (inaStructure.containsKey("GeometryOperand"))
			{
				filterElement = importer.importFilterGeo(filterExpression, inaStructure, context);
			}
		}
		else
		{
			filterElement = importer.importCartesianList(inaSetOperand, filterElement, filterExpression, context);
		}
	}
	return filterElement;
};
oFF.QInAFilterElement.prototype.m_exportingAtLevel1 = false;
oFF.QInAFilterElement.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var filterElement = modelComponent;
	var type = filterElement.getComponentType();
	if (type.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		if (type === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			exporter.exportCartesianList(filterElement, inaStructure);
		}
		else if (type === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
		{
			exporter.exportConvertedTimeCartesianList(filterElement, inaStructure);
		}
		else if (type === oFF.FilterComponentType.CARTESIAN_PRODUCT)
		{
			exporter.exportFilterCartesianProduct(filterElement, inaStructure);
		}
		else
		{
			if (this.shouldContinueExport(filterElement, exporter))
			{
				exporter.exportFilterAlgebra(filterElement, inaStructure);
				if (this.m_exportingAtLevel1)
				{
					this.m_exportingAtLevel1 = false;
				}
			}
		}
	}
	else if (type.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		var filterOperation = filterElement;
		var comparisonOperator = filterOperation.getComparisonOperator();
		if (oFF.notNull(comparisonOperator))
		{
			if (comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
			{
				exporter.exportFilterGeo(filterOperation, inaStructure);
			}
			else
			{
				if (exporter.capabilities.supportsSetOperand())
				{
					var inaInnerElement = oFF.PrFactory.createStructure();
					var fieldMetadata = filterOperation.getFieldMetadata();
					if (oFF.notNull(fieldMetadata))
					{
						inaInnerElement.putString("FieldName", fieldMetadata.getName());
						var hierarchyName = filterOperation.getHierarchyName();
						if (oFF.notNull(hierarchyName))
						{
							var filterExpr = filterOperation.getFilterExpression() !== null ? filterOperation.getFilterExpression() : filterOperation.getParent().getFilterExpression();
							oFF.QInAHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(filterElement), inaInnerElement, null, filterExpr, filterOperation.getQueryManager(), fieldMetadata.getName(), hierarchyName, filterOperation.getHierarchyDueDate(), filterOperation.getHierarchyVersion());
						}
						if (filterOperation.isConvertToFlatFilter())
						{
							inaInnerElement.putBoolean("ConvertToFlatSelection", true);
						}
						var inaElementList = inaInnerElement.putNewList("Elements");
						var inaOperation = inaElementList.addNewStructure();
						exporter.exportFilterOperation(filterOperation, inaOperation);
						if (oFF.notNull(inaStructure))
						{
							inaStructure.put("SetOperand", inaInnerElement);
						}
					}
				}
			}
		}
	}
	else if (type.isTypeOf(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND))
	{
		var cellValueOperand = oFF.PrFactory.createStructure();
		var elements = cellValueOperand.putNewList("Elements");
		elements.add(exporter.exportCellValueOperand(filterElement));
		inaStructure.put("CellValueOperand", cellValueOperand);
	}
	return inaStructure;
};
oFF.QInAFilterElement.prototype.shouldContinueExport = function(filterElement, exporter)
{
	var isReInitFlow = oFF.notNull(exporter.variableProcessingDirective) && exporter.variableProcessingDirective === oFF.ProcessingStep.VARIABLE_DEFINITION;
	if (!isReInitFlow)
	{
		return true;
	}
	var queryModel = filterElement.getQueryModel();
	var modelCapabilities = filterElement.getModelCapabilities();
	if (modelCapabilities.supportsComplexTupleFilter() && oFF.notNull(queryModel))
	{
		if (!this.m_exportingAtLevel1)
		{
			this.m_exportingAtLevel1 = true;
			return true;
		}
		return false;
	}
	return true;
};

oFF.QInAFilterExpression = function() {};
oFF.QInAFilterExpression.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterExpression.prototype._ff_c = "QInAFilterExpression";

oFF.QInAFilterExpression.exportGlobalCellValueOperands = function(exporter, filterExpression)
{
	var inaGlobalCellValueOperands = null;
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		var inaElements = oFF.PrFactory.createList();
		if (filterExpression.isSuppressingNulls())
		{
			var nullSuppression = oFF.QFilterCellValueOperand.createForNullSuppression(filterExpression.getContext(), null);
			inaElements.add(exporter.exportCellValueOperand(nullSuppression));
		}
		var cellValueOperands = filterExpression.getCellValueOperands();
		var size = cellValueOperands.size();
		for (var i = 0; i < size; i++)
		{
			inaElements.add(exporter.exportCellValueOperand(cellValueOperands.get(i)));
		}
		if (!inaElements.isEmpty())
		{
			var inaCellValueOperands = oFF.PrFactory.createStructure();
			inaCellValueOperands.put("Elements", inaElements);
			inaGlobalCellValueOperands = oFF.PrFactory.createStructure();
			inaGlobalCellValueOperands.put("CellValueOperand", inaCellValueOperands);
		}
	}
	return inaGlobalCellValueOperands;
};
oFF.QInAFilterExpression.combineSetOperandWithCellValueOperand = function(inaExpression, inaGlobalCellValueOperands)
{
	if (oFF.QInAFilterExpression.isCellOperandEmpty(inaGlobalCellValueOperands) && !oFF.QInAFilterExpression.isSetOperandEmpty(inaExpression))
	{
		return inaExpression;
	}
	if (!oFF.QInAFilterExpression.isCellOperandEmpty(inaGlobalCellValueOperands) && oFF.QInAFilterExpression.isSetOperandEmpty(inaExpression))
	{
		var newInaSelection = oFF.PrFactory.createStructure();
		newInaSelection.put("Selection", inaGlobalCellValueOperands);
		return newInaSelection;
	}
	if (oFF.QInAFilterExpression.isCellOperandEmpty(inaGlobalCellValueOperands) && oFF.QInAFilterExpression.isSetOperandEmpty(inaExpression))
	{
		return null;
	}
	var inaVisibilityFilter = oFF.PrFactory.createStructure();
	var inaSelection = inaVisibilityFilter.putNewStructure("Selection");
	var inaOperator = inaSelection.putNewStructure("Operator");
	inaOperator.putString("Code", "And");
	var inaSubSelections = inaOperator.putNewList("SubSelections");
	var inaSet = inaExpression.getStructureByKey("Selection");
	if (oFF.isNull(inaSet))
	{
		var newSetOperand = oFF.PrFactory.createStructure();
		newSetOperand.put("SetOperand", inaExpression);
		inaSubSelections.add(newSetOperand);
	}
	else
	{
		inaSubSelections.add(inaSet);
	}
	inaSubSelections.add(inaGlobalCellValueOperands);
	return inaVisibilityFilter;
};
oFF.QInAFilterExpression.isCellOperandEmpty = function(inaFilter)
{
	if (oFF.notNull(inaFilter))
	{
		var inaSelection = inaFilter.getStructureByKey("Selection");
		var inaCellOperand;
		if (oFF.isNull(inaSelection))
		{
			inaCellOperand = inaFilter.getStructureByKey("CellValueOperand");
		}
		else
		{
			inaCellOperand = inaSelection.getStructureByKey("CellValueOperand");
		}
		if (oFF.notNull(inaCellOperand))
		{
			return inaCellOperand.getListByKey("Elements").isEmpty();
		}
	}
	return true;
};
oFF.QInAFilterExpression.isSetOperandEmpty = function(inaFilter)
{
	if (oFF.isNull(inaFilter))
	{
		return true;
	}
	var inaSelection = inaFilter.getStructureByKey("Selection");
	if (oFF.isNull(inaSelection))
	{
		inaSelection = inaFilter.getStructureByKey("SetOperand");
		var inaElements;
		if (oFF.isNull(inaSelection))
		{
			inaElements = inaFilter.getListByKey("Elements");
		}
		else
		{
			inaElements = inaSelection.getListByKey("Elements");
		}
		return oFF.PrUtils.isListEmpty(inaElements);
	}
	return inaSelection.getKeysAsReadOnlyListOfString().isEmpty();
};
oFF.QInAFilterExpression.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_EXPRESSION;
};
oFF.QInAFilterExpression.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filterExpression = modelComponent;
	if (oFF.isNull(filterExpression))
	{
		filterExpression = oFF.QFactory.createFilterExpression(context, parentComponent);
	}
	var version = 0;
	var inaSelection = null;
	if (oFF.notNull(inaStructure))
	{
		inaSelection = inaStructure.getStructureByKey("Selection");
		if (oFF.isNull(inaSelection))
		{
			inaSelection = inaStructure.getStructureByKey("SelectionRepo");
			version = 1;
		}
	}
	filterExpression.setCartesianProduct(null);
	filterExpression.setComplexRoot(null);
	if (oFF.notNull(inaSelection))
	{
		var filterElement = importer.importFilterElement(inaSelection, null, filterExpression, context);
		if (oFF.notNull(filterElement))
		{
			if (version >= 1)
			{
				filterExpression.setComplexRoot(filterElement);
			}
			else
			{
				var cartesianProduct = oFF.QFilterUtil.convertComplexFilterToCartesian(filterElement);
				if (oFF.notNull(cartesianProduct))
				{
					filterExpression.setCartesianProduct(cartesianProduct);
				}
				else
				{
					filterExpression.setComplexRoot(filterElement);
				}
			}
		}
	}
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		filterExpression.setIsSuppressingNulls(false);
		filterExpression.clearCellValueFilter();
		if (oFF.notNull(inaStructure))
		{
			if (importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
			{
				filterExpression.setIsSuppressingNulls(inaStructure.getBooleanByKeyExt("IsSuppressingNulls", false));
			}
			if (oFF.notNull(inaSelection))
			{
				var inaCellValueOperand = inaSelection.getStructureByKey("CellValueOperand");
				if (oFF.isNull(inaCellValueOperand))
				{
					var inaFilterAnd = inaSelection.getStructureByKey("Operator");
					if (oFF.notNull(inaFilterAnd))
					{
						var inaSubSelections = inaFilterAnd.getListByKey("SubSelections");
						if (inaSubSelections.size() === 2)
						{
							var inaSubSelectionStructure = inaSubSelections.getStructureAt(1);
							inaCellValueOperand = inaSubSelectionStructure.getStructureByKey("CellValueOperand");
						}
					}
				}
				if (oFF.notNull(inaCellValueOperand))
				{
					var inaElements = inaCellValueOperand.getListByKey("Elements");
					if (oFF.notNull(inaElements))
					{
						var nullSuppressionReference = oFF.QFilterCellValueOperand.createForNullSuppression(context, null);
						var size = inaElements.size();
						if (size > 0)
						{
							var inaNullSuppression = inaElements.getStructureAt(0);
							var nullSuppression = importer.importFilterCellValueOperand(inaNullSuppression, context);
							var startIdx = 0;
							if (nullSuppression.isEqualTo(nullSuppressionReference))
							{
								filterExpression.setIsSuppressingNulls(true);
								startIdx = 1;
							}
							filterExpression.clearCellValueFilter();
							for (var idx = startIdx; idx < size; idx++)
							{
								var inaCellElement = inaElements.getStructureAt(idx);
								var operand = importer.importFilterCellValueOperand(inaCellElement, context);
								filterExpression.addCellValueFilter(operand);
							}
						}
					}
				}
			}
		}
	}
	return filterExpression;
};
oFF.QInAFilterExpression.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInAFilterExpression.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	var filterExpression = modelComponent;
	if (oFF.isNull(filterExpression))
	{
		return null;
	}
	var inaGlobalCellValueOperands = null;
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		inaGlobalCellValueOperands = oFF.QInAFilterExpression.exportGlobalCellValueOperands(exporter, filterExpression);
	}
	var filterRootElement = filterExpression.getFilterRootElement();
	var inaSelection = null;
	if (oFF.notNull(filterRootElement))
	{
		if (filterRootElement.getOlapComponentType() === oFF.FilterComponentType.TUPLE)
		{
			inaSelection = exporter.exportFilterTuple(filterRootElement);
		}
		else if (filterRootElement.getOlapComponentType() === oFF.FilterComponentType.VIRTUAL_DATASOURCE)
		{
			inaSelection = exporter.exportFilterVirtualDatasource(filterRootElement);
		}
		else
		{
			inaSelection = exporter.exportFilterElement(filterRootElement);
		}
		if (oFF.notNull(inaSelection) && !inaSelection.hasElements())
		{
			inaSelection = null;
		}
	}
	var inaStructure = null;
	if (oFF.notNull(inaSelection))
	{
		inaStructure = oFF.PrFactory.createStructure();
		inaStructure.put("Selection", inaSelection);
	}
	if (oFF.notNull(inaGlobalCellValueOperands))
	{
		inaStructure = oFF.QInAFilterExpression.combineSetOperandWithCellValueOperand(inaStructure, inaGlobalCellValueOperands);
	}
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		if (oFF.isNull(inaStructure))
		{
			inaStructure = oFF.PrFactory.createStructure();
		}
		if (filterExpression.getModelCapabilities().supportsCellValueOperand())
		{
			inaStructure.putBoolean("IsSuppressingNulls", filterExpression.isSuppressingNulls());
		}
	}
	return inaStructure;
};

oFF.QInAFilterFixed = function() {};
oFF.QInAFilterFixed.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterFixed.prototype._ff_c = "QInAFilterFixed";

oFF.QInAFilterFixed.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_FIXED;
};
oFF.QInAFilterFixed.prototype.getTagName = function()
{
	return "FixedFilter";
};
oFF.QInAFilterFixed.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	var filter = parentComponent;
	var filterExpression = importer.importFilterExpression(null, inaStructure, filter, context);
	if (oFF.notNull(filter) && oFF.notNull(filterExpression))
	{
		filter.setFixedFilter(filterExpression);
	}
	return filterExpression;
};
oFF.QInAFilterFixed.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var filter = modelComponent;
	if (!filter.isFixedFilterInitialized())
	{
		return null;
	}
	var filterExpression = filter.getFixedFilter();
	return exporter.exportFilterExpression(filterExpression);
};

oFF.QInAFilterGeo = function() {};
oFF.QInAFilterGeo.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterGeo.prototype._ff_c = "QInAFilterGeo";

oFF.QInAFilterGeo.tryCreateGeometry = function(strValue)
{
	var value = oFF.XGeometryValue.createGeometryValueWithWkt(strValue);
	if (oFF.isNull(value))
	{
		value = oFF.XStringValue.create(strValue);
	}
	return value;
};
oFF.QInAFilterGeo.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.SPATIAL_FILTER;
};
oFF.QInAFilterGeo.prototype.getTagName = function()
{
	return "GeometryOperand";
};
oFF.QInAFilterGeo.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filterExpression = parentComponent;
	var fieldAccessor = context.getFieldAccessorSingle();
	var inaComparison = inaStructure.getStringByKey("Comparison");
	var inaFieldName = inaStructure.getStringByKey("FieldName");
	var inaValue1 = inaStructure.getStringByKey("Value1");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaComparison) && oFF.XStringUtils.isNotNullAndNotEmpty(inaFieldName) && oFF.XStringUtils.isNotNullAndNotEmpty(inaValue1))
	{
		var comparison = oFF.QInAConverter.lookupComparison(inaComparison);
		if (oFF.isNull(comparison))
		{
			return null;
		}
		if (!comparison.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			return null;
		}
		var field = fieldAccessor.getFieldByName(inaFieldName);
		if (oFF.isNull(field))
		{
			return null;
		}
		var geoFilter = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparison);
		var firstValue = oFF.QInAFilterGeo.tryCreateGeometry(inaValue1);
		geoFilter.getLow().setValue(firstValue);
		var inaValue2 = inaStructure.getStringByKey("Value2");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue2))
		{
			var secondValue = oFF.QInAFilterGeo.tryCreateGeometry(inaValue2);
			geoFilter.getHigh().setValue(secondValue);
		}
		var inaValue3 = inaStructure.getStringByKey("Value3");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue3))
		{
			var thirdValue = oFF.QInAFilterGeo.tryCreateGeometry(inaValue3);
			geoFilter.getThird().setValue(thirdValue);
		}
		return geoFilter;
	}
	return null;
};
oFF.QInAFilterGeo.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var operation = modelComponent;
	var comparisonOperator = operation.getComparisonOperator();
	if (!comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
	{
		throw oFF.XException.createIllegalStateException("Not a spatial operator");
	}
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	var fieldMd = operation.getFieldMetadata();
	inaStructure.putString("FieldName", fieldMd.getName());
	var geoValue1 = operation.getLow();
	var blendingDataSource = operation.getDataSource();
	if (oFF.isNull(blendingDataSource))
	{
		if (oFF.notNull(geoValue1) && geoValue1.getValue() !== null)
		{
			if (exporter.mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && geoValue1.getTagging().containsKey("PersistedQueryPlaceholder"))
			{
				inaStructure.putString("Value1", geoValue1.getTagging().getByKey("PersistedQueryPlaceholder"));
			}
			else
			{
				oFF.QInAValueUtils.exportFilterValue(exporter, "Value1", inaStructure, geoValue1, geoValue1.getValueType());
			}
			var srid = geoValue1.getGeometry().getSrid();
			if (exporter.capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
			{
				inaStructure.putInteger("SRID", srid.getInteger());
			}
		}
	}
	else
	{
		if (oFF.notNull(geoValue1) && geoValue1.getValue() !== null)
		{
			oFF.QInAValueUtils.exportFilterValue(exporter, "Value1", inaStructure, geoValue1, oFF.XValueType.STRING);
		}
		var inaBlendingDataSource = exporter.exportDataSource(blendingDataSource, false);
		inaStructure.put("DataSource", inaBlendingDataSource);
	}
	var geoValue2 = operation.getHigh();
	if (oFF.notNull(geoValue2) && geoValue2.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value2", inaStructure, geoValue2, oFF.XValueType.STRING);
	}
	var geoValue3 = operation.getThird();
	if (oFF.notNull(geoValue3) && geoValue3.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value3", inaStructure, geoValue3, oFF.XValueType.STRING);
	}
	return inaStructure;
};

oFF.QInAFilterManager = function() {};
oFF.QInAFilterManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterManager.prototype._ff_c = "QInAFilterManager";

oFF.QInAFilterManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filterManager = modelComponent;
	if (oFF.isNull(filterManager))
	{
		filterManager = context.getOlapEnv().getFilterManager();
	}
	var inaFilterManager = inaStructure.getStructureByKey("OlapFilterManager");
	var inaFilters = inaFilterManager.getStructureByKey("OlapFilters");
	var filterNameIt = inaFilters.getKeysAsIteratorOfString();
	while (filterNameIt.hasNext())
	{
		var filterName = filterNameIt.next();
		var filterExpression = filterManager.getFilterByName(filterName);
		importer.importFilterExpression(filterExpression, inaFilters.getStructureByKey(filterName), filterManager, filterManager.getContext());
	}
	return filterManager;
};
oFF.QInAFilterManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var inaFilterManager = inaStructure.putNewStructure("OlapFilterManager");
	var inaFilters = inaFilterManager.putNewStructure("OlapFilters");
	var filterManager = modelComponent;
	var filters = filterManager.getFilters();
	var filterNameIt = filters.getKeysAsIteratorOfString();
	while (filterNameIt.hasNext())
	{
		var filterName = filterNameIt.next();
		var filterExpression = filters.getByKey(filterName);
		inaFilters.put(filterName, exporter.exportFilterExpression(filterExpression));
	}
	return inaStructure;
};
oFF.QInAFilterManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_FILTER_MANAGER;
};

oFF.QInAFilterOperation = function() {};
oFF.QInAFilterOperation.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterOperation.prototype._ff_c = "QInAFilterOperation";

oFF.QInAFilterOperation.importValue = function(importer, variableContainer, field, value, valueType, inaElement, parameterName, parameterIsName, parameterNavigations)
{
	var inaValueIs = inaElement.getStringByKey(parameterIsName);
	var filterType = oFF.QInAConverter.lookupValueType(inaValueIs);
	if (filterType === oFF.XValueType.VARIABLE)
	{
		value.setFilterValueType(oFF.XValueType.VARIABLE);
		var variableName = inaElement.getStringByKey(parameterName);
		var variable = variableContainer.getVariables().getByKey(variableName);
		if (oFF.notNull(variable))
		{
			value.setVariableValue(variable);
		}
	}
	else
	{
		if (filterType === oFF.XValueType.CURRENT_MEMBER)
		{
			value.setFilterValueType(filterType);
		}
		if (oFF.notNull(parameterNavigations))
		{
			var lowNavigations = inaElement.getListByKey(parameterNavigations);
			if (oFF.notNull(lowNavigations))
			{
				var memberNavigations = value.getMemberNavigations();
				var lowSize = lowNavigations.size();
				for (var lowNaviIdx = 0; lowNaviIdx < lowSize; lowNaviIdx++)
				{
					memberNavigations.add(oFF.QInAFilterOperation.importMemberNavigation(lowNavigations.getStructureAt(lowNaviIdx)));
				}
			}
		}
		oFF.QInAValueUtils.importValue(importer, value, inaElement, parameterName, valueType, field);
	}
};
oFF.QInAFilterOperation.importMemberNavigation = function(inaNavigation)
{
	var memberNavigation = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.lookup(inaNavigation.getStringByKey("Function")));
	if (inaNavigation.containsKey("Parameters"))
	{
		var inaParameters = inaNavigation.getListByKey("Parameters");
		var inaParaSize = inaParameters.size();
		for (var idxPara = 0; idxPara < inaParaSize; idxPara++)
		{
			var inaParameter = inaParameters.getStructureAt(idxPara);
			if (inaParameter.containsKey("Navigations"))
			{
				var inaNavigations = inaParameter.getListByKey("Navigations");
				var inaNaviSize = inaNavigations.size();
				for (var idxNavi = 0; idxNavi < inaNaviSize; idxNavi++)
				{
					memberNavigation.addNavigation(oFF.QInAFilterOperation.importMemberNavigation(inaNavigations.getStructureAt(idxNavi)));
				}
			}
			else
			{
				if (inaParameter.containsKey("Level"))
				{
					var inaLevelValue = inaParameter.getByKey("Level");
					if (inaLevelValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelNumber(inaLevelValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelLiteral(inaLevelValue.getString()));
					}
				}
				else if (inaParameter.containsKey("Member"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithMemberName(inaParameter.getStringByKey("Member")));
				}
				else if (inaParameter.containsKey("NoValuesAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithNoValuesAboveLevel(inaParameter.getStringByKey("NoValuesAboveLevel")));
				}
				else if (inaParameter.containsKey("Shift"))
				{
					var inaShift = inaParameter.getStructureByKey("Shift");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithShift(inaShift.getStringByKey("Level"), inaShift.getIntegerByKey("Constant")));
				}
				else if (inaParameter.containsKey("Range"))
				{
					var inaRange = inaParameter.getStructureByKey("Range");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithRange(inaRange.getStringByKey("Level"), inaRange.getIntegerByKey("OffsetLow"), inaRange.getIntegerByKey("OffsetHigh")));
				}
				else
				{
					var inaConstantValue = inaParameter.getByKey("Constant");
					if (inaConstantValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(inaConstantValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithStringConstant(inaConstantValue.getString()));
					}
				}
			}
		}
	}
	return memberNavigation;
};
oFF.QInAFilterOperation.exportMemberNavigation = function(memberNavigation, inaLowNavigation)
{
	inaLowNavigation.putString("Function", memberNavigation.getMemberFunction().getName());
	var parameters = memberNavigation.getParameters();
	if (oFF.notNull(parameters))
	{
		var size = parameters.size();
		var inaParameters = inaLowNavigation.putNewList("Parameters");
		for (var i = 0; i < size; i++)
		{
			var parameter = parameters.get(i);
			var inaParameter = inaParameters.addNewStructure();
			var memberNavigationType = parameter.getMemberNavigationType();
			var key = oFF.QInAConverter.lookupMemberNavigationTypeInA(memberNavigationType);
			if (memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_SHIFT || memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_RANGE)
			{
				inaParameter = inaParameter.putNewStructure(key);
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "Level", parameter.getLevelValue());
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "Constant", parameter.getConstantValue());
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "OffsetLow", parameter.getOffSetLow());
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "OffsetHigh", parameter.getOffsetHigh());
			}
			else
			{
				if (!oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getLevelValue()))
				{
					if (!oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getConstantValue()))
					{
						oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getFunctionName());
					}
				}
			}
		}
	}
	var navigations = memberNavigation.getNavigations();
	if (oFF.notNull(navigations))
	{
		var inaParameters2;
		if (inaLowNavigation.containsKey("Parameters"))
		{
			inaParameters2 = inaLowNavigation.getListByKey("Parameters");
		}
		else
		{
			inaParameters2 = inaLowNavigation.putNewList("Parameters");
		}
		var inaParameter2 = inaParameters2.addNewStructure();
		var inaNavigations = inaParameter2.putNewList("Navigations");
		var naviSize = navigations.size();
		for (var idxNavi = 0; idxNavi < naviSize; idxNavi++)
		{
			oFF.QInAFilterOperation.exportMemberNavigation(navigations.get(idxNavi), inaNavigations.addNewStructure());
		}
	}
};
oFF.QInAFilterOperation.setKeyValueForMemberNavigation = function(inaParameter, key, value)
{
	if (oFF.isNull(value))
	{
		return false;
	}
	if (value.getValueType().isNumber())
	{
		inaParameter.putDouble(key, value.getDouble());
	}
	else
	{
		inaParameter.putString(key, value.toString());
	}
	return true;
};
oFF.QInAFilterOperation.exportValue = function(exporter, value, valueType, inaElement, parameterName, parameterIsName, parameterNavigations)
{
	var filterType = value.getFilterValueType();
	if (filterType === oFF.XValueType.VARIABLE)
	{
		var variableValue = value.getVariableValue();
		if (oFF.notNull(variableValue))
		{
			inaElement.putString(parameterIsName, "Variable");
			inaElement.putString(parameterName, variableValue.getName());
		}
	}
	else
	{
		if (value.isManualInput())
		{
			inaElement.putString(parameterIsName, "ManualInput");
		}
		if (filterType === oFF.XValueType.CURRENT_MEMBER)
		{
			inaElement.putString(parameterIsName, "CurrentMember");
		}
		if (exporter.mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && value.getTagging().containsKey("PersistedQueryPlaceholder"))
		{
			inaElement.putString(parameterName, value.getTagging().getByKey("PersistedQueryPlaceholder"));
		}
		else
		{
			oFF.QInAValueUtils.exportPlaceholderValue(exporter, parameterName, inaElement, value, valueType, value.getQueryModel());
		}
		if (oFF.notNull(parameterNavigations))
		{
			var memberNavigations = value.getMemberNavigations();
			var memberNavigationSize = memberNavigations.size();
			if (memberNavigationSize > 0)
			{
				var inaLowNavigations = inaElement.putNewList(parameterNavigations);
				for (var mnIdx = 0; mnIdx < memberNavigationSize; mnIdx++)
				{
					oFF.QInAFilterOperation.exportMemberNavigation(memberNavigations.get(mnIdx), inaLowNavigations.addNewStructure());
				}
			}
		}
	}
};
oFF.QInAFilterOperation.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.OPERATION;
};
oFF.QInAFilterOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var inaComparison = inaStructure.getStringByKeyExt("Comparison", "=");
	var comparisonOperator = oFF.QInAConverter.lookupComparison(inaComparison);
	if (oFF.isNull(comparisonOperator))
	{
		importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate2("Unsupported comparison operator: ", inaComparison));
		return null;
	}
	var cartesianList = parentComponent;
	var filterExpression = cartesianList.getFilterExpression();
	var field = cartesianList.getField();
	var filterOperation = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparisonOperator);
	var fieldValueType = field.getValueType();
	var isFuzzyOperator = comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH);
	if (isFuzzyOperator)
	{
		fieldValueType = oFF.XValueType.STRING;
	}
	if (inaStructure.getBooleanByKeyExt("IsExcluding", false))
	{
		filterOperation.setSetSign(oFF.SetSign.EXCLUDING);
	}
	else
	{
		filterOperation.setSetSign(oFF.SetSign.INCLUDING);
	}
	filterOperation.resetDepth();
	var depth = inaStructure.getIntegerByKeyExt("Depth", -1);
	if (depth !== -1)
	{
		filterOperation.setDepth(depth);
	}
	filterOperation.resetLevelOffset();
	var levelOffset = inaStructure.getIntegerByKeyExt("LevelOffset", -1);
	if (levelOffset !== -1)
	{
		filterOperation.setLevelOffset(levelOffset);
	}
	var hierarchyStructure = inaStructure.getStructureByKey("Hierarchy");
	if (oFF.notNull(hierarchyStructure))
	{
		var hierarchyName = hierarchyStructure.getStringByKey("Name");
		var hierarchyDueDate = null;
		var hierarchyVersion = null;
		var queryModel = filterOperation.getQueryModel();
		if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP))
		{
			var hierarchyDueDateValue = hierarchyStructure.getStringByKey("DueDate");
			if (oFF.notNull(hierarchyDueDateValue))
			{
				hierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
			}
			hierarchyVersion = hierarchyStructure.getStringByKey("Version");
		}
		filterOperation.setHierarchyInfo(hierarchyName, hierarchyDueDate, hierarchyVersion);
	}
	if (importer.capabilities.supportsConvertToFlatFilter())
	{
		filterOperation.setConvertToFlatFilter(inaStructure.getBooleanByKeyExt("ConvertToFlatSelection", false));
	}
	var supplementFieldNames = cartesianList.getSupplementFieldNames();
	var variableContainer = context.getVariableContainer();
	var numberOfParameters = comparisonOperator.getNumberOfParameters();
	if (numberOfParameters >= 1)
	{
		var low = filterOperation.getLow();
		oFF.QInAFilterOperation.importValue(importer, variableContainer, field, low, fieldValueType, inaStructure, "Low", "LowIs", "LowNavigations");
		oFF.QInAValueUtils.importSupplements(importer, low, inaStructure, "LowSupplements", supplementFieldNames);
	}
	if (numberOfParameters >= 2)
	{
		var high = filterOperation.getHigh();
		oFF.QInAFilterOperation.importValue(importer, variableContainer, field, high, fieldValueType, inaStructure, "High", "HighIs", null);
		oFF.QInAValueUtils.importSupplements(importer, high, inaStructure, "HighSupplements", supplementFieldNames);
	}
	if (numberOfParameters >= 3)
	{
		var third = filterOperation.getThird();
		oFF.QInAFilterOperation.importValue(importer, variableContainer, field, third, fieldValueType, inaStructure, "Value3", "Value3Is", null);
		oFF.QInAValueUtils.importSupplements(importer, third, inaStructure, null, supplementFieldNames);
	}
	return filterOperation;
};
oFF.QInAFilterOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var filterOperation = modelComponent;
	var fieldMd = filterOperation.getFieldMetadata();
	if (oFF.isNull(fieldMd))
	{
		return inaStructure;
	}
	var comparisonOperator = filterOperation.getComparisonOperator();
	if (oFF.isNull(comparisonOperator))
	{
		comparisonOperator = oFF.ComparisonOperator.EQUAL;
	}
	var fieldValueType = fieldMd.getValueType();
	if (comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH))
	{
		fieldValueType = oFF.XValueType.STRING;
	}
	var context = filterOperation.getContext();
	var comparison;
	if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && exporter.isAbap(context))
	{
		comparison = "NOTBETWEEN";
	}
	else
	{
		comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
	}
	inaStructure.putString("Comparison", comparison);
	if (filterOperation.hasLevelOffset())
	{
		inaStructure.putInteger("LevelOffset", filterOperation.getLevelOffset());
	}
	if (filterOperation.hasDepth())
	{
		inaStructure.putInteger("Depth", filterOperation.getDepth());
	}
	if (filterOperation.getSetSign() === oFF.SetSign.EXCLUDING)
	{
		inaStructure.putBoolean("IsExcluding", true);
	}
	var hierarchyName = filterOperation.getHierarchyName();
	if (oFF.notNull(hierarchyName))
	{
		var filterExpr = filterOperation.getFilterExpression() !== null ? filterOperation.getFilterExpression() : filterOperation.getParent().getFilterExpression();
		oFF.QInAHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(context), inaStructure, null, filterExpr, filterOperation.getQueryManager(), fieldMd.getName(), hierarchyName, filterOperation.getHierarchyDueDate(), filterOperation.getHierarchyVersion());
	}
	if (exporter.capabilities.supportsConvertToFlatFilter() && filterOperation.isConvertToFlatFilter())
	{
		inaStructure.putBoolean("ConvertToFlatSelection", true);
	}
	var numberOfParameters = comparisonOperator.getNumberOfParameters();
	if (numberOfParameters >= 1)
	{
		oFF.QInAFilterOperation.exportValue(exporter, filterOperation.getLow(), fieldValueType, inaStructure, "Low", "LowIs", "LowNavigations");
		if (numberOfParameters >= 2)
		{
			oFF.QInAFilterOperation.exportValue(exporter, filterOperation.getHigh(), fieldValueType, inaStructure, "High", "HighIs", null);
		}
		if (numberOfParameters >= 3)
		{
			oFF.QInAFilterOperation.exportValue(exporter, filterOperation.getThird(), fieldValueType, inaStructure, "Value3", "Value3Is", null);
		}
	}
	return inaStructure;
};

oFF.QInAFilterTuple = function() {};
oFF.QInAFilterTuple.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterTuple.prototype._ff_c = "QInAFilterTuple";

oFF.QInAFilterTuple.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.TUPLE;
};
oFF.QInAFilterTuple.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var tupleDetailContainer = modelComponent;
	var inaInnerElement = oFF.PrFactory.createStructure();
	inaInnerElement.putString("Code", "And");
	var inaSubSelectionsTuples = inaInnerElement.putNewList("SubSelections");
	var tupleStructureInSubSelections = inaSubSelectionsTuples.addNewStructure();
	var tuplesOperandStructure = tupleStructureInSubSelections.putNewStructure("TuplesOperand");
	var fieldNamesInInA = tuplesOperandStructure.putNewList("FieldNames");
	var fieldNames = tupleDetailContainer.getFieldNames();
	fieldNamesInInA.addAllStrings(fieldNames);
	var tuplesInInA = tuplesOperandStructure.putNewList("Tuples");
	var tuples = tupleDetailContainer.getTuples();
	for (var l = 0; l < tuples.size(); l++)
	{
		var singleTupleCondition = tuples.get(l);
		var tuplesData = tuplesInInA.addNewList();
		for (var j = 0; j < fieldNames.size(); j++)
		{
			tuplesData.addString(singleTupleCondition.get(j));
		}
	}
	inaStructure.put("Operator", inaInnerElement);
	return inaStructure;
};
oFF.QInAFilterTuple.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAFilterVirtualDatasource = function() {};
oFF.QInAFilterVirtualDatasource.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterVirtualDatasource.prototype._ff_c = "QInAFilterVirtualDatasource";

oFF.QInAFilterVirtualDatasource.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.VIRTUAL_DATASOURCE;
};
oFF.QInAFilterVirtualDatasource.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var virtualDSFilter = modelComponent;
	var inaInnerElement = oFF.PrFactory.createStructure();
	inaInnerElement.putString("Code", "And");
	var vdsSubSelections = inaInnerElement.putNewList("SubSelections");
	var schemaOperandElement = this.createMemberOperand("SchemaName", virtualDSFilter.getSchemaName());
	var packageOperandElement = this.createMemberOperand("PackageName", virtualDSFilter.getPackageName());
	var objectOperandElement = this.createMemberOperand("ObjectName", virtualDSFilter.getObjectName());
	vdsSubSelections.add(schemaOperandElement);
	vdsSubSelections.add(packageOperandElement);
	vdsSubSelections.add(objectOperandElement);
	inaStructure.put("Operator", inaInnerElement);
	return inaStructure;
};
oFF.QInAFilterVirtualDatasource.prototype.createMemberOperand = function(level, value)
{
	var schemaInA = oFF.PrFactory.createStructure();
	schemaInA.putString("AttributeName", level);
	var comparison = oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL);
	schemaInA.putString("Comparison", comparison);
	schemaInA.putString("Value", value);
	var schemaOperandElement = oFF.PrFactory.createStructure();
	schemaOperandElement.put("MemberOperand", schemaInA);
	return schemaOperandElement;
};
oFF.QInAFilterVirtualDatasource.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAFormulaMeasure = function() {};
oFF.QInAFormulaMeasure.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFormulaMeasure.prototype._ff_c = "QInAFormulaMeasure";

oFF.QInAFormulaMeasure.importNameAndText = function(inaStructure, member, dimension)
{
	var newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	var newMemberText = oFF.QInAMember.getText(inaStructure, dimension);
	if (oFF.XStringUtils.isNullOrEmpty(newMemberName) && oFF.XStringUtils.isNullOrEmpty(newMemberText))
	{
		newMemberName = inaStructure.getStringByKey("Name");
		newMemberText = inaStructure.getStringByKey("Description");
	}
	member.setName(newMemberName);
	member.setText(newMemberText);
};
oFF.QInAFormulaMeasure.exportFormulaConstantValue = function(exporter, constStructure, fic)
{
	var valueIsNull = fic.getValue() === null;
	var variable = fic.getVariable();
	if (valueIsNull && oFF.isNull(variable))
	{
		constStructure.putNull("Value");
	}
	var valueType = fic.getValueType();
	if (valueType === oFF.XValueType.INTEGER)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putInteger("Value", fic.getInteger());
		}
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putDouble("Value", fic.getDouble());
		}
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putLong("Value", fic.getLong());
		}
	}
	else if (valueType === oFF.XValueType.STRING)
	{
		constStructure.putString("ValueType", "String");
		if (exporter.mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && fic.getTagging().containsKey("PersistedQueryPlaceholder"))
		{
			constStructure.putString("Value", fic.getTagging().getByKey("PersistedQueryPlaceholder"));
		}
		else if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getString());
		}
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		constStructure.putString("ValueType", "Bool");
		if (!valueIsNull)
		{
			constStructure.putBoolean("Value", fic.getBoolean());
		}
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		constStructure.putString("ValueType", "Date");
		if (exporter.mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && fic.getTagging().containsKey("PersistedQueryPlaceholder"))
		{
			constStructure.putString("Value", fic.getTagging().getByKey("PersistedQueryPlaceholder"));
		}
		else if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getDate().toString());
		}
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		constStructure.putString("ValueType", exporter.mode === oFF.QModelFormat.INA_DATA ? "Date" : "DateTime");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getDateTime().toString());
		}
	}
	else if (valueType.isSpatial())
	{
		constStructure.putString("ValueType", "String");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getGeometry().toWKT());
		}
	}
	else if (valueType === oFF.XValueType.TIMESPAN)
	{
		constStructure.putString("ValueType", "String");
		if (!valueIsNull)
		{
			var timeSpanValue = fic.getTimeSpan();
			constStructure.putString("Value", timeSpanValue.toString());
		}
	}
	else if (valueType === oFF.XValueType.VARIABLE)
	{
		oFF.QInAExportUtil.setNameIfNotNull(constStructure, "Value", variable);
		constStructure.putString("ValueIs", "Variable");
	}
};
oFF.QInAFormulaMeasure.importFormulaMeasure = function(importer, dimension, inaFormula, formulaItemx, context)
{
	if (oFF.isNull(inaFormula))
	{
		return null;
	}
	var inaFunction = inaFormula.getStructureByKey("Function");
	var formulaItem = formulaItemx;
	if (oFF.notNull(inaFunction))
	{
		var functionName = inaFunction.getStringByKey("Name");
		var functionParameters = inaFunction.getListByKey("Parameters");
		var newFormulaFunction = oFF.QFactory.createFormulaFunction(context);
		if (oFF.notNull(functionParameters))
		{
			newFormulaFunction.setFunctionName(functionName);
			var paramSize = functionParameters.size();
			for (var paraIdx = 0; paraIdx < paramSize; paraIdx++)
			{
				oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, functionParameters.getStructureAt(paraIdx), newFormulaFunction, context);
			}
		}
		newFormulaFunction.setSolveOrder(inaFormula.getIntegerByKeyExt("SolveOrder", 0));
		if (oFF.isNull(formulaItem))
		{
			formulaItem = newFormulaFunction;
		}
		else
		{
			formulaItem.add(newFormulaFunction);
			newFormulaFunction.setParent(formulaItem);
		}
	}
	else
	{
		var constPara = inaFormula.getStructureByKey("Constant");
		if (oFF.notNull(constPara))
		{
			var formulaConstant = oFF.QFactory.createFormulaConstant(context);
			if (oFF.XString.isEqual("Variable", constPara.getStringByKey("ValueIs")))
			{
				var value = constPara.getStringByKey("Value");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(value))
				{
					var variableManager = dimension.getQueryModel().getVariableManager();
					formulaConstant.setVariable(variableManager.getVariables().getByKey(value));
				}
				if (oFF.isNull(formulaItem))
				{
					formulaItem = formulaConstant;
				}
				else
				{
					formulaItem.add(formulaConstant);
					formulaConstant.setParent(formulaItem);
				}
			}
			else
			{
				var valueTypePara = constPara.getStringByKey("ValueType");
				var valueIsNull = !constPara.containsKey("Value") || constPara.getElementTypeByKey("Value") === oFF.PrElementType.THE_NULL;
				if (oFF.XString.isEqual(valueTypePara, "Number"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.DOUBLE);
					}
					else
					{
						formulaConstant.setDouble(constPara.getDoubleByKey("Value"));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "String"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.STRING);
					}
					else
					{
						formulaConstant.setString(constPara.getStringByKey("Value"));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "Bool"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.BOOLEAN);
					}
					else
					{
						formulaConstant.setBoolean(constPara.getBooleanByKey("Value"));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "DateTime"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.DATE_TIME);
					}
					else
					{
						formulaConstant.setDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(constPara.getStringByKey("Value"), false));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "Date"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.DATE);
					}
					else
					{
						formulaConstant.setDate(oFF.XDate.createDateFromStringWithFlag(constPara.getStringByKey("Value"), false));
					}
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_TOKEN, "Constant value type is not supported");
					return null;
				}
				var constUnit = constPara.getStringByKey("Unit");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(constUnit))
				{
					formulaConstant.setUnit(constUnit);
				}
				var constCurrency = constPara.getStringByKey("Currency");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(constCurrency))
				{
					formulaConstant.setCurrency(constCurrency);
				}
				if (oFF.isNull(formulaItem))
				{
					formulaItem = formulaConstant;
				}
				else
				{
					formulaItem.add(formulaConstant);
					formulaConstant.setParent(formulaItem);
				}
			}
		}
		else
		{
			var memberPara = inaFormula.getStructureByKey("Member");
			if (oFF.notNull(memberPara))
			{
				var formulaMember = oFF.QFactory.createFormulaMember(context);
				var memberParaName = memberPara.getStringByKey("Name");
				formulaMember.setMemberName(memberParaName);
				formulaMember.setDimensionName(memberPara.getStringByKey("Dimension"));
				var nameIs = memberPara.getStringByKey("NameIs");
				if (oFF.XString.isEqual(nameIs, "Booked"))
				{
					formulaMember.setBooked();
				}
				else if (oFF.XString.isEqual(nameIs, "Previous"))
				{
					formulaMember.setPrevious();
				}
				if (oFF.isNull(formulaItem))
				{
					formulaItem = formulaMember;
				}
				else
				{
					formulaItem.add(formulaMember);
					formulaMember.setParent(formulaItem);
				}
			}
			else
			{
				var attribute = inaFormula.getStructureByKey("AttributeValue");
				if (oFF.notNull(attribute))
				{
					var attributeName = attribute.getStringByKey("Name");
					var formulaAttribute = oFF.QFactory.createFormulaAttributeWithName(context, attributeName);
					if (oFF.isNull(formulaItem))
					{
						formulaItem = formulaAttribute;
					}
					else
					{
						formulaItem.add(formulaAttribute);
						formulaAttribute.setParent(formulaItem);
					}
				}
			}
		}
	}
	return formulaItem;
};
oFF.QInAFormulaMeasure.exportFormulaItem = function(exporter, formulaItem, inaFormula, context)
{
	oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, formulaItem, inaFormula, context, false, false, null);
};
oFF.QInAFormulaMeasure.signFlipMember = function(formulaItemMember)
{
	var context = formulaItemMember.getContext();
	var op = oFF.QFactory.createFormulaOperation(context);
	op.setOperator(oFF.MathOperator.MULT);
	op.setLeftSide(oFF.QFactory.createFormulaConstantWithIntValue(context, -1));
	op.setRightSide(formulaItemMember);
	return op;
};
oFF.QInAFormulaMeasure.exportMemberWithSignFlip = function(exporter, formulaItemMember, context, autoSignFlipForRMOnly)
{
	var queryModel = context.getQueryModel();
	if (oFF.notNull(queryModel) && exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		var memberStructure = oFF.PrFactory.createStructure();
		if (queryModel.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			var measureStructure = queryModel.getMeasureDimension();
			var member = measureStructure.getStructureMember(formulaItemMember.getMemberName());
			if (oFF.notNull(member))
			{
				var dataCell = null;
				var queryDataCells;
				if (member.getComponentType() === oFF.MemberType.BASIC_MEASURE)
				{
					queryDataCells = member.getQueryDataCells();
					if (oFF.XCollectionUtils.hasElements(queryDataCells))
					{
						dataCell = queryDataCells.get(0);
					}
				}
				else if (member.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE)
				{
					var memberName = oFF.QInAMemberRestrictedMeasure.getMemberForSignFlip(context, member);
					if (oFF.notNull(memberName))
					{
						var restrictedMember = measureStructure.getStructureMember(memberName);
						if (oFF.notNull(restrictedMember))
						{
							queryDataCells = restrictedMember.getQueryDataCells();
							if (oFF.XCollectionUtils.hasElements(queryDataCells))
							{
								dataCell = queryDataCells.get(0);
							}
						}
					}
				}
				if (oFF.notNull(dataCell) && dataCell.hasSignReversal())
				{
					oFF.QInAFormulaMeasure.exportFormulaItem(exporter, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember), memberStructure, context);
					return memberStructure;
				}
			}
		}
		else
		{
			var accountDim = queryModel.getAccountDimension();
			if (oFF.notNull(accountDim))
			{
				var accountMember = accountDim.getStructureMemberByAliasOrMember(formulaItemMember.getMemberName());
				if (oFF.notNull(accountMember) && accountMember.getComponentType() !== oFF.MemberType.RESTRICTED_MEASURE && autoSignFlipForRMOnly)
				{
					return null;
				}
				if (oFF.notNull(accountMember) && accountMember.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE)
				{
					if (accountMember.isModelDefinedMember() && autoSignFlipForRMOnly)
					{
						return null;
					}
					accountMember = accountDim.getStructureMemberByAliasOrMember(oFF.QInAMemberRestrictedMeasure.getMemberForSignFlip(context, accountMember));
				}
				if (oFF.notNull(accountMember))
				{
					var accountType = accountMember.getAccountType();
					if (accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ)
					{
						oFF.QInAFormulaMeasure.exportFormulaItem(exporter, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember), memberStructure, context);
						return memberStructure;
					}
				}
			}
		}
	}
	return null;
};
oFF.QInAFormulaMeasure.exportFormulaMeasure = function(exporter, formulaMeasure, inaFormula)
{
	oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, formulaMeasure.getFormula(), inaFormula, formulaMeasure.getQueryModel(), formulaMeasure.isAutoSignFlip(), formulaMeasure.isAutoSignFlipRestrictedMeasureOnly(), formulaMeasure.getName());
};
oFF.QInAFormulaMeasure.exportFormulaItemSignFlip = function(exporter, formulaItem, inaFormula, context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName)
{
	if (oFF.notNull(formulaItem))
	{
		var componentType = formulaItem.getComponentType();
		if (componentType === oFF.OlapComponentType.FORMULA_CONSTANT)
		{
			var fic = formulaItem;
			var constStructure = inaFormula.putNewStructure("Constant");
			var ficUnit = fic.getUnit();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(ficUnit))
			{
				constStructure.putString("Unit", ficUnit);
			}
			var ficCurrency = fic.getCurrency();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(ficCurrency))
			{
				constStructure.putString("Currency", ficCurrency);
			}
			oFF.QInAFormulaMeasure.exportFormulaConstantValue(exporter, constStructure, fic);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_OPERATION)
		{
			var fio = formulaItem;
			var opStructure = inaFormula.putNewStructure("Function");
			opStructure.putString("Name", fio.getOperator().getDisplayString());
			var parameters = opStructure.putNewList("Parameters");
			oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, fio.getLeftSide(), parameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName);
			oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, fio.getRightSide(), parameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			var fif = formulaItem;
			var funcStructure = inaFormula.putNewStructure("Function");
			funcStructure.putString("Name", fif.getFunctionName());
			var funcParameters = funcStructure.putNewList("Parameters");
			var functionSize = fif.size();
			for (var i = 0; i < functionSize; i++)
			{
				oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, fif.get(i), funcParameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName);
			}
			var solveOrder = fif.getSolveOrder();
			if (solveOrder !== 0)
			{
				inaFormula.putInteger("SolveOrder", solveOrder);
			}
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
		{
			var fim = formulaItem;
			var queryModel = context.getQueryModel();
			var memberVariable = fim.getVariable();
			var memberStructure;
			if (oFF.isNull(memberVariable))
			{
				memberStructure = oFF.PrFactory.createStructure();
				var memberName;
				if (exporter.mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && fim.getTagging().containsKey("PersistedQueryPlaceholder"))
				{
					memberName = fim.getTagging().getByKey("PersistedQueryPlaceholder");
				}
				else
				{
					memberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, fim.getMemberName(), exporter);
				}
				memberStructure.putStringNotNull("Name", memberName);
				memberStructure.putStringNotNull("Dimension", fim.getDimensionName());
				if (fim.isBooked())
				{
					memberStructure.putString("NameIs", "Booked");
					memberStructure.putStringNotNull("Name", selfReferenceName);
				}
				else if (fim.isPrevious())
				{
					memberStructure.putString("NameIs", "Previous");
					memberStructure.putStringNotNull("Name", selfReferenceName);
				}
				if (autoSignFlip)
				{
					var functionStructure = oFF.QInAFormulaMeasure.exportMemberWithSignFlip(exporter, fim, context, autoSignFlipForRMOnly);
					if (oFF.notNull(functionStructure))
					{
						inaFormula.put("Function", functionStructure.getByKey("Function"));
					}
					else
					{
						inaFormula.put("Member", memberStructure);
					}
				}
				else
				{
					inaFormula.put("Member", memberStructure);
				}
			}
			else
			{
				memberStructure = inaFormula.putNewStructure("Member");
				memberStructure.putString("Name", memberVariable.getName());
				memberStructure.putString("NameIs", "Variable");
			}
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_ATTRIBUTE)
		{
			var fia = formulaItem;
			var inaAttributeValue = inaFormula.putNewStructure("AttributeValue");
			inaAttributeValue.putString("Name", fia.getFieldName());
		}
	}
};
oFF.QInAFormulaMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.FORMULA;
};

oFF.QInAGenericComponent = function() {};
oFF.QInAGenericComponent.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAGenericComponent.prototype._ff_c = "QInAGenericComponent";

oFF.QInAGenericComponent.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP;
};
oFF.QInAGenericComponent.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QInAGenericComponent.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var modelComponent2 = modelComponent;
	inaStructure.putString("Name", modelComponent2.getName());
	inaStructure.putString("Type", modelComponent.getComponentType().getName());
	return inaStructure;
};

oFF.QInAHierarchy = function() {};
oFF.QInAHierarchy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAHierarchy.prototype._ff_c = "QInAHierarchy";

oFF.QInAHierarchy.isMetadataWithAutoSubmitCapability = function(importer, queryManager)
{
	return importer.getOriginalMode() === oFF.QModelFormat.INA_METADATA || importer.getMode() === oFF.QModelFormat.INA_METADATA && oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit() && queryManager.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP;
};
oFF.QInAHierarchy.importHierarchyName = function(importer, inaStructure, dimension, isNameVariable)
{
	var hierarchyName;
	if (inaStructure.hasStringByKey("Name"))
	{
		hierarchyName = inaStructure.getStringByKey("Name");
	}
	else
	{
		hierarchyName = inaStructure.getStringByKey("HierarchyName");
	}
	dimension.setUseHierarchyNameVariable(isNameVariable);
	var isHierarchyNamePlaceHolder = isNameVariable && oFF.QInAHierarchy.isMetadataWithAutoSubmitCapability(importer, dimension.getQueryManager());
	if (isHierarchyNamePlaceHolder)
	{
		dimension.setHierarchyNameVariableName(hierarchyName);
	}
	return hierarchyName;
};
oFF.QInAHierarchy.importHierarchyDueDate = function(inaStructure, dimension, hierarchy, supportsSapDate)
{
	var dueDateIs = inaStructure.getStringByKey("DueDateIs");
	var isDueDateVariable = oFF.notNull(dueDateIs) && oFF.XString.isEqual("Variable", dueDateIs);
	var dueDate = inaStructure.getStringByKey("DueDate");
	dimension.setUseHierarchyDueDateVariable(isDueDateVariable);
	if (isDueDateVariable)
	{
		dimension.setHierarchyDueDateVariableName(oFF.XStringUtils.isNullOrEmpty(dueDate) ? null : dueDate);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyDueDate(oFF.XDate.createDateFromStringWithFlag(dueDate, supportsSapDate));
	}
};
oFF.QInAHierarchy.importHierarchyVersion = function(inaStructure, dimension, hierarchy)
{
	var versionIs = inaStructure.getStringByKey("VersionIs");
	var isVersionVariable = oFF.notNull(versionIs) && oFF.XString.isEqual("Variable", versionIs);
	var version = inaStructure.getStringByKey("Version");
	dimension.setUseHierarchyVersionVariable(isVersionVariable);
	if (isVersionVariable)
	{
		dimension.setHierarchyVersionVariableName(oFF.XStringUtils.isNullOrEmpty(version) ? null : version);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyVersion(version);
	}
};
oFF.QInAHierarchy.importHierarchyDrillInfo = function(importer, inaStructure, dimension, context)
{
	var initialDrillOffset = inaStructure.getIntegerByKeyExt("InitialDrillOffset", 0);
	var initialDrillLevel = inaStructure.getIntegerByKeyExt("InitialDrillLevel", 0);
	var modelCapabilities = dimension.getModelCapabilities();
	if (modelCapabilities.supportsVisibilityFilter() || !importer.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		dimension.setInitialDrillLevel(initialDrillLevel);
		dimension.setSelectorInitialDrillLevel(initialDrillLevel);
	}
	else
	{
		if (initialDrillLevel === -1)
		{
			dimension.setInitialDrillLevel(initialDrillLevel);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel);
		}
		else if (initialDrillOffset === -1)
		{
			dimension.setInitialDrillLevel(0);
			dimension.setSelectorInitialDrillLevel(0);
		}
		else
		{
			dimension.setInitialDrillLevel(initialDrillLevel + initialDrillOffset);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel + initialDrillOffset);
		}
	}
	dimension.setInitialDrillOffset(initialDrillOffset);
	dimension.setExplicitDrillOnFilteredNodes(inaStructure.getBooleanByKeyExt("ExplicitDrillOnFilteredNodes", false));
	var alignment = oFF.Alignment.DEFAULT_VALUE;
	if (context.getModelCapabilities().supportsExpandBottomUp())
	{
		var nodeAlignment = inaStructure.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
		alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
		if (inaStructure.containsKey("ExpandBottomUp"))
		{
			var isExpandingBottomUp = inaStructure.getBooleanByKeyExt("ExpandBottomUp", false);
			if (isExpandingBottomUp)
			{
				alignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
			}
		}
	}
	dimension.setLowerLevelNodeAlignment(alignment);
	var nodeCondensation = inaStructure.getBooleanByKeyExt("NodeCondensation", false);
	dimension.setHasNodeCondensation(nodeCondensation);
	var memberOfPostedNodeVisibility = inaStructure.getStringByKeyExt("MemberOfPostedNodeVisibility", "Visible");
	var visibility = oFF.QInAConverter.lookupResultSetVisibility(memberOfPostedNodeVisibility);
	dimension.setMemberOfPostedNodeVisibility(visibility);
};
oFF.QInAHierarchy.appendItemsToCatalogResult = function(catalogResult, hierarchiesList, dimensionName)
{
	var len = oFF.PrUtils.getListSize(hierarchiesList, 0);
	for (var i = 0; i < len; i++)
	{
		var hierarchyStructure = oFF.PrUtils.getStructureElement(hierarchiesList, i);
		var item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		var hierarchyName;
		if (hierarchyStructure.hasStringByKey("Name"))
		{
			hierarchyName = hierarchyStructure.getStringByKey("Name");
		}
		else
		{
			hierarchyName = hierarchyStructure.getStringByKey("HierarchyName");
		}
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName) || catalogResult.containsHierarchy(hierarchyName))
		{
			continue;
		}
		item.setHierarchyName(hierarchyName);
		var hierarchyDescription = oFF.PrUtils.getStringProperty(hierarchyStructure, "Description");
		if (oFF.notNull(hierarchyDescription))
		{
			item.setHierarchyLongText(hierarchyDescription.getString());
		}
		var version = oFF.PrUtils.getStringProperty(hierarchyStructure, "Version");
		if (oFF.notNull(version))
		{
			item.setVersionName(version.getString());
		}
		var structure = oFF.PrUtils.getStringProperty(hierarchyStructure, "Structure");
		if (oFF.notNull(structure))
		{
			item.setHierarchyType(oFF.HierarchyType.lookup(structure.getString()));
		}
		var isModeled = oFF.PrUtils.getBooleanValueProperty(hierarchyStructure, "IsModeled", false);
		item.setIsModeled(isModeled);
		var dateTo = oFF.PrUtils.getStringProperty(hierarchyStructure, "DateTo");
		if (oFF.notNull(dateTo))
		{
			var dateToString = dateTo.getString();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToString));
			}
		}
		var levels = oFF.PrUtils.getListProperty(hierarchyStructure, "Levels");
		if (oFF.notNull(levels))
		{
			item.setSupportsHierarchyLevels(true);
			var levelList = oFF.XList.create();
			var lenLevel = oFF.PrUtils.getListSize(levels, 0);
			for (var levelIndex = 0; levelIndex < lenLevel; levelIndex++)
			{
				var levelStructure = oFF.PrUtils.getStructureElement(levels, levelIndex);
				if (oFF.isNull(levelStructure))
				{
					continue;
				}
				var catalogLevel = oFF.HierarchyCatalogLevel.createCatalogLevel();
				var level = oFF.PrUtils.getIntegerValueProperty(levelStructure, "Level", -1);
				if (level > -1)
				{
					catalogLevel.setLevel(level);
				}
				var levelName = oFF.PrUtils.getStringProperty(levelStructure, "LevelName");
				if (oFF.notNull(levelName))
				{
					catalogLevel.setLevelName(levelName.getString());
				}
				var levelCaption = oFF.PrUtils.getStringProperty(levelStructure, "LevelCaption");
				if (oFF.notNull(levelCaption))
				{
					catalogLevel.setLevelDescription(levelCaption.getString());
				}
				var levelUniqueName = oFF.PrUtils.getStringProperty(levelStructure, "LevelUniqueName");
				if (oFF.notNull(levelUniqueName))
				{
					catalogLevel.setLevelUniqueName(levelUniqueName.getString());
				}
				var levelDimensionName = oFF.PrUtils.getStringProperty(levelStructure, "DimensionName");
				if (oFF.notNull(levelDimensionName))
				{
					catalogLevel.setLevelDimensionName(levelDimensionName.getString());
				}
				var levelType = oFF.PrUtils.getIntegerProperty(levelStructure, "LevelType");
				if (oFF.notNull(levelType))
				{
					catalogLevel.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelType.getInteger()));
				}
				levelList.add(catalogLevel);
			}
			item.setHierarchyLevels(levelList);
		}
		var restNode = hierarchyStructure.getStringByKey("RestNode");
		if (oFF.notNull(restNode))
		{
			item.setRestNode(restNode);
		}
		var virtualRootNode = hierarchyStructure.getStringByKey("VirtualRootNode");
		if (oFF.notNull(virtualRootNode))
		{
			item.setVirtualRootNode(virtualRootNode);
		}
		catalogResult.addItem(item);
	}
	return catalogResult;
};
oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit = function(dimension, exportMode)
{
	var isHierarchyNameVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		var queryManager = dimension.getQueryManager();
		isHierarchyNameVariableForAutoSubmit = oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive() && exportMode === oFF.QModelFormat.INA_DATA && dimension.useHierarchyNameVariable() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyNameVariableName());
	}
	return isHierarchyNameVariableForAutoSubmit;
};
oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit = function(dimension, exportMode)
{
	var isDueDateVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		var queryManager = dimension.getQueryManager();
		isDueDateVariableForAutoSubmit = oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive() && exportMode === oFF.QModelFormat.INA_DATA && dimension.useHierarchyDueDateVariable() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyDueDateVariableName());
	}
	return isDueDateVariableForAutoSubmit;
};
oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit = function(dimension, exportMode)
{
	var isVersionVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		var queryManager = dimension.getQueryManager();
		isVersionVariableForAutoSubmit = oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive() && exportMode === oFF.QModelFormat.INA_DATA && dimension.useHierarchyVersionVariable() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyVersionVariableName());
	}
	return isVersionVariableForAutoSubmit;
};
oFF.QInAHierarchy.exportHierarchyForFilter = function(exporter, isAbap, inaStructure, dimension, filterExpression, queryManager, fieldName, hierarchyName, dueDate, version)
{
	var hierName = hierarchyName;
	var hierarchyDimension = dimension;
	if (oFF.notNull(hierName))
	{
		var inaHierarchy = inaStructure.putNewStructure("Hierarchy");
		if (oFF.isNull(hierarchyDimension) && oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive())
		{
			hierarchyDimension = oFF.QInAHierarchy.getHierarchyDimension(queryManager, fieldName);
			var isHierarchyNameVariableForAutoSubmit = oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(hierarchyDimension, exporter.getMode());
			if (isHierarchyNameVariableForAutoSubmit && oFF.notNull(hierarchyDimension))
			{
				hierName = hierarchyDimension.getHierarchyNameVariableName();
				inaHierarchy.putString("NameIs", "Variable");
			}
		}
		inaHierarchy.putString("Name", hierName);
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && isAbap)
		{
			if (oFF.isNull(filterExpression) || !oFF.XString.isEqual(filterExpression.getName(), oFF.QFilter.FIXED_FILTER_CONTAINER) || oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive())
			{
				var isDueDateVariableForAutoSubmit = oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit(hierarchyDimension, exporter.mode);
				if (isDueDateVariableForAutoSubmit && oFF.notNull(hierarchyDimension))
				{
					inaHierarchy.putString("DueDate", hierarchyDimension.getHierarchyDueDateVariableName());
					inaHierarchy.putString("DueDateIs", "Variable");
				}
				else
				{
					oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", dueDate);
				}
				var isVersionVariableForAutoSubmit = oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit(hierarchyDimension, exporter.mode);
				if (isVersionVariableForAutoSubmit && oFF.notNull(hierarchyDimension))
				{
					inaHierarchy.putString("Version", hierarchyDimension.getHierarchyVersionVariableName());
					inaHierarchy.putString("VersionIs", "Variable");
				}
				else
				{
					inaHierarchy.putStringNotNull("Version", version);
				}
			}
		}
	}
};
oFF.QInAHierarchy.getHierarchyDimension = function(queryManager, fieldName)
{
	var hierDimension = null;
	if (oFF.notNull(queryManager))
	{
		var dimMemberVars = queryManager.getDimensionMemberVariables();
		for (var i = 0; i < dimMemberVars.size(); i++)
		{
			var variable = dimMemberVars.get(i);
			var isHierarchyNameVariable = variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE;
			hierDimension = isHierarchyNameVariable ? variable.getHierarchyNameDimension() : variable.getDimension();
			if (oFF.notNull(hierDimension) && hierDimension.getFieldByName(fieldName) !== null && (variable.isUsedInDynamicFilter() || variable.isUsedInFixedFilter()))
			{
				break;
			}
		}
	}
	return hierDimension;
};
oFF.QInAHierarchy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY;
};
oFF.QInAHierarchy.prototype.getTagName = function()
{
	return "Hierarchy";
};
oFF.QInAHierarchy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = modelComponent;
	if (dimension.supportsHierarchy())
	{
		var fixInFilter = dimension.isDisplayHierarchyFixInFilter();
		var hierarchyManager = dimension.getHierarchyManagerBase();
		hierarchyManager.setDisplayHierarchyFixInFilter(false);
		if (oFF.isNull(inaStructure))
		{
			dimension.setHierarchy(null);
		}
		else
		{
			var nameIs = inaStructure.getStringByKey("NameIs");
			var isNameVariable = oFF.notNull(nameIs) && oFF.XString.isEqual("Variable", nameIs);
			var queryManager = dimension.getQueryManager();
			var isHierarchyNamePlaceHolder = isNameVariable && oFF.QInAHierarchy.isMetadataWithAutoSubmitCapability(importer, queryManager);
			var hierarchyName = oFF.QInAHierarchy.importHierarchyName(importer, inaStructure, dimension, isNameVariable);
			var hierarchy = null;
			if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
			{
				if (!isHierarchyNamePlaceHolder && dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
				{
					this.importHierarchyAsCatalogItem(inaStructure, dimension);
					this.importLeveledHierarchyToMetadata(importer, inaStructure, context, dimension);
				}
				if (inaStructure.getBooleanByKey("IsTransient"))
				{
					hierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, hierarchyName, inaStructure.getStringByKey("Description"));
				}
				else if (!isHierarchyNamePlaceHolder)
				{
					if (oFF.notNull(queryManager) && queryManager.isAutoVariableSubmitActive() && dimension.getHierarchy() !== null && oFF.XString.isEqual(dimension.getHierarchy().getName(), hierarchyName))
					{
						hierarchy = dimension.getHierarchy();
					}
					else
					{
						hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
					}
				}
				oFF.QInAHierarchy.importHierarchyDueDate(inaStructure, dimension, hierarchy, importer.capabilities.supportsSapDate());
				oFF.QInAHierarchy.importHierarchyVersion(inaStructure, dimension, hierarchy);
				if (!isHierarchyNamePlaceHolder)
				{
					var dateTo = inaStructure.getStringByKey("DateTo");
					hierarchy.setDateTo(oFF.XDate.createDateFromStringWithFlag(dateTo, importer.capabilities.supportsSapDate()));
					var dateFrom = inaStructure.getStringByKey("0DATEFROM");
					hierarchy.setDateFrom(oFF.XDate.createDateFromStringWithFlag(dateFrom, importer.capabilities.supportsSapDate()));
					var inaMetadata = inaStructure.getStructureByKey("Metadata");
					if (oFF.notNull(inaMetadata))
					{
						dateTo = inaMetadata.getStringByKey("DateTo");
						if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTo))
						{
							hierarchy.setDateTo(oFF.XDate.createDateFromStringWithFlag(dateTo, importer.capabilities.supportsSapDate()));
						}
						dateFrom = inaMetadata.getStringByKey("0DATEFROM");
						if (oFF.XStringUtils.isNotNullAndNotEmpty(dateFrom))
						{
							hierarchy.setDateFrom(oFF.XDate.createDateFromStringWithFlag(dateFrom, importer.capabilities.supportsSapDate()));
						}
					}
					dimension.setHierarchy(hierarchy);
					var isActive = inaStructure.getBooleanByKeyExt("HierarchyActive", true);
					dimension.setHierarchyActive(isActive);
					dimension.setSelectorHierarchyActive(isActive);
				}
			}
			var stickyDimensionMembers = inaStructure.getListByKey("StickyDimensionMembers");
			dimension.clearStickyMembers();
			if (oFF.XCollectionUtils.hasElements(stickyDimensionMembers))
			{
				for (var sdi = 0; sdi < stickyDimensionMembers.size(); sdi++)
				{
					dimension.addStickyMember(stickyDimensionMembers.getStringAt(sdi));
				}
			}
			oFF.QInAHierarchy.importHierarchyDrillInfo(importer, inaStructure, dimension, context);
			hierarchyManager.setDisplayHierarchyFixInFilter(fixInFilter);
			return hierarchy;
		}
		hierarchyManager.setDisplayHierarchyFixInFilter(fixInFilter);
	}
	return null;
};
oFF.QInAHierarchy.prototype.importHierarchyAsCatalogItem = function(inaStructure, dimension)
{
	var hierarchyAsList = oFF.PrFactory.createList();
	hierarchyAsList.add(inaStructure);
	var hierarchyCatalogResult = dimension.getHierarchies();
	if (oFF.isNull(hierarchyCatalogResult))
	{
		hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
		oFF.QInAHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
		dimension.getHierarchyManagerBase().setHierarchies(hierarchyCatalogResult);
	}
	else
	{
		oFF.QInAHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
	}
};
oFF.QInAHierarchy.prototype.importLeveledHierarchyToMetadata = function(importer, inaStructure, context, dimension)
{
	var queryManager = dimension.getQueryModelBase().getQueryManagerBase();
	if (oFF.notNull(queryManager) && !oFF.PrUtils.isListEmpty(inaStructure.getListByKey("Levels")))
	{
		var metadataModel = queryManager.getMetadataModelBase();
		var metaHierarchies = metadataModel.getLeveledHierarchiesBase();
		var leveledHierarchy = oFF.QInAMdHierarchy.importLeveledHierarchy(importer, context, dimension, inaStructure);
		if (!metaHierarchies.contains(leveledHierarchy))
		{
			metaHierarchies.add(leveledHierarchy);
		}
	}
};
oFF.QInAHierarchy.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var optimizeExport = exporter.getSession().hasFeature(oFF.FeatureToggleOlap.OPTIMIZE_HIERARCHY_EXPORT) && exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA);
	if (dimension.supportsHierarchy())
	{
		var isHierarchyActive = dimension.isHierarchyActive();
		var isInactiveDataHierarchy = !isHierarchyActive && exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA);
		var isBw = exporter.isAbap(dimension.getQueryModel());
		var hierarchyName = this.getHierarchyName(dimension, isBw, exporter.mode);
		var isHierarchyNameVariableForAutoSubmit = oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(dimension, exporter.mode);
		var isDueDateVariableForAutoSubmit = oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit(dimension, exporter.mode);
		var isVersionVariableForAutoSubmit = oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit(dimension, exporter.mode);
		if (isHierarchyNameVariableForAutoSubmit)
		{
			hierarchyName = dimension.getHierarchyNameVariableName();
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName) && (!isInactiveDataHierarchy || isHierarchyNameVariableForAutoSubmit || isDueDateVariableForAutoSubmit || isVersionVariableForAutoSubmit))
		{
			if (!optimizeExport)
			{
				oFF.QInAExportUtil.setNonEmptyString(inaStructure, "HierarchyName", hierarchyName);
				inaStructure.putBoolean("HierarchyActive", isHierarchyActive);
			}
			oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Name", hierarchyName);
			if (isHierarchyNameVariableForAutoSubmit)
			{
				inaStructure.putString("NameIs", "Variable");
			}
			if (dimension.useHierarchyDueDateVariable() || isDueDateVariableForAutoSubmit)
			{
				inaStructure.putString("DueDateIs", "Variable");
				inaStructure.putString("DueDate", dimension.getHierarchyDueDateVariableName());
			}
			else
			{
				oFF.QInAExportUtil.setDate(exporter, inaStructure, "DueDate", dimension.getHierarchyDueDate());
			}
			if (isVersionVariableForAutoSubmit)
			{
				inaStructure.putString("VersionIs", "Variable");
				inaStructure.putString("Version", dimension.getHierarchyVersionVariableName());
			}
			else
			{
				oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Version", dimension.getHierarchyVersion());
			}
			var queryManagerBase = dimension.getQueryManager();
			if (oFF.notNull(queryManagerBase) && queryManagerBase.isAutoVariableSubmitActive() && dimension.useDefaultDrillLevelOnChange())
			{
				inaStructure.putBoolean("UseDefaultDrillLevelOnChange", true);
			}
			var initialDrillLevel = 0;
			if (!exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) || !dimension.hasZoomDrill())
			{
				if (dimension.getModelCapabilities().supportsVisibilityFilter() || !exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
				{
					initialDrillLevel = dimension.getInitialDrillLevel();
				}
				else
				{
					var drillOffset = dimension.getInitialDrillOffset();
					var drillLevel = dimension.getInitialDrillLevel();
					if (drillOffset === -1 && drillLevel > -1)
					{
						initialDrillLevel = 0;
					}
					else if (drillLevel >= drillOffset)
					{
						initialDrillLevel = dimension.getInitialDrillLevel() - oFF.XMath.max(0, drillOffset);
					}
					else
					{
						initialDrillLevel = drillLevel;
					}
				}
			}
			if (isBw || initialDrillLevel !== 0 || !optimizeExport)
			{
				inaStructure.putInteger("InitialDrillLevel", initialDrillLevel);
			}
			if (!exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				if (dimension.getInitialDrillOffset() !== 0 || inaStructure.containsKey("InitialDrillOffset"))
				{
					inaStructure.putInteger("InitialDrillOffset", dimension.getInitialDrillOffset());
				}
				if (dimension.isExplicitDrillOnFilteredNodes() || inaStructure.containsKey("ExplicitDrillOnFilteredNodes"))
				{
					inaStructure.putBoolean("ExplicitDrillOnFilteredNodes", dimension.isExplicitDrillOnFilteredNodes());
				}
				if (dimension.hasStickyMembers())
				{
					inaStructure.putNewList("StickyDimensionMembers").addAllStrings(dimension.getStickyMembers());
				}
			}
			var alignment = dimension.getLowerLevelNodeAlignment();
			if (dimension.getModelCapabilities().supportsExpandBottomUp())
			{
				if (optimizeExport)
				{
					if (alignment === oFF.Alignment.CHILDREN_ABOVE_PARENT)
					{
						inaStructure.putBoolean("ExpandBottomUp", true);
					}
				}
				else
				{
					inaStructure.putBoolean("ExpandBottomUp", alignment === oFF.Alignment.CHILDREN_ABOVE_PARENT);
				}
			}
			if (isBw)
			{
				var nodeAlignment;
				var capabilities = dimension.getModelCapabilities();
				if (oFF.notNull(capabilities) && capabilities.supportsExpandBottomUp())
				{
					nodeAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(alignment);
				}
				else
				{
					nodeAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA2(alignment);
				}
				inaStructure.putString("LowerLevelNodeAlignment", nodeAlignment);
				var nodeCondensation = dimension.hasNodeCondensation();
				inaStructure.putBoolean("NodeCondensation", nodeCondensation);
				var visibility = dimension.getMemberOfPostedNodeVisibility();
				var memberOfPostedNodeVisibility = oFF.QInAConverter.lookupResultSetVisibilityInA(visibility);
				inaStructure.putString("MemberOfPostedNodeVisibility", memberOfPostedNodeVisibility);
			}
			if (dimension.isHierarchyNavigationDeltaMode())
			{
				inaStructure.putBoolean("HierarchyNavigationDeltaMode", true);
			}
			if (!optimizeExport)
			{
				this.exportHierarchyLevels(inaStructure, dimension, hierarchyName);
			}
			var hierarchy = dimension.getHierarchy();
			if (!isHierarchyNameVariableForAutoSubmit && oFF.notNull(hierarchy) && hierarchy.isCustomHierarchy())
			{
				inaStructure.putBoolean("IsTransient", true);
				inaStructure.putStringNotNull("Description", hierarchy.getHierarchyDescription());
			}
			return inaStructure;
		}
	}
	return null;
};
oFF.QInAHierarchy.prototype.getHierarchyName = function(dimension, isBw, exportMode)
{
	if (isBw && dimension.getAxisType() === oFF.AxisType.FREE && (dimension.isHierarchyActive() || oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(dimension, exportMode)))
	{
		var filter = dimension.getQueryModel().getFilter().getEffectiveFilter();
		var hierarchyUsedInFilter = this.getHierarchyFromFilter(filter.getFilterRootElement(), dimension.getName());
		if (oFF.notNull(hierarchyUsedInFilter))
		{
			return hierarchyUsedInFilter;
		}
	}
	return dimension.getHierarchyName();
};
oFF.QInAHierarchy.prototype.getHierarchyFromFilter = function(filterElement, dimensionName)
{
	if (oFF.notNull(filterElement))
	{
		var componentType = filterElement.getComponentType();
		if (componentType.isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			var filterOperation = filterElement;
			if (oFF.XString.isEqual(filterOperation.getDimensionName(), dimensionName) && oFF.XStringUtils.isNotNullAndNotEmpty(filterOperation.getHierarchyName()))
			{
				return filterOperation.getHierarchyName();
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			var filterAlgebra = filterElement;
			for (var i = 0; i < filterAlgebra.size(); i++)
			{
				var hierarchyFromFilter = this.getHierarchyFromFilter(filterAlgebra.get(i), dimensionName);
				if (oFF.notNull(hierarchyFromFilter))
				{
					return hierarchyFromFilter;
				}
			}
		}
	}
	return null;
};
oFF.QInAHierarchy.prototype.exportHierarchyLevels = function(inaStructure, dimension, hierarchyName)
{
	if (dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
	{
		var hierarchies = dimension.getHierarchies();
		if (oFF.notNull(hierarchies))
		{
			var hierarchiesIt = hierarchies.getObjectsIterator();
			while (hierarchiesIt.hasNext())
			{
				var catalogItem = hierarchiesIt.next();
				if (oFF.XString.isEqual(catalogItem.getHierarchyName(), hierarchyName))
				{
					oFF.QInAMdHierarchy.exportLevels(inaStructure, catalogItem);
					return;
				}
			}
		}
	}
};

oFF.QInAMember = function() {};
oFF.QInAMember.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMember.prototype._ff_c = "QInAMember";

oFF.QInAMember.getNameForImport = function(inaStructure, dimension)
{
	var memberName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(memberName) && oFF.notNull(dimension))
	{
		memberName = oFF.QInAMember.getValueByFieldName(inaStructure, dimension.getFlatKeyField(), dimension.getHierarchyKeyField());
	}
	return memberName;
};
oFF.QInAMember.getText = function(inaStructure, dimension)
{
	var memberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(memberText) && oFF.notNull(dimension))
	{
		memberText = oFF.QInAMember.getValueByFieldName(inaStructure, dimension.getFlatTextField(), dimension.getHierarchyTextField());
	}
	return memberText;
};
oFF.QInAMember.getValueByFieldName = function(inaStructure, flatField, hierarchyField)
{
	var value = null;
	if (oFF.notNull(flatField))
	{
		value = inaStructure.getStringByKey(flatField.getName());
	}
	if (oFF.isNull(value) && oFF.notNull(hierarchyField))
	{
		value = inaStructure.getStringByKey(hierarchyField.getName());
	}
	return value;
};
oFF.QInAMember.exportText = function(exporter, inaStructure, member)
{
	var text = member.getText();
	var isAbap = exporter.isAbap(member);
	if (isAbap || oFF.notNull(text))
	{
		inaStructure.putString("Description", text);
	}
};
oFF.QInAMember.importMeasure = function(importer, inaStructure, context, queryModel, dimension)
{
	var newMemberType;
	newMemberType = oFF.QInAMember.determineMemberType(importer, inaStructure, dimension);
	if (inaStructure.containsKey("MemberType") && oFF.isNull(newMemberType))
	{
		return null;
	}
	var member;
	if (newMemberType === oFF.MemberType.RESTRICTED_MEASURE)
	{
		member = importer.importRestrictedMeasure(inaStructure, dimension, context);
	}
	else if (newMemberType === oFF.MemberType.FORMULA)
	{
		member = importer.importFormulaMeasure(inaStructure, dimension, queryModel);
	}
	else if (newMemberType === oFF.MemberType.MEASURE)
	{
		member = importer.importBasicMeasure(inaStructure, dimension, context);
	}
	else if (newMemberType === oFF.MemberType.VARIANCE)
	{
		member = importer.importVarianceMeasure(inaStructure, dimension, context);
	}
	else if (newMemberType === oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		member = importer.importExceptionAggregationMeasure(inaStructure, dimension, context);
	}
	else if (newMemberType === oFF.MemberType.CURRENCY_MEASURE)
	{
		member = importer.importCurrencyMeasure(inaStructure, dimension, context);
	}
	else
	{
		member = null;
	}
	return member;
};
oFF.QInAMember.determineMemberType = function(importer, inaStructure, dimension)
{
	var newMemberType;
	var dimensionMemberInA = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	if (inaStructure.containsKey("MemberType"))
	{
		var newInAMemberType = inaStructure.getStringByKeyExt("MemberType", "Measure");
		newMemberType = oFF.QInAConverter.lookupMeasureStructureMemberType(newInAMemberType);
		if (oFF.isNull(newMemberType))
		{
			importer.addError(oFF.ErrorCodes.INVALID_STATE, oFF.XStringUtils.concatenate3("MeasureStructure->MemberType unsupported: '", newInAMemberType, "'"));
			return null;
		}
	}
	else if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && oFF.notNull(dimensionMemberInA))
	{
		if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			newMemberType = oFF.MemberType.MEASURE;
		}
		else
		{
			newMemberType = dimension.getStructureMember(dimensionMemberInA).getMemberType();
			if (newMemberType === oFF.MemberType.BASIC_MEASURE)
			{
				newMemberType = oFF.MemberType.MEASURE;
			}
		}
	}
	else
	{
		if (inaStructure.containsKey("Formula"))
		{
			newMemberType = oFF.MemberType.FORMULA;
		}
		else
		{
			var inaSelection = inaStructure.getStructureByKey("Selection");
			if (oFF.isNull(inaSelection))
			{
				newMemberType = oFF.MemberType.MEASURE;
			}
			else
			{
				newMemberType = inaSelection.containsKey("Operator") ? oFF.MemberType.RESTRICTED_MEASURE : oFF.MemberType.MEASURE;
			}
		}
	}
	return newMemberType;
};
oFF.QInAMember.exportCustomMember = function(exporter, modelComponent, inaStructure)
{
	var componentType = modelComponent.getComponentType();
	if (componentType === oFF.MemberType.FORMULA || componentType === oFF.MemberType.VARIANCE)
	{
		exporter.exportFormulaMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.RESTRICTED_MEASURE)
	{
		exporter.exportRestrictedMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		exporter.exportExceptionAggregationMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.CURRENCY_MEASURE)
	{
		exporter.exportCurrencyMeasure(modelComponent, inaStructure);
	}
};
oFF.QInAMember.importGenericMemberProperties = function(importer, member, inaMember)
{
	if (!importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || member.getQueryModel().isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata())
	{
		if (inaMember.containsKey("NumericShift"))
		{
			member.setNumericShift(inaMember.getIntegerByKey("NumericShift"));
		}
		if (inaMember.containsKey("NumericScale"))
		{
			member.setNumericScale(inaMember.getIntegerByKey("NumericScale"));
		}
		if (inaMember.containsKey("NumericPrecision"))
		{
			member.setNumericPrecision(inaMember.getIntegerByKey("NumericPrecision"));
		}
	}
	if (member.getModelCapabilities().supportsMemberVisibility())
	{
		var inaVisibility = inaMember.getStringByKeyExt("Visibility", "Visible");
		member.setResultVisibility(oFF.QInAConverter.lookupResultSetVisibility(inaVisibility));
	}
	var inaPostAggregation = inaMember.getStringByKey("PostAggregation");
	var postAggregationType = oFF.QInAConverter.lookupAggregationType(inaPostAggregation);
	member.setPostAggregationType(postAggregationType);
	if (inaMember.containsKey("PostAggregationIgnoreHierarchy"))
	{
		member.setPostAggregationIgnoreHierarchy(true);
	}
	member.clearPostAggregationDimensions();
	var inaPostAggregationDimensions = inaMember.getListByKey("PostAggregationDimensions");
	if (oFF.notNull(inaPostAggregationDimensions))
	{
		var postAggregationSize = inaPostAggregationDimensions.size();
		for (var postDimIdx = 0; postDimIdx < postAggregationSize; postDimIdx++)
		{
			member.addPostAggregationDimensionName(inaPostAggregationDimensions.getStringAt(postDimIdx));
		}
	}
	oFF.QInAMember.importWindowFunction(member, inaMember);
	oFF.QInAMember.importCurrencyTranslation(member, inaMember);
};
oFF.QInAMember.importGenericRuntimeMemberProperties = function(importer, member, inaMember)
{
	if (!importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || member.getQueryModel().isBasicMeasureAggregationExportedInRepo() || !member.isCreatedFromMetadata())
	{
		var modelDefinedMember = inaMember.getBooleanByKeyExt("ModelDefinedMember", false);
		var preserveAggregationType = modelDefinedMember && member.getQueryManager().getInitSettings().getProviderType() === oFF.ProviderType.LIST_REPORTING;
		if (!preserveAggregationType)
		{
			oFF.QInAMember.importAggregationType(member, inaMember, true);
		}
	}
	oFF.QInAMember.importGenericMemberProperties(importer, member, inaMember);
	if (inaMember.containsKey("DataType"))
	{
		member.setDataType(oFF.QInAConverter.lookupValueType(inaMember.getStringByKey("DataType")));
	}
	oFF.QInAMember.importIgnoredExternalDimensions(importer, member, inaMember);
	oFF.QInAMember.importSolveOrder(member, inaMember);
	oFF.QInAMember.importCurrencyTranslation(member, inaMember);
};
oFF.QInAMember.importCurrencyTranslation = function(member, inaMember)
{
	if (inaMember.containsKey("CurrencyTranslationName"))
	{
		member.setCurrencyTranslationName(inaMember.getStringByKey("CurrencyTranslationName"));
	}
};
oFF.QInAMember.importSolveOrder = function(member, inaMember)
{
	var solveOrder = inaMember.getIntegerByKeyExt("SolveOrder", 0);
	if (solveOrder !== 0)
	{
		member.setSolveOrder(solveOrder);
	}
};
oFF.QInAMember.importIgnoredExternalDimensions = function(importer, member, inaMember)
{
	if (importer.capabilities.supportsIgnoreExternalDimensions())
	{
		if (inaMember.hasStringByKey("IgnoreExternalDimensions"))
		{
			var ignoreExternalDimensions = inaMember.getStringByKey("IgnoreExternalDimensions");
			if (oFF.XString.isEqual(ignoreExternalDimensions, "All"))
			{
				member.setIgnoreAllExternalDimensions(true);
			}
		}
		else if (inaMember.containsKey("IgnoreExternalDimensions"))
		{
			var inaIgnoreExternalDimensions = inaMember.getListByKey("IgnoreExternalDimensions");
			var externalSize = inaIgnoreExternalDimensions.size();
			for (var idxIgnore = 0; idxIgnore < externalSize; idxIgnore++)
			{
				member.addExternalDimensionToIgnore(inaIgnoreExternalDimensions.getStringAt(idxIgnore));
			}
		}
	}
};
oFF.QInAMember.exportAggregationType = function(member, inaMember)
{
	var basicAggregationType = member.getAggregationType();
	if (oFF.notNull(basicAggregationType))
	{
		inaMember.putString("Aggregation", oFF.QInAConverter.lookupAggregationTypeInA(basicAggregationType));
	}
};
oFF.QInAMember.importAggregationType = function(member, inaMember, overrideDefaultAggregationType)
{
	var originalAggregationType = member.getAggregationType();
	if (overrideDefaultAggregationType)
	{
		member.setAggregationType(null);
	}
	var inaAggregation = inaMember.getStringByKey("Aggregation");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregation))
	{
		member.setAggregationType(oFF.QInAConverter.lookupAggregationType(inaAggregation));
	}
	else if (inaMember.getBooleanByKeyExt("ModelDefinedMember", false) && member.getDimension() !== null && member.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
	{
		if (oFF.isNull(originalAggregationType))
		{
			member.setAggregationType(oFF.AggregationType.SUM);
		}
		else
		{
			member.setAggregationType(originalAggregationType);
		}
	}
};
oFF.QInAMember.exportGenericRuntimeMemberProperties = function(exporter, member, inaMember)
{
	var queryModel = member.getQueryModel();
	var isNotRepoFormat = !exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
	var isNotBasicMeasure = !member.isCreatedFromMetadata();
	if (isNotRepoFormat || queryModel.isBasicMeasureAggregationExportedInRepo() || isNotBasicMeasure)
	{
		oFF.QInAMember.exportAggregationType(member, inaMember);
	}
	if (isNotRepoFormat || queryModel.isBasicMeasureSettingsExportedInRepo() || isNotBasicMeasure)
	{
		if (!exporter.capabilities.supportsDataCells())
		{
			oFF.QInAExportUtil.setIntegerIfNotNull(inaMember, "NumericShift", member.getNumericShift());
		}
		if (!exporter.capabilities.supportsDataCells() || member.getModelCapabilities().supportsExtendedKeyFigureProperties())
		{
			var numericScale = member.getNumericScale();
			if (oFF.notNull(numericScale) && numericScale.getInteger() >= 0)
			{
				inaMember.putInteger("NumericScale", numericScale.getInteger());
			}
			var numericPrecision = member.getNumericPrecision();
			if (oFF.notNull(numericPrecision) && numericPrecision.getInteger() >= 0)
			{
				inaMember.putInteger("NumericPrecision", numericPrecision.getInteger());
			}
		}
	}
	if (exporter.capabilities.supportsCurrencyTranslation())
	{
		inaMember.putStringNotNullAndNotEmpty("CurrencyTranslationName", member.getMappedCurrencyTranslationNameForInAData());
	}
	if (exporter.capabilities.supportsMemberVisibility())
	{
		var resultVisibility = member.getResultVisibility();
		if (oFF.isNull(resultVisibility))
		{
			resultVisibility = oFF.ResultVisibility.VISIBLE;
		}
		inaMember.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(resultVisibility));
	}
	var presentationSignReversal = member.getPresentationSignReversal();
	if (inaMember.getByKey("PresentationSignReversal") === null && oFF.notNull(presentationSignReversal))
	{
		inaMember.putBoolean("PresentationSignReversal", presentationSignReversal.getBoolean());
	}
	if (isNotRepoFormat || queryModel.isBasicMeasureSettingsExportedInRepo() || isNotBasicMeasure)
	{
		inaMember.putStringNotNullAndNotEmpty("UnitType", oFF.QInAConverter.lookupUnitTypeInA(member.getUnitType()));
		inaMember.putStringNotNull("UnitFixed", member.getUnitFixed());
	}
	if (!exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE))
	{
		inaMember.putStringNotNull("UnitName", member.getUnitName());
		inaMember.putStringNotNull("UnitTextName", member.getUnitTextName());
		inaMember.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(member.getDataType()));
	}
	oFF.QInAMember.exportPostAggregation(member, inaMember);
	oFF.QInAMember.exportIgnoreExternalDimensions(exporter, member, inaMember);
	oFF.QInAMember.exportExceptionAggregation(member, inaMember);
	oFF.QInAMember.exportWindowFunction(member, inaMember);
	var solveOrder = member.getSolveOrder();
	if (solveOrder !== 0)
	{
		inaMember.putInteger("SolveOrder", solveOrder);
	}
};
oFF.QInAMember.exportIgnoreExternalDimensions = function(exporter, member, inaMember)
{
	if (exporter.capabilities.supportsIgnoreExternalDimensions())
	{
		if (member.isIgnoringAllExternalDimensions())
		{
			inaMember.putString("IgnoreExternalDimensions", "All");
		}
		else
		{
			var ignoredExternalDimensions = oFF.XListOfString.create();
			if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) && member.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
			{
				var restrictedMeasure = member;
				ignoredExternalDimensions.addAll(restrictedMeasure.getTransientIgnoredExternalDimensions());
			}
			ignoredExternalDimensions.addAll(member.getIgnoredExternalDimensions());
			if (ignoredExternalDimensions.hasElements())
			{
				var inaIgnoredExternalDimensions = inaMember.putNewList("IgnoreExternalDimensions");
				inaIgnoredExternalDimensions.addAllStrings(ignoredExternalDimensions);
			}
		}
	}
};
oFF.QInAMember.exportPostAggregation = function(member, inaMember)
{
	var postAggregationType = member.getPostAggregationType();
	if (oFF.notNull(postAggregationType))
	{
		inaMember.putString("PostAggregation", oFF.QInAConverter.lookupAggregationTypeInA(postAggregationType));
	}
	if (member.isPostAggregationIgnoringHierarchy())
	{
		inaMember.putBoolean("PostAggregationIgnoreHierarchy", true);
	}
	var postAggregationDimensions = member.getPostAggregationDimensions();
	if (postAggregationDimensions.hasElements())
	{
		var inaPostAggregationDimensions = inaMember.putNewList("PostAggregationDimensions");
		var iterator = postAggregationDimensions.getIterator();
		while (iterator.hasNext())
		{
			inaPostAggregationDimensions.add(oFF.PrFactory.createString(iterator.next()));
		}
	}
};
oFF.QInAMember.exportExceptionAggregation = function(member, inaMember)
{
	var exceptionAggregationType = member.getExceptionAggregationType();
	if (oFF.notNull(exceptionAggregationType))
	{
		inaMember.putString("ExceptionAggregation", exceptionAggregationType.getName());
	}
	var exceptionAggregationDimensions = member.getExceptionAggregationDimensions();
	if (oFF.notNull(exceptionAggregationDimensions) && exceptionAggregationDimensions.hasElements())
	{
		var inaExceptionAggregationDimensions = inaMember.putNewList("ExceptionAggregationDimensions");
		inaExceptionAggregationDimensions.addAllStrings(exceptionAggregationDimensions);
	}
};
oFF.QInAMember.exportWindowFunction = function(member, inaMember)
{
	var windowFunction = member.getWindowFunction();
	if (oFF.notNull(windowFunction))
	{
		var inaWindowFunction = inaMember.putNewStructure("WindowFunction");
		inaWindowFunction.putString("Name", oFF.QInAConverter.lookupWindowFunctionTypeInA(windowFunction.getType()));
		var dimensionsNotInPartition = windowFunction.getNotInPartitionDimensions();
		var inaDimensionsNotInPartitionList = inaWindowFunction.putNewList("DimensionsNotInPartition");
		inaDimensionsNotInPartitionList.addAllStrings(dimensionsNotInPartition);
		var inaSortDimensionsList = inaWindowFunction.putNewList("SortDimensions");
		var sortedIter = windowFunction.getSortDimensions().getIterator();
		while (sortedIter.hasNext())
		{
			var sortDimension = sortedIter.next();
			var dimension = inaSortDimensionsList.addNewStructure();
			dimension.putString("Name", sortDimension.getName());
			var directionType = sortDimension.getDirection();
			if (directionType === oFF.XSortDirection.ASCENDING || directionType === oFF.XSortDirection.DESCENDING)
			{
				dimension.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(directionType));
			}
			var nullsType = sortDimension.getNulls();
			if (oFF.notNull(nullsType) && nullsType !== oFF.NullsType.NONE)
			{
				dimension.putString("Nulls", oFF.QInAConverter.lookupNullsTypeInA(nullsType));
			}
		}
		var frame = windowFunction.getFrame();
		if (oFF.notNull(frame))
		{
			var inaFrame = inaWindowFunction.putNewStructure("Frame");
			inaFrame.putString("Start", oFF.QInAConverter.lookupFrameStartTypeInA(frame.getStart()));
			inaFrame.putInteger("StartPreceding", frame.getStartPreceding());
			inaFrame.putString("End", oFF.QInAConverter.lookupFrameEndTypeInA(frame.getEnd()));
			inaFrame.putInteger("EndFollowing", frame.getEndFollowing());
		}
	}
};
oFF.QInAMember.importWindowFunction = function(member, inaMember)
{
	var inaWindowFunction = inaMember.getStructureByKey("WindowFunction");
	if (oFF.notNull(inaWindowFunction))
	{
		var windowfunction = oFF.QWindowFunction._createWindowFunction(oFF.QInAConverter.lookupWindowFunctionType(inaWindowFunction.getStringByKey("Name")));
		var inaDimensionsNotInPartitionList = inaWindowFunction.getListByKey("DimensionsNotInPartition");
		if (oFF.notNull(inaDimensionsNotInPartitionList))
		{
			for (var idxNIPDimension = 0; idxNIPDimension < inaDimensionsNotInPartitionList.size(); idxNIPDimension++)
			{
				windowfunction.addNotInPartitionDimension(inaDimensionsNotInPartitionList.getStringAt(idxNIPDimension));
			}
		}
		var inaSortDimensionsList = inaWindowFunction.getListByKey("SortDimensions");
		if (oFF.notNull(inaSortDimensionsList))
		{
			for (var idxSortDimension = 0; idxSortDimension < inaSortDimensionsList.size(); idxSortDimension++)
			{
				var inaSortedDimension = inaSortDimensionsList.getStructureAt(idxSortDimension);
				var name = inaSortedDimension.getStringByKey("Name");
				var directionType = oFF.QInAConverter.lookupSortDirection2(inaSortedDimension.getStringByKey("Direction"));
				var nullsType = oFF.QInAConverter.lookupNullsType(inaSortedDimension.getStringByKey("Nulls"));
				windowfunction.addSortDimension(name, directionType, nullsType);
			}
		}
		var inaFrame = inaWindowFunction.getStructureByKey("Frame");
		if (oFF.notNull(inaFrame))
		{
			windowfunction.setFrame(oFF.QInAConverter.lookupFrameStartType(inaFrame.getStringByKey("Start")), inaFrame.getIntegerByKey("StartPreceding"), oFF.QInAConverter.lookupFrameEndType(inaFrame.getStringByKey("End")), inaFrame.getIntegerByKey("EndFollowing"));
		}
		member.setWindowFunction(windowfunction);
	}
};
oFF.QInAMember.prototype.getComponentType = function()
{
	return oFF.MemberType.ABSTRACT_MEMBER;
};
oFF.QInAMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = context.getQueryModel();
	var dimension = parentComponent;
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getMeasureDimension();
	}
	var member = oFF.QInAMember.importMeasure(importer, inaStructure, context, queryModel, dimension);
	if (oFF.notNull(member))
	{
		oFF.QInAMember.importGenericRuntimeMemberProperties(importer, member, inaStructure);
		if (inaStructure.containsKey("PresentationSignReversal"))
		{
			member.setPresentationSignReversal(inaStructure.getBooleanByKey("PresentationSignReversal"));
		}
		var inaAggregationType = inaStructure.getIntegerByKeyExt("[Measures].[Aggregation]", -1);
		var aggregationType = oFF.QInAConverter.lookupAggregationType2(inaAggregationType);
		if (oFF.notNull(aggregationType))
		{
			member.setAggregationType(aggregationType);
		}
		if ((!importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || queryModel.isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata()) && !oFF.XCollectionUtils.hasElements(inaStructure.getStructureByKey("[Measures].[MemberDetails]")))
		{
			this.setPrecisionAndScale(importer, inaStructure, queryModel, member);
			member.setUnitType(oFF.QInAConverter.lookupUnitType(inaStructure.getStringByKey("UnitType")));
			member.setUnitFixed(inaStructure.getStringByKey("UnitFixed"));
			member.setUnitName(inaStructure.getStringByKey("UnitName"));
			member.setUnitTextName(inaStructure.getStringByKey("UnitTextName"));
		}
		importer.importExceptions(inaStructure, member);
		if (oFF.notNull(parentComponent))
		{
			var capabilities = dimension.getModelCapabilities();
			if (oFF.notNull(capabilities) && capabilities.supportsExceptionAggregationDimsFormulas() || importer.capabilities.supportsExceptionAggregationDimsFormulas())
			{
				member.clearExceptionAggregationDimensions();
			}
			member.setExceptionAggregationType(null);
			this.importExceptionAggregationProperties(inaStructure, member);
		}
		this.importUniversalModelProperties(importer, inaStructure, member);
		this.importInternalDataType(inaStructure, member);
	}
	return member;
};
oFF.QInAMember.prototype.importExceptionAggregationProperties = function(inaStructure, member)
{
	var inaExceptionAggregationDimensions = inaStructure.getListByKey("ExceptionAggregationDimensions");
	if (oFF.notNull(inaExceptionAggregationDimensions))
	{
		var exceptionDimSize = inaExceptionAggregationDimensions.size();
		for (var idx = 0; idx < exceptionDimSize; idx++)
		{
			member.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions.getStringAt(idx));
		}
	}
	member.setExceptionAggregationType(oFF.AggregationType.lookupOrCreate(inaStructure.getStringByKey("ExceptionAggregation")));
};
oFF.QInAMember.prototype.importInternalDataType = function(measureIna, measure)
{
	if (measure.getDataTypeInternal() === null && measureIna.containsKey("[Measures].[SQLType]"))
	{
		var dataTypeName = measureIna.getStringByKey("[Measures].[SQLType]");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataTypeName))
		{
			if (oFF.XString.startsWith(dataTypeName, oFF.XStringUtils.concatenate2("DECIMAL", "(")))
			{
				measure.setDataTypeInternal(oFF.XValueType.DECIMAL_FLOAT);
				var prefixEnd = oFF.XString.size("DECIMAL") + 1;
				var delimiter = oFF.XString.indexOf(dataTypeName, ",");
				var suffixStart = oFF.XString.size(dataTypeName) - 1;
				if (delimiter > prefixEnd && delimiter < suffixStart)
				{
					var precisionString = oFF.XString.substring(dataTypeName, prefixEnd, delimiter);
					var scaleString = oFF.XString.substring(dataTypeName, delimiter + 1, suffixStart);
					measure.setDataTypePrecision(oFF.XInteger.convertFromString(precisionString));
					measure.setDataTypeScale(oFF.XInteger.convertFromString(scaleString));
				}
			}
			else if (oFF.XString.isEqual(dataTypeName, "INTEGER"))
			{
				measure.setDataTypeInternal(oFF.XValueType.INTEGER);
			}
		}
	}
};
oFF.QInAMember.prototype.importUniversalModelProperties = function(importer, inaStructure, member)
{
	var capabilities = member.getModelCapabilities();
	if (oFF.notNull(capabilities) && capabilities.supportsCustomMeasuresInMetadata())
	{
		var memberDetails = inaStructure.getStructureByKey("[Measures].[MemberDetails]");
		if (oFF.notNull(memberDetails))
		{
			var numericShift = oFF.PrUtils.getIntegerProperty(memberDetails, "NumericShift");
			if (oFF.notNull(numericShift))
			{
				member.setNumericShift(numericShift.getInteger());
			}
			var numericScale = oFF.PrUtils.getIntegerProperty(memberDetails, "NumericScale");
			if (oFF.notNull(numericScale))
			{
				member.setNumericScale(numericScale.getInteger());
			}
			var numericPrecision = oFF.PrUtils.getIntegerProperty(memberDetails, "NumericPrecision");
			if (oFF.notNull(numericPrecision))
			{
				member.setNumericPrecision(numericPrecision.getInteger());
			}
			this.importExceptionAggregationProperties(memberDetails, member);
			if (memberDetails.hasElements())
			{
				member.setUnitType(oFF.QInAConverter.lookupUnitType(memberDetails.getStringByKey("UnitType")));
				member.setUnitFixed(memberDetails.getStringByKey("UnitFixed"));
			}
			else
			{
				member.setUnitType(oFF.QInAConverter.lookupByEncodedValue(inaStructure.getIntegerByKey("[Measures].[UnitType]")));
				member.setUnitFixed(inaStructure.getStringByKey("[Measures].[UnitFixed]"));
			}
			oFF.QInAMember.importIgnoredExternalDimensions(importer, member, memberDetails);
			oFF.QInAMember.importSolveOrder(member, memberDetails);
			oFF.QInAMember.importCurrencyTranslation(member, memberDetails);
			if (member.getModelCapabilities().supportsMemberVisibility())
			{
				var inaVisibility = memberDetails.getStringByKeyExt("Visibility", "Visible");
				member.setResultVisibility(oFF.QInAConverter.lookupResultSetVisibility(inaVisibility));
			}
		}
	}
};
oFF.QInAMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var componentType = modelComponent.getComponentType();
	if (componentType.isTypeOf(oFF.MemberType.MEASURE))
	{
		var member = modelComponent;
		exporter.exportExceptions(member, inaStructure);
		if (componentType === oFF.MemberType.BASIC_MEASURE)
		{
			var exportBasicMeasures = true;
			if (!member.getQueryModel().isExportingEachMeasure() && exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				var structureMember = modelComponent;
				if (exporter.capabilities.supportsExceptionsV2() || !oFF.XCollectionUtils.hasElements(structureMember.getExceptions()))
				{
					exportBasicMeasures = false;
				}
			}
			if (exportBasicMeasures)
			{
				exporter.exportBasicMeasure(modelComponent, inaStructure);
			}
		}
		else
		{
			oFF.QInAMember.exportCustomMember(exporter, modelComponent, inaStructure);
		}
		if (inaStructure.hasElements())
		{
			oFF.QInAMember.exportGenericRuntimeMemberProperties(exporter, member, inaStructure);
		}
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			var inaMemberType = oFF.QInAConverter.lookupMeasureStructureMemberTypeIna(member.getMemberType());
			inaStructure.putString("MemberType", inaMemberType);
		}
	}
	return inaStructure;
};
oFF.QInAMember.prototype.setPrecisionAndScale = function(importer, inaStructure, queryModel, member)
{
	var numericPrecision = -1;
	var numericScale = -1;
	if (importer.isAbap(queryModel))
	{
		numericPrecision = inaStructure.getIntegerByKeyExt("Digits", -1);
		numericScale = inaStructure.getIntegerByKeyExt("FractDigits", -1);
	}
	else
	{
		numericPrecision = inaStructure.getIntegerByKeyExt("[Measures].[Digits]", -1);
		numericScale = inaStructure.getIntegerByKeyExt("[Measures].[FractDigits]", -1);
	}
	if (numericPrecision !== -1)
	{
		member.setNumericPrecision(numericPrecision);
	}
	if (numericScale !== -1)
	{
		member.setNumericScale(numericScale);
	}
};

oFF.QInAMemberBasicMeasure = function() {};
oFF.QInAMemberBasicMeasure.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMemberBasicMeasure.prototype._ff_c = "QInAMemberBasicMeasure";

oFF.QInAMemberBasicMeasure.getNameFromOperand = function(inaStructure)
{
	var memberOperand = inaStructure.getStructureByKey("MemberOperand");
	if (oFF.notNull(memberOperand))
	{
		var isFilterOnMeasures = oFF.XString.isEqual(memberOperand.getStringByKey("AttributeName"), "Measures");
		var isFilterEqual = oFF.QInAConverter.lookupComparison(memberOperand.getStringByKey("Comparison")) === oFF.ComparisonOperator.EQUAL;
		if (isFilterOnMeasures && isFilterEqual)
		{
			return memberOperand.getStringByKey("Value");
		}
	}
	return null;
};
oFF.QInAMemberBasicMeasure.importExceptionAggregation = function(inaStructure, queryModel, member)
{
	if (queryModel.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		member.clearExceptionAggregationDimensions();
		member.setExceptionAggregationType(null);
		var inaExceptionAggregationDimensions = inaStructure.getListByKey("ExceptionAggregationDimensions");
		if (oFF.notNull(inaExceptionAggregationDimensions))
		{
			var exceptionSize = inaExceptionAggregationDimensions.size();
			for (var idx = 0; idx < exceptionSize; idx++)
			{
				member.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions.getStringAt(idx));
			}
		}
		var exceptionAggregation = inaStructure.getStringByKey("ExceptionAggregation");
		member.setExceptionAggregationType(oFF.AggregationType.lookupOrCreate(exceptionAggregation));
	}
	else
	{
		var inaAggregationDimension = inaStructure.getStringByKey("AggregationDimension");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregationDimension))
		{
			member.setAggregationDimensionName(inaAggregationDimension);
		}
	}
};
oFF.QInAMemberBasicMeasure.exportBasicMeasure = function(exporter, inaStructure, basicMeasure, queryModel)
{
	var basicAggregationType = basicMeasure.getAggregationType();
	oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "Aggregation", basicAggregationType);
	if (!basicMeasure.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		var basicAggregationDimensionName = basicMeasure.getAggregationDimensionName();
		if (oFF.notNull(basicAggregationDimensionName))
		{
			inaStructure.putString("AggregationDimension", basicAggregationDimensionName);
		}
	}
	if (!exporter.capabilities.supportsExtendedSort() && !exporter.isVirtualInA(queryModel))
	{
		var measureSorting = queryModel.getSortingManager().getMeasureSorting(basicMeasure, false);
		if (oFF.isNull(measureSorting))
		{
			inaStructure.putInteger("SortOrder", 0);
		}
		else
		{
			inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(measureSorting.getDirection()));
		}
	}
};
oFF.QInAMemberBasicMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.BASIC_MEASURE;
};
oFF.QInAMemberBasicMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = parentComponent;
	var newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	var newMemberText = oFF.QInAMember.getText(inaStructure, dimension);
	if (oFF.XStringUtils.isNullOrEmpty(newMemberName))
	{
		newMemberName = oFF.QInAMemberBasicMeasure.getNameFromOperand(inaStructure);
	}
	var structureMember = dimension.getStructureMember(newMemberName);
	var member = structureMember;
	if (oFF.isNull(member) && oFF.notNull(newMemberName))
	{
		if (!inaStructure.containsKey("Selection"))
		{
			member = dimension.addNewBasicMeasure(newMemberName, newMemberText);
		}
	}
	if (oFF.notNull(member))
	{
		oFF.QInAMemberBasicMeasure.importExceptionAggregation(inaStructure, dimension.getQueryModel(), member);
		importer.importExceptions(inaStructure, member);
	}
	return member;
};
oFF.QInAMemberBasicMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var basicMeasure = modelComponent;
	if (basicMeasure.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		inaStructure.putString("Name", basicMeasure.getName());
		return inaStructure;
	}
	var queryModel = basicMeasure.getQueryModel();
	if (!queryModel.getModelCapabilities().supportsNamedCustomMember())
	{
		var aggregationType = basicMeasure.getExceptionAggregationType();
		if (!basicMeasure.isAvailableInMetadata() && aggregationType === oFF.AggregationType.COUNT)
		{
			this.exportMeasureReference(exporter, inaStructure, "Name", basicMeasure.getKeyFieldValue(), queryModel);
			if (exporter.capabilities.supportsUniversalModel())
			{
				this.exportMeasureReference(exporter, this.getMemberOperandElement(exporter, inaStructure, basicMeasure, queryModel), "Value", oFF.XValueAccess.createWithValue(oFF.XStringValue.create("$$Count$$")), queryModel);
			}
			oFF.QInAMember.exportText(exporter, inaStructure, basicMeasure);
		}
		else
		{
			this.exportMeasureReference(exporter, this.getMemberOperandElement(exporter, inaStructure, basicMeasure, queryModel), "Value", basicMeasure.getKeyFieldValue(), queryModel);
		}
	}
	else
	{
		this.exportMeasureReference(exporter, inaStructure, "MemberName", basicMeasure.getKeyFieldValue(), queryModel);
	}
	oFF.QInAMemberBasicMeasure.exportBasicMeasure(exporter, inaStructure, basicMeasure, queryModel);
	if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		if (queryModel.getModelCapabilities().supportsCorrectDimensionDescriptionExt())
		{
			var member = modelComponent;
			var textField = member.getDimension().getTextField();
			if (oFF.notNull(textField))
			{
				var overrideDescriptionValue = member.getDimension().getAlternativeFieldValue(false, member.getName(), textField.getName(), null);
				if (member.isModelDefinedMember() && oFF.notNull(overrideDescriptionValue))
				{
					inaStructure.putStringNotNullAndNotEmpty("Description", basicMeasure.getText());
				}
			}
		}
		if (basicMeasure.getTagging().containsKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION))
		{
			inaStructure.putStringNotNullAndNotEmpty("Description", basicMeasure.getTagging().getByKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION));
		}
	}
	return inaStructure;
};
oFF.QInAMemberBasicMeasure.prototype.exportMeasureReference = function(exporter, nameHolderStructure, referenceStringToIndicateMeasure, keyFieldValue, queryModel)
{
	oFF.QInAValueUtils.exportPlaceholderValue(exporter, referenceStringToIndicateMeasure, nameHolderStructure, keyFieldValue, keyFieldValue.getValueType(), queryModel);
};
oFF.QInAMemberBasicMeasure.prototype.getMemberOperandElement = function(exporter, inaStructure, basicMeasure, queryModel)
{
	var memberOperandElement = oFF.PrFactory.createStructure();
	memberOperandElement.putString("AttributeName", "Measures");
	inaStructure.put("MemberOperand", memberOperandElement);
	memberOperandElement.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
	if (exporter.isVirtualInA(queryModel))
	{
		memberOperandElement.putStringNotNullAndNotEmpty("Description", basicMeasure.getText());
	}
	return memberOperandElement;
};

oFF.QInAMemberRestrictedMeasure = function() {};
oFF.QInAMemberRestrictedMeasure.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMemberRestrictedMeasure.prototype._ff_c = "QInAMemberRestrictedMeasure";

oFF.QInAMemberRestrictedMeasure.getFirstMemberForSignFlip = function(accountName, complexSelectionRoot)
{
	var iterator = complexSelectionRoot.getChildren();
	while (iterator.hasNext())
	{
		var filterElement = iterator.next();
		if (filterElement.getOlapComponentType() === oFF.FilterComponentType.OPERATION)
		{
			var filterOperation = filterElement;
			var dimensionName = filterOperation.getDimensionName();
			if (oFF.XString.isEqual(accountName, dimensionName))
			{
				return filterOperation.getLow().getValue().toString();
			}
		}
		var memberName = oFF.QInAMemberRestrictedMeasure.getFirstMemberForSignFlip(accountName, filterElement);
		if (oFF.notNull(memberName))
		{
			return memberName;
		}
	}
	return null;
};
oFF.QInAMemberRestrictedMeasure.getMemberForSignFlip = function(context, restrictedMeasure)
{
	if (restrictedMeasure.getAccountType() !== null)
	{
		return restrictedMeasure.getName();
	}
	var dim = restrictedMeasure.getDimensionContext(context.getQueryManager());
	var filter = restrictedMeasure.getFilter();
	var memberName = dim.getName();
	if (oFF.notNull(memberName))
	{
		if (filter.isAll())
		{
			memberName = oFF.QInAMemberRestrictedMeasure.getFirstMemberForSignFlip(memberName, filter.getFilterRootElement());
		}
		var member = dim.getStructureMemberByAliasOrMember(memberName);
		if (oFF.notNull(member) && member.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE && member !== restrictedMeasure)
		{
			return oFF.QInAMemberRestrictedMeasure.getMemberForSignFlip(context, member);
		}
	}
	return memberName;
};
oFF.QInAMemberRestrictedMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.RESTRICTED_MEASURE;
};
oFF.QInAMemberRestrictedMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var member;
	if (oFF.isNull(modelComponent))
	{
		var dimension = parentComponent;
		var newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
		var newMemberText = oFF.QInAMember.getText(inaStructure, dimension);
		if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && dimension.getStructureMember(newMemberName) !== null)
		{
			member = dimension.getStructureMember(newMemberName);
		}
		else
		{
			member = dimension.addNewRestrictedMeasure(newMemberName, newMemberText);
		}
	}
	else
	{
		member = modelComponent;
	}
	var inaAggregationDimension = inaStructure.getStringByKey("AggregationDimension");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregationDimension))
	{
		member.setAggregationDimensionName(inaAggregationDimension);
	}
	var restrictedMeasureStructure = inaStructure;
	if (member.getModelCapabilities().supportsCustomMeasuresInMetadata() && importer.getMode() === oFF.QModelFormat.INA_DATA)
	{
		restrictedMeasureStructure = inaStructure.getStructureByKey("[Measures].[MemberDetails]");
	}
	importer.importFilterExpression(member.getFilter(), restrictedMeasureStructure, member, context);
	importer.importExceptions(restrictedMeasureStructure, member);
	return member;
};
oFF.QInAMemberRestrictedMeasure.prototype.exportPresentationSignReversal = function(exporter, restrictedMeasure, inaStructure)
{
	if (!restrictedMeasure.isAutoSignFlip() || !exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		return;
	}
	var dim = restrictedMeasure.getDimension();
	var queryModel = dim.getQueryModel();
	var filter = restrictedMeasure.getFilter();
	if (dim.getDimensionType() !== oFF.DimensionType.ACCOUNT || oFF.isNull(filter))
	{
		return;
	}
	var memberName = oFF.QInAMemberRestrictedMeasure.getMemberForSignFlip(restrictedMeasure.getQueryModel(), restrictedMeasure);
	if (oFF.notNull(memberName))
	{
		var accountDim = queryModel.getAccountDimension();
		if (oFF.notNull(accountDim))
		{
			var accountMember = accountDim.getStructureMemberByAliasOrMember(memberName);
			if (oFF.notNull(accountMember))
			{
				var accountType = accountMember.getAccountType();
				if (accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ)
				{
					inaStructure.putBoolean("PresentationSignReversal", true);
				}
			}
		}
	}
};
oFF.QInAMemberRestrictedMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var restrictedMeasure = modelComponent;
	inaStructure.putString("Name", restrictedMeasure.getName());
	oFF.QInAMember.exportText(exporter, inaStructure, restrictedMeasure);
	oFF.QInAMember.exportAggregationType(restrictedMeasure, inaStructure);
	if (!restrictedMeasure.supportsExceptionAggregationDimsFormulas())
	{
		var aggregationDimensionName = restrictedMeasure.getAggregationDimensionName();
		if (oFF.notNull(aggregationDimensionName))
		{
			inaStructure.putString("AggregationDimension", aggregationDimensionName);
		}
	}
	var inaSelection = null;
	var filterRoot = restrictedMeasure.getFilterRootWithTransientTimeSelection();
	if (oFF.isNull(filterRoot))
	{
		if (restrictedMeasure.getAggregationDimensionName() !== null)
		{
			inaSelection = oFF.PrFactory.createStructure();
			var sb = oFF.XStringBuffer.create();
			sb.append(restrictedMeasure.getName()).append(":").append(restrictedMeasure.getAggregationDimensionName());
			inaSelection.putString("MeasureOperand", sb.toString());
		}
	}
	else
	{
		inaSelection = exporter.exportFilterElement(filterRoot);
	}
	if (oFF.notNull(inaSelection))
	{
		inaStructure.put("Selection", inaSelection);
	}
	this.exportPresentationSignReversal(exporter, restrictedMeasure, inaStructure);
	return inaStructure;
};

oFF.QInAMembersAll = function() {};
oFF.QInAMembersAll.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMembersAll.prototype._ff_c = "QInAMembersAll";

oFF.QInAMembersAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEMBERS;
};
oFF.QInAMembersAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = modelComponent;
	if (dimension.supportsCustomMembers())
	{
		dimension.removeCustomMembers();
	}
	var inaMemberList = inaStructure.getListByKey("MembersRepo");
	if (oFF.isNull(inaMemberList))
	{
		inaMemberList = inaStructure.getListByKey("Members");
		if (oFF.isNull(inaMemberList))
		{
			return null;
		}
	}
	var structureLayout = dimension.getStructureLayout();
	if (oFF.notNull(structureLayout))
	{
		structureLayout.clear();
		var inaMemberListSize = inaMemberList.size();
		for (var iMember = 0; iMember < inaMemberListSize; iMember++)
		{
			var inaMember = inaMemberList.getStructureAt(iMember);
			var member = importer.importStructureMember(dimension, inaMember, context);
			if (oFF.notNull(member))
			{
				var member2 = dimension.getStructureMember(member.getName());
				if (oFF.isNull(member2))
				{
					dimension.addMeasure(member);
				}
				else
				{
					if (member2 !== member)
					{
						throw oFF.XException.createIllegalStateException("Internal error: New member with same name not allowed");
					}
					structureLayout.removeElement(member2);
					structureLayout.add(member2);
				}
			}
		}
	}
	return dimension;
};
oFF.QInAMembersAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var allStructureMembers = dimension.getStructureLayout();
	if (oFF.notNull(allStructureMembers))
	{
		var isDimensionMeasure = dimension.isMeasureStructure();
		if (!isDimensionMeasure && allStructureMembers.isEmpty())
		{
			return null;
		}
		var membersList;
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			membersList = inaStructure.putNewList("Members");
		}
		else
		{
			membersList = inaStructure.putNewList("MembersRepo");
		}
		var exportedRuntimeStructureMemberNames = oFF.XHashSetOfString.create();
		var size = allStructureMembers.size();
		for (var idxMember = 0; idxMember < size; idxMember++)
		{
			var structureMember = allStructureMembers.get(idxMember);
			if (oFF.notNull(structureMember))
			{
				var inaMember = null;
				var type = structureMember.getMemberType();
				if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
				{
					var tagging = structureMember.getTagging();
					if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT && structureMember.isModelDefinedMember() && !tagging.containsKey(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER))
					{
						continue;
					}
					var runtimeStructureMember = structureMember.exportRuntimeObject(dimension, exporter);
					if (oFF.isNull(runtimeStructureMember))
					{
						continue;
					}
					if (!exportedRuntimeStructureMemberNames.contains(runtimeStructureMember.getName()))
					{
						inaMember = exporter.exportStructureMember(runtimeStructureMember);
						exportedRuntimeStructureMemberNames.add(runtimeStructureMember.getName());
					}
				}
				else
				{
					if (type === oFF.MemberType.RESTRICTED_MEASURE || type === oFF.MemberType.FORMULA || type === oFF.MemberType.VARIANCE || type === oFF.MemberType.EXCEPTION_AGGREGATION)
					{
						inaMember = exporter.exportStructureMember(structureMember);
						inaMember.putString("MemberType", oFF.QInAConverter.lookupMeasureStructureMemberTypeIna(type));
					}
					else
					{
						inaMember = exporter.exportStructureMember(structureMember);
					}
				}
				if (oFF.notNull(inaMember) && inaMember.hasElements())
				{
					membersList.add(inaMember);
				}
			}
		}
	}
	return inaStructure;
};

oFF.QInAQuery = function() {};
oFF.QInAQuery.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAQuery.prototype._ff_c = "QInAQuery";

oFF.QInAQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInAQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = modelComponent;
	var inaDefinition = inaStructure;
	var inaQueries = inaDefinition.getListByKey("Queries");
	if (oFF.notNull(inaQueries))
	{
		inaDefinition = inaQueries.getStructureAt(inaQueries.size() - 1);
	}
	var inaBatch = inaDefinition.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (oFF.notNull(inaBatch))
	{
		inaDefinition = inaBatch.getStructureAt(inaBatch.size() - 1);
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Analytics"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Analytics");
		if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("Definition");
		}
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Definition");
	}
	if (oFF.notNull(inaDefinition))
	{
		var isForRendering = importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE_RENDERING && importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
		var isInaRepMode = importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
		if (isInaRepMode && inaDefinition.containsKey("ModellerDefinition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("ModellerDefinition");
			importer.importModellerDimensions(inaDefinition, queryModel, queryModel);
			importer.importModellerCurrencyTranslation(inaDefinition, queryModel.getCurrencyTranslationManagerBase(), queryModel);
			importer.importModellerMetadataProperties(inaDefinition, queryModel, queryModel);
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			return queryModel;
		}
		importer.importDimensions(inaDefinition, queryModel, queryModel);
		if (!isForRendering)
		{
			importer.importFilter(inaDefinition, queryModel.getFilterBase(), queryModel);
			importer.importExceptions(inaDefinition, queryModel);
			importer.importQueryCells(inaDefinition, queryModel.getQueryCellManager(), queryModel);
			importer.importUniversalDisplayHierarchies(inaDefinition, queryModel.getUniversalDisplayHierarchiesBase(), queryModel);
		}
		importer.importCurrencyTranslationManager(inaDefinition, queryModel.getCurrencyTranslationManager(), queryModel);
		importer.importSortingManager(inaDefinition, queryModel.getSortingManagerBase(), queryModel);
		importer.importDrillManager(inaDefinition, queryModel.getDrillManager(), queryModel);
		if (importer.mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && importer.mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
		{
			importer.importVariableManager(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
		}
		importer.importQuerySettings(inaDefinition, queryModel);
		importer.importDataCells(inaDefinition, queryModel);
		importer.importConditionManager(inaDefinition, queryModel.getConditionManagerBase(), queryModel);
		if (isInaRepMode)
		{
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			this.importPaging(importer, inaDefinition, queryModel);
			oFF.QInAOptions.importSuppressKeyfigureCalculation(inaDefinition, queryModel.getQueryManager());
			var resultStructureController = queryModel.getResultStructureController();
			importer.importComponent(null, inaDefinition, resultStructureController, queryModel, queryModel);
			var queryManager = queryModel.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				queryManager.setResultSetPersistanceTargetTable(inaStructure.getStringByKey("ResultSetPersistanceTable"));
				queryManager.setResultSetPersistanceTargetSchema(inaStructure.getStringByKey("ResultSetPersistanceSchema"));
				queryManager.setResultSetPersistenceIdentifier(inaStructure.getStringByKey("ResultSetPersistanceIdentifier"));
			}
			var inaPreQueries = inaDefinition.getListByKey("PreQueries");
			if (oFF.notNull(inaPreQueries))
			{
				var mainQuerySystemname = null;
				var inaDataSource = inaDefinition.getStructureByKey("DataSource");
				if (oFF.notNull(inaDataSource))
				{
					mainQuerySystemname = inaDataSource.getStringByKey("System");
				}
				this.importPreQueries(importer, queryModel, inaPreQueries, mainQuerySystemname);
			}
			if (importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA) && queryModel.isBlendingModel())
			{
				this.importBlendingSources(importer, inaStructure, queryModel);
			}
		}
	}
	return queryModel;
};
oFF.QInAQuery.prototype.importBlendingSources = function(importer, inaStructure, queryModel)
{
	var sources = queryModel.getBlendingSources();
	if (!oFF.XCollectionUtils.hasElements(sources))
	{
		return;
	}
	var inaDataSource = oFF.PrUtils.getStructureProperty(inaStructure, "DataSource");
	var inaSources = oFF.PrUtils.getListProperty(inaDataSource, "Sources");
	if (oFF.PrUtils.isListEmpty(inaSources))
	{
		return;
	}
	for (var i = 0; i < sources.size(); i++)
	{
		var inaSource = oFF.PrUtils.getStructureElement(inaSources, i);
		var inaDefinitionContext = oFF.PrUtils.getStructureProperty(inaSource, "DefiningContext");
		if (oFF.notNull(inaDefinitionContext))
		{
			var sourceQueryModel = sources.get(i).getQueryModel();
			sourceQueryModel.deserializeFromElementExt(importer.mode, inaDefinitionContext);
		}
	}
};
oFF.QInAQuery.prototype.importPaging = function(importer, inaDefinition, queryModel)
{
	var inaSubset = inaDefinition.getStructureByKey("SubSetDescription");
	var queryManager = queryModel.getQueryManager();
	var isForRendering = importer.mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	if (oFF.isNull(inaSubset) || !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.applyingStateOnQueryManager() && !isForRendering)
	{
		return;
	}
	oFF.QInAOptions.importPaging(inaDefinition, queryManager);
};
oFF.QInAQuery.prototype.getInactiveCapabilities = function(queryModel)
{
	var capabilities = oFF.XHashMapByString.create();
	var allCapabilities = oFF.FeatureToggleOlap.getAllFeatureToggles();
	var allIterator = allCapabilities.getKeysAsIteratorOfString();
	while (allIterator.hasNext())
	{
		capabilities.put(allIterator.next(), oFF.XBooleanValue.create(false));
	}
	var experimentalFeatureSet = queryModel.getSession().getFeatureToggles();
	if (oFF.notNull(experimentalFeatureSet))
	{
		var activatedIterator = experimentalFeatureSet.getKeysAsIteratorOfString();
		while (activatedIterator.hasNext())
		{
			capabilities.put(activatedIterator.next(), oFF.XBooleanValue.create(true));
		}
	}
	return capabilities;
};
oFF.QInAQuery.prototype.importPreQueries = function(importer, queryModel, inaPreQueries, mainQuerySystemname)
{
	var modeHolder = importer.getMode();
	if (importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
	{
		importer.mode = importer.getOriginalMode();
	}
	var dsBuffer = oFF.XStringBuffer.create();
	var capabilitiesToActivate = this.getInactiveCapabilities(queryModel);
	var preQueriesSize = inaPreQueries.size();
	for (var i = 0; i < preQueriesSize; i++)
	{
		var inaPreQuery = inaPreQueries.getStructureAt(i);
		var inaRuntime = inaPreQuery.getStructureByKey("Runtime");
		if (oFF.isNull(inaRuntime))
		{
			inaRuntime = inaPreQuery;
		}
		var inaDataSource = inaRuntime.getStructureByKey("DataSource");
		dsBuffer.clear();
		dsBuffer.append(inaDataSource.getStringByKey("Type")).append(":[");
		dsBuffer.append(inaDataSource.getStringByKey("SchemaName"));
		dsBuffer.append("][");
		dsBuffer.append(inaDataSource.getStringByKey("PackageName"));
		dsBuffer.append("][");
		dsBuffer.append(inaDataSource.getStringByKey("ObjectName")).append("]");
		var commandFactory = oFF.XCommandFactory.create(queryModel.getApplication());
		var xCmdDeserialize = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, queryModel.getApplication());
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, capabilitiesToActivate);
		var preQuerySystemName = inaDataSource.getStringByKey("System");
		if (importer.mode === oFF.QModelFormat.INA_REPOSITORY && oFF.XString.isEqual(preQuerySystemName, mainQuerySystemname))
		{
			preQuerySystemName = queryModel.getDataSource().getSystemName();
		}
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, preQuerySystemName);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, dsBuffer.toString());
		var processCommand = xCmdDeserialize.processCommand(oFF.SyncType.BLOCKING, null, null);
		importer.addAllMessages(processCommand);
		oFF.XObjectExt.release(xCmdDeserialize);
		if (processCommand.isValid())
		{
			var preQuery = processCommand.getData().getResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER).getQueryModel();
			importer.importPreQuery(inaPreQuery, preQuery);
			var inaPreQueryName = inaPreQuery.getStringByKey("ObjectName");
			var preQueryExisting = queryModel.getPreQueryByName(inaPreQueryName);
			if (oFF.isNull(preQueryExisting))
			{
				queryModel.addPreQueryWithName(preQuery, inaPreQueryName);
			}
		}
	}
	importer.mode = modeHolder;
};
oFF.QInAQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var queryModel = modelComponent;
	var isForRendering = exporter.mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	exporter.exportUniversalDisplayHierarchies(queryModel.getUniversalDisplayHierarchies(), inaStructure);
	var drillManager = queryModel.getDrillManager();
	exporter.exportDrillManager(drillManager, inaStructure);
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && !drillManager.isValidatingContextFreeNavigations())
	{
		inaStructure.putBoolean("ValidateContextFreeNavigations", false);
	}
	var withDataSource = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.DATASOURCE) > 0;
	if (withDataSource)
	{
		oFF.QInADataSource.exportDataSource(exporter, queryModel.getDataSource(), queryModel.getModelCapabilities().supportsRunAsUser(), inaStructure);
	}
	exporter.exportDimensions(queryModel, inaStructure);
	exporter.exportSortingManager(queryModel.getSortingManager(), inaStructure);
	exporter.exportCurrencyTranslationManager(queryModel.getCurrencyTranslationManager(), inaStructure);
	if (!queryModel.hasProcessingStep() || exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		exporter.exportDataCells(queryModel, inaStructure);
	}
	exporter.exportQuerySettings(queryModel, inaStructure);
	if (!isForRendering)
	{
		exporter.exportFilter(queryModel.getFilter(), inaStructure);
		exporter.exportExceptions(queryModel, inaStructure);
		exporter.exportQueryCells(queryModel.getQueryCellManager(), inaStructure);
	}
	exporter.exportConditionManager(queryModel.getConditionManager(), inaStructure);
	var withVariables = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.VARIABLES) > 0;
	if (withVariables && exporter.mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && exporter.mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
	{
		if (queryModel.isExportingVariables() || queryModel.hasProcessingStep())
		{
			exporter.exportVariables(queryModel.getVariableContainer(), inaStructure);
		}
	}
	var queryManager = queryModel.getQueryManager();
	if (queryModel.isBatchModeForMicroCube())
	{
		inaStructure.putString("Name", queryManager.getNameForMicroCubeUse());
	}
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		exporter.exportFormulaExceptionManager(queryModel.getFormulaExceptionManager(), inaStructure);
		this.exportPaging(inaStructure, queryModel);
		oFF.QInAOptions.exportSuppressKeyfigureCalculation(inaStructure, queryManager);
		var preQueries = queryModel.getPreQueries();
		if (oFF.notNull(preQueries))
		{
			var preQueriesSize = preQueries.size();
			if (preQueriesSize > 0)
			{
				var inaPreQueries = inaStructure.getListByKey("PreQueries");
				if (oFF.isNull(inaPreQueries))
				{
					inaPreQueries = inaStructure.putNewList("PreQueries");
				}
				var modeHolder = exporter.getMode();
				if (exporter.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
				{
					exporter.mode = exporter.getOriginalMode();
				}
				for (var i = 0; i < preQueriesSize; i++)
				{
					var preQuery = preQueries.get(i);
					var inaPreQuery = exporter.exportPreQuery(preQuery.getObject());
					var preQueryName = preQuery.getName();
					inaPreQuery.putString("ObjectName", preQueryName);
					inaPreQueries.add(inaPreQuery);
				}
				exporter.mode = modeHolder;
				inaStructure.put("PreQueries", inaPreQueries);
			}
		}
		var resultStructureController = queryModel.getResultStructureController();
		exporter.exportComponent(null, resultStructureController, inaStructure, flags);
		var featureToggles = oFF.InactiveCapabilityUtil.exportFeatureToggles(queryManager.getSession().getFeatureToggles());
		inaStructure.putString("ExperimentalFeatures", featureToggles);
		inaStructure.putString("ResultSetPersistanceTable", queryManager.getResultSetPersistenceTable());
		inaStructure.putString("ResultSetPersistanceSchema", queryManager.getResultSetPersistenceSchema());
		inaStructure.putString("ResultSetPersistanceIdentifier", queryManager.getResultSetPersistenceIdentifier());
	}
	return inaStructure;
};
oFF.QInAQuery.prototype.exportPaging = function(inaStructure, queryModel)
{
	var queryManager = queryModel.getQueryManager();
	if (!queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.recordingStateOfQueryManager())
	{
		return;
	}
	if (queryManager.getOffsetColumns() > 0 || queryManager.getOffsetRows() > 0 || queryManager.getMaxColumns() > -1 || queryManager.getMaxRows() > -1)
	{
		oFF.QInAOptions.exportPaging(inaStructure, queryManager);
	}
};

oFF.QInAQueryCellsAll = function() {};
oFF.QInAQueryCellsAll.prototype = new oFF.QInAComponentWithList();
oFF.QInAQueryCellsAll.prototype._ff_c = "QInAQueryCellsAll";

oFF.QInAQueryCellsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_CELLS;
};
oFF.QInAQueryCellsAll.prototype.getTagName = function()
{
	return "Cells";
};
oFF.QInAQueryCellsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QInAQueryCellsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	if (!exporter.capabilities.supportsUniversalModel())
	{
		return null;
	}
	var queryCellManager = modelComponent;
	if (queryCellManager.isEmpty())
	{
		return null;
	}
	var inaQueryCells = oFF.PrFactory.createList();
	var queryCellIt = queryCellManager.getIterator();
	while (queryCellIt.hasNext())
	{
		var queryCell = queryCellIt.next();
		var inaQueryCell = inaQueryCells.addNewStructure();
		inaQueryCell.putString("Name", queryCell.getName());
		var inaPositions = inaQueryCell.putNewList("Position");
		var positions = queryCell.getPositions();
		var positionIt = positions.getIterator();
		while (positionIt.hasNext())
		{
			var queryCellPosition = positionIt.next();
			var inaPosition = inaPositions.addNewStructure();
			inaPosition.putString("DimensionName", queryCellPosition.getDimensionName());
			inaPosition.putString("MemberName", queryCellPosition.getMemberName());
		}
	}
	return inaQueryCells;
};

oFF.QInAQuerySettings = function() {};
oFF.QInAQuerySettings.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAQuerySettings.prototype._ff_c = "QInAQuerySettings";

oFF.QInAQuerySettings.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_SETTINGS;
};
oFF.QInAQuerySettings.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var definitionNameString = oFF.PrUtils.getStringProperty(inaStructure, "Name");
	var queryModel = context.getQueryModel();
	if (oFF.notNull(definitionNameString))
	{
		queryModel.setDefinitionName(definitionNameString.getString());
	}
	var inaQuery = inaStructure.getStructureByKey("Query");
	importer.importAxesSettings(inaQuery, queryModel);
	if (importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		var axesLayoutList = oFF.PrUtils.getListProperty(inaQuery, "AxesLayout");
		var len = oFF.PrUtils.getListSize(axesLayoutList, 0);
		for (var axesLayoutIndex = 0; axesLayoutIndex < len; axesLayoutIndex++)
		{
			var axisLayoutStructure = oFF.PrUtils.getStructureElement(axesLayoutList, axesLayoutIndex);
			var axisType = oFF.AxisType.lookup(oFF.PrUtils.getStringValueProperty(axisLayoutStructure, "Axis", null));
			var axis = queryModel.getAxis(axisType);
			if (oFF.isNull(axis))
			{
				continue;
			}
			var orderedDimensionNamesList = oFF.PrUtils.getListProperty(axisLayoutStructure, "OrderedDimensionNames");
			if (oFF.isNull(orderedDimensionNamesList))
			{
				continue;
			}
			var orderedDimensionNames = oFF.XListOfString.create();
			for (var dimensionNameIndex = 0; dimensionNameIndex < oFF.PrUtils.getListSize(orderedDimensionNamesList, 0); dimensionNameIndex++)
			{
				var dimensionNameString = oFF.PrUtils.getStringElement(orderedDimensionNamesList, dimensionNameIndex);
				if (oFF.isNull(dimensionNameString))
				{
					continue;
				}
				orderedDimensionNames.add(dimensionNameString.getString());
			}
			axis.reOrderDimensions(orderedDimensionNames);
		}
	}
	return queryModel;
};
oFF.QInAQuerySettings.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var queryModel = modelComponent;
	var definitionName = queryModel.getDefinitionName();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(definitionName))
	{
		inaStructure.putString("Name", definitionName);
	}
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) && !exporter.isAbap(queryModel) && !this.requiresMDSZeroSuppression(exporter, queryModel))
	{
		return inaStructure;
	}
	var inaQuery = inaStructure.getStructureByKey("Query");
	if (oFF.isNull(inaQuery))
	{
		inaQuery = inaStructure.putNewStructure("Query");
	}
	exporter.exportAxesSettings(queryModel, inaQuery);
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		var axesLayoutList = inaQuery.putNewList("AxesLayout");
		var allAxisTypes = oFF.AxisType.getAll();
		for (var axisTypeIndex = 0; axisTypeIndex < allAxisTypes.size(); axisTypeIndex++)
		{
			var axisType = allAxisTypes.get(axisTypeIndex);
			var axis = queryModel.getAxis(axisType);
			if (oFF.isNull(axis))
			{
				continue;
			}
			var dimensionNames = axis.getOrderedDimensionNames();
			if (oFF.isNull(dimensionNames))
			{
				continue;
			}
			var axisLayoutStructure = axesLayoutList.addNewStructure();
			axisLayoutStructure.putString("Axis", axis.getName());
			var orderedDimensionNamesList = axisLayoutStructure.putNewList("OrderedDimensionNames");
			orderedDimensionNamesList.addAllStrings(dimensionNames);
		}
	}
	return inaStructure;
};
oFF.QInAQuerySettings.prototype.requiresMDSZeroSuppression = function(exporter, queryModel)
{
	if (!exporter.capabilities.supportsNullZeroSuppression())
	{
		return false;
	}
	var axesManager = queryModel.getAxesManager();
	if (oFF.isNull(axesManager))
	{
		return false;
	}
	var rowAxis = axesManager.getRowsAxis();
	var colAxis = axesManager.getColumnsAxis();
	return oFF.QInAAxesSettings.isDefinedZeroSuppression(rowAxis) || oFF.QInAAxesSettings.isDefinedZeroSuppression(colAxis);
};

oFF.QInASort = function() {};
oFF.QInASort.prototype = new oFF.QInAComponentWithList();
oFF.QInASort.prototype._ff_c = "QInASort";

oFF.QInASort.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QInASort.prototype.getTagName = function()
{
	return "Sort";
};
oFF.QInASort.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var sortingManager = modelComponent;
	if (importer.mode !== oFF.QModelFormat.INA_DATA_REINIT && importer.capabilities.supportsExtendedSort())
	{
		sortingManager.getSortingOperations().clear();
		if (oFF.notNull(inaList))
		{
			var queryModel = sortingManager.getQueryModel();
			for (var sortIdx = 0; sortIdx < inaList.size(); sortIdx++)
			{
				var inaSort = inaList.getStructureAt(sortIdx);
				var inaSortType = inaSort.getStringByKey("SortType");
				var sortType = oFF.QInAConverter.lookupSortType(inaSortType);
				var sortingOp;
				if (sortType === oFF.SortType.FIELD)
				{
					sortingOp = this.importFieldSorting(sortingManager, queryModel, inaSort);
				}
				else if (sortType === oFF.SortType.MEASURE)
				{
					sortingOp = this.importMeasureSorting(sortingManager, queryModel, inaSort);
				}
				else if (sortType === oFF.SortType.DATA_CELL_VALUE || sortType === oFF.SortType.COMPLEX)
				{
					sortingOp = this.importPathSorting(context, sortingManager, queryModel, inaSort, sortType);
				}
				else
				{
					sortingOp = this.importDimensionSorting(sortingManager, queryModel, inaSort, sortType);
				}
				if (oFF.notNull(sortingOp))
				{
					this.importGenericSorting(queryModel, inaSort, sortingOp);
				}
			}
		}
	}
	return sortingManager;
};
oFF.QInASort.prototype.importGenericSorting = function(queryModel, inaSort, sortingOp)
{
	var inaDirection = inaSort.getStringByKey("Direction");
	if (oFF.notNull(inaDirection))
	{
		var sortDirection = oFF.QInAConverter.lookupSortDirection2(inaDirection);
		if (oFF.notNull(sortDirection))
		{
			sortingOp.setDirection(sortDirection);
		}
	}
	if (sortingOp.supportsPreserveGrouping() && sortingOp.supportsBreakGrouping())
	{
		sortingOp.setPreserveGrouping(inaSort.getBooleanByKeyExt("PreserveGrouping", false));
	}
	if (queryModel.getModelCapabilities().supportsLocaleSorting())
	{
		var inaCollator = inaSort.getStructureByKey("Collator");
		if (oFF.notNull(inaCollator))
		{
			sortingOp.setIsCaseSensitive(inaCollator.getBooleanByKeyExt("CaseSensitive", false));
			sortingOp.setLocale(inaCollator.getStringByKeyExt("Locale", null));
		}
	}
};
oFF.QInASort.prototype.importPathSorting = function(context, sortingManager, queryModel, inaSort, sortType)
{
	var inaPath = inaSort.getListByKey("SortTuple");
	if (inaPath.isEmpty())
	{
		return null;
	}
	var path = oFF.XList.create();
	for (var idxStruct = 0; idxStruct < inaPath.size(); idxStruct++)
	{
		var pathElement = inaPath.getStructureAt(idxStruct);
		var inaFieldName = pathElement.getStringByKey("FieldName");
		var inaValue = pathElement.getStringByKey("Value");
		if (oFF.notNull(inaFieldName) && oFF.notNull(inaValue))
		{
			var field = queryModel.getFieldByName(inaFieldName);
			if (oFF.isNull(field))
			{
				return null;
			}
			var inaHierarchyName = pathElement.getStringByKey("Hierarchy");
			path.add(oFF.QSelectValue._createDimensionElement2(context, field, inaHierarchyName, inaValue));
		}
		else
		{
			return null;
		}
	}
	if (sortType === oFF.SortType.DATA_CELL_VALUE)
	{
		return sortingManager.getDataCellSorting(path, true);
	}
	return sortingManager.getComplexSorting(path, true);
};
oFF.QInASort.prototype.importDimensionSorting = function(sortingManager, queryModel, inaSort, sortType)
{
	var dimension = queryModel.getDimensionByNameFromExistingMetadata(inaSort.getStringByKey("Dimension"));
	if (oFF.isNull(dimension) || dimension.isUniversalDisplayHierarchyDimension() || !dimension.supportsSorting(null))
	{
		return null;
	}
	var dimensionSorting = sortingManager.getDimensionSorting(dimension, true);
	if (sortType === oFF.SortType.FILTER)
	{
		dimensionSorting.setSortByFilter();
	}
	else if (sortType === oFF.SortType.MEMBER_KEY)
	{
		dimensionSorting.setSortByKey();
		this.importCustomSortDetails(dimensionSorting, inaSort);
	}
	else if (sortType === oFF.SortType.MEMBER_TEXT)
	{
		dimensionSorting.setSortByText();
	}
	else if (sortType === oFF.SortType.HIERARCHY)
	{
		dimensionSorting.setSortByHierarchy();
	}
	return dimensionSorting;
};
oFF.QInASort.prototype.importCustomSortDetails = function(dimensionSorting, inaSort)
{
	var customSortList = inaSort.getListByKey("CustomSort");
	if (!oFF.PrUtils.isListEmpty(customSortList))
	{
		var customSort = oFF.PrUtils.asListOfString(customSortList);
		dimensionSorting.setCustomSort(customSort);
		var customSortPosition = oFF.CustomSortPosition.lookup(inaSort.getStringByKey("CustomSortPosition"));
		dimensionSorting.setCustomSortPosition(customSortPosition);
	}
};
oFF.QInASort.prototype.importMeasureSorting = function(sortingManager, queryModel, inaSort)
{
	var measureName = inaSort.getStringByKey("MeasureName");
	var measureSorting = null;
	if (oFF.notNull(measureName))
	{
		var measureDimension = queryModel.getMeasureDimension();
		var measure = measureDimension.getStructureMember(measureName);
		if (oFF.notNull(measure))
		{
			measureSorting = sortingManager.getMeasureSorting(measure, true);
		}
		var structureName = inaSort.getStringByKey("StructureName");
		var structure = queryModel.getNonMeasureDimension();
		if (oFF.notNull(structureName) && oFF.notNull(structure) && oFF.notNull(measureSorting))
		{
			measureSorting.setStructure(structure.getStructureMember(structureName));
		}
	}
	return measureSorting;
};
oFF.QInASort.prototype.importFieldSorting = function(sortingManager, queryModel, inaSort)
{
	var fieldName = inaSort.getStringByKey("FieldName");
	var fieldSorting = null;
	if (oFF.notNull(fieldName))
	{
		var field = queryModel.getFieldByName(fieldName);
		if (oFF.notNull(field))
		{
			fieldSorting = sortingManager.getFieldSorting(field, true);
		}
	}
	return fieldSorting;
};
oFF.QInASort.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	if (!exporter.capabilities.supportsExtendedSort())
	{
		return null;
	}
	var inaSortOps = oFF.PrFactory.createList();
	var sortingManager = modelComponent;
	var sortingOperations = sortingManager.getSortingOperations().createListCopy();
	this.addRequiredSortOperationsForUdhDimensions(exporter, sortingManager, sortingOperations);
	var size = sortingOperations.size();
	for (var i = 0; i < size; i++)
	{
		var sortOp = sortingOperations.get(i);
		var dimension = null;
		var convertedLbhDimension = null;
		if (sortOp.supportsDimension())
		{
			dimension = sortOp.getDimension();
		}
		if (oFF.notNull(dimension))
		{
			var axisType = dimension.getAxisType();
			if (oFF.notNull(axisType) && axisType !== oFF.AxisType.ROWS && axisType !== oFF.AxisType.COLUMNS && axisType !== oFF.AxisType.FREE)
			{
				continue;
			}
			if (axisType === oFF.AxisType.FREE)
			{
				convertedLbhDimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchyWhichContainsGivenDim(exporter, dimension);
				if (oFF.isNull(convertedLbhDimension) || sortingManager.getDimensionSorting(convertedLbhDimension, false) === null)
				{
					continue;
				}
			}
			if (dimension.isUniversalDisplayHierarchyDimension())
			{
				continue;
			}
		}
		var inaSortOp = oFF.PrFactory.createStructure();
		var sortingType = sortOp.getSortingType();
		inaSortOp.putString("SortType", oFF.QInAConverter.lookupSortTypeInA(sortingType));
		var direction = this.getSortDirection(sortOp, sortingManager, convertedLbhDimension);
		if (direction !== oFF.XSortDirection.DEFAULT_VALUE)
		{
			inaSortOp.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(direction));
		}
		else if (sortingType === oFF.SortType.MEASURE)
		{
			continue;
		}
		this.exportGenericSorting(sortOp, inaSortOp);
		if (sortingType === oFF.SortType.FIELD)
		{
			this.exportFieldSorting(sortOp, inaSortOp, exporter);
		}
		else if (sortingType === oFF.SortType.MEASURE)
		{
			this.exportMeasureSorting(sortOp, inaSortOp);
		}
		else if (sortingType === oFF.SortType.DATA_CELL_VALUE || sortingType === oFF.SortType.COMPLEX)
		{
			this.exportPathSorting(sortOp, inaSortOp, exporter);
		}
		else if (sortingType === oFF.SortType.HIERARCHY)
		{
			if (!sortOp.getDimension().isHierarchyAssignedAndActive())
			{
				inaSortOp = null;
			}
		}
		else if (sortingType === oFF.SortType.MEMBER_KEY)
		{
			var measureDimensionSorting = sortOp;
			var customSortList = this.dropIncorrectBasicMeasuresIfAny(measureDimensionSorting);
			this.exportCustomSortDetails(customSortList, measureDimensionSorting.getCustomSortPosition(), inaSortOp, measureDimensionSorting.getQueryModel(), exporter);
		}
		if (oFF.notNull(inaSortOp))
		{
			oFF.QInAExportUtil.setNameIfNotNull(inaSortOp, "Dimension", dimension);
			inaSortOps.add(inaSortOp);
		}
	}
	var mode = exporter.mode;
	if (mode.isTypeOf(oFF.QModelFormat.INA_DATA) || mode === oFF.QModelFormat.INA_VALUE_HELP)
	{
		inaSortOps = oFF.QInAExportUtil.extendList(sortingManager, inaSortOps);
	}
	if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.NO_EMPTY_SORT) && inaSortOps.isEmpty())
	{
		return null;
	}
	return inaSortOps;
};
oFF.QInASort.prototype.addRequiredSortOperationsForUdhDimensions = function(exporter, sortingManager, sortingOperations)
{
	var sortedDimensions = oFF.XListOfString.create();
	var requiredDimensionsForUdh = oFF.XListOfString.create();
	for (var i = 0; i < sortingOperations.size(); i++)
	{
		var sortOperation = sortingOperations.get(i);
		var dimension = sortOperation.supportsDimension() ? sortOperation.getDimension() : null;
		if (oFF.notNull(dimension))
		{
			sortedDimensions.add(dimension.getName());
			if (oFF.QInAUniversalDisplayHierarchies.isHierarchyConverted(exporter, dimension))
			{
				requiredDimensionsForUdh.addAll(oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, dimension.getAxis()));
			}
		}
	}
	for (var k = 0; k < requiredDimensionsForUdh.size(); k++)
	{
		var requiredDimName = requiredDimensionsForUdh.get(k);
		if (!sortedDimensions.contains(requiredDimName))
		{
			sortingOperations.add(sortingManager.newDimensionSorting(sortingManager.getQueryModel().getDimensionByName(requiredDimName)));
		}
	}
};
oFF.QInASort.prototype.dropIncorrectBasicMeasuresIfAny = function(dimensionSorting)
{
	var dimension = dimensionSorting.getDimension();
	var originalSortList = dimensionSorting.getCustomSort();
	var customSortList = null;
	if (oFF.notNull(originalSortList))
	{
		customSortList = originalSortList.createListOfStringCopy();
		if (dimension.isMeasureStructure())
		{
			for (var i = 0; i < customSortList.size(); )
			{
				var elementInList = customSortList.get(i);
				var structureMember = dimension.getAllStructureMembers().getByKey(elementInList);
				if (oFF.isNull(structureMember))
				{
					customSortList.removeAt(i);
					continue;
				}
				if (structureMember.getMemberType() === oFF.MemberType.BASIC_MEASURE)
				{
					var basicMeasure = structureMember;
					if (basicMeasure.isNotFromMetadata())
					{
						customSortList.removeAt(i);
						continue;
					}
				}
				i++;
			}
		}
	}
	return customSortList;
};
oFF.QInASort.prototype.getSortDirection = function(sortOp, sortingManager, convertedLbhDimension)
{
	if (oFF.notNull(convertedLbhDimension) && convertedLbhDimension !== sortOp.getDimension())
	{
		var sorting = sortingManager.getDimensionSorting(convertedLbhDimension, false);
		if (oFF.notNull(sorting))
		{
			return sorting.getDirection();
		}
	}
	return sortOp.getDirection();
};
oFF.QInASort.prototype.exportGenericSorting = function(sortOp, inaSortOp)
{
	if (sortOp.supportsPreserveGrouping() && sortOp.supportsBreakGrouping())
	{
		inaSortOp.putBoolean("PreserveGrouping", sortOp.isPreserveGroupingEnabled());
	}
	if (sortOp.getModelCapabilities().supportsLocaleSorting())
	{
		var inaCollator = oFF.PrFactory.createStructure();
		inaCollator.putBoolean("CaseSensitive", sortOp.isCaseSensitive());
		var icuLocale = sortOp.getLocale();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(icuLocale))
		{
			inaCollator.putString("Locale", icuLocale);
		}
		if (inaCollator.hasElements())
		{
			inaSortOp.put("Collator", inaCollator);
		}
	}
};
oFF.QInASort.prototype.exportPathSorting = function(sortOp, inaSortOp, exporter)
{
	var inaPath = inaSortOp.putNewList("SortTuple");
	var elementPath = sortOp.getElementPath();
	var pathSize = elementPath.size();
	for (var idxPath = 0; idxPath < pathSize; idxPath++)
	{
		var dimElement = elementPath.get(idxPath);
		var inaPathElement = inaPath.addNewStructure();
		inaPathElement.putString("FieldName", dimElement.getSelectField().getName());
		var sortValue = oFF.QInAExportUtil.getMeasureMemberNameByAlias(sortOp.getQueryModel(), dimElement.getSelectValue(), exporter);
		inaPathElement.putString("Value", sortValue);
		var selectHierarchyName = dimElement.getSelectHierarchyName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(selectHierarchyName))
		{
			inaPathElement.putString("Hierarchy", selectHierarchyName);
		}
	}
};
oFF.QInASort.prototype.exportMeasureSorting = function(sortOp, inaSortOp)
{
	var measureSorting = sortOp;
	var measureName = measureSorting.getMeasure().getName();
	inaSortOp.putString("MeasureName", measureName);
	var structureMember = measureSorting.getStructure();
	oFF.QInAExportUtil.setNameIfNotNull(inaSortOp, "StructureName", structureMember);
};
oFF.QInASort.prototype.exportFieldSorting = function(sortOp, inaSortOp, exporter)
{
	var fieldSorting = sortOp;
	inaSortOp.putString("FieldName", fieldSorting.getField().getName());
	var customOrder = fieldSorting.getCustomSort();
	this.exportCustomSortDetails(customOrder, fieldSorting.getCustomSortPosition(), inaSortOp, sortOp.getQueryModel(), exporter);
	if (inaSortOp.getListByKey("CustomSort") !== null)
	{
		inaSortOp.remove("Collator");
	}
};
oFF.QInASort.prototype.exportCustomSortDetails = function(customOrder, customSortPosition, inaSortOp, queryModel, exporter)
{
	if (oFF.XCollectionUtils.hasElements(customOrder))
	{
		var customOrderList = inaSortOp.putNewList("CustomSort");
		var customOrderSize = customOrder.size();
		for (var customOrderIndex = 0; customOrderIndex < customOrderSize; customOrderIndex++)
		{
			var sortValue = customOrder.get(customOrderIndex);
			if (oFF.notNull(queryModel) && oFF.notNull(exporter))
			{
				sortValue = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, sortValue, exporter);
			}
			customOrderList.addString(sortValue);
		}
	}
	oFF.QInAExportUtil.setNameIfNotNull(inaSortOp, "CustomSortPosition", customSortPosition);
};

oFF.QInATotals = function() {};
oFF.QInATotals.prototype = new oFF.QInAComponentWithStructure();
oFF.QInATotals.prototype._ff_c = "QInATotals";

oFF.QInATotals.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.TOTALS;
};
oFF.QInATotals.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (importer.mode !== oFF.QModelFormat.INA_DATA_REINIT)
	{
		var controller = modelComponent;
		if (controller.supportsResultVisibility())
		{
			var inaResultStructure = this.getResultStructure(inaStructure);
			var alignment = this.importResultAlignment(controller, inaResultStructure);
			controller.restoreTotalsVisibility(oFF.RestoreAction.DEFAULT_VALUE, false);
			var inaInnerResultStructure = inaResultStructure.getListByKey("ResultStructure");
			if (oFF.notNull(inaInnerResultStructure))
			{
				var flexibleResultStructure;
				if (controller.supportsAdvancedResultStructure() && alignment === oFF.ResultAlignment.STRUCTURE)
				{
					flexibleResultStructure = controller.getAdvancedResultStructure();
					flexibleResultStructure.clear();
					if (oFF.isNull(alignment))
					{
						controller.setResultAlignmentBase(oFF.ResultAlignment.STRUCTURE, true);
					}
				}
				else
				{
					flexibleResultStructure = null;
				}
				var size = inaInnerResultStructure.size();
				for (var i = 0; i < size; i++)
				{
					var resultStructureItem = inaInnerResultStructure.getStructureAt(i);
					this.importResultStructureItem(resultStructureItem, controller, flexibleResultStructure);
				}
			}
		}
	}
	return null;
};
oFF.QInATotals.prototype.importResultAlignment = function(controller, inaResultStructure)
{
	if (controller.supportsResultAlignment())
	{
		controller.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, false);
		var inaResultAlignment = inaResultStructure.getStringByKey("ResultAlignment");
		if (oFF.XStringUtils.isNullOrEmpty(inaResultAlignment))
		{
			return null;
		}
		var alignment = oFF.QInAConverter.lookupAlignment(inaResultAlignment);
		controller.setResultAlignmentBase(alignment, false);
		return alignment;
	}
	return null;
};
oFF.QInATotals.prototype.getResultStructure = function(inaStructure)
{
	var inaResultStructure = inaStructure.getStructureByKey("ResultStructureBag");
	if (oFF.isNull(inaResultStructure))
	{
		inaResultStructure = inaStructure.getStructureByKey("DefaultResultStructure");
		if (oFF.isNull(inaResultStructure))
		{
			return inaStructure;
		}
	}
	return inaResultStructure;
};
oFF.QInATotals.prototype.importResultStructureItem = function(resultStructureItem, controller, flexibleResultStructure)
{
	var resultStructureElement = resultStructureItem.getStringByKey("Result");
	var element;
	if (oFF.XString.isEqual(resultStructureElement, "Members"))
	{
		element = oFF.ResultStructureElement.MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "Total"))
	{
		element = oFF.ResultStructureElement.TOTAL;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "TotalIncludedMembers"))
	{
		element = oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "TotalRemainingMembers"))
	{
		element = oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS;
	}
	else
	{
		return;
	}
	var inaVisibility = resultStructureItem.getStringByKey("Visibility");
	var visibility = oFF.QInAConverter.lookupResultSetVisibility(inaVisibility);
	if (oFF.isNull(flexibleResultStructure))
	{
		controller.setResultVisibilityByElement(element, visibility);
	}
	else
	{
		flexibleResultStructure.addWithVisibility(element, visibility);
	}
};
oFF.QInATotals.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var controller = modelComponent;
	if (controller.supportsTotals())
	{
		var inaResultStructure;
		if (exporter.mode.containsMetadata() || exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			inaResultStructure = inaStructure.putNewStructure("ResultStructureBag");
		}
		else
		{
			inaResultStructure = inaStructure;
		}
		this.exportAlignment(exporter, controller, inaResultStructure);
		if (controller.supportsResultVisibility())
		{
			if (!controller.isTotalsVisibilityOnDefault() || controller.getModelLevel() === oFF.QModelLevel.DIMENSIONS)
			{
				var resultStructure = controller.getTotalsStructure();
				if (oFF.XCollectionUtils.hasElements(resultStructure))
				{
					this.exportResultStructureItems(inaResultStructure, resultStructure, controller);
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInATotals.prototype.exportAlignment = function(exporter, controller, inaResultStructure)
{
	if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA) && !exporter.isAbap(controller.getQueryModel()))
	{
		return;
	}
	if (controller.supportsResultAlignment())
	{
		if (!controller.isTotalsAlignmentOnDefault())
		{
			var resultAlignment = controller.getResultAlignment();
			if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				if (resultAlignment === oFF.ResultAlignment.STRUCTURE)
				{
					resultAlignment = null;
				}
			}
			if (oFF.notNull(resultAlignment))
			{
				inaResultStructure.putString("ResultAlignment", oFF.QInAConverter.lookupAlignmentInA(resultAlignment));
			}
		}
	}
};
oFF.QInATotals.prototype.exportResultStructureItems = function(inaResultStructure, resultStructure, controller)
{
	var structure = inaResultStructure.putNewList("ResultStructure");
	var size = resultStructure.size();
	for (var i = 0; i < size; i++)
	{
		var item = resultStructure.get(i);
		var visibility = item.getResultVisibility();
		if (!this.isResultVisible(controller, visibility))
		{
			continue;
		}
		var element = item.getResultStructureElement();
		if (element === oFF.ResultStructureElement.MEMBERS)
		{
			this.exportResultStructureElement(structure, visibility, "Members");
		}
		else if (element === oFF.ResultStructureElement.TOTAL)
		{
			this.exportResultStructureElement(structure, visibility, "Total");
		}
		else if (element === oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)
		{
			if (this.supportsConditionalResult(controller, element))
			{
				this.exportResultStructureElement(structure, visibility, "TotalIncludedMembers");
			}
		}
		else if (element === oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS)
		{
			if (this.supportsConditionalResult(controller, element))
			{
				this.exportResultStructureElement(structure, visibility, "TotalRemainingMembers");
			}
		}
	}
};
oFF.QInATotals.prototype.isResultVisible = function(controller, visibility)
{
	return visibility === oFF.ResultVisibility.VISIBLE || visibility === oFF.ResultVisibility.ALWAYS || visibility === oFF.ResultVisibility.CONDITIONAL && controller.getModelCapabilities().supportsConditionalResultVisibility();
};
oFF.QInATotals.prototype.supportsConditionalResult = function(controller, element)
{
	var modelCapabilities = controller.getModelCapabilities();
	return modelCapabilities.supportsConditionalResults() && modelCapabilities.getSupportedConditionalResults().contains(element);
};
oFF.QInATotals.prototype.exportResultStructureElement = function(inaParent, visibility, elementName)
{
	var resultStructureLine = inaParent.addNewStructure();
	resultStructureLine.putString("Result", elementName);
	resultStructureLine.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(visibility));
};

oFF.QInATranslationsManager = function() {};
oFF.QInATranslationsManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInATranslationsManager.prototype._ff_c = "QInATranslationsManager";

oFF.QInATranslationsManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEASURE_TRANSLATIONS;
};
oFF.QInATranslationsManager.prototype.getTagName = function()
{
	return "Translations";
};
oFF.QInATranslationsManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var currencyTranslationManagerBase = modelComponent;
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("CurrencyTranslations"))
	{
		var inaList = inaStructure.getListByKey("CurrencyTranslations");
		if (oFF.notNull(inaList))
		{
			if (oFF.notNull(currencyTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
			{
				var size = inaList.size();
				for (var i = 0; i < size; i++)
				{
					var inaSpecificCurrencyTranslation = inaList.getStructureAt(i);
					var name = inaSpecificCurrencyTranslation.getStringByKey("Name");
					var description = inaSpecificCurrencyTranslation.getStringByKey("Description");
					var currencyTranslation = currencyTranslationManagerBase.addNewMeasureCurrencyTranslationBase(name, description);
					importer.importCurrencyTranslationElement(inaSpecificCurrencyTranslation, currencyTranslation, context);
				}
			}
		}
	}
	return currencyTranslationManagerBase;
};
oFF.QInATranslationsManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};

oFF.QInAUniversalDisplayHierarchies = function() {};
oFF.QInAUniversalDisplayHierarchies.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAUniversalDisplayHierarchies.prototype._ff_c = "QInAUniversalDisplayHierarchies";

oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionRequired = function(exporter, axis)
{
	return oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, axis.getQueryManager()) && oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis) !== null;
};
oFF.QInAUniversalDisplayHierarchies.isHierarchyConverted = function(exporter, dimension)
{
	return oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, dimension.getQueryManager()) && dimension === oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(dimension.getAxis());
};
oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive = function(exporter, queryManager)
{
	return exporter.mode === oFF.QModelFormat.INA_DATA && queryManager.isHierarchyToUDHConversionEnabledForCurrentRs() && oFF.XCollectionUtils.hasElements(queryManager.getQueryModel().getUniversalDisplayHierarchies().getHierarchies());
};
oFF.QInAUniversalDisplayHierarchies.getDimensionNames = function(exporter, axis)
{
	if (oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, axis.getQueryManager()))
	{
		var dimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis);
		if (oFF.notNull(dimension))
		{
			var leveledHierarchy = dimension.getLeveledHierarchy(dimension.getHierarchyName());
			var size = leveledHierarchy.getAllLevel().size();
			var dimensions = oFF.XListOfString.create();
			for (var i = 0; i < size; i++)
			{
				dimensions.add(leveledHierarchy.getLevel(i).getLevelDimensionName());
			}
			return dimensions;
		}
	}
	return axis.getDimensionNames();
};
oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchyWhichContainsGivenDim = function(exporter, dimension)
{
	if (oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, dimension.getQueryManager()))
	{
		var dimensionName = dimension.getName();
		var rowsAxis = dimension.getQueryModel().getRowsAxis();
		if (oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, rowsAxis).contains(dimensionName))
		{
			return oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(rowsAxis);
		}
		var colAxis = dimension.getQueryModel().getColumnsAxis();
		if (oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, colAxis).contains(dimensionName))
		{
			return oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(colAxis);
		}
	}
	return null;
};
oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy = function(axis)
{
	if (oFF.isNull(axis) || axis.getType() !== oFF.AxisType.ROWS && axis.getType() !== oFF.AxisType.COLUMNS)
	{
		return null;
	}
	var dimensionCount = axis.getDimensionCount();
	for (var i = 0; i < dimensionCount; i++)
	{
		var dimension = axis.get(i);
		if (dimension.isHierarchyActive() && dimension.getLeveledHierarchy(dimension.getHierarchyName()) !== null)
		{
			return dimension;
		}
	}
	return null;
};
oFF.QInAUniversalDisplayHierarchies.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES;
};
oFF.QInAUniversalDisplayHierarchies.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		var hierarchiesStructure = inaStructure.getByKey("UniversalDisplayHierarchies");
		if (oFF.notNull(hierarchiesStructure) && hierarchiesStructure.isList())
		{
			var hierarchies = hierarchiesStructure;
			var size = hierarchies.size();
			for (var i = 0; i < size; i++)
			{
				oFF.QInAMdUniversalDisplayHierarchies.importHierarchy(universalDisplayHierarchies, hierarchies.getStructureAt(i));
			}
		}
	}
	oFF.QInAMdUniversalDisplayHierarchies.assignAxesToHierarchies(universalDisplayHierarchies);
	return universalDisplayHierarchies;
};
oFF.QInAUniversalDisplayHierarchies.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(universalDisplayHierarchies))
	{
		universalDisplayHierarchies.updateIncludedDimensions();
		var udhIterator = universalDisplayHierarchies.getChildrenIterator();
		if (udhIterator.hasNext())
		{
			var udhStructure = inaStructure.putNewList("UniversalDisplayHierarchies");
			while (udhIterator.hasNext())
			{
				this.exportHierarchy(exporter, udhStructure, udhIterator.next());
			}
		}
	}
	return inaStructure;
};
oFF.QInAUniversalDisplayHierarchies.prototype.exportHierarchy = function(exporter, udhStructure, hierarchy)
{
	var dimensionListValid = true;
	var axis = hierarchy.getHierarchyDedicatedAxis();
	var hierarchyConversionDimension = oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, axis.getQueryManager()) ? oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis) : null;
	if (oFF.notNull(hierarchyConversionDimension))
	{
		var udhConvertedFromLBH = udhStructure.addNewStructure();
		udhConvertedFromLBH.putString("Name", hierarchy.getName());
		var supportsUdhZeroBased = hierarchy.getQueryModel().getModelCapabilities().supportsUniversalDisplayHierarchiesZeroBased();
		udhConvertedFromLBH.putInteger("InitialDrillLevel", supportsUdhZeroBased ? hierarchyConversionDimension.getInitialDrillLevel() : hierarchyConversionDimension.getInitialDrillLevel() + 1);
		udhConvertedFromLBH.putString("LowerLevelNodeAlignment", hierarchyConversionDimension.getLowerLevelNodeAlignment().getName());
		udhConvertedFromLBH.putBoolean("Active", true);
		udhConvertedFromLBH.putNewList("DimensionNames").addAllStrings(oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, axis));
		udhConvertedFromLBH.putString("LevelHierarchyName", hierarchyConversionDimension.getHierarchyName());
		return;
	}
	else if (hierarchy.isActive() && !hierarchy.isDimensionListValid())
	{
		dimensionListValid = false;
		exporter.addError(oFF.ErrorCodes.INVALID_STATE, oFF.XStringUtils.concatenate3("Dimensions for UDH '", hierarchy.getName(), "' must be placed next to each other on the axis"));
	}
	var hierarchyStructure = udhStructure.addNewStructure();
	hierarchyStructure.putString("Name", hierarchy.getName());
	hierarchyStructure.putInteger("InitialDrillLevel", hierarchy.getInitialDrillLevel());
	hierarchyStructure.putString("LowerLevelNodeAlignment", hierarchy.getAlignment().getName());
	hierarchyStructure.putBoolean("Active", hierarchy.isActive() && dimensionListValid);
	hierarchyStructure.putNewList("DimensionNames").addAllStrings(hierarchy.getDimensionNames());
	if (hierarchy.hasCustomDimensions())
	{
		hierarchyStructure.putBoolean("CustomDimensions", true);
	}
};

oFF.QInAVarDimMember = function() {};
oFF.QInAVarDimMember.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarDimMember.prototype._ff_c = "QInAVarDimMember";

oFF.QInAVarDimMember.prototype.getComponentType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QInAVarDimMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var memberVariable = modelComponent;
	var inaValues = inaStructure.getStructureByKey("Values");
	if (oFF.notNull(inaValues))
	{
		var selectionContainer = oFF.QFactory.createFilterExpression(memberVariable, memberVariable);
		var newSelectionContainer = importer.importFilterExpression(selectionContainer, inaValues, memberVariable, context);
		memberVariable.setFilter(newSelectionContainer);
	}
	else if (memberVariable.getVariableType() === oFF.VariableType.HIERARCHY_NODE_VARIABLE && memberVariable.hasMemberFilter() && memberVariable.getDimension().getKeyField() !== memberVariable.getMemberFilter().getField())
	{
		memberVariable.setDimension(memberVariable.getDimension());
	}
	return memberVariable;
};
oFF.QInAVarDimMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimensionMemberVariable = modelComponent;
	var name = dimensionMemberVariable.getName();
	inaStructure.putString("Name", name);
	var targetMemberFilter = null;
	var externMemberSelection = dimensionMemberVariable.getExternalMemberFilter();
	if (oFF.XCollectionUtils.hasElements(externMemberSelection))
	{
		targetMemberFilter = externMemberSelection;
	}
	else if (dimensionMemberVariable.hasMemberFilter())
	{
		var memberSelection = dimensionMemberVariable.getMemberFilter();
		if (oFF.XCollectionUtils.hasElements(memberSelection))
		{
			targetMemberFilter = memberSelection;
		}
	}
	if (oFF.notNull(targetMemberFilter))
	{
		var inaVariableValues = inaStructure.putNewStructure("Values");
		var inaSelection = inaVariableValues.putNewStructure("Selection");
		exporter.exportCartesianList(targetMemberFilter, inaSelection);
	}
	else if (!dimensionMemberVariable.isMandatory())
	{
		inaStructure.putNewStructure("Values");
	}
	return inaStructure;
};
oFF.QInAVarDimMember.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	var dimMemberVariable = modelComponent;
	if (oFF.isNull(inaStructure) || dimMemberVariable.supportsValueHelp())
	{
		return inaStructure;
	}
	var values = inaStructure.getStructureByKey("Values");
	if (oFF.isNull(values))
	{
		return inaStructure;
	}
	var selection = values.getStructureByKey("Selection");
	if (oFF.isNull(selection))
	{
		return inaStructure;
	}
	var setOperarnd = selection.getStructureByKey("SetOperand");
	if (oFF.isNull(setOperarnd))
	{
		return inaStructure;
	}
	var elements = setOperarnd.getListByKey("Elements");
	if (oFF.PrUtils.isListEmpty(elements))
	{
		return inaStructure;
	}
	var numberOfElements = elements.size();
	for (var i = 0; i < numberOfElements; i++)
	{
		var element = elements.get(i);
		if (element.hasStringByKey("Low"))
		{
			element.putString("LowIs", "ManualInput");
		}
		if (element.hasStringByKey("High"))
		{
			element.putString("HighIs", "ManualInput");
		}
		if (element.hasStringByKey("Value3"))
		{
			element.putString("Value3Is", "ManualInput");
		}
	}
	return inaStructure;
};

oFF.QInAVarOptionList = function() {};
oFF.QInAVarOptionList.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarOptionList.prototype._ff_c = "QInAVarOptionList";

oFF.QInAVarOptionList.prototype.getComponentType = function()
{
	return oFF.VariableType.OPTION_LIST_VARIABLE;
};
oFF.QInAVarOptionList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var optionListVariable = modelComponent;
	var inaOptionValues = inaStructure.getListByKey("OptionValues");
	if (oFF.notNull(inaOptionValues))
	{
		var currentOption;
		if (optionListVariable.supportsMultipleValues())
		{
			optionListVariable.clear();
			var len = inaOptionValues.size();
			for (var idxOption = 0; idxOption < len; idxOption++)
			{
				currentOption = inaOptionValues.getStringAt(idxOption);
				optionListVariable.addString(currentOption);
			}
		}
		else if (inaOptionValues.size() === 1)
		{
			currentOption = inaOptionValues.getStringAt(0);
			optionListVariable.setString(currentOption);
		}
	}
	return optionListVariable;
};
oFF.QInAVarOptionList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var variable = modelComponent;
	inaStructure.putString("Name", variable.getName());
	var inaVariableOptionValues = inaStructure.putNewList("OptionValues");
	if (variable.supportsMultipleValues())
	{
		var multiOptionNames = variable.getValues();
		var len = multiOptionNames.size();
		for (var c = 0; c < len; c++)
		{
			var optionName = multiOptionNames.get(c);
			inaVariableOptionValues.addString(optionName.getString());
		}
	}
	else
	{
		var currentOption = variable.getCurrentOption();
		if (oFF.notNull(currentOption))
		{
			inaVariableOptionValues.addString(currentOption.getName());
		}
	}
	return inaStructure;
};

oFF.QInAVarSimpleType = function() {};
oFF.QInAVarSimpleType.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarSimpleType.prototype._ff_c = "QInAVarSimpleType";

oFF.QInAVarSimpleType.prototype.getComponentType = function()
{
	return oFF.VariableType.SIMPLE_TYPE_VARIABLE;
};
oFF.QInAVarSimpleType.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var simpleTypeVariable = modelComponent;
	if (simpleTypeVariable.supportsMultipleValues())
	{
		simpleTypeVariable.clear();
	}
	var valueType = simpleTypeVariable.getValueType();
	if (valueType.isNumber())
	{
		this.importNumericValues(importer, inaStructure, simpleTypeVariable, valueType);
	}
	else if (valueType.isString())
	{
		this.importStringValues(inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		this.importDateValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.TIME)
	{
		this.importTimeValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		this.importDateTimeValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		this.importBooleanValues(inaStructure, simpleTypeVariable);
	}
	return null;
};
oFF.QInAVarSimpleType.prototype.getFirstValueAsString = function(values)
{
	var element = values.get(0);
	if (oFF.notNull(element) && element.isString())
	{
		return element.getString();
	}
	return null;
};
oFF.QInAVarSimpleType.prototype.importDateTimeValues = function(importer, inaStructure, simpleTypeVariable)
{
	var inaSimpleDateTimeValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleDateTimeValues))
	{
		var sizeValue = inaSimpleDateTimeValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (var idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				var dateTimeValue = inaSimpleDateTimeValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue))
				{
					simpleTypeVariable.addDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue, importer.capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			var dateTimeValue2 = this.getFirstValueAsString(inaSimpleDateTimeValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue2))
			{
				simpleTypeVariable.setDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue2, importer.capabilities.supportsSapDate()));
			}
		}
	}
};
oFF.QInAVarSimpleType.prototype.importTimeValues = function(importer, inaStructure, simpleTypeVariable)
{
	var inaSimpleTimeValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleTimeValues))
	{
		var sizeValue = inaSimpleTimeValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (var idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				var timeValue = inaSimpleTimeValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue))
				{
					simpleTypeVariable.addTime(oFF.XTime.createTimeFromStringWithFlag(timeValue, importer.capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			var timeValue2 = this.getFirstValueAsString(inaSimpleTimeValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue2))
			{
				simpleTypeVariable.setTime(oFF.XTime.createTimeFromStringWithFlag(timeValue2, importer.capabilities.supportsSapDate()));
			}
		}
	}
};
oFF.QInAVarSimpleType.prototype.importDateValues = function(importer, inaStructure, simpleTypeVariable)
{
	var inaSimpleDateValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleDateValues))
	{
		var sizeValue = inaSimpleDateValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (var idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				var dateValue = inaSimpleDateValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue))
				{
					simpleTypeVariable.addDate(oFF.XDate.createDateFromStringWithFlag(dateValue, importer.capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			var dateValue2 = this.getFirstValueAsString(inaSimpleDateValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue2))
			{
				simpleTypeVariable.setDate(oFF.XDate.createDateFromStringWithFlag(dateValue2, importer.capabilities.supportsSapDate()));
			}
		}
	}
};
oFF.QInAVarSimpleType.prototype.importStringValues = function(inaStructure, simpleTypeVariable)
{
	var inaSimpleStringValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleStringValues))
	{
		var sizeValue = inaSimpleStringValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (var idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				simpleTypeVariable.addString(inaSimpleStringValues.getStringAt(idxValue));
			}
		}
		else if (sizeValue === 1)
		{
			var element = inaSimpleStringValues.get(0);
			if (oFF.notNull(element) && element.isString())
			{
				simpleTypeVariable.setString(element.getString());
			}
		}
	}
};
oFF.QInAVarSimpleType.prototype.importBooleanValues = function(inaStructure, simpleTypeVariable)
{
	var inaSimpleBooleanValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleBooleanValues))
	{
		var sizeValue = inaSimpleBooleanValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (var idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				simpleTypeVariable.addBoolean(inaSimpleBooleanValues.getBooleanAt(idxValue));
			}
		}
		else if (sizeValue === 1)
		{
			var element = inaSimpleBooleanValues.get(0);
			if (oFF.notNull(element) && element.isBoolean())
			{
				simpleTypeVariable.setBoolean(element.asBoolean().getBoolean());
			}
		}
	}
};
oFF.QInAVarSimpleType.prototype.importNumericString = function(simpleTypeVariable, valueType, stringValue)
{
	if (valueType === oFF.XValueType.INTEGER)
	{
		simpleTypeVariable.addInteger(oFF.XInteger.convertFromString(stringValue));
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		simpleTypeVariable.addDouble(oFF.XDouble.convertFromString(stringValue));
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		simpleTypeVariable.addLong(oFF.XLong.convertFromString(stringValue));
	}
};
oFF.QInAVarSimpleType.prototype.addIntegerValue = function(exporter, simpleValues, intValue)
{
	if (exporter.capabilities.supportsNumberAsString() && !oFF.QInAExportUtil.isNumberSafe(intValue))
	{
		simpleValues.addString(oFF.XInteger.convertToString(intValue));
	}
	else
	{
		simpleValues.addInteger(intValue);
	}
};
oFF.QInAVarSimpleType.prototype.addLongValue = function(exporter, simpleValues, longValue)
{
	if (exporter.capabilities.supportsNumberAsString() && !oFF.QInAExportUtil.isNumberSafe(longValue))
	{
		simpleValues.addString(oFF.XLong.convertToString(longValue));
	}
	else
	{
		simpleValues.addLong(longValue);
	}
};
oFF.QInAVarSimpleType.prototype.addDoubleValue = function(exporter, simpleValues, doubleValue)
{
	if (exporter.capabilities.supportsNumberAsString() && !oFF.QInAExportUtil.isNumberSafe(doubleValue))
	{
		simpleValues.addString(oFF.XDouble.convertToString(doubleValue));
	}
	else
	{
		simpleValues.addDouble(doubleValue);
	}
};
oFF.QInAVarSimpleType.prototype.importNumericValues = function(importer, inaStructure, simpleTypeVariable, valueType)
{
	var inaSimpleNumericValues = inaStructure.getListByKey("SimpleNumericValues");
	if (oFF.notNull(inaSimpleNumericValues))
	{
		var sizeValue = inaSimpleNumericValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (var idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				var elementAt = inaSimpleNumericValues.get(idxValue);
				if (importer.capabilities.supportsNumberAsString() && oFF.notNull(elementAt) && elementAt.getType() === oFF.PrElementType.STRING)
				{
					this.importNumericString(simpleTypeVariable, valueType, inaSimpleNumericValues.getStringAt(idxValue));
					continue;
				}
				if (valueType === oFF.XValueType.INTEGER)
				{
					var integerValue = inaSimpleNumericValues.getIntegerAt(idxValue);
					simpleTypeVariable.addInteger(integerValue);
				}
				else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					var doubleValue = inaSimpleNumericValues.getDoubleAt(idxValue);
					simpleTypeVariable.addDouble(doubleValue);
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					var longValue = inaSimpleNumericValues.getLongAt(idxValue);
					simpleTypeVariable.addLong(longValue);
				}
			}
		}
		else if (sizeValue === 1)
		{
			var numericElement0 = inaSimpleNumericValues.get(0);
			if (oFF.notNull(numericElement0) && numericElement0.isNumeric())
			{
				if (valueType === oFF.XValueType.INTEGER)
				{
					simpleTypeVariable.setInteger(inaSimpleNumericValues.getIntegerAt(0));
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					simpleTypeVariable.setDouble(inaSimpleNumericValues.getDoubleAt(0));
				}
				else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					simpleTypeVariable.setDecFloat(oFF.XDecFloatByDouble.create(inaSimpleNumericValues.getDoubleAt(0)));
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					simpleTypeVariable.setLong(inaSimpleNumericValues.getLongAt(0));
				}
			}
		}
	}
};
oFF.QInAVarSimpleType.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var variable = modelComponent;
	inaStructure.putString("Name", variable.getName());
	var valueType = variable.getValueType();
	var simpleValues;
	if (valueType === oFF.XValueType.STRING || valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.TIME || valueType === oFF.XValueType.DATE_TIME || valueType === oFF.XValueType.BOOLEAN || valueType.isSpatial())
	{
		simpleValues = inaStructure.putNewList("SimpleStringValues");
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT || valueType === oFF.XValueType.LONG || valueType === oFF.XValueType.INTEGER)
	{
		simpleValues = inaStructure.putNewList("SimpleNumericValues");
	}
	else
	{
		exporter.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate3("SimpleTypeVariable '", variable.getName(), "' not exported"));
		return null;
	}
	if (variable.supportsMultipleValues())
	{
		this.exportMultipleValues(exporter, variable, valueType, simpleValues);
	}
	else
	{
		this.exportSingleValue(exporter, variable, valueType, simpleValues);
	}
	return inaStructure;
};
oFF.QInAVarSimpleType.prototype.exportSingleValue = function(exporter, variable, valueType, simpleValues)
{
	var repoFormatAndNoValue = !variable.hasValue() && (exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY || variable.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.VIRTUAL_INA));
	if (valueType === oFF.XValueType.INTEGER)
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			this.addIntegerValue(exporter, simpleValues, variable.getInteger());
		}
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			this.addLongValue(exporter, simpleValues, variable.getLong());
		}
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			simpleValues.addBoolean(variable.getBoolean());
		}
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			this.addDoubleValue(exporter, simpleValues, variable.getDouble());
		}
	}
	else
	{
		if (!variable.hasValue())
		{
			if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY)
			{
				simpleValues.addString("");
			}
		}
		else if (valueType === oFF.XValueType.STRING || valueType.isSpatial())
		{
			simpleValues.addString(variable.getString());
		}
		else if (valueType === oFF.XValueType.DATE)
		{
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getDate()));
		}
		else if (valueType === oFF.XValueType.TIME)
		{
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getTime()));
		}
		else if (valueType === oFF.XValueType.DATE_TIME)
		{
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getDateTime()));
		}
	}
};
oFF.QInAVarSimpleType.prototype.exportMultipleValues = function(exporter, variable, valueType, simpleValues)
{
	var multiValues = variable.getValues();
	var size = multiValues.size();
	for (var idx = 0; idx < size; idx++)
	{
		if (valueType === oFF.XValueType.INTEGER)
		{
			var intValue = multiValues.get(idx);
			this.addIntegerValue(exporter, simpleValues, intValue.getInteger());
		}
		else if (valueType === oFF.XValueType.LONG)
		{
			var longValue = multiValues.get(idx);
			this.addLongValue(exporter, simpleValues, longValue.getLong());
		}
		else if (valueType === oFF.XValueType.DOUBLE)
		{
			var doubleValue = multiValues.get(idx);
			this.addDoubleValue(exporter, simpleValues, doubleValue.getDouble());
		}
		else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
		{
			var floatValue = multiValues.get(idx);
			this.addDoubleValue(exporter, simpleValues, floatValue.getDouble());
		}
		else if (valueType === oFF.XValueType.STRING)
		{
			var stringValue = multiValues.get(idx);
			simpleValues.addString(stringValue.getString());
		}
		else if (valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.TIME || valueType === oFF.XValueType.DATE_TIME)
		{
			var dateValue = multiValues.get(idx);
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, dateValue));
		}
		else if (valueType === oFF.XValueType.BOOLEAN)
		{
			var booleanValue = multiValues.get(idx);
			simpleValues.addString(oFF.XBoolean.convertToString(booleanValue.getBoolean()));
		}
		else if (valueType.isSpatial())
		{
			var spatialValue = multiValues.get(idx);
			simpleValues.addString(spatialValue.toWKT());
		}
	}
};

oFF.QInAVariableContainer = function() {};
oFF.QInAVariableContainer.prototype = new oFF.QInAComponentWithList();
oFF.QInAVariableContainer.prototype._ff_c = "QInAVariableContainer";

oFF.QInAVariableContainer.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QInAVariableContainer.prototype.getTagName = function()
{
	return "Variables";
};
oFF.QInAVariableContainer.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var variableContainer = modelComponent;
	importer.importVariableList(inaList, variableContainer);
	return modelComponent;
};
oFF.QInAVariableContainer.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var variableContainer = modelComponent;
	var queryModel = variableContainer.getQueryModel();
	if (oFF.notNull(queryModel) && !queryModel.isExportingVariables() && !queryModel.hasProcessingStep())
	{
		return null;
	}
	var variables = variableContainer.getVariables();
	if (oFF.XCollectionUtils.hasElements(variables))
	{
		return exporter.exportVariableList(variableContainer);
	}
	return null;
};

oFF.QInAVariablesList = function() {};
oFF.QInAVariablesList.prototype = new oFF.QInAComponentWithList();
oFF.QInAVariablesList.prototype._ff_c = "QInAVariablesList";

oFF.QInAVariablesList.applyLegacyCurrencyTranslation = function(valueMap, queryModel, variableContainer, measureName, measureCurrencyTranslation)
{
	var variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Currency");
	var baseVariable = queryModel.getVariable(variableName);
	var fixedCurrencyBase = oFF.QInACurrencyTranslationItem.resolveTargetCurrency(measureCurrencyTranslation);
	var fixedCurrency = oFF.isNull(fixedCurrencyBase) ? null : fixedCurrencyBase.getFixedValue();
	if (oFF.notNull(baseVariable) && oFF.notNull(fixedCurrency) && oFF.XValueUtil.getString(fixedCurrency) !== null)
	{
		valueMap.put(variableName, fixedCurrency);
		var monthFactor = 0;
		if (measureCurrencyTranslation.getDateOffsetGranularity() !== null)
		{
			monthFactor = measureCurrencyTranslation.getDateOffsetGranularity().getMonthFactor();
		}
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "MonthDelta");
		baseVariable = queryModel.getVariable(variableName);
		var monthDelta = measureCurrencyTranslation.getDateOffset() * monthFactor;
		if (oFF.notNull(baseVariable))
		{
			valueMap.put(variableName, oFF.XIntegerValue.create(monthDelta));
		}
		if (measureCurrencyTranslation.isReferenceDateFixed())
		{
			variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Date");
			baseVariable = queryModel.getVariable(variableName);
			if (oFF.notNull(baseVariable))
			{
				valueMap.put(variableName, measureCurrencyTranslation.getFixedReferenceDate());
			}
		}
		else
		{
			variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Date");
			baseVariable = queryModel.getVariable(variableName);
			if (oFF.notNull(baseVariable))
			{
				if (monthDelta === 0)
				{
					valueMap.put(variableName, oFF.XStringValue.create("0000-00-00"));
				}
				else
				{
					valueMap.put(variableName, oFF.XStringValue.create("1111-11-11"));
				}
			}
		}
		var rateType = measureCurrencyTranslation.getFixedRateType();
		var category = measureCurrencyTranslation.getFixedCategory();
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "RateType");
		baseVariable = queryModel.getVariable(variableName);
		if (oFF.notNull(baseVariable))
		{
			valueMap.put(variableName, oFF.XStringValue.create(oFF.QInAVariablesList.resolveRateTypeVariableValue(rateType)));
		}
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "RateVersion");
		baseVariable = queryModel.getVariable(variableName);
		if (oFF.notNull(baseVariable))
		{
			var rateVersionString = measureCurrencyTranslation.getFixedRateVersion();
			valueMap.put(variableName, oFF.XStringValue.create(oFF.isNull(rateVersionString) ? "" : rateVersionString));
		}
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Category");
		baseVariable = queryModel.getVariable(variableName);
		if (oFF.notNull(baseVariable))
		{
			valueMap.put(variableName, oFF.XStringValue.create(oFF.QInAVariablesList.resolveCategoryVariableValue(category)));
		}
	}
};
oFF.QInAVariablesList.resolveRateTypeVariableValue = function(rateType)
{
	var result;
	if (oFF.CtRateType.isDefined(rateType))
	{
		result = oFF.QInAConverter.lookupRateTypeInA(rateType);
	}
	else
	{
		result = "@@DYNAMIC@@";
	}
	return result;
};
oFF.QInAVariablesList.resolveCategoryVariableValue = function(category)
{
	var result;
	if (oFF.CtCategory.isDefined(category))
	{
		result = oFF.QInAConverter.lookupCategoryInA(category);
	}
	else
	{
		result = "";
	}
	return result;
};
oFF.QInAVariablesList.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_LIST;
};
oFF.QInAVariablesList.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	var variableContainer = modelComponent;
	if (oFF.notNull(inaList))
	{
		var len = inaList.size();
		for (var varIdx = 0; varIdx < len; varIdx++)
		{
			var inaVariable = inaList.getStructureAt(varIdx);
			var variableName = inaVariable.getStringByKey("Name");
			var variable = variableContainer.getVariableBaseByName(variableName);
			if (oFF.notNull(variable))
			{
				var variableType = variable.getVariableType();
				if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
				{
					importer.importSimpleTypeVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
				{
					var dimMemberVar = variable;
					importer.importDimensionMemberVariable(inaVariable, dimMemberVar, null, dimMemberVar);
				}
				else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
				{
					importer.importOptionListVariable(inaVariable, variable, context);
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate5("The variable '", variableName, "' of variable type '", variableType.getName(), "' was not imported correctly"));
				}
			}
			else
			{
				importer.addWarning(oFF.ErrorCodes.ET_ELEMENT_NOT_FOUND, oFF.XStringUtils.concatenate3("The variable '", variableName, "' was not found"));
			}
		}
	}
	return modelComponent;
};
oFF.QInAVariablesList.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	var variableContainer = modelComponent;
	var variables = variableContainer.getVariables();
	if (oFF.isNull(variables) || variables.isEmpty())
	{
		return null;
	}
	var inaVariableList = oFF.PrFactory.createList();
	var len = variables.size();
	var mode = exporter.mode;
	var currencyValuesMap = null;
	if (mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		currencyValuesMap = this.remapCurrencyVariables(variableContainer);
	}
	for (var i = 0; i < len; i++)
	{
		var variable = variables.get(i);
		var inaVariable = null;
		if (!variable.isCustomVariable())
		{
			if (mode === oFF.QModelFormat.INA_METADATA)
			{
				exporter.exportVariable(variable, null);
			}
			else if (mode.isTypeOf(oFF.QModelFormat.INA_DATA) || mode === oFF.QModelFormat.INA_VALUE_HELP)
			{
				var externalVariable = variable.getExternalRepresentation();
				if (oFF.notNull(externalVariable) && variable.getOlapComponentType() === externalVariable.getOlapComponentType() && oFF.XString.isEqual(externalVariable.getName(), variable.getName()))
				{
					variable = externalVariable;
				}
				if (variable.isInputEnabled())
				{
					inaVariable = oFF.PrFactory.createStructure();
					inaVariable.putString("Name", variable.getName());
					if (oFF.notNull(currencyValuesMap) && currencyValuesMap.containsKey(variable.getName()))
					{
						var value = currencyValuesMap.getByKey(variable.getName());
						var valueList;
						if (value.getValueType().isNumber())
						{
							valueList = inaVariable.putNewList("SimpleNumericValues");
							valueList.addInteger(oFF.XValueUtil.getInteger(value, false, true));
						}
						else
						{
							valueList = inaVariable.putNewList("SimpleStringValues");
							valueList.addString(oFF.XValueUtil.getString(value));
						}
					}
					else
					{
						exporter.exportVariable(variable, inaVariable);
					}
				}
			}
			else
			{
				inaVariable = oFF.PrFactory.createStructure();
				inaVariable.putString("Name", variable.getName());
				exporter.exportVariable(variable, inaVariable);
			}
			if (oFF.notNull(inaVariable))
			{
				inaVariableList.add(inaVariable);
			}
		}
	}
	return inaVariableList;
};
oFF.QInAVariablesList.prototype.remapCurrencyVariables = function(variableContainer)
{
	var i;
	var result = oFF.XHashMapByString.create();
	var queryModel = variableContainer.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		var curTransMan = queryModel.getCurrencyTranslationManager();
		if (oFF.notNull(curTransMan))
		{
			if (curTransMan.isLegacyMeasureCurrencyTranslationAccountModel())
			{
				var defaultCurrencyTranslation = curTransMan.getDefaultMeasureCurrencyTranslation();
				var applyToDefaultCurrency = false;
				if (oFF.notNull(defaultCurrencyTranslation))
				{
					oFF.QInAVariablesList.applyLegacyCurrencyTranslation(result, queryModel, variableContainer, "SignedData", defaultCurrencyTranslation);
					var curTransBridge = curTransMan.getQuery2MeasureCurrencyTranslationBridge();
					applyToDefaultCurrency = curTransBridge.isApplyToDefaultCurrencyTranslation();
				}
				if (queryModel.getMeasureDimension() !== null)
				{
					var structureMembers = queryModel.getMeasureDimension().getLoadedStructureMembers();
					var size = oFF.isNull(structureMembers) ? 0 : structureMembers.size();
					for (i = 0; i < size; i++)
					{
						var structureMember = structureMembers.get(i);
						if (structureMember.getOlapComponentType() === oFF.MemberType.CURRENCY_MEASURE)
						{
							var currencyMeasure = structureMember;
							var baseMeasureName = currencyMeasure.getBaseMeasureName();
							if (oFF.isNull(baseMeasureName) && curTransMan.isLegacyMeasureCurrencyTranslationAccountModel())
							{
								baseMeasureName = curTransMan.getCurrencyTranslationCrossCalculation(currencyMeasure.getAliasName());
							}
							if (currencyMeasure.getLocalCurrencyTranslation() !== null && oFF.notNull(baseMeasureName))
							{
								if (oFF.notNull(defaultCurrencyTranslation) && curTransMan.isLegacyMeasureCurrencyTranslationAccountModel() && applyToDefaultCurrency && currencyMeasure.isDefaultCurrency())
								{
									oFF.QInAVariablesList.applyLegacyCurrencyTranslation(result, queryModel, variableContainer, baseMeasureName, defaultCurrencyTranslation);
								}
								else
								{
									oFF.QInAVariablesList.applyLegacyCurrencyTranslation(result, queryModel, variableContainer, baseMeasureName, currencyMeasure.getLocalCurrencyTranslation());
								}
							}
						}
					}
				}
			}
		}
	}
	return result;
};

oFF.QInAHierarchyValueHelp = function() {};
oFF.QInAHierarchyValueHelp.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAHierarchyValueHelp.prototype._ff_c = "QInAHierarchyValueHelp";

oFF.QInAHierarchyValueHelp.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY;
};
oFF.QInAHierarchyValueHelp.prototype.getTagName = function()
{
	return "Hierarchy";
};
oFF.QInAHierarchyValueHelp.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_VALUE_HELP;
};
oFF.QInAHierarchyValueHelp.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var hierarchyName = dimension.getHierarchyName();
	if (dimension.isSelectorHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
	{
		var inaHierarchy = oFF.PrFactory.createStructure();
		var hierarchyVersion = dimension.getHierarchyVersion();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyVersion))
		{
			inaHierarchy.putString("Version", hierarchyVersion);
		}
		oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", dimension.getHierarchyDueDate());
		inaHierarchy.putString("Name", hierarchyName);
		inaHierarchy.putInteger("InitialDrillLevel", dimension.isSelectorUseQueryDrillOperations() && dimension.hasZoomDrill() ? 0 : dimension.getSelectorRootLevel());
		var visibility = dimension.getMemberOfPostedNodeVisibility();
		var memberOfPostedNodeVisibility = oFF.QInAConverter.lookupResultSetVisibilityInA(visibility);
		inaHierarchy.putString("MemberOfPostedNodeVisibility", memberOfPostedNodeVisibility);
		var hierarchy = dimension.getHierarchy();
		if (oFF.notNull(hierarchy) && hierarchy.isCustomHierarchy())
		{
			inaHierarchy.putBoolean("IsTransient", true);
			inaHierarchy.putStringNotNull("Description", hierarchy.getHierarchyDescription());
		}
		return inaHierarchy;
	}
	return null;
};
oFF.QInAHierarchyValueHelp.prototype.importComponentWithStructure = oFF.noSupport;

oFF.MeasureValueHelpRsDimension = function() {};
oFF.MeasureValueHelpRsDimension.prototype = new oFF.XObject();
oFF.MeasureValueHelpRsDimension.prototype._ff_c = "MeasureValueHelpRsDimension";

oFF.MeasureValueHelpRsDimension.create = function(dimension)
{
	var dimensionWrapper = new oFF.MeasureValueHelpRsDimension();
	dimensionWrapper.m_dimension = dimension;
	return dimensionWrapper;
};
oFF.MeasureValueHelpRsDimension.prototype.m_dimension = null;
oFF.MeasureValueHelpRsDimension.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_dimension = null;
};
oFF.MeasureValueHelpRsDimension.prototype.cloneExt = function(flags)
{
	return oFF.MeasureValueHelpRsDimension.create(this.m_dimension);
};
oFF.MeasureValueHelpRsDimension.prototype.getDimensionType = function()
{
	return this.m_dimension.getDimensionType();
};
oFF.MeasureValueHelpRsDimension.prototype.isHierarchyActive = function()
{
	return this.m_dimension.isHierarchyActive();
};
oFF.MeasureValueHelpRsDimension.prototype.setName = function(name) {};
oFF.MeasureValueHelpRsDimension.prototype.getName = function()
{
	return this.m_dimension.getName();
};
oFF.MeasureValueHelpRsDimension.prototype.getText = function()
{
	return this.m_dimension.getText();
};
oFF.MeasureValueHelpRsDimension.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_dimension.getLowerLevelNodeAlignment();
};
oFF.MeasureValueHelpRsDimension.prototype.hasDefaultLowerLevelNodeAlignment = function()
{
	return this.m_dimension.hasDefaultLowerLevelNodeAlignment();
};
oFF.MeasureValueHelpRsDimension.prototype.getHierarchyName = function()
{
	return this.m_dimension.getHierarchyName();
};
oFF.MeasureValueHelpRsDimension.prototype.getFields = function()
{
	return this.m_dimension.getFields();
};

oFF.XCmdDeserializeBlendingResult = function() {};
oFF.XCmdDeserializeBlendingResult.prototype = new oFF.XCmdDeserializeBlendingResultBase();
oFF.XCmdDeserializeBlendingResult.prototype._ff_c = "XCmdDeserializeBlendingResult";

oFF.XCmdDeserializeBlendingResult.CLAZZ = null;
oFF.XCmdDeserializeBlendingResult.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingResult);
};
oFF.XCmdDeserializeBlendingResult.createBlendingDefinition = function(queryManagers, aliases, inaMappings)
{
	var blendingDefinition = oFF.QFactory.createBlendingDefinition();
	var sourceCount = queryManagers.size();
	for (var i = 0; i < sourceCount; i++)
	{
		blendingDefinition.addNewSource(queryManagers.get(i).getQueryModel(), aliases.get(i));
	}
	for (var idx = 0; idx < inaMappings.size(); idx++)
	{
		var inaMapping = inaMappings.getStructureAt(idx);
		var linkType = inaMapping.getStringByKey("LinkType");
		var dimensionName = inaMapping.getStringByKey("DimensionName");
		var dimensionMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.lookup(linkType), dimensionName);
		var inaDimensionMappings = inaMapping.getListByKey("Mapping");
		if (inaMapping.getBooleanByKeyExt("PreserveMembers", false))
		{
			dimensionMapping.setIsPreservingMembers(true);
		}
		if (!inaMapping.getBooleanByKeyExt("ReturnOriginKeys", true))
		{
			dimensionMapping.setIsReturningOriginKeys(false);
		}
		for (var dimMapIdx = 0; dimMapIdx < inaDimensionMappings.size(); dimMapIdx++)
		{
			var inaDimensionMapping = inaDimensionMappings.getStructureAt(dimMapIdx);
			var queryAliasName = inaDimensionMapping.getStringByKey("AliasName");
			var name = oFF.XCmdDeserializeBlendingResult.getNameFromMappingDefinition(inaDimensionMapping);
			if (oFF.isNull(name))
			{
				var value = oFF.XCmdDeserializeBlendingResult.getNameFromConstantMappingDefinition(inaDimensionMapping);
				dimensionMapping.addNewConstantMapping(value, queryAliasName);
			}
			else
			{
				dimensionMapping.addNewDimensionMappingDefinitionByName(name, queryAliasName);
			}
		}
		var inaAttributeMappings = inaMapping.getListByKey("AttributeMappings");
		if (oFF.notNull(inaAttributeMappings))
		{
			for (var attMapIdx = 0; attMapIdx < inaAttributeMappings.size(); attMapIdx++)
			{
				var inaAttributeMapping = inaAttributeMappings.getStructureAt(attMapIdx);
				var attributeName = inaAttributeMapping.getStringByKey("AttributeName");
				var isLinkKey = inaAttributeMapping.getBooleanByKey("IsLinkKey");
				var attributeMapping = dimensionMapping.addNewAttributeMappingByName(attributeName, isLinkKey);
				var inaAttributeDefinitions = inaAttributeMapping.getListByKey("Mapping");
				for (var attDefIdx = 0; attDefIdx < inaAttributeDefinitions.size(); attDefIdx++)
				{
					var inaAttributeDefinition = inaAttributeDefinitions.getStructureAt(attDefIdx);
					var nameAtt = oFF.XCmdDeserializeBlendingResult.getNameFromMappingDefinition(inaAttributeDefinition);
					var queryAliasNameAtt = inaAttributeDefinition.getStringByKey("AliasName");
					if (oFF.isNull(nameAtt))
					{
						var constantMappingValue = oFF.XCmdDeserializeBlendingResult.getNameFromConstantMappingDefinition(inaAttributeDefinition);
						dimensionMapping.addNewConstantMapping(constantMappingValue, queryAliasNameAtt);
					}
					else
					{
						attributeMapping.addAttributeMappingDefinition(oFF.BlendingMappingDefinition.createAttributeMapping(nameAtt, queryAliasNameAtt));
					}
				}
			}
		}
	}
	return blendingDefinition;
};
oFF.XCmdDeserializeBlendingResult.getNameFromMappingDefinition = function(inaMapping)
{
	var inaMappingDefinition = inaMapping.getStructureByKey("MappingDefinition");
	if (inaMappingDefinition.containsKey("Member"))
	{
		var inaMember = inaMappingDefinition.getStructureByKey("Member");
		return inaMember.getStringByKey("Name");
	}
	return null;
};
oFF.XCmdDeserializeBlendingResult.getNameFromConstantMappingDefinition = function(inaMapping)
{
	var inaMappingDefinition = inaMapping.getStructureByKey("MappingDefinition");
	if (inaMappingDefinition.containsKey("Constant"))
	{
		var inaMember = inaMappingDefinition.getStructureByKey("Constant");
		return inaMember.getStringByKey("Value");
	}
	return null;
};
oFF.XCmdDeserializeBlendingResult.prototype.importSourceQueryModel = function(application, sourceQueryModel, queryAlias, customIdentifier)
{
	this.m_queryManagers.add(null);
	var inaDefiningContext = sourceQueryModel.getStructureByKey("DefiningContext");
	var inaDefinition = inaDefiningContext.getStructureByKey("Definition");
	var inaDataSource = inaDefinition.getStructureByKey("DataSource");
	var commandFactory = oFF.XCommandFactory.create(application);
	var command;
	if (inaDataSource.containsKey("Mappings"))
	{
		command = commandFactory.createCommand(oFF.CmdDeserializeBlending.CMD_NAME);
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION));
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS));
		command.addParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM, this.getParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM));
		command.addParameterString(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY, inaDefinition.toString());
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO));
	}
	else
	{
		command = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY, inaDefinition);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, this.getSystemName(queryAlias));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, this.getDataSourceName(inaDataSource));
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO));
	}
	command.processCommand(this.getSyncType(), this, customIdentifier);
};
oFF.XCmdDeserializeBlendingResult.prototype.onQueryManagerImported = function(commandResult, index)
{
	this.m_queryManagers.set(index, commandResult.getResultParameter(oFF.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER));
};
oFF.XCmdDeserializeBlendingResult.prototype.onAllQueryManagersImported = function()
{
	var inaMappings = this.m_rootElement.getStructureByKey("DataSource").getListByKey("Mappings");
	var blendingDefinition = oFF.XCmdDeserializeBlendingResult.createBlendingDefinition(this.m_queryManagers, this.m_aliases, inaMappings);
	var application = this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION);
	var serviceConfig = oFF.QueryServiceConfig.createWithBlendingDefinition(application, blendingDefinition);
	var experimentalFeatures = this.m_rootElement.getStringByKeyExt("ExperimentalFeatures", null);
	var capabilitiesToSwitch = this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
	oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};
oFF.XCmdDeserializeBlendingResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		var strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
		var deserializeExt = queryManager.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, strQueryModel);
		this.getMessageManager().addAllMessages(deserializeExt);
		this.addResultParameter(oFF.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};

oFF.XCmdDeserializeBlendingSourcesResult = function() {};
oFF.XCmdDeserializeBlendingSourcesResult.prototype = new oFF.XCmdDeserializeBlendingResultBase();
oFF.XCmdDeserializeBlendingSourcesResult.prototype._ff_c = "XCmdDeserializeBlendingSourcesResult";

oFF.XCmdDeserializeBlendingSourcesResult.CLAZZ = null;
oFF.XCmdDeserializeBlendingSourcesResult.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingSourcesResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingSourcesResult);
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.m_results = null;
oFF.XCmdDeserializeBlendingSourcesResult.prototype.m_currentIndex = 0;
oFF.XCmdDeserializeBlendingSourcesResult.prototype.releaseObject = function()
{
	oFF.XCmdDeserializeBlendingResultBase.prototype.releaseObject.call( this );
	this.m_results = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_results);
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.process = function()
{
	this.m_results = oFF.XList.create();
	oFF.XCmdDeserializeBlendingResultBase.prototype.process.call( this );
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.importSourceQueryModel = function(application, sourceQueryModel, queryAlias, customIdentifier)
{
	var inaDefiningContext = sourceQueryModel.getStructureByKey("DefiningContext");
	var inaDefinition = inaDefiningContext.getStructureByKey("Definition");
	var inaDataSource = inaDefinition.getStructureByKey("DataSource");
	var commandFactory = oFF.XCommandFactory.create(application);
	var command;
	if (inaDataSource.containsKey("Sources"))
	{
		command = commandFactory.createCommand(oFF.CmdDeserializeBlendingSources.CMD_NAME);
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlendingSources.PARAM_I_APPLICATION));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEMS, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEMS));
		command.addParameterString(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEM, this.getParameterString(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEM));
		command.addParameterString(oFF.CmdDeserializeBlendingSources.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY, inaDefinition.toString());
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_MODELLER_CONTENT_LIST_INA_REPOSITORY, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_MODELLER_CONTENT_LIST_INA_REPOSITORY));
	}
	else
	{
		var dataSourceName = this.getDataSourceName(inaDataSource);
		command = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY, inaDefinition);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlendingSources.PARAM_I_APPLICATION));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, this.getSystemName(queryAlias));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, dataSourceName);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO));
		var inaRepoModellerMetadata = this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_MODELLER_CONTENT_LIST_INA_REPOSITORY);
		if (oFF.notNull(inaRepoModellerMetadata))
		{
			var inaRepoModellerMetadataIter = inaRepoModellerMetadata.getIterator();
			while (inaRepoModellerMetadataIter.hasNext())
			{
				var inaModellerRepoData = inaRepoModellerMetadataIter.next();
				if (inaModellerRepoData.containsKey("DataSource"))
				{
					var inaModelDataSourceName = this.getDataSourceName(inaModellerRepoData.getStructureByKey("DataSource"));
					if (oFF.XString.isEqual(inaModelDataSourceName, dataSourceName))
					{
						command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_MODELLER_CONTENT_INA_REPOSITORY, oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_REPOSITORY, inaModellerRepoData));
						break;
					}
				}
			}
		}
	}
	this.m_results.add(null);
	command.processCommand(this.getSyncType(), this, oFF.XIntegerValue.create(this.m_currentIndex));
	this.m_currentIndex++;
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.onQueryManagerImported = function(commandResult, index)
{
	var queryManager = commandResult.getResultParameter(oFF.CmdDeserializeBlendingSources.PARAM_E_QUERY_MANAGER);
	if (oFF.notNull(queryManager))
	{
		this.m_results.set(index, oFF.XCollectionUtils.singletonList(queryManager));
	}
	else
	{
		var queryManagers = commandResult.getResultParameter(oFF.CmdDeserializeBlendingSources.PARAM_E_QUERY_MANAGERS);
		this.m_results.set(index, queryManagers);
	}
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.onAllQueryManagersImported = function()
{
	for (var i = 0; i < this.m_results.size(); i++)
	{
		this.m_queryManagers.addAll(this.m_results.get(i));
	}
	this.addResultParameter(oFF.CmdDeserializeBlendingSources.PARAM_E_QUERY_MANAGERS, this.m_queryManagers.createListCopy());
	this.onProcessFinished();
};

oFF.QCsnMdDimMembers = function() {};
oFF.QCsnMdDimMembers.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdDimMembers.prototype._ff_c = "QCsnMdDimMembers";

oFF.QCsnMdDimMembers.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEMBERS;
};
oFF.QCsnMdDimMembers.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdDimMembers.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var displayKeyField = dimension.getFlatDisplayKeyField();
	var members = dimension.getAllStructureMembers();
	var size = members.size();
	for (var i = 0; i < size; i++)
	{
		var member = members.get(i);
		var displayKeyFieldValue = member.getFieldValue(displayKeyField).getValue();
		var csnStructureMember = this.createStructureMemberElement(member, dimension.getDefaultAxisType());
		inaStructure.put(displayKeyFieldValue.getStringRepresentation(), csnStructureMember);
	}
	return inaStructure;
};
oFF.QCsnMdDimMembers.prototype.createStructureMemberElement = function(member, axisType)
{
	var structure = oFF.PrFactory.createStructure();
	structure.putBoolean(oFF.CsnConstants.A_MEASURE, true);
	structure.putString(oFF.CsnConstants.A_COMMON_LABEL, member.getText());
	structure.putNewStructure(oFF.CsnConstants.A_QUERY_AXIS).putString(oFF.CsnConstants.ENUM, oFF.QCsnConverter.lookupAxisCsn(axisType));
	var aggregationType = member.getAggregationType();
	if (oFF.notNull(aggregationType))
	{
		var csnDfAggregation = structure.putNewStructure(oFF.CsnConstants.A_DEFAULT_AGGREGATION);
		csnDfAggregation.putString(oFF.CsnConstants.ENUM, aggregationType.getName());
	}
	var numericPrecision = member.getNumericPrecision();
	if (oFF.notNull(numericPrecision))
	{
		structure.putInteger(oFF.CsnConstants.PRECISION, numericPrecision.getInteger());
	}
	var numericScale = member.getNumericScale();
	if (oFF.notNull(numericScale))
	{
		structure.putInteger(oFF.CsnConstants.SCALE, numericScale.getInteger());
	}
	var resultVisibility = member.getResultVisibility();
	if (resultVisibility === oFF.ResultVisibility.HIDDEN)
	{
		structure.putBoolean(oFF.CsnConstants.A_UI_HIDDEN, true);
	}
	var queryDataCells = member.getQueryDataCells();
	if (queryDataCells.size() === 1)
	{
		var queryDataCell = queryDataCells.get(0);
		structure.putInteger(oFF.CsnConstants.A_DECIMALS, queryDataCell.getDecimalPlaces());
		this.addCurrencyDimReference(structure, member, queryDataCell);
		this.addUnitDimReference(structure, member, queryDataCell);
	}
	return structure;
};
oFF.QCsnMdDimMembers.prototype.addCurrencyDimReference = function(structure, member, dataCell)
{
	var valueType = dataCell.getBaseValueType();
	if (valueType === oFF.XValueType.AMOUNT)
	{
		var queryModel = member.getDimension().getQueryModel();
		var currencyDimension = queryModel.getDimensionByType(oFF.DimensionType.CURRENCY);
		if (oFF.notNull(currencyDimension))
		{
			structure.putNewStructure(oFF.CsnConstants.A_ISO_CURRENCY).putString(oFF.CsnConstants.REFERENCE, this.getDimExternalName(currencyDimension));
		}
	}
};
oFF.QCsnMdDimMembers.prototype.addUnitDimReference = function(structure, member, dataCell)
{
	var valueType = dataCell.getBaseValueType();
	if (valueType === oFF.XValueType.QUANTITY)
	{
		var queryModel = member.getDimension().getQueryModel();
		var unitDimension = queryModel.getDimensionByType(oFF.DimensionType.UNIT);
		if (oFF.notNull(unitDimension))
		{
			structure.putNewStructure(oFF.CsnConstants.A_MEASURES_UNIT).putString(oFF.CsnConstants.REFERENCE, this.getDimExternalName(unitDimension));
		}
	}
};

oFF.QCsnMdDimension = function() {};
oFF.QCsnMdDimension.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdDimension.prototype._ff_c = "QCsnMdDimension";

oFF.QCsnMdDimension.getDisplay = function(dimension)
{
	var displayTypes = oFF.XListOfString.create();
	var rsFields = dimension.getMainAttribute().getDefaultResultSetFields();
	var i = 0;
	while (i < rsFields.size() && displayTypes.size() < 2)
	{
		oFF.XCollectionUtils.addIfNotPresent(displayTypes, rsFields.get(i).isKeyField() ? oFF.CsnConstants.DISPLAY_KEY : oFF.CsnConstants.DISPLAY_TEXT);
		i++;
	}
	return displayTypes.hasElements() ? oFF.XCollectionUtils.join(displayTypes, "_") : oFF.CsnConstants.DISPLAY_KEY;
};
oFF.QCsnMdDimension.getTotals = function(dimension)
{
	return dimension.isTotalsVisibilityOnDefault() ? oFF.CsnConstants.TOTALS_SHOW : oFF.CsnConstants.TOTALS_HIDE;
};
oFF.QCsnMdDimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QCsnMdDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var keyField = dimension.getFlatKeyField();
	var csnQueryDimension = inaStructure.putNewStructure(this.getDimExternalName(dimension));
	csnQueryDimension.putBoolean(oFF.CsnConstants.A_DIMENSION, true);
	csnQueryDimension.putString(oFF.CsnConstants.TYPE, oFF.CsnConstants.TYPE_ASSOCIATION);
	csnQueryDimension.putString(oFF.CsnConstants.TARGET, dimension.getName());
	this.addLength(csnQueryDimension, keyField);
	csnQueryDimension.putNewStructure(oFF.CsnConstants.A_QUERY_AXIS).putString(oFF.CsnConstants.ENUM, oFF.QCsnConverter.lookupAxisCsn(dimension.getDefaultAxisType()));
	csnQueryDimension.putNewStructure(oFF.CsnConstants.A_QUERY_DISPLAY).putString(oFF.CsnConstants.ENUM, oFF.QCsnMdDimension.getDisplay(dimension));
	csnQueryDimension.putNewStructure(oFF.CsnConstants.A_QUERY_TOTALS).putString(oFF.CsnConstants.ENUM, oFF.QCsnMdDimension.getTotals(dimension));
	csnQueryDimension.putNewList(oFF.CsnConstants.KEYS).addNewStructure().putNewList(oFF.CsnConstants.REF).addAllStrings(this.getAllKeys(dimension));
	var csnDimension = oFF.PrFactory.createStructure();
	csnDimension.putString(oFF.CsnConstants.A_COMMON_LABEL, dimension.getText());
	csnDimension.putString(oFF.CsnConstants.KIND, oFF.CsnConstants.KIND_ENTITY);
	csnDimension.putNewStructure(oFF.CsnConstants.A_DATA_CATEGORY).putString(oFF.CsnConstants.ENUM, oFF.CsnConstants.DATA_CATEGORY_DIMENSION);
	csnDimension.putString(oFF.CsnConstants.A_REPRESENTATIVE_KEY, this.getFieldName(keyField));
	this.addFields(csnDimension.putNewStructure(oFF.CsnConstants.ELEMENTS), dimension);
	return csnDimension;
};
oFF.QCsnMdDimension.prototype.addFields = function(csnElements, dimension)
{
	var keyField = dimension.getFlatKeyField();
	var textField = dimension.getFlatTextField();
	var fields = dimension.getFields();
	var size = fields.size();
	for (var i = 0; i < size; i++)
	{
		var field = fields.get(i);
		var csnElement = csnElements.putNewStructure(this.getFieldName(field));
		this.addLength(csnElement, field);
		csnElement.putString(oFF.CsnConstants.TYPE, oFF.QCsnConverter.lookupValueTypeCsn(field.getValueType(), oFF.CsnConstants.TYPE_STRING));
		if (field.isKeyField())
		{
			csnElement.putBoolean(oFF.CsnConstants.KEY, true);
			var textAttribute = field === keyField && oFF.notNull(textField) ? this.getFieldName(textField) : null;
			if (oFF.XStringUtils.isNotNullAndNotEmpty(textAttribute))
			{
				csnElement.putNewStructure(oFF.CsnConstants.A_TEXT_ATTRIBUTE).putString(oFF.CsnConstants.REFERENCE, textAttribute);
			}
		}
		else
		{
			csnElement.putNewStructure(oFF.CsnConstants.A_TEXT_FOR).putString(oFF.CsnConstants.REFERENCE, this.getFieldName(keyField));
		}
		if (!field.isFilterable())
		{
			csnElement.putBoolean(oFF.CsnConstants.A_FILTERABLE, false);
		}
	}
};
oFF.QCsnMdDimension.prototype.addLength = function(structure, field)
{
	if (field.getValueType().isString() && field.getLength() > 0)
	{
		structure.putInteger(oFF.CsnConstants.LENGTH, field.getLength());
	}
};
oFF.QCsnMdDimension.prototype.getAllKeys = function(dimension)
{
	var keys = oFF.XListOfString.create();
	var keyField = dimension.getFlatKeyField();
	var fields = dimension.getFields();
	var size = fields.size();
	for (var i = 0; i < size; i++)
	{
		var field = fields.get(i);
		var type = field.getPresentationType();
		var isDefaultKeyField = field === keyField;
		var isFlatKeyField = type === oFF.PresentationType.KEY && !field.isHierarchyKeyField();
		if (isDefaultKeyField || isFlatKeyField)
		{
			keys.add(this.getFieldName(field));
		}
	}
	return keys;
};

oFF.QCsnMdDimensions = function() {};
oFF.QCsnMdDimensions.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdDimensions.prototype._ff_c = "QCsnMdDimensions";

oFF.QCsnMdDimensions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QCsnMdDimensions.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdDimensions.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var queryModel = modelComponent;
	var csnQueryDefinition = inaStructure.getStructureByKey(queryModel.getDataSource().getObjectName());
	var csnQueryElements = csnQueryDefinition.getStructureByKey(oFF.CsnConstants.ELEMENTS);
	var dimensions = queryModel.getDimensions();
	var size = dimensions.size();
	for (var i = 0; i < size; i++)
	{
		var dimension = dimensions.get(i);
		if (dimension.isMeasureStructure())
		{
			exporter.exportMembers(dimension, csnQueryElements);
		}
		else
		{
			var csnDimension = exporter.exportDimension(dimension, csnQueryElements);
			inaStructure.put(dimension.getName(), csnDimension);
		}
	}
	return inaStructure;
};

oFF.QCsnMdQuery = function() {};
oFF.QCsnMdQuery.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdQuery.prototype._ff_c = "QCsnMdQuery";

oFF.QCsnMdQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QCsnMdQuery.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QueryModel.create(olapEnv, null, oFF.QCapabilities.create());
};
oFF.QCsnMdQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var queryModel = modelComponent;
	var csnDefinitions = inaStructure.putNewStructure(oFF.CsnConstants.DEFINITIONS);
	var csnQueryDefinition = csnDefinitions.putNewStructure(queryModel.getDataSource().getObjectName());
	csnQueryDefinition.putString(oFF.CsnConstants.KIND, oFF.CsnConstants.KIND_ENTITY);
	csnQueryDefinition.putString(oFF.CsnConstants.A_COMMON_LABEL, queryModel.getText());
	csnQueryDefinition.putNewStructure(oFF.CsnConstants.ELEMENTS);
	exporter.exportDimensions(queryModel, csnDefinitions);
	exporter.exportVariables(queryModel.getVariableContainer(), inaStructure);
	return inaStructure;
};

oFF.QCsnMdVariable = function() {};
oFF.QCsnMdVariable.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdVariable.prototype._ff_c = "QCsnMdVariable";

oFF.QCsnMdVariable.prototype.getComponentType = function()
{
	return oFF.VariableType.ANY_VARIABLE;
};
oFF.QCsnMdVariable.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdVariable.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var variable = modelComponent;
	inaStructure.putString(oFF.CsnConstants.NAME, this.getVariableName(variable));
	return inaStructure;
};
oFF.QCsnMdVariable.prototype.getVariableName = function(variable)
{
	var externalName = variable.getNameExternal();
	return oFF.XStringUtils.isNotNullAndNotEmpty(externalName) ? externalName : variable.getName();
};

oFF.QCsnMdVariables = function() {};
oFF.QCsnMdVariables.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdVariables.prototype._ff_c = "QCsnMdVariables";

oFF.QCsnMdVariables.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QCsnMdVariables.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdVariables.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var variableContainer = modelComponent;
	var variables = variableContainer.getVariables();
	if (variables.hasElements())
	{
		var csnParameters = inaStructure.putNewList(oFF.CsnConstants.PARAMETERS);
		var size = variables.size();
		for (var i = 0; i < size; i++)
		{
			exporter.exportVariable(variables.get(i), csnParameters.addNewStructure());
		}
	}
	return inaStructure;
};

oFF.QInAMdBasicMeasure = function() {};
oFF.QInAMdBasicMeasure.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdBasicMeasure.prototype._ff_c = "QInAMdBasicMeasure";

oFF.QInAMdBasicMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.BASIC_MEASURE;
};
oFF.QInAMdBasicMeasure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QBasicMeasure._createBasicMeasure(context, parentComponent);
};
oFF.QInAMdBasicMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var basicMeasure = modelComponent;
	basicMeasure.setName(inaStructure.getStringByKey("Name"));
	return modelComponent;
};
oFF.QInAMdBasicMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var basicMeasure = modelComponent;
	inaStructure.putString("Name", basicMeasure.getName());
	return inaStructure;
};

oFF.QInAMdDataSource = function() {};
oFF.QInAMdDataSource.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDataSource.prototype._ff_c = "QInAMdDataSource";

oFF.QInAMdDataSource.importMd = function(importer, inaQueryModel, queryModel, context)
{
	var inaStructure = inaQueryModel;
	if (oFF.notNull(inaStructure) && !inaStructure.containsKey("DataSource"))
	{
		inaStructure = inaStructure.getStructureByKey("Analytics");
		if (oFF.notNull(inaStructure) && !inaStructure.containsKey("DataSource"))
		{
			inaStructure = inaStructure.getStructureByKey("Definition");
		}
		if (oFF.isNull(inaStructure) && inaQueryModel.containsKey("Definition"))
		{
			inaStructure = inaQueryModel.getStructureByKey("Definition");
		}
		if (oFF.isNull(inaStructure) && inaQueryModel.containsKey("ListReporting"))
		{
			inaStructure = inaQueryModel.getStructureByKey("ListReporting");
		}
	}
	var cubeInfo = null;
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("DataSource"))
	{
		cubeInfo = oFF.QInADataSource.importQd(importer, inaStructure, "DataSource", context);
		if (oFF.notNull(cubeInfo))
		{
			if (oFF.XStringUtils.isNullOrEmpty(cubeInfo.getText()))
			{
				var text = inaStructure.getStringByKey("Description");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
				{
					cubeInfo.setText(text);
				}
			}
			cubeInfo.setCreatedBy(inaStructure.getStringByKey("CreatedBy"));
			cubeInfo.setLastUpdateBy(inaStructure.getStringByKey("LastDataUpdateBy"));
			var createdOn = inaStructure.getStringByKey("CreatedOn");
			var createdOnObj = oFF.XDateTime.createDateTimeSafe(createdOn);
			cubeInfo.setCreatedOn(createdOnObj);
			var lastUpdateOn = inaStructure.getStringByKey("LastDataUpdateOn");
			if (oFF.isNull(lastUpdateOn))
			{
				lastUpdateOn = inaStructure.getStringByKey("LastDataUpdate");
			}
			var lastUpdateOnObj = oFF.XDateTime.createDateTimeSafe(lastUpdateOn);
			cubeInfo.setLastUpdateOn(lastUpdateOnObj);
			var dueDateValue = inaStructure.getStringByKey("DueDate");
			var dueDate = oFF.XDateTime.createDateTimeSafe(dueDateValue);
			cubeInfo.setDueDate(dueDate);
		}
	}
	var baseDatasource = oFF.QInADataSource.importQd(importer, inaQueryModel, "BaseDataSource", context);
	if (oFF.notNull(baseDatasource))
	{
		if (oFF.notNull(cubeInfo))
		{
			cubeInfo.setParentCubeInfo(baseDatasource);
		}
		queryModel.setBaseDataSource(baseDatasource);
		var infoProvider = oFF.QInfoProvider.createInfoProvider(queryModel, baseDatasource.getObjectName(), baseDatasource.getObjectName(), null);
		queryModel.setInfoProvider(infoProvider);
	}
	if (oFF.notNull(cubeInfo))
	{
		queryModel.setCubeInfo(cubeInfo);
	}
};
oFF.QInAMdDataSource.exportMd = function(exporter, inaStructure, queryModel)
{
	var inaDataSource = oFF.QInADataSource.exportDataSource(exporter, queryModel.getDataSource(), false, inaStructure);
	if (queryModel.getDataSource().getValidationHash() !== null)
	{
		inaDataSource.putString("ValidationHash", queryModel.getDataSource().getValidationHash());
	}
	return inaDataSource;
};
oFF.QInAMdDataSource.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDataSource.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = modelComponent;
	oFF.QInAMdDataSource.importMd(importer, inaStructure, queryModel, context);
	return modelComponent;
};
oFF.QInAMdDataSource.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var queryModel = modelComponent;
	return oFF.QInAMdDataSource.exportMd(exporter, inaStructure, queryModel);
};

oFF.QInAMdDimMembers = function() {};
oFF.QInAMdDimMembers.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDimMembers.prototype._ff_c = "QInAMdDimMembers";

oFF.QInAMdDimMembers.importMd = function(importer, dimension, inaStructure)
{
	if (dimension.supportsBasicStructureMembers())
	{
		var inaStructureMemberList = inaStructure.getListByKey("BasicMembers");
		if (oFF.isNull(inaStructureMemberList))
		{
			inaStructureMemberList = inaStructure.getListByKey("Members");
		}
		oFF.QInAMdDimMembers.importMemberDetails(importer, dimension, inaStructureMemberList);
		if (importer.hasErrors())
		{
			return;
		}
		var inaExtStructureMemberList = inaStructure.getListByKey("Extended_Members_From_MD");
		oFF.QInAMdDimMembers.importMemberDetails(importer, dimension, inaExtStructureMemberList);
		if (importer.hasErrors())
		{
			return;
		}
	}
	var orderedNamesList = oFF.PrUtils.getListProperty(inaStructure, "OrderedStructureMemberNames");
	if (oFF.notNull(orderedNamesList))
	{
		var orderedStructureMemberNames = oFF.XListOfString.create();
		var len = oFF.PrUtils.getListSize(orderedNamesList, 0);
		for (var orderedNameIndex = 0; orderedNameIndex < len; orderedNameIndex++)
		{
			var orderedNameString = oFF.PrUtils.getStringElement(orderedNamesList, orderedNameIndex);
			oFF.XObjectExt.assertNotNullExt(orderedNameString, "illegal state");
			orderedStructureMemberNames.add(orderedNameString.getString());
		}
		dimension.reOrderStructureMembers(orderedStructureMemberNames);
	}
};
oFF.QInAMdDimMembers.importMemberDetails = function(importer, dimension, inaStructureMemberList)
{
	if (oFF.notNull(inaStructureMemberList))
	{
		var fieldList = dimension.getFields();
		var keyField = dimension.getKeyField();
		var keyFieldName = keyField.getName();
		var textField = dimension.getTextField();
		var textFieldName = oFF.isNull(textField) ? null : textField.getName();
		var size = inaStructureMemberList.size();
		for (var memberIdx = 0; memberIdx < size; memberIdx++)
		{
			var inaStructureMember = inaStructureMemberList.getStructureAt(memberIdx);
			var memberName = inaStructureMember.getStringByKey(keyFieldName);
			var memberText = inaStructureMember.getStringByKey(textFieldName);
			var structureMember = null;
			if (importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				continue;
			}
			else if (dimension.getQueryModel().getModelCapabilities().supportsCustomMeasuresInMetadata())
			{
				structureMember = oFF.QInAMdDimMembers.decideMeasureTypeAndAdd(dimension, inaStructureMember, memberName, memberText);
			}
			else
			{
				structureMember = dimension.addNewBasicMeasure(memberName, memberText);
			}
			if (inaStructureMember.getBooleanByKeyExt("BasicMeasureNotFromMetadata", false))
			{
				structureMember.setNotFromMetadata();
			}
			structureMember.setIsSelectionCandidate(inaStructureMember.getBooleanByKeyExt("IsSelectionCandidate", true));
			var inaDefaultSelectedDimensions = inaStructureMember.getListByKey("DefaultSelectedDimensions");
			if (oFF.notNull(inaDefaultSelectedDimensions))
			{
				var sizeDefaultSelections = inaDefaultSelectedDimensions.size();
				for (var idxDefaultSelection = 0; idxDefaultSelection < sizeDefaultSelections; idxDefaultSelection++)
				{
					structureMember.addDefaultSelectionDimensionByName(inaDefaultSelectedDimensions.getStringAt(idxDefaultSelection));
				}
			}
			var resultCalculation = oFF.QInAConverter.lookupResultCalculation(inaStructureMember.getStringByKeyExt("ResultCalculation", null));
			structureMember.setResultCalculation(resultCalculation);
			oFF.QInAMember.importAggregationType(structureMember, inaStructureMember, false);
			if (inaStructureMember.getByKey("isModelDefinedMember") !== null)
			{
				structureMember.setModelDefinedMember(inaStructureMember.getBooleanByKey("isModelDefinedMember"));
			}
			var numericPrecision = oFF.PrUtils.getIntegerProperty(inaStructureMember, "NumericPrecision");
			if (oFF.notNull(numericPrecision))
			{
				structureMember.setNumericPrecision(numericPrecision.getInteger());
			}
			var numericScale = oFF.PrUtils.getIntegerProperty(inaStructureMember, "NumericScale");
			if (oFF.notNull(numericScale))
			{
				structureMember.setNumericScale(numericScale.getInteger());
			}
			var numericShift = oFF.PrUtils.getIntegerProperty(inaStructureMember, "NumericShift");
			if (oFF.notNull(numericShift))
			{
				structureMember.setNumericShift(numericShift.getInteger());
			}
			if (inaStructureMember.containsKey("CurrencyTranslationName"))
			{
				structureMember.setCurrencyTranslationName(inaStructureMember.getStringByKey("CurrencyTranslationName"));
			}
			var singleValueCalculation = oFF.QInAConverter.lookupSingleValueCalculation(inaStructureMember.getStringByKeyExt("SingleValueCalculation", null));
			structureMember.setSingleValueCalculation(singleValueCalculation);
			var fieldSize = fieldList.size();
			for (var fieldIdx = 0; fieldIdx < fieldSize; fieldIdx++)
			{
				var field = fieldList.get(fieldIdx);
				if (field.isCubeBlendingPropertiesField())
				{
					continue;
				}
				var name = field.getName();
				if (!inaStructureMember.containsKey(name))
				{
					continue;
				}
				var valueType = field.getValueType();
				var targetValue;
				if (inaStructureMember.hasStringByKey(name))
				{
					targetValue = oFF.XValueUtil.getValueFromString(inaStructureMember.getStringByKey(name), valueType);
				}
				else
				{
					var prElement = inaStructureMember.getByKey(name);
					targetValue = oFF.isNull(prElement) ? null : oFF.XValueUtil.convertValue(prElement.copyAsPrimitiveXValue(), valueType);
				}
				structureMember.createAndAddFieldWithValue(field, targetValue);
			}
		}
	}
};
oFF.QInAMdDimMembers.decideMeasureTypeAndAdd = function(dimension, inaStructureMember, memberName, memberText)
{
	var structureMember;
	var memberType = inaStructureMember.getIntegerByKeyExt("[Measures].[MemberType]", -1);
	if (memberType === 0)
	{
		structureMember = dimension.addNewFormulaMeasure(memberName, memberText);
	}
	else if (memberType === 1)
	{
		structureMember = dimension.addNewRestrictedMeasure(memberName, memberText);
	}
	else
	{
		structureMember = dimension.addNewBasicMeasure(memberName, memberText);
	}
	structureMember.setCreatedFromMetadata(true);
	return structureMember;
};
oFF.QInAMdDimMembers.exportMd = function(exporter, inaDimension, dimension)
{
	var basicStructureMembers = dimension.getBasicStructureMembers();
	if (oFF.notNull(basicStructureMembers))
	{
		var inaBasicMemberList = inaDimension.putNewList("BasicMembers");
		if (!(exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT))
		{
			oFF.QInAMdDimMembers.exportMemberDetails(exporter, dimension, basicStructureMembers, inaBasicMemberList);
		}
	}
	var extendedStructureMembers = dimension.getExtendedStructureMembers();
	if (oFF.XCollectionUtils.hasElements(extendedStructureMembers))
	{
		var numberOfExtendedStructureMembers = extendedStructureMembers.size();
		var basicStructureMembers2 = oFF.XListOfNameObject.create();
		for (var i = 0; i < numberOfExtendedStructureMembers; i++)
		{
			var customMember = extendedStructureMembers.get(i);
			if (customMember.isCreatedFromMetadata())
			{
				basicStructureMembers2.add(customMember);
			}
		}
		if (oFF.XCollectionUtils.hasElements(basicStructureMembers2))
		{
			var extMembersFromMD = inaDimension.putNewList("Extended_Members_From_MD");
			oFF.QInAMdDimMembers.exportMemberDetails(exporter, dimension, basicStructureMembers2, extMembersFromMD);
		}
	}
	var orderedStructureMemberNames = dimension.getOrderedStructureMemberNames();
	if (oFF.notNull(orderedStructureMemberNames))
	{
		var orderedNamesList = inaDimension.putNewList("OrderedStructureMemberNames");
		orderedNamesList.addAllStrings(orderedStructureMemberNames);
	}
};
oFF.QInAMdDimMembers.exportMemberDetails = function(exporter, dimension, basicStructureMembers, inaBasicMemberList)
{
	if (oFF.notNull(basicStructureMembers))
	{
		var fieldList = dimension.getFields();
		var fieldSize = fieldList.size();
		var textField = dimension.getTextField();
		var textFieldName = oFF.notNull(textField) ? textField.getName() : null;
		var memberSize = basicStructureMembers.size();
		for (var idxMember = 0; idxMember < memberSize; idxMember++)
		{
			var inaMember = inaBasicMemberList.addNewStructure();
			var structureMember = basicStructureMembers.get(idxMember);
			var supportsCustomMeasuresInMetatada = dimension.getModelCapabilities().supportsCustomMeasuresInMetadata();
			if (supportsCustomMeasuresInMetatada)
			{
				var inaMemberType = oFF.QInAConverter.lookupMeasureStructureMemberTypeInaForUniversalModels(structureMember.getMemberType());
				inaMember.putInteger("[Measures].[MemberType]", inaMemberType);
			}
			if (structureMember.getMemberType() === oFF.MemberType.BASIC_MEASURE)
			{
				if (structureMember.isNotFromMetadata())
				{
					inaMember.putBoolean("BasicMeasureNotFromMetadata", true);
				}
			}
			if (structureMember.isModelDefinedMember())
			{
				inaMember.putBoolean("isModelDefinedMember", true);
			}
			for (var idxField = 0; idxField < fieldSize; idxField++)
			{
				var field = fieldList.get(idxField);
				if (field.isCubeBlendingPropertiesField())
				{
					continue;
				}
				var fieldValue = structureMember.getFieldValue(field);
				if (oFF.isNull(fieldValue))
				{
					continue;
				}
				if (!structureMember.isSelectionCandidate())
				{
					inaMember.putBoolean("IsSelectionCandidate", false);
				}
				var defaultSelectedDimensions = structureMember.getDefaultSelectedDimensionNames();
				if (oFF.notNull(defaultSelectedDimensions))
				{
					var inaDefaultSelectedDimensions = inaMember.putNewList("DefaultSelectedDimensions");
					inaDefaultSelectedDimensions.addAllStrings(defaultSelectedDimensions);
				}
				oFF.QInAExportUtil.setNameIfNotNull(inaMember, "SingleValueCalculation", structureMember.getSingleValueCalculation());
				oFF.QInAExportUtil.setNameIfNotNull(inaMember, "ResultCalculation", structureMember.getResultCalculation());
				oFF.QInAExportUtil.setNameIfNotNull(inaMember, "Aggregation", structureMember.getAggregationType());
				var numericPrecision = structureMember.getNumericPrecision();
				if (oFF.notNull(numericPrecision))
				{
					inaMember.putInteger("NumericPrecision", numericPrecision.getInteger());
				}
				var numericScale = structureMember.getNumericScale();
				if (oFF.notNull(numericScale))
				{
					inaMember.putInteger("NumericScale", numericScale.getInteger());
				}
				var numericShift = structureMember.getNumericShift();
				if (oFF.notNull(numericShift))
				{
					inaMember.putInteger("NumericShift", numericShift.getInteger());
				}
				if (structureMember.getMappedCurrencyTranslationNameForInAData() !== null)
				{
					inaMember.putString("CurrencyTranslationName", structureMember.getMappedCurrencyTranslationNameForInAData());
				}
				var fieldName = field.getName();
				var valueType = fieldValue.getValueType();
				if (valueType === oFF.XValueType.STRING)
				{
					if (oFF.notNull(textFieldName) && oFF.XString.isEqual(fieldName, textFieldName) && structureMember.hasOverrideTextDefined())
					{
						inaMember.putString(fieldName, structureMember.getText());
					}
					else
					{
						inaMember.putString(fieldName, fieldValue.getString());
					}
				}
				else if (valueType === oFF.XValueType.BOOLEAN)
				{
					inaMember.putBoolean(fieldName, fieldValue.getBoolean());
				}
				else if (valueType === oFF.XValueType.INTEGER)
				{
					inaMember.putInteger(fieldName, fieldValue.getInteger());
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					inaMember.putLong(fieldName, fieldValue.getLong());
				}
				else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					inaMember.putDouble(fieldName, fieldValue.getDouble());
				}
				else
				{
					exporter.addError(oFF.ErrorCodes.INVALID_TOKEN, "Unsupported element type");
				}
			}
		}
	}
};
oFF.QInAMdDimMembers.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDimMembers.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdDimMembers.importMd(importer, modelComponent, inaStructure);
	return modelComponent;
};
oFF.QInAMdDimMembers.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdDimMembers.exportMd(exporter, inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdDimProperties = function() {};
oFF.QInAMdDimProperties.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDimProperties.prototype._ff_c = "QInAMdDimProperties";

oFF.QInAMdDimProperties.importMdNameValuePairs = function(inaStructure, dimension)
{
	var inaHierarchyProperties = oFF.PrUtils.getStructureProperty(inaStructure, "HierarchyProperties");
	if (oFF.notNull(inaHierarchyProperties))
	{
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyMaintenance", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyCreation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyCreationByReference", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyUpdate", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyCopy", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyDeletion", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchySaving", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyActivation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyExternalDimension", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyIntervals", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyReverseSign", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyStructureTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyVersionDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalMaintenance", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalCreation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalCreationByReference", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalUpdate", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalCopy", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalDeletion", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalSaving", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalActivation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalExternalDimension", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalIntervals", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalReverseSign", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalStructureTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalVersionDep", inaHierarchyProperties);
	}
	var inaMasterDataProperties = oFF.PrUtils.getStructureProperty(inaStructure, "MasterDataProperties");
	if (oFF.notNull(inaMasterDataProperties))
	{
		var masterDataMaintenance = oFF.PrUtils.getBooleanProperty(inaMasterDataProperties, "MasterDataMaintenance");
		if (oFF.notNull(masterDataMaintenance))
		{
			dimension.addNameValuePair(oFF.XNameValuePair.create("MasterDataMaintenance", oFF.XBoolean.convertToString(masterDataMaintenance.getBoolean())));
		}
	}
};
oFF.QInAMdDimProperties.importHierarchyProperties = function(dimension, propertyName, inaStructureHierarchyProperties)
{
	var booleanProperty = oFF.PrUtils.getBooleanProperty(inaStructureHierarchyProperties, propertyName);
	if (oFF.notNull(booleanProperty))
	{
		dimension.addNameValuePair(oFF.XNameValuePair.create(propertyName, oFF.XBoolean.convertToString(booleanProperty.getBoolean())));
	}
};
oFF.QInAMdDimProperties.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDimProperties.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdDimProperties.importMdNameValuePairs(inaStructure, modelComponent);
	return modelComponent;
};
oFF.QInAMdDimProperties.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};

oFF.QInAMdDimension = function() {};
oFF.QInAMdDimension.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDimension.prototype._ff_c = "QInAMdDimension";

oFF.QInAMdDimension.importDimensionGroups = function(inaStructure, dimensionMetadata)
{
	var isGrouping = inaStructure.getBooleanByKeyExt("IsDimensionGroup", false);
	dimensionMetadata.setIsGroupingDimension(isGrouping);
	var dimensionGroups = oFF.PrUtils.getListProperty(inaStructure, "DimensionGroups");
	var len = oFF.PrUtils.getListSize(dimensionGroups, 0);
	for (var j = 0; j < len; j++)
	{
		var dimensionGroup = oFF.PrUtils.getStringElement(dimensionGroups, j);
		if (oFF.notNull(dimensionGroup))
		{
			dimensionMetadata.addGroupingDimension(dimensionGroup.getString());
		}
	}
};
oFF.QInAMdDimension.importDimensionGroupNames = function(inaStructure)
{
	var dimensionGroups = oFF.PrUtils.getListProperty(inaStructure, "DimensionGroups");
	var len = oFF.PrUtils.getListSize(dimensionGroups, 0);
	if (len === 0)
	{
		return null;
	}
	var dimensionGroupNames = oFF.XStringBuffer.create();
	for (var j = 0; j < len; j++)
	{
		var dimensionGroup = oFF.PrUtils.getStringElement(dimensionGroups, j);
		if (oFF.notNull(dimensionGroup))
		{
			dimensionGroupNames.append(dimensionGroup.getString());
		}
	}
	return dimensionGroupNames.toString();
};
oFF.QInAMdDimension.exportDimensionGroup = function(inaStructure, dimension)
{
	if (dimension.isGroupingDimension())
	{
		inaStructure.putBoolean("IsDimensionGroup", true);
	}
	var groupingDimensionNames = dimension.getGroupingDimensionNames();
	if (groupingDimensionNames.hasElements())
	{
		var dimensionGroupList = inaStructure.putNewList("DimensionGroups");
		var lenGrouping = groupingDimensionNames.size();
		for (var j = 0; j < lenGrouping; j++)
		{
			dimensionGroupList.addString(groupingDimensionNames.get(j));
		}
	}
};
oFF.QInAMdDimension.importDimensionFlags = function(importer, dimension, dimensionMetadata, inaStructure)
{
	dimensionMetadata.setId(inaStructure.getIntegerByKeyExt("ID", 0));
	dimensionMetadata.setExternalName(inaStructure.getStringByKey("NameExternal"));
	dimensionMetadata.setSupportsLowerCase(oFF.PrUtils.getBooleanValueProperty(inaStructure, "LowercaseSupported", false));
	dimensionMetadata.setIsOwnerDimension(inaStructure.getBooleanByKeyExt("IsOwnerDimension", false));
	dimensionMetadata.setIsPrivate(inaStructure.getBooleanByKeyExt("Private", false));
	dimensionMetadata.setSupportsCumulative(inaStructure.getBooleanByKeyExt("SupportsCummulative", false));
	var supportsMultipleValues = oFF.PrUtils.getBooleanValueProperty(inaStructure, "MultipleValues", true);
	var selectionCapabilities = dimensionMetadata.getFilterCapabilitiesBase();
	selectionCapabilities.setSupportsMultipleValues(supportsMultipleValues);
	dimensionMetadata.setCanBeAggregated(inaStructure.getBooleanByKeyExt("CanBeAggregated", true));
	dimensionMetadata.setIsHierarchyMandatory(inaStructure.getBooleanByKeyExt("IsHierarchyMandatory", false));
	if (!dimensionMetadata.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
	{
		if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HAS_CHECK_TABLE_DEFAULT_FALSE))
		{
			dimensionMetadata.setHasCheckTable(!importer.isAbap(dimension) || inaStructure.getBooleanByKeyExt("HasCheckTable", false));
		}
		else
		{
			dimensionMetadata.setHasCheckTable(inaStructure.getBooleanByKeyExt("HasCheckTable", true));
		}
	}
};
oFF.QInAMdDimension.exportDimensionFlags = function(exporter, inaStructure, dimension)
{
	inaStructure.putString("Description", dimension.getText());
	inaStructure.putString("NameExternal", dimension.getExternalName());
	if (dimension.getId() !== 0)
	{
		inaStructure.putInteger("ID", dimension.getId());
	}
	inaStructure.putBoolean("LowercaseSupported", dimension.supportsLowerCase());
	inaStructure.putBoolean("IsOwnerDimension", dimension.isOwnerDimension());
	inaStructure.putBoolean("Private", dimension.isPrivate());
	inaStructure.putBoolean("SupportsCummulative", dimension.supportsCumulative());
	var selectionCapabilities = dimension.getFilterCapabilities();
	inaStructure.putBoolean("MultipleValues", selectionCapabilities.supportsMultipleValues());
	inaStructure.putBoolean("CanBeAggregated", dimension.canBeAggregated());
	inaStructure.putBoolean("IsHierarchyMandatory", dimension.isHierarchyMandatory());
	if (exporter.isAbap(dimension) && !dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
	{
		var hasCheckTable = dimension.getHasCheckTable();
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.HAS_CHECK_TABLE_DEFAULT_FALSE) && hasCheckTable)
		{
			inaStructure.putBoolean("HasCheckTable", true);
		}
		else if (!hasCheckTable)
		{
			inaStructure.putBoolean("HasCheckTable", false);
		}
	}
};
oFF.QInAMdDimension.importAxesConstraints = function(dimensionMetadata, inaStructure)
{
	var axisConstraints = inaStructure.getListByKey("AxisConstraints");
	if (oFF.PrUtils.isListEmpty(axisConstraints))
	{
		dimensionMetadata.addSupportedAxis(oFF.AxisType.FREE);
		dimensionMetadata.addSupportedAxis(oFF.AxisType.ROWS);
		dimensionMetadata.addSupportedAxis(oFF.AxisType.COLUMNS);
	}
	else
	{
		var size = axisConstraints.size();
		for (var axisIdx = 0; axisIdx < size; axisIdx++)
		{
			dimensionMetadata.addSupportedAxis(oFF.QInAConverter.lookupAxisType(axisConstraints.getStringAt(axisIdx)));
		}
	}
};
oFF.QInAMdDimension.exportAxesConstraints = function(inaDimension, dimension)
{
	var supportedAxesTypes = dimension.getSupportedAxesTypes().getIterator();
	var inaAxisConstaints = inaDimension.putNewList("AxisConstraints");
	while (supportedAxesTypes.hasNext())
	{
		inaAxisConstaints.addString(supportedAxesTypes.next().getName());
	}
	oFF.XObjectExt.release(supportedAxesTypes);
};
oFF.QInAMdDimension.importKeyAttributesNames = function(dimensionMetadata, capabilities, inaStructure)
{
	var inaKeyAttributes = inaStructure.getListByKey("KeyAttributes");
	if (oFF.notNull(inaKeyAttributes) && oFF.notNull(capabilities) && capabilities.supportsDimensionKeyAttributes())
	{
		var keyAttributesNames = oFF.XListOfString.create();
		var keyAttributesSize = inaKeyAttributes.size();
		for (var indx = 0; indx < keyAttributesSize; indx++)
		{
			var keyAttributName = inaKeyAttributes.getStringAt(indx);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(keyAttributName))
			{
				keyAttributesNames.add(keyAttributName);
			}
		}
		dimensionMetadata.setKeyAttributesNames(keyAttributesNames);
	}
};
oFF.QInAMdDimension.importDimensionReadModes = function(queryModel, dimension, inaStructure)
{
	var readModeManager = dimension.getReadModeManagerBase();
	if (oFF.notNull(queryModel))
	{
		oFF.QInAMdDimension.importMdReadModeSettings(inaStructure, readModeManager, oFF.QContextType.RESULT_SET, "SupportedResultSetReadModes", "SupportedResultSetMemberReadModes", "ResultSetDefaultReadMode", "DefaultResultSetReadMode", "ResultSetMemberDefaultReadMode");
	}
	oFF.QInAMdDimension.importMdReadModeSettings(inaStructure, readModeManager, oFF.QContextType.VARIABLE, "SupportedVariableReadModes", null, "DefaultVariableReadMode", null, null);
	oFF.QInAMdDimension.importMdReadModeSettings(inaStructure, readModeManager, oFF.QContextType.SELECTOR, "SupportedSelectorReadModes", null, "SelectorDefaultReadMode", "DefaultSelectorReadMode", null);
};
oFF.QInAMdDimension.addSupportedReadModes = function(supportedRsMemberReadModes, readmodeManager, context)
{
	var size = supportedRsMemberReadModes.size();
	for (var i = 0; i < size; i++)
	{
		var readMode = oFF.QInAConverter.lookupReadMode(supportedRsMemberReadModes.getStringAt(i));
		if (oFF.notNull(readMode))
		{
			readmodeManager.addSupportedReadMode(context, readMode);
		}
	}
};
oFF.QInAMdDimension.setDefaultReadmode = function(inaDimension, readmodeManager, context, defaultReadModeV1, defaultReadModeV2, defaultReadModeV3)
{
	var readModeName = inaDimension.getStringByKey(defaultReadModeV1);
	if (oFF.isNull(readModeName) && oFF.notNull(defaultReadModeV2))
	{
		readModeName = inaDimension.getStringByKey(defaultReadModeV2);
	}
	if (oFF.isNull(readModeName) && oFF.notNull(defaultReadModeV3))
	{
		readModeName = inaDimension.getStringByKey(defaultReadModeV3);
	}
	if (oFF.notNull(readModeName))
	{
		var readMode = oFF.QInAConverter.lookupReadMode(readModeName);
		if (oFF.notNull(readMode))
		{
			readmodeManager.setReadModeDefault(context, readMode, true);
		}
	}
};
oFF.QInAMdDimension.importMdReadModeSettings = function(inaDimension, readmodeManager, context, supportedReadModesV1, supportedReadModesV2, defaultReadModeV1, defaultReadModeV2, defaultReadModeV3)
{
	var inaSupportedRsMemberReadModes = inaDimension.getListByKey(supportedReadModesV1);
	if (oFF.isNull(inaSupportedRsMemberReadModes) && oFF.notNull(supportedReadModesV2))
	{
		inaSupportedRsMemberReadModes = inaDimension.getListByKey(supportedReadModesV2);
	}
	if (oFF.PrUtils.isListEmpty(inaSupportedRsMemberReadModes))
	{
		readmodeManager.addSupportedReadMode(context, oFF.QMemberReadMode.BOOKED);
		readmodeManager.addSupportedReadMode(context, oFF.QMemberReadMode.MASTER);
		readmodeManager.setReadModeDefault(context, oFF.QMemberReadMode.BOOKED, false);
	}
	else
	{
		oFF.QInAMdDimension.addSupportedReadModes(inaSupportedRsMemberReadModes, readmodeManager, context);
		oFF.QInAMdDimension.setDefaultReadmode(inaDimension, readmodeManager, context, defaultReadModeV1, defaultReadModeV2, defaultReadModeV3);
	}
};
oFF.QInAMdDimension.exportDimensionReadModes = function(exporter, inaStructure, dimension)
{
	if (exporter.isAbap(dimension))
	{
		oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.RESULT_SET, inaStructure, "SupportedResultSetReadModes", "ResultSetDefaultReadMode");
		oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.VARIABLE, inaStructure, "SupportedVariableReadModes", "DefaultVariableReadMode");
	}
	else
	{
		oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.RESULT_SET, inaStructure, "SupportedResultSetMemberReadModes", "ResultSetDefaultReadMode");
	}
	oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.SELECTOR, inaStructure, "SupportedSelectorReadModes", "SelectorDefaultReadMode");
};
oFF.QInAMdDimension.exportMdSupportedReadModes = function(dimension, context, inaStructure, inaSupportedName, inaDefaultReadModeName)
{
	if (!dimension.hasReadModeDefault(context))
	{
		return;
	}
	var sortedList = oFF.XCollectionUtils.createListOfNames(dimension.getSupportedReadModes(context));
	sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
	var inaSupportedReadModes = inaStructure.putNewList(inaSupportedName);
	inaSupportedReadModes.addAllStrings(sortedList);
	var readModeDefault = dimension.getReadModeDefault(context);
	if (oFF.notNull(readModeDefault))
	{
		inaStructure.putString(inaDefaultReadModeName, oFF.QInAConverter.lookupReadModeInA(readModeDefault));
	}
};
oFF.QInAMdDimension.exportMdSupportedSortTypes = function(exporter, inaStructure, dimension)
{
	var supportedSortTypes = dimension.getMetadata().getSupportedSortTypes();
	if (oFF.notNull(supportedSortTypes) && exporter.capabilities.supportsExtendedSort())
	{
		var inaSortTypes = inaStructure.putNewList("ExtendedSortTypes");
		var keys = supportedSortTypes.getKeysAsReadOnlyListOfString();
		var allSize = keys.size();
		for (var i = 0; i < allSize; i++)
		{
			var sortType = supportedSortTypes.getByKey(keys.get(i));
			inaSortTypes.addString(oFF.QInAConverter.lookupSortTypeInA(sortType));
		}
	}
};
oFF.QInAMdDimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QInAMdDimension.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	var myParent = parentComponent;
	if (oFF.isNull(myParent))
	{
		myParent = context.getQueryModel();
	}
	return oFF.QDimension._create(context, myParent);
};
oFF.QInAMdDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = modelComponent;
	var capabilities = dimension.getModelCapabilities();
	var dimName = inaStructure.getStringByKey("Name");
	var inaDimType = inaStructure.getIntegerByKeyExt("DimensionType", 3);
	var dimType = oFF.QInAConverter.lookupDimensionType(inaDimType);
	if (dimType === oFF.DimensionType.CALCULATED_DIMENSION)
	{
		dimension = oFF.QCalculatedDimension._createCalculatedDimension(context, parentComponent, dimName);
	}
	else if (dimType === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		dimension = oFF.QFormulaCalculatedDimension._createFormulaCalculatedDimension(context, dimName);
		oFF.QInARepoFormulaCalculatedDimension.importFormulaCalculatedDimension(importer, inaStructure, dimension, parentComponent, context);
	}
	dimension.setName(dimName);
	dimension.setText(inaStructure.getStringByKey("Description"));
	var queryModel = dimension.getQueryModel();
	var hasQueryModel = oFF.notNull(queryModel);
	var dimensionGroupNames = oFF.QInAMdDimension.importDimensionGroupNames(inaStructure);
	var cacheKey;
	if (oFF.notNull(importer.m_cacheKey))
	{
		cacheKey = oFF.QCacheKey.createCopyExt(importer.m_cacheKey, dimName, null, dimensionGroupNames);
	}
	else
	{
		cacheKey = oFF.QCacheKey.createByContextForDimension(context, dimName, dimensionGroupNames);
	}
	var isCalcDim = inaDimType < -1;
	var olapEnvironment = importer.getApplication().getOlapEnvironment();
	var dimensionMetadata = olapEnvironment.getDimensionMetadataByKey(cacheKey);
	if (oFF.isNull(dimensionMetadata) || dimType === oFF.DimensionType.DIMENSION_INCOMPLETE)
	{
		if (isCalcDim)
		{
			dimensionMetadata = dimension.getMetadataBase();
		}
		else
		{
			dimensionMetadata = oFF.QDimensionMetadata.create(cacheKey);
		}
		dimensionMetadata.setDimensionType(dimType);
		oFF.QInAMdDimension.importKeyAttributesNames(dimensionMetadata, capabilities, inaStructure);
		var dimensionVisibility = inaStructure.getIntegerByKeyExt("Visibility", -1);
		if (dimensionVisibility !== -1)
		{
			dimensionMetadata.setVisibility(oFF.DimensionVisibility._getByInaCode(dimensionVisibility));
		}
		var defaultMemberValue = inaStructure.getStringByKey("DefaultMember");
		if (oFF.notNull(defaultMemberValue))
		{
			dimensionMetadata.setDefaultMemberValue(defaultMemberValue);
		}
		oFF.QInAMdDimension.importDimensionGroups(inaStructure, dimensionMetadata);
		dimensionMetadata.setAttributeViewName(inaStructure.getStringByKeyExt("ViewAttributes", null));
		if (importer.capabilities.supportsCustomDimensionMemberExecutionStep() && (dimensionMetadata.isStructure() || dimensionMetadata.getDimensionType() === oFF.DimensionType.ACCOUNT))
		{
			dimensionMetadata.setSupportsCalculatedBeforeAggregation(true);
		}
		dimensionMetadata.setEnforceDynamicValue(inaStructure.getBooleanByKeyExt("EnforceDynamicValue", false));
		var attValueType = oFF.QInAConverter.lookupValueType(inaStructure.getStringByKey("DataType"));
		if (attValueType !== oFF.XValueType.UNSUPPORTED)
		{
			dimensionMetadata.setValueType(attValueType);
		}
		oFF.QInAMdDimension.importDimensionFlags(importer, dimension, dimensionMetadata, inaStructure);
		if (hasQueryModel)
		{
			oFF.QInAMdDimension.importAxesConstraints(dimensionMetadata, inaStructure);
			var axisDefaultName = inaStructure.getStringByKey("AxisDefault");
			if (oFF.XStringUtils.isNullOrEmpty(axisDefaultName))
			{
				axisDefaultName = inaStructure.getStringByKey("Axis");
			}
			var axisDefault;
			if (oFF.isNull(axisDefaultName))
			{
				axisDefault = oFF.AxisType.FREE;
			}
			else
			{
				axisDefault = oFF.QInAConverter.lookupAxisType(axisDefaultName);
			}
			if (dimType !== oFF.DimensionType.DIMENSION_INCOMPLETE && !dimensionMetadata.supportsAxis(axisDefault))
			{
				var supportedAxesTypes = dimensionMetadata.getSupportedAxesTypes();
				var iterator = supportedAxesTypes.getIterator();
				if (iterator.hasNext())
				{
					axisDefault = iterator.next();
				}
				oFF.XObjectExt.release(iterator);
			}
			dimensionMetadata.setDefaultAxisType(axisDefault);
		}
		if (!isCalcDim)
		{
			olapEnvironment.setDimensionMetadata(dimensionMetadata);
		}
		var inaSortTypes = inaStructure.getListByKey("ExtendedSortTypes");
		if (importer.capabilities.supportsExtendedSort() && oFF.notNull(inaSortTypes))
		{
			var sortTypes = oFF.XSetOfNameObject.create();
			var sortSize = inaSortTypes.size();
			for (var i = 0; i < sortSize; i++)
			{
				var sortType = oFF.QInAConverter.lookupSortType(inaSortTypes.getStringAt(i));
				if (oFF.notNull(sortType))
				{
					sortTypes.add(sortType);
				}
			}
			dimensionMetadata.setSupportedSortTypes(sortTypes);
		}
	}
	if (!isCalcDim)
	{
		dimension.setMetadata(dimensionMetadata);
	}
	dimension.setDimensionType(dimType);
	if (!importer.capabilities.supportsExtendedSort() && hasQueryModel && !importer.isVirtualInA(queryModel))
	{
		if (!dimension.isMeasureStructure())
		{
			var sortingManager = queryModel.getSortingManagerBase();
			sortingManager.addSupportedSortType(oFF.SortType.FIELD);
			sortingManager.addSupportedSortType(oFF.SortType.MEMBER_KEY);
			sortingManager.addSupportedSortType(oFF.SortType.MEMBER_TEXT);
		}
	}
	oFF.QInAMdFieldsList.importMd(importer, inaStructure, dimension);
	oFF.QInAMdFieldsAttributes.importMd(dimension, inaStructure);
	oFF.QInAMdFieldsRoles.importMd(importer, inaStructure, dimension);
	oFF.QInAMdFilterCapability.updateFilterCapabilities(dimension);
	oFF.QInAMdFieldsResultSet.importMd(importer, inaStructure, dimension);
	oFF.QInAMdDimMembers.importMd(importer, dimension, inaStructure);
	oFF.QInAMdDimension.importDimensionReadModes(queryModel, dimension, inaStructure);
	oFF.QInAMdHierarchy.importMdHierarchy(importer, inaStructure, dimension);
	oFF.QInAMdDimProperties.importMdNameValuePairs(inaStructure, dimension);
	return dimension;
};
oFF.QInAMdDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var dimName = dimension.getName();
	inaStructure.putString("Name", dimName);
	var dimensionVisibility = dimension.getVisibility();
	if (oFF.notNull(dimensionVisibility))
	{
		inaStructure.putInteger("Visibility", dimensionVisibility._getInaCode());
	}
	var defaultMemberValue = dimension.getDefaultMemberValue();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultMemberValue))
	{
		inaStructure.putString("DefaultMember", defaultMemberValue);
	}
	var dimType = oFF.QInAConverter.lookupDimensionTypeInA(dimension.getDimensionType());
	inaStructure.putInteger("DimensionType", dimType);
	inaStructure.putStringNotNull("ViewAttributes", dimension.getAttributeViewName());
	var axisType = dimension.getDefaultAxisType();
	var inaAxisType = oFF.QInAConverter.lookupAxisTypeInA(axisType);
	inaStructure.putString("AxisDefault", inaAxisType);
	oFF.QInAMdDimension.exportDimensionFlags(exporter, inaStructure, dimension);
	oFF.QInAMdDimMembers.exportMd(exporter, inaStructure, dimension);
	if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		oFF.QInARepoFormulaCalculatedDimension.exportFormulaDimensionParts(exporter, inaStructure, dimension);
	}
	else
	{
		if (!dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
		{
			oFF.QInAMdFieldsRoles.exportMd(inaStructure, dimension);
		}
		oFF.QInAMdFieldsList.exportMd(exporter, inaStructure, dimension);
		oFF.QInAMdFieldsResultSet.exportMd(inaStructure, dimension);
		oFF.QInAMdFieldsAttributes.exportMd(inaStructure, dimension);
	}
	oFF.QInAMdDimension.exportDimensionGroup(inaStructure, dimension);
	oFF.QInAMdHierarchy.exportMdHierarchy(exporter, inaStructure, dimension);
	oFF.QInAMdDimension.exportAxesConstraints(inaStructure, dimension);
	oFF.QInAMdDimension.exportDimensionReadModes(exporter, inaStructure, dimension);
	oFF.QInAMdDimension.exportMdSupportedSortTypes(exporter, inaStructure, dimension);
	inaStructure.putBoolean("EnforceDynamicValue", dimension.isEnforcedDynamicValue());
	inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(dimension.getValueType()));
	return inaStructure;
};

oFF.QInAMdDrillManager = function() {};
oFF.QInAMdDrillManager.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDrillManager.prototype._ff_c = "QInAMdDrillManager";

oFF.QInAMdDrillManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QInAMdDrillManager.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QFactory.createDrillManager(context);
};
oFF.QInAMdDrillManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var supports = importer.capabilities.supportsHierarchyNavCounter();
	if (oFF.notNull(inaStructure))
	{
		supports = inaStructure.getBooleanByKeyExt("SupportsHierNavCounter", supports);
	}
	var drillManager = modelComponent;
	drillManager.setSupportsDrillCounter(supports);
	return drillManager;
};
oFF.QInAMdDrillManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var drillManager = modelComponent;
	inaStructure.putBoolean("SupportsHierNavCounter", drillManager.supportsDrillCounter());
	return inaStructure;
};

oFF.QInAMdExceptionAggregationManager = function() {};
oFF.QInAMdExceptionAggregationManager.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdExceptionAggregationManager.prototype._ff_c = "QInAMdExceptionAggregationManager";

oFF.QInAMdExceptionAggregationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER;
};
oFF.QInAMdExceptionAggregationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var excpAggrManager = modelComponent;
	if (oFF.notNull(inaStructure) && oFF.notNull(excpAggrManager))
	{
		excpAggrManager._clear();
		var inaExcepAggrs = inaStructure.getStructureByKey("ExceptionAggregations");
		if (oFF.notNull(inaExcepAggrs))
		{
			var inaDimensionSetsList = inaExcepAggrs.getListByKey("DimensionSets");
			if (!oFF.PrUtils.isListEmpty(inaDimensionSetsList))
			{
				var inaDimensionSetsSize = inaDimensionSetsList.size();
				for (var i = 0; i < inaDimensionSetsSize; i++)
				{
					this._importDimensionSet(excpAggrManager, inaDimensionSetsList.get(i).asStructure());
				}
			}
			var inaExcepAggrGroups = inaExcepAggrs.getListByKey("AggregationGroups");
			if (!oFF.PrUtils.isListEmpty(inaExcepAggrGroups))
			{
				var inaExcepAggrSize = inaExcepAggrGroups.size();
				for (var j = 0; j < inaExcepAggrSize; j++)
				{
					this._importExceptionAggregationGroup(excpAggrManager, inaExcepAggrGroups.get(j).asStructure());
				}
			}
		}
		else
		{
			excpAggrManager._setupDefaultConfigurations();
		}
	}
	return excpAggrManager;
};
oFF.QInAMdExceptionAggregationManager.prototype._importDimensionSet = function(excpAggrManager, inaDimensionSet)
{
	excpAggrManager._addDimensionSet(inaDimensionSet.getStringByKey("Name"), oFF.PrUtils.asListOfString(inaDimensionSet.getListByKey("Dimensions")));
};
oFF.QInAMdExceptionAggregationManager.prototype._importExceptionAggregationGroup = function(excpAggrManager, inaExcepAggrGroup)
{
	var groupName = inaExcepAggrGroup.getStringByKey("Name");
	var supportedDimensionSet = inaExcepAggrGroup.getStringByKeyExt("SupportedDimensions", "");
	var maxNumberOfDim = inaExcepAggrGroup.getIntegerByKeyExt("MaxNumberOfDimensions", -1);
	var inaAggregationMapList = inaExcepAggrGroup.getListByKey("AggregationMap");
	var inaAggrMapSize = inaAggregationMapList.size();
	for (var i = 0; i < inaAggrMapSize; i++)
	{
		var inaAggrMap = inaAggregationMapList.getStructureAt(i);
		var membersCode = inaAggrMap.getIntegerByKeyExt("MembersCode", excpAggrManager._getDefaultMembersCode());
		excpAggrManager._addExceptionAggregationGroup(oFF.QExceptionAggregationGroup._create(excpAggrManager, groupName, membersCode, maxNumberOfDim, supportedDimensionSet, oFF.PrUtils.asListOfString(inaAggrMap.getListByKey("AggregationTypes"))));
	}
};
oFF.QInAMdExceptionAggregationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var excpAggrManager = modelComponent;
	if (oFF.notNull(excpAggrManager))
	{
		var inaExcepAggrs = inaStructure.putNewStructure("ExceptionAggregations");
		var inaDimensionSetsList = inaExcepAggrs.putNewList("DimensionSets");
		var dimensionSets = excpAggrManager._getDimensionSets();
		var dimensionSetsKeys = dimensionSets.getKeysAsReadOnlyListOfString();
		var setsSize = dimensionSetsKeys.size();
		for (var i = 0; i < setsSize; i++)
		{
			var setName = dimensionSetsKeys.get(i);
			inaDimensionSetsList.add(this._exportDimensionSet(setName, dimensionSets.getByKey(setName)));
		}
		var inaAggrGroupsList = inaExcepAggrs.putNewList("AggregationGroups");
		var excepAggrGroups = excpAggrManager._getExceptionAggregationGroups().getKeysAsReadOnlyListOfString();
		var groupsSize = excepAggrGroups.size();
		var supportedGroups = excpAggrManager._getExceptionAggregationGroups();
		for (var j = 0; j < groupsSize; j++)
		{
			inaAggrGroupsList.add(this._exportExceptionAggregationGroup(supportedGroups.get(j)));
		}
	}
	return inaStructure;
};
oFF.QInAMdExceptionAggregationManager.prototype._exportDimensionSet = function(setName, dimensions)
{
	var dimSize = dimensions.size();
	var inaDimensionSet = oFF.PrFactory.createStructure();
	inaDimensionSet.putString("Name", setName);
	var inaDimensions = inaDimensionSet.putNewList("Dimensions");
	for (var i = 0; i < dimSize; i++)
	{
		inaDimensions.add(oFF.PrFactory.createString(dimensions.get(i)));
	}
	return inaDimensionSet;
};
oFF.QInAMdExceptionAggregationManager.prototype._exportExceptionAggregationGroup = function(excepAggrGroup)
{
	var inaExcepAggrGroup = oFF.PrFactory.createStructure();
	inaExcepAggrGroup.putString("Name", excepAggrGroup.getName());
	inaExcepAggrGroup.putString("SupportedDimensions", excepAggrGroup._getSupportedDimensionSetName());
	inaExcepAggrGroup.putInteger("MaxNumberOfDimensions", excepAggrGroup._getNumberOfAllowedDimensions());
	var inaAggrMap = oFF.PrFactory.createStructure();
	inaAggrMap.putInteger("MembersCode", excepAggrGroup._getMembersCode());
	var inaAggrTypes = inaAggrMap.putNewList("AggregationTypes");
	var supportedAggregations = excepAggrGroup._getSupportedAggregationTypeNames();
	var supportedAggrSize = supportedAggregations.size();
	for (var i = 0; i < supportedAggrSize; i++)
	{
		inaAggrTypes.add(oFF.PrFactory.createString(supportedAggregations.get(i)));
	}
	var inaAggrMapList = inaExcepAggrGroup.putNewList("AggregationMap");
	inaAggrMapList.add(inaAggrMap);
	return inaExcepAggrGroup;
};

oFF.QInAMdField = function() {};
oFF.QInAMdField.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdField.prototype._ff_c = "QInAMdField";

oFF.QInAMdField.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.QInAMdField.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QField._createField(context, parentComponent, null);
};
oFF.QInAMdField.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var field = modelComponent;
	var dimension = parentComponent;
	var fieldName = inaStructure.getStringByKey("Name");
	var isCalcDim = dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION);
	if (isCalcDim)
	{
		var calcField;
		if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			calcField = oFF.QFieldFormulaCalc._createFormulaCalcField(context, dimension, null, fieldName);
			var inaFormula = inaStructure.getStructureByKey("Formula");
			if (oFF.notNull(inaFormula))
			{
				var newFieldFormula = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inaStructure.getStructureByKey("Formula"), null, context);
				calcField.setFormulaItem(newFieldFormula);
			}
		}
		else
		{
			calcField = oFF.QFieldCalcDim._createFieldCalcDim(context, dimension, oFF.PresentationType.UNDEFINED, fieldName);
		}
		this.updatePresentationType(importer, inaStructure, calcField.getMetadataBase());
		this.updateValueType(inaStructure, calcField.getMetadataBase());
		dimension.getFieldContainerBase().addField(calcField);
		return calcField;
	}
	field.setName(fieldName);
	field.setText(inaStructure.getStringByKey("Description"));
	field.setObtainability(oFF.ObtainabilityType.lookup(inaStructure.getStringByKey("Obtainability")));
	field.setDisplayFormat(inaStructure.getStringByKey("DisplayFormat"));
	var inaTextTransformation = inaStructure.getStringByKey("TextTransformation");
	if (oFF.notNull(inaTextTransformation))
	{
		field.setTextTransformation(oFF.QInAConverter.lookupTextTransformation(inaTextTransformation));
	}
	var dimensionNameFromInA = inaStructure.getStringByKey("DimensionName");
	var cacheKey;
	if (oFF.notNull(importer.m_cacheKey))
	{
		cacheKey = oFF.QCacheKey.createCopyExt(importer.m_cacheKey, fieldName, dimensionNameFromInA, null);
	}
	else
	{
		cacheKey = oFF.QFactory.createCacheKeyForField(context, fieldName, dimensionNameFromInA);
	}
	var olapEnvironment = importer.getApplication().getOlapEnvironment();
	var fieldMetadata = olapEnvironment.getFieldMetadataByKey(cacheKey);
	var queryModel = context.getQueryModel();
	if (oFF.isNull(fieldMetadata))
	{
		fieldMetadata = oFF.QFieldMetadata.create(cacheKey);
		fieldMetadata.setAliasName(inaStructure.getStringByKey("AliasName"));
		fieldMetadata.setMappedColumnName(inaStructure.getStringByKeyExt("MappedColumn", null));
		fieldMetadata.setSqlType(inaStructure.getStringByKeyExt("SQLType", null));
		fieldMetadata.setSemanticType(inaStructure.getStringByKeyExt("SemanticType", null));
		var attValueType = this.updateValueType(inaStructure, fieldMetadata);
		if (attValueType === oFF.XValueType.UNSUPPORTED)
		{
			var dimensionName = field.getDimension().getName();
			if (queryModel.getUniversalDisplayHierarchies().getByName(dimensionName) !== null)
			{
				fieldMetadata.setValueType(oFF.XValueType.STRING);
			}
		}
		if (!this.updatePresentationType(importer, inaStructure, fieldMetadata))
		{
			return null;
		}
		fieldMetadata.setUpperBound(inaStructure.getStringByKey("UpperBound"));
		fieldMetadata.setLowerBound(inaStructure.getStringByKey("LowerBound"));
		fieldMetadata.setIsFilterable(inaStructure.getBooleanByKeyExt("IsFilterable", true));
		fieldMetadata.setIsLowerCaseEnabled(inaStructure.getBooleanByKeyExt("LowerCaseEnabled", false));
		fieldMetadata.setIsVirtualDescription(inaStructure.getBooleanByKeyExt("IsVirtualDescription", false));
		fieldMetadata.setInitialValue(inaStructure.getStringByKeyExt("InitialValue", null));
		fieldMetadata.setLength(inaStructure.getIntegerByKeyExt("Length", 0));
		fieldMetadata.setDecimals(inaStructure.getIntegerByKeyExt("Decimals", 0));
		fieldMetadata.setFixedLength(inaStructure.getIntegerByKeyExt("FixedLength", -1));
		var precision = inaStructure.getIntegerByKeyExt("FractDigits", 0);
		if (precision !== 0)
		{
			fieldMetadata.setPrecision(precision);
		}
		fieldMetadata.setIsDisplayAttributeField(inaStructure.getBooleanByKeyExt("IsDisplayAttribute", false));
		fieldMetadata.setAttributeType(inaStructure.getStringByKeyExt("AttributeType", null));
		fieldMetadata.setNavigationalAttributeDescription(inaStructure.getStringByKeyExt("NavigationalAttributeDescription", null));
		this.importDependencies(inaStructure, fieldMetadata);
		var usageTypeValue = inaStructure.getStringByKey("UsageType");
		if (oFF.notNull(usageTypeValue))
		{
			fieldMetadata.setUsageType(oFF.FieldUsageType.lookup(usageTypeValue));
		}
		var inaInfoObjectType = inaStructure.getStringByKeyExt("InfoobjType", null);
		if (oFF.notNull(inaInfoObjectType))
		{
			var infoObjectType = oFF.QInAConverter.lookupInfoObjectType(inaInfoObjectType);
			fieldMetadata.setInfoObjectType(infoObjectType);
		}
		var inaVisibilityType = inaStructure.getStringByKeyExt("VisibilityType", null);
		if (oFF.notNull(inaVisibilityType))
		{
			var visibilityType = oFF.QInAConverter.lookupVisibilityType(inaVisibilityType);
			fieldMetadata.setVisibilityType(visibilityType);
		}
		var dimensionMd = dimension.getMetadataBase();
		fieldMetadata.setDimensionMetadata(dimensionMd);
		var dimSelectionCapabilities = dimensionMd.getFilterCapabilitiesBase();
		var fieldSelectionCapability = oFF.QInAMdFilterCapability.importMd(importer, inaStructure, field, dimSelectionCapabilities, context);
		if (oFF.notNull(fieldSelectionCapability))
		{
			dimSelectionCapabilities.addFilterCapability(fieldSelectionCapability);
		}
		fieldMetadata.setMimeType(inaStructure.getStringByKey("MIMEType"));
		olapEnvironment.setFieldMetadata(fieldMetadata);
	}
	if (oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP))
	{
		if (!this.updatePresentationType(importer, inaStructure, fieldMetadata))
		{
			return null;
		}
	}
	field.setMetadata(fieldMetadata);
	return field;
};
oFF.QInAMdField.prototype.updateValueType = function(inaStructure, metadata)
{
	var inaDataType = inaStructure.getStringByKey("DataType");
	var valueType = oFF.QInAConverter.lookupValueType(inaDataType);
	metadata.setValueType(valueType);
	return valueType;
};
oFF.QInAMdField.prototype.updatePresentationType = function(importer, inaStructure, fieldMetadata)
{
	var attPresentationType = inaStructure.getStringByKey("PresentationType");
	var presentationType = oFF.QInAConverter.lookupPresentationType(attPresentationType);
	if (presentationType === oFF.PresentationType.WHY_FOUND && oFF.QInAConverter.lookupValueType(inaStructure.getStringByKey("DataType")) !== oFF.XValueType.PROPERTIES)
	{
		importer.addError(oFF.ErrorCodes.INVALID_STATE, "Why found has not properties type");
		return false;
	}
	else
	{
		fieldMetadata.setPresentationType(presentationType);
		return true;
	}
};
oFF.QInAMdField.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var field = modelComponent;
	inaStructure.putString("Name", field.getName());
	inaStructure.putString("AliasName", field.getAliasName());
	inaStructure.putString("Description", field.getText());
	inaStructure.putString("DataType", oFF.QInAConverter.lookupValueTypeInA(field.getValueType()));
	inaStructure.putString("PresentationType", oFF.QInAConverter.lookupPresentationTypeInA(field.getPresentationType()));
	var obtain = field.getObtainability();
	inaStructure.putString("Obtainability", oFF.isNull(obtain) ? null : obtain.getName());
	inaStructure.putBoolean("IsFilterable", field.isFilterable());
	inaStructure.putBoolean("IsVirtualDescription", field.isVirtualDescription());
	inaStructure.putBoolean("LowerCaseEnabled", field.isLowerCaseEnabled());
	inaStructure.putString("InitialValue", field.getInitialValue());
	inaStructure.putInteger("Length", field.getLength());
	inaStructure.putInteger("Decimals", field.getDecimals());
	inaStructure.putBoolean("IsDisplayAttribute", field.isDisplayAttributeField());
	inaStructure.putString("MappedColumn", field.getMappedColumnName());
	inaStructure.putString("AttributeType", field.getAttributeType());
	inaStructure.putString("NavigationalAttributeDescription", field.getNavigationalAttributeDescription());
	inaStructure.putStringNotNull("SQLType", field.getSqlType());
	inaStructure.putStringNotNull("SemanticType", field.getSemanticType());
	inaStructure.putString("UsageType", field.getUsageType().getName());
	inaStructure.putStringNotNull("LowerBound", field.getLowerBound());
	inaStructure.putStringNotNull("UpperBound", field.getUpperBound());
	if (field.getPrecision() !== 0)
	{
		inaStructure.putInteger("FractDigits", field.getPrecision());
	}
	var infoObjectType = field.getInfoObjectType();
	if (oFF.notNull(infoObjectType))
	{
		inaStructure.putString("InfoobjType", oFF.QInAConverter.lookupInfoObjectTypeInA(infoObjectType));
	}
	var visibilityType = field.getVisibilityType();
	if (oFF.notNull(visibilityType))
	{
		inaStructure.putString("VisibilityType", oFF.QInAConverter.lookupVisibilityTypeInA(visibilityType));
	}
	var textTransformationType = field.getTextTransformation();
	if (oFF.notNull(textTransformationType))
	{
		inaStructure.putString("TextTransformation", oFF.QInAConverter.lookupTextTransformationInA(textTransformationType));
	}
	if (!exporter.mode.isTypeOf(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE))
	{
		inaStructure.putStringNotNull("DisplayFormat", field.getDisplayFormat());
	}
	inaStructure.putStringNotNull("MIMEType", field.getMimeType());
	if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		var calcField = field;
		if (calcField.getFormulaItem() !== null)
		{
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, calcField.getFormulaItem(), inaStructure.putNewStructure("Formula"), calcField.getQueryModel());
		}
	}
	var inaDependentAttributes = inaStructure.putNewList("DependentAttributes");
	inaDependentAttributes.addAllStrings(field.getDependencyFields());
	var selectionCapabilities = field.getDimension().getFilterCapabilities();
	var selectionCapability = selectionCapabilities.getFilterCapabilitiesByField(field);
	oFF.QInAMdFilterCapability.exportMd(exporter, selectionCapability, inaStructure, field.getQueryModel());
	return inaStructure;
};
oFF.QInAMdField.prototype.importDependencies = function(inaStructure, metadata)
{
	if (oFF.notNull(inaStructure))
	{
		var inaDependentAttributes = inaStructure.getListByKey("DependentAttributes");
		if (oFF.notNull(inaDependentAttributes))
		{
			var dependentSize = inaDependentAttributes.size();
			for (var i = 0; i < dependentSize; i++)
			{
				var dependentAttribute = inaDependentAttributes.getStringAt(i);
				if (oFF.notNull(dependentAttribute))
				{
					metadata.addDependencyField(dependentAttribute);
				}
			}
		}
	}
};

oFF.QInAMdFieldsAttributes = function() {};
oFF.QInAMdFieldsAttributes.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsAttributes.prototype._ff_c = "QInAMdFieldsAttributes";

oFF.QInAMdFieldsAttributes.importMd = function(dimension, inaStructure)
{
	var udh = dimension.getUniversalDisplayHierarchy();
	var inaAttributeHierarchy = oFF.isNull(udh) ? inaStructure.getStructureByKey("AttributeHierarchy") : inaStructure;
	if (oFF.notNull(inaAttributeHierarchy))
	{
		var rootAttribute = oFF.QInAMdFieldsAttributes.importMdAttributeHierarchyNode(inaAttributeHierarchy, dimension, udh);
		if (oFF.notNull(rootAttribute))
		{
			dimension.getMetadataBase().addSupportedFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED);
			dimension.getAttributeContainerBase().setMainAttribute(rootAttribute);
		}
	}
};
oFF.QInAMdFieldsAttributes.importMdAttributeHierarchyNode = function(inaAttributeHierarchy, dimension, udh)
{
	if (oFF.isNull(inaAttributeHierarchy))
	{
		return null;
	}
	var attribute = oFF.QAttribute.createAttribute(dimension.getContext(), dimension);
	attribute.setName(inaAttributeHierarchy.getStringByKey("Name"));
	attribute.setText(inaAttributeHierarchy.getStringByKey("Description"));
	var fields = dimension.getFields();
	var defaultKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultKeyAttribute"));
	if (oFF.notNull(udh))
	{
		defaultKeyField = udh.getKeyField(dimension, inaAttributeHierarchy.getListByKey("Attributes"), "IsKey", "Name");
	}
	if (oFF.notNull(defaultKeyField))
	{
		attribute.setFlatKeyField(defaultKeyField);
	}
	var defaultDisplayKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultDisplayKeyAttribute"));
	if (oFF.notNull(udh))
	{
		defaultDisplayKeyField = udh.getDisplayKeyField(dimension);
	}
	if (oFF.notNull(defaultDisplayKeyField))
	{
		attribute.setFlatDisplayKeyField(defaultDisplayKeyField);
	}
	var defaultTextField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultTextAttribute"));
	if (oFF.notNull(udh))
	{
		defaultTextField = udh.getTextField(dimension);
	}
	if (oFF.notNull(defaultTextField))
	{
		attribute.setFlatTextField(defaultTextField);
	}
	var hierarchyKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyKeyAttribute"));
	if (oFF.notNull(hierarchyKeyField))
	{
		attribute.setHierachyKeyField(hierarchyKeyField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(defaultKeyField, hierarchyKeyField);
	}
	var hierarchyDisplayKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyDisplayKeyAttribute"));
	if (oFF.notNull(hierarchyDisplayKeyField))
	{
		attribute.setHierarchyDisplayKeyField(hierarchyDisplayKeyField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(defaultDisplayKeyField, hierarchyDisplayKeyField);
	}
	var hierarchyTextField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyTextAttribute"));
	if (oFF.notNull(hierarchyTextField))
	{
		attribute.setHierarchyTextField(hierarchyTextField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(defaultTextField, hierarchyTextField);
	}
	var hierarchyNavigationField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyNavigationAttribute"));
	if (oFF.notNull(hierarchyNavigationField))
	{
		attribute.setHierachyNavigationField(hierarchyNavigationField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(null, hierarchyNavigationField);
	}
	oFF.QInAMdFieldsAttributes.importAttributeFields(attribute, fields, inaAttributeHierarchy);
	dimension.getAttributeContainerBase().addAttributeInternal(attribute);
	var inaChildren = inaAttributeHierarchy.getListByKey("Children");
	if (oFF.notNull(inaChildren))
	{
		var childSize = inaChildren.size();
		for (var k = 0; k < childSize; k++)
		{
			var childAttribute = oFF.QInAMdFieldsAttributes.importMdAttributeHierarchyNode(inaChildren.getStructureAt(k), dimension, udh);
			attribute.addChildAttribute(childAttribute);
		}
	}
	return attribute;
};
oFF.QInAMdFieldsAttributes.setFieldUsage = function(flatField, hierarchyField)
{
	if (hierarchyField !== flatField)
	{
		if (oFF.notNull(flatField))
		{
			flatField.getMetadataBase().setUsageType(oFF.FieldUsageType.FLAT);
		}
		if (oFF.notNull(hierarchyField))
		{
			hierarchyField.getMetadataBase().setUsageType(oFF.FieldUsageType.HIERARCHY);
		}
	}
	else
	{
		if (oFF.notNull(flatField))
		{
			flatField.getMetadataBase().setUsageType(oFF.FieldUsageType.ALL);
		}
	}
};
oFF.QInAMdFieldsAttributes.importAttributeFields = function(attribute, fields, inaAttributeHierarchy)
{
	var inaFieldNames = inaAttributeHierarchy.getListByKey("AttributeNames");
	var inaDefaultResultSetAttributes = inaAttributeHierarchy.getListByKey("DefaultResultSetAttributes");
	if (oFF.notNull(inaFieldNames) && oFF.notNull(inaDefaultResultSetAttributes))
	{
		var size = inaFieldNames.size();
		var idxFieldName;
		var field;
		for (idxFieldName = 0; idxFieldName < size; idxFieldName++)
		{
			field = fields.getByKey(inaFieldNames.getStringAt(idxFieldName));
			if (oFF.notNull(field))
			{
				attribute.addFieldInternal(field);
			}
		}
		size = inaDefaultResultSetAttributes.size();
		var duplicates = oFF.XHashSetOfString.create();
		for (idxFieldName = 0; idxFieldName < size; idxFieldName++)
		{
			var fieldName = inaDefaultResultSetAttributes.getStringAt(idxFieldName);
			if (!duplicates.contains(fieldName))
			{
				duplicates.add(fieldName);
				field = attribute.getFieldByName(fieldName);
				if (oFF.notNull(field))
				{
					attribute.addDefaultResultSetField(field);
				}
			}
		}
	}
};
oFF.QInAMdFieldsAttributes.exportMd = function(inaStructure, dimension)
{
	var attributeContainer = dimension.getAttributeContainer();
	var mainAttribute = attributeContainer.getMainAttribute();
	if (oFF.notNull(mainAttribute))
	{
		var inaAttributeHierarchy = inaStructure.putNewStructure("AttributeHierarchy");
		oFF.QInAMdFieldsAttributes.exportMdAttribute(mainAttribute, inaAttributeHierarchy);
	}
	inaStructure.putString("FieldLayoutType", oFF.QInAConverter.lookupFieldLayoutTypeInA(dimension.getFieldLayoutType()));
};
oFF.QInAMdFieldsAttributes.exportMdAttribute = function(attribute, inaAttributeHierarchy)
{
	inaAttributeHierarchy.putString("Name", attribute.getName());
	inaAttributeHierarchy.putString("Description", attribute.getText());
	var maKeyField = attribute.getKeyField();
	oFF.QInAExportUtil.setNameIfNotNull(inaAttributeHierarchy, "DefaultKeyAttribute", maKeyField);
	var maTextField = attribute.getTextField();
	oFF.QInAExportUtil.setNameIfNotNull(inaAttributeHierarchy, "DefaultTextAttribute", maTextField);
	inaAttributeHierarchy.put("AttributeNames", oFF.QInAMdFieldsAttributes.exportFieldNames(attribute.getFields()));
	inaAttributeHierarchy.put("DefaultResultSetAttributes", oFF.QInAMdFieldsAttributes.exportFieldNames(attribute.getResultSetFields()));
	var childAttributes = attribute.getChildAttributes();
	var inaChildren = inaAttributeHierarchy.putNewList("Children");
	if (oFF.notNull(childAttributes))
	{
		var childAttrSize = childAttributes.size();
		for (var i = 0; i < childAttrSize; i++)
		{
			oFF.QInAMdFieldsAttributes.exportMdAttribute(childAttributes.get(i), inaChildren.addNewStructure());
		}
	}
};
oFF.QInAMdFieldsAttributes.exportFieldNames = function(fields)
{
	var inaFieldNames = oFF.PrFactory.createList();
	var size = fields.size();
	for (var m = 0; m < size; m++)
	{
		inaFieldNames.addString(fields.get(m).getName());
	}
	return inaFieldNames;
};
oFF.QInAMdFieldsAttributes.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsAttributes.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = modelComponent;
	oFF.QInAMdFieldsAttributes.importMd(dimension, inaStructure);
	return modelComponent;
};
oFF.QInAMdFieldsAttributes.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsAttributes.exportMd(inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdFieldsList = function() {};
oFF.QInAMdFieldsList.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsList.prototype._ff_c = "QInAMdFieldsList";

oFF.QInAMdFieldsList.importMd = function(importer, inaStructure, dimension)
{
	var inaFieldList = inaStructure.getListByKey("AttributesMd");
	if (oFF.isNull(inaFieldList))
	{
		inaFieldList = inaStructure.getListByKey("Attributes");
	}
	if (oFF.notNull(inaFieldList))
	{
		var len = inaFieldList.size();
		var fieldContainerBase = dimension.getFieldContainerBase();
		for (var fieldIdx = 0; fieldIdx < len; fieldIdx++)
		{
			var inaField = inaFieldList.getStructureAt(fieldIdx);
			var field = importer.importComponent(oFF.OlapComponentType.FIELD, inaField, null, dimension, dimension);
			if (oFF.notNull(field))
			{
				fieldContainerBase.addFieldInternal(field);
			}
		}
	}
};
oFF.QInAMdFieldsList.exportMd = function(exporter, inaStructure, dimension)
{
	var inaList = oFF.PrFactory.createList();
	var fields = dimension.getFields();
	var len = fields.size();
	for (var i = 0; i < len; i++)
	{
		inaList.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, fields.get(i), null, oFF.QImExFlag.DEFAULT_ALL));
	}
	inaStructure.put("AttributesMd", inaList);
};
oFF.QInAMdFieldsList.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = modelComponent;
	oFF.QInAMdFieldsList.importMd(importer, inaStructure, dimension);
	return modelComponent;
};
oFF.QInAMdFieldsList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsList.exportMd(exporter, inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdFieldsResultSet = function() {};
oFF.QInAMdFieldsResultSet.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsResultSet.prototype._ff_c = "QInAMdFieldsResultSet";

oFF.QInAMdFieldsResultSet.importMd = function(importer, inaStructure, dimension)
{
	var inaDefaultResultSetFields = inaStructure.getListByKey("DefaultResultSetAttributesMd");
	if (oFF.isNull(inaDefaultResultSetFields))
	{
		inaDefaultResultSetFields = inaStructure.getListByKey("DefaultResultSetAttributes");
	}
	var inaDefaultResultSetNodes = inaStructure.getListByKey("DefaultResultSetAttributeNodesMd");
	if (oFF.isNull(inaDefaultResultSetNodes))
	{
		inaDefaultResultSetNodes = inaStructure.getListByKey("DefaultResultSetAttributeNodes");
	}
	var fieldLayoutTypeValue = inaStructure.getStringByKey("FieldLayoutType");
	var fieldLayoutType = null;
	if (oFF.notNull(fieldLayoutTypeValue))
	{
		fieldLayoutType = oFF.QInAConverter.lookupFieldLayoutType(fieldLayoutTypeValue);
	}
	if (oFF.isNull(fieldLayoutType))
	{
		if (oFF.notNull(inaDefaultResultSetNodes) && dimension.supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED))
		{
			fieldLayoutType = oFF.FieldLayoutType.ATTRIBUTE_BASED;
		}
		else
		{
			fieldLayoutType = oFF.FieldLayoutType.FIELD_BASED;
		}
	}
	dimension.setFieldLayoutType(fieldLayoutType);
	dimension.getMetadataBase().setDefaultFieldLayoutType(fieldLayoutType);
	var resultSetFields = dimension.getResultSetFields();
	var selectorFields = dimension.getSelectorFields();
	var fieldContainerBase = dimension.getFieldContainerBase();
	if (oFF.notNull(inaDefaultResultSetFields))
	{
		var duplicateNames = oFF.XHashSetOfString.create();
		var defaultFieldSize = inaDefaultResultSetFields.size();
		for (var i = 0; i < defaultFieldSize; i++)
		{
			var fieldName = inaDefaultResultSetFields.getStringAt(i);
			if (duplicateNames.contains(fieldName))
			{
				continue;
			}
			duplicateNames.add(fieldName);
			var field = dimension.getFieldByName(fieldName);
			if (oFF.isNull(field))
			{
				importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, fieldName);
				return;
			}
			fieldContainerBase.addDefaultResultSetField(field);
			resultSetFields.addInternal(field);
			selectorFields.addInternal(field);
		}
	}
	if (oFF.notNull(inaDefaultResultSetNodes))
	{
		if (dimension.supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED))
		{
			var attributeContainer = dimension.getAttributeContainerBase();
			var rootAttribute = attributeContainer.getMainAttribute();
			if (oFF.notNull(rootAttribute))
			{
				var resultSetAttributes = attributeContainer.getResultSetAttributes();
				var selectorAttributes = attributeContainer.getSelectorAttributes();
				if (fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
				{
					resultSetFields.clear();
					selectorFields.clear();
				}
				var defaultNodeSize = inaDefaultResultSetNodes.size();
				for (var k = 0; k < defaultNodeSize; k++)
				{
					var attribute = attributeContainer.getAttributeByName(inaDefaultResultSetNodes.getStringAt(k));
					if (oFF.notNull(attribute))
					{
						attributeContainer.addDefaultResultSetAttribute(attribute);
						resultSetAttributes.add(attribute);
						selectorAttributes.add(attribute);
						if (fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
						{
							var attributeResultSetFields = attribute.getResultSetFields();
							var attributeSize = attributeResultSetFields.size();
							for (var m = 0; m < attributeSize; m++)
							{
								var field2 = attributeResultSetFields.get(m);
								resultSetFields.add(field2);
								selectorFields.add(field2);
							}
						}
					}
				}
			}
		}
	}
	var isFixed = inaStructure.getBooleanByKeyExt("ResultSetFixedAttributes", false);
	fieldContainerBase.setHasFixedResultSetFields(isFixed);
	resultSetFields.setIsFixed(isFixed);
	selectorFields.setIsFixed(isFixed);
	if (!inaStructure.containsKey("FieldLayoutType"))
	{
		if (inaStructure.containsKey("DefaultResultSetAttributes"))
		{
			fieldContainerBase.clearDefaultResultSetFields();
		}
		else if (!inaStructure.containsKey("ResultSetFields"))
		{
			if (dimension.supportsFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED))
			{
				dimension.setFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED);
				dimension.getMetadataBase().setDefaultFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED);
				fieldContainerBase.clearDefaultResultSetFields();
				var dimResultSetFields = dimension.getResultSetFields();
				var resultSize = dimResultSetFields.size();
				for (var s = 0; s < resultSize; s++)
				{
					fieldContainerBase.addDefaultResultSetField(dimResultSetFields.get(s));
				}
			}
		}
	}
};
oFF.QInAMdFieldsResultSet.exportMd = function(inaStructure, dimension)
{
	var inaDefaultResultSetFields = inaStructure.putNewList("DefaultResultSetAttributesMd");
	var resultSetFields = dimension.getDefaultResultSetFields();
	var resultFieldSize = resultSetFields.size();
	for (var i = 0; i < resultFieldSize; i++)
	{
		inaDefaultResultSetFields.addString(resultSetFields.get(i).getName());
	}
	if (dimension.supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED))
	{
		var attributeContainer = dimension.getAttributeContainer();
		var resultSetAttributes = attributeContainer.getDefaultResultSetAttributes();
		var inaDefaultResultSetNodes = inaStructure.putNewList("DefaultResultSetAttributeNodesMd");
		var resultAttributeSize = resultSetAttributes.size();
		for (var j = 0; j < resultAttributeSize; j++)
		{
			inaDefaultResultSetNodes.addString(resultSetAttributes.get(j).getName());
		}
	}
	inaStructure.putBoolean("ResultSetFixedAttributes", dimension.hasFixedResultSetFields());
};
oFF.QInAMdFieldsResultSet.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsResultSet.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = modelComponent;
	oFF.QInAMdFieldsResultSet.importMd(importer, inaStructure, dimension);
	return modelComponent;
};
oFF.QInAMdFieldsResultSet.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsResultSet.exportMd(inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdFieldsRoles = function() {};
oFF.QInAMdFieldsRoles.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsRoles.prototype._ff_c = "QInAMdFieldsRoles";

oFF.QInAMdFieldsRoles.getFieldBySuffix = function(suffix, dimension)
{
	var fields = dimension.getFields();
	var size = fields.size();
	for (var i = 0; i < size; i++)
	{
		var field = fields.get(i);
		var isFieldWithSuffix = oFF.XString.endsWith(field.getName(), suffix);
		if (isFieldWithSuffix)
		{
			return field;
		}
	}
	return null;
};
oFF.QInAMdFieldsRoles.importMd = function(importer, inaStructure, dimension)
{
	var inaFieldDefaults = inaStructure.getStructureByKey("FieldDefaults");
	var inaFieldRoles = oFF.isNull(inaFieldDefaults) ? inaStructure : inaFieldDefaults;
	var flatKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("KeyAttribute"));
	var flatTextField = dimension.getFieldByName(inaFieldRoles.getStringByKey("TextAttribute"));
	var flatDisplayKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("DisplayKeyAttribute"));
	var hierKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyKeyAttribute"));
	var hierTextField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyTextAttribute"));
	var hierDisplayKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyDisplayKeyAttribute"));
	var hierPathField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyPathAttribute"));
	var hierarchyNavigationField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyNavigationAttribute"));
	if (oFF.isNull(hierarchyNavigationField))
	{
		var inaAttributeHierarchy = inaFieldRoles.getStructureByKey("AttributeHierarchy");
		if (oFF.notNull(inaAttributeHierarchy))
		{
			hierarchyNavigationField = dimension.getFieldByName(inaAttributeHierarchy.getStringByKey("HierarchyNavigationAttribute"));
		}
	}
	var fieldContainerBase = dimension.getFieldContainerBase();
	if (importer.capabilities.supportsSpatialChoropleth())
	{
		fieldContainerBase.setGeoShapeField(dimension.getFieldByName(inaFieldRoles.getStringByKey("GeoShapeAttribute")));
		fieldContainerBase.setGeoPointField(dimension.getFieldByName(inaFieldRoles.getStringByKey("GeoPointAttribute")));
		fieldContainerBase.setGeoLevelField(dimension.getFieldByName(inaFieldRoles.getStringByKey("GeoLevelAttribute")));
		fieldContainerBase.setGeoAreaNameField(dimension.getFieldByName(inaFieldRoles.getStringByKey("TextAttribute")));
	}
	var blendingPropertiesField = null;
	if (oFF.isNull(inaFieldDefaults))
	{
		if (oFF.isNull(hierPathField))
		{
			if (!importer.capabilities.supportsHierarchyPathPresentationType())
			{
				hierPathField = oFF.QInAMdFieldsRoles.getFieldBySuffix(".path", dimension);
			}
			else
			{
				hierPathField = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_PATH);
			}
		}
		if (importer.capabilities.supportsCubeBlendingProperties())
		{
			blendingPropertiesField = oFF.QInAMdFieldsRoles.getFieldBySuffix(".cubeBlendingProperties", dimension);
		}
		var attributeContainer = dimension.getAttributeContainer();
		var rootAttribute = attributeContainer.getMainAttribute();
		if (oFF.notNull(rootAttribute))
		{
			flatKeyField = rootAttribute.getKeyField();
			flatDisplayKeyField = rootAttribute.getDisplayKeyField();
			flatTextField = rootAttribute.getTextField();
			if (importer.capabilities.supportsHierarchyAttHierFields())
			{
				hierKeyField = rootAttribute.getHierarchyKeyField();
				hierTextField = rootAttribute.getHierarchyTextField();
				hierDisplayKeyField = rootAttribute.getHierarchyDisplayKeyField();
			}
		}
		if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
		{
			if (oFF.isNull(flatKeyField))
			{
				flatKeyField = dimension.getFirstFieldByType(oFF.PresentationType.KEY);
			}
			if (oFF.isNull(flatDisplayKeyField))
			{
				flatDisplayKeyField = dimension.getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY);
			}
			if (oFF.isNull(flatTextField))
			{
				flatTextField = dimension.getFirstFieldByType(oFF.PresentationType.TEXT);
			}
			if (oFF.isNull(hierKeyField))
			{
				var hierKey = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_KEY);
				if (oFF.isNull(hierKey))
				{
					hierKeyField = flatKeyField;
				}
				else
				{
					hierKeyField = hierKey;
				}
			}
			if (oFF.isNull(hierTextField))
			{
				hierTextField = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_TEXT);
			}
			if (oFF.isNull(hierDisplayKeyField))
			{
				hierDisplayKeyField = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_DISPLAY_KEY);
			}
			if (oFF.isNull(hierTextField))
			{
				hierTextField = flatTextField;
			}
			if (oFF.isNull(hierDisplayKeyField))
			{
				hierDisplayKeyField = flatDisplayKeyField;
			}
		}
		var udh = dimension.getUniversalDisplayHierarchy();
		if (oFF.notNull(udh))
		{
			flatKeyField = udh.getKeyField(dimension, inaStructure.getListByKey("Attributes"), "IsKey", "Name");
			flatDisplayKeyField = udh.getDisplayKeyField(dimension);
			flatTextField = udh.getTextField(dimension);
		}
	}
	if (oFF.notNull(flatKeyField))
	{
		flatKeyField.getMetadataBase().setIsFlatKeyField(true);
	}
	if (oFF.notNull(flatTextField))
	{
		flatTextField.getMetadataBase().setIsFlatTextField(true);
	}
	if (oFF.notNull(hierPathField))
	{
		hierPathField.getMetadataBase().setIsHierarchyPathField(true);
	}
	if (oFF.notNull(hierKeyField))
	{
		hierKeyField.getMetadataBase().setIsHierarchyKeyField(true);
	}
	if (oFF.notNull(blendingPropertiesField))
	{
		blendingPropertiesField.getMetadataBase().setIsCubeBlendingPropertiesField(true);
	}
	if (oFF.notNull(hierarchyNavigationField))
	{
		hierarchyNavigationField.getMetadataBase().setIsHierarchyNavigationField(true);
	}
	fieldContainerBase.setFlatKeyField(flatKeyField);
	fieldContainerBase.setFlatTextField(flatTextField);
	fieldContainerBase.setFlatDisplayKeyField(flatDisplayKeyField);
	fieldContainerBase.setHierachyKeyField(hierKeyField);
	fieldContainerBase.setHierarchyTextField(hierTextField);
	fieldContainerBase.setHierarchyDisplayKeyField(hierDisplayKeyField);
	fieldContainerBase.setHierarchyPathField(hierPathField);
	fieldContainerBase.setHierachyNavigationField(hierarchyNavigationField);
	fieldContainerBase.setCubeBlendingPropertiesField(blendingPropertiesField);
};
oFF.QInAMdFieldsRoles.exportMd = function(inaStructure, dimension)
{
	var inaFieldDefaults = inaStructure.putNewStructure("FieldDefaults");
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "KeyAttribute", dimension.getFlatKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "TextAttribute", dimension.getFlatTextField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "DisplayKeyAttribute", dimension.getFlatDisplayKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyKeyAttribute", dimension.getHierarchyKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyTextAttribute", dimension.getHierarchyTextField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyDisplayKeyAttribute", dimension.getHierarchyDisplayKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyPathAttribute", dimension.getHierarchyPathField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyNavigationAttribute", dimension.getHierarchyNavigationField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "GeoShapeAttribute", dimension.getGeoShapeField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "GeoPointAttribute", dimension.getGeoPointField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "GeoLevelAttribute", dimension.getGeoLevelField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "TextAttribute", dimension.getGeoAreaNameField());
};
oFF.QInAMdFieldsRoles.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsRoles.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdFieldsRoles.importMd(importer, inaStructure, modelComponent);
	return modelComponent;
};
oFF.QInAMdFieldsRoles.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsRoles.exportMd(inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdFilterCapability = function() {};
oFF.QInAMdFilterCapability.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFilterCapability.prototype._ff_c = "QInAMdFilterCapability";

oFF.QInAMdFilterCapability.importMd = function(importer, inaStructure, field, parentContext, context)
{
	var inaFilterCapability = inaStructure.getStructureByKey("FilterCapability");
	var inaComparisonGroup;
	if (oFF.isNull(inaFilterCapability))
	{
		inaComparisonGroup = inaStructure.getStringByKeyExt("ComparisonGroup", null);
	}
	else
	{
		inaComparisonGroup = inaFilterCapability.getStringByKeyExt("ComparisonGroup", null);
	}
	var filterCapability = null;
	if (oFF.notNull(inaComparisonGroup))
	{
		var capabilityGroup = oFF.QFilterCapabilityGroup._createFilterCapabilityGroup(context, parentContext, field);
		capabilityGroup.setGroup(oFF.QInAConverter.lookupComparisonGroup(inaComparisonGroup));
		filterCapability = capabilityGroup;
	}
	else if (oFF.notNull(inaFilterCapability) && inaFilterCapability.hasElements())
	{
		var inaComparison = inaFilterCapability.getStructureByKey("Comparison");
		if (oFF.isNull(inaComparison))
		{
			var message = oFF.XStringBuffer.create();
			message.append("Metadata warning: No filter capability found for field ");
			if (oFF.notNull(field))
			{
				message.append(field.getName());
			}
			importer.addWarning(oFF.ErrorCodes.IMPORT_FILTER_CAPABILITY_NOT_FOUND, message.toString());
		}
		else
		{
			var filterCapabilityBase = oFF.QFilterCapability._createFilterCapability(context, parentContext, field);
			filterCapability = filterCapabilityBase;
			oFF.QInAMdFilterCapability.importOperators(importer, inaComparison, filterCapabilityBase, "Including", oFF.SetSign.INCLUDING);
			oFF.QInAMdFilterCapability.importOperators(importer, inaComparison, filterCapabilityBase, "Excluding", oFF.SetSign.EXCLUDING);
		}
	}
	return filterCapability;
};
oFF.QInAMdFilterCapability.importOperators = function(importer, inaComparison, filterCapabilityBase, inaName, setSign)
{
	var inaOperators = inaComparison.getListByKey(inaName);
	if (!oFF.PrUtils.isListEmpty(inaOperators))
	{
		filterCapabilityBase.addSupportedSetSign(setSign);
		var comparisonOperators = filterCapabilityBase.getModifiableSupportedComparisonOperators(setSign);
		var size = inaOperators.size();
		for (var i = 0; i < size; i++)
		{
			var inaSupportedComparisonOperator = inaOperators.getStringAt(i);
			if (oFF.notNull(inaSupportedComparisonOperator))
			{
				var comparisonOperator = oFF.QInAConverter.lookupComparison(inaSupportedComparisonOperator);
				if (oFF.isNull(comparisonOperator))
				{
					importer.addWarning(oFF.ErrorCodes.IMPORT_FILTER_CAPABILITY_UNSUPPORTED_OPERATORS, oFF.XStringUtils.concatenate3("Metadata warning: Unsupported Comparison Operator '", inaSupportedComparisonOperator, "'!"));
				}
				else
				{
					comparisonOperators.add(comparisonOperator);
				}
			}
		}
	}
};
oFF.QInAMdFilterCapability.updateFilterCapabilities = function(dimension)
{
	var hierarchyKeyField = dimension.getHierarchyKeyField();
	if (oFF.notNull(hierarchyKeyField) && !hierarchyKeyField.isFlatKeyField())
	{
		var filterCapabilities = dimension.getFilterCapabilities().getFilterCapabilitiesByField(hierarchyKeyField);
		if (oFF.notNull(filterCapabilities) && filterCapabilities.isFilterCapabilityGroup())
		{
			var filterCapabilitiesGroup = filterCapabilities;
			filterCapabilitiesGroup.setGroup(oFF.QInAConverter.switchComparisonGroupToIncludeOnly(filterCapabilitiesGroup.getGroup()));
		}
	}
};
oFF.QInAMdFilterCapability.exportMd = function(exporter, filterCapability, inaParent, queryModel)
{
	var inaStructure = oFF.PrFactory.createStructure();
	if (oFF.notNull(filterCapability))
	{
		if (filterCapability.getComponentType().isTypeOf(oFF.OlapComponentType.FILTER_CAPABILITY_GROUP))
		{
			var capabilityGroup = filterCapability;
			var inaComparisonGroup = oFF.QInAConverter.lookupComparisonGroupInA(capabilityGroup.getGroup());
			inaStructure.putString("ComparisonGroup", inaComparisonGroup);
		}
		else
		{
			var isBw = exporter.isAbap(queryModel);
			var inaComparison = inaStructure.putNewStructure("Comparison");
			oFF.QInAMdFilterCapability.exportOperators(isBw, inaComparison, filterCapability, "Including", oFF.SetSign.INCLUDING);
			oFF.QInAMdFilterCapability.exportOperators(isBw, inaComparison, filterCapability, "Excluding", oFF.SetSign.EXCLUDING);
		}
	}
	if (oFF.notNull(inaParent))
	{
		inaParent.put("FilterCapability", inaStructure);
	}
	return inaStructure;
};
oFF.QInAMdFilterCapability.exportOperators = function(isBw, inaStructure, filterCapability, inaName, setSign)
{
	if (filterCapability.supportsSetSign(setSign))
	{
		var inaOperators = inaStructure.putNewList(inaName);
		var comparisonOperators = filterCapability.getSupportedComparisonOperators(setSign);
		var size = comparisonOperators.size();
		for (var i = 0; i < size; i++)
		{
			var comparisonOperator = comparisonOperators.get(i);
			var comparison;
			if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
			{
				comparison = "NOTBETWEEN";
			}
			else
			{
				comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
			}
			inaOperators.addString(comparison);
		}
	}
};
oFF.QInAMdFilterCapability.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFilterCapability.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return oFF.QInAMdFilterCapability.importMd(importer, inaStructure, parentComponent, null, context);
};
oFF.QInAMdFilterCapability.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return oFF.QInAMdFilterCapability.exportMd(exporter, modelComponent, inaStructure, modelComponent.getQueryModel());
};

oFF.QInAMdGenericComponent = function() {};
oFF.QInAMdGenericComponent.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdGenericComponent.prototype._ff_c = "QInAMdGenericComponent";

oFF.QInAMdGenericComponent.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP;
};
oFF.QInAMdGenericComponent.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return modelComponent;
};
oFF.QInAMdGenericComponent.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var modelComponent2 = modelComponent;
	inaStructure.putString("Name", modelComponent2.getName());
	inaStructure.putString("Type", modelComponent.getComponentType().getName());
	return inaStructure;
};
oFF.QInAMdGenericComponent.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	var olapComponentType = modelComponent.getOlapComponentType();
	var ctypeValue = oFF.QInAConverter.lookupComponentTypeInA(olapComponentType);
	if (oFF.notNull(ctypeValue))
	{
		inaStructure.putString("CType", ctypeValue);
	}
	return inaStructure;
};

oFF.QInAMdHierarchy = function() {};
oFF.QInAMdHierarchy.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdHierarchy.prototype._ff_c = "QInAMdHierarchy";

oFF.QInAMdHierarchy.importMdHierarchy = function(importer, inaStructure, dimension)
{
	var hierarchyManagerBase = dimension.getHierarchyManagerBase();
	var supportsHierarchy = oFF.PrUtils.getBooleanValueProperty(inaStructure, "HierarchiesPossible", false);
	hierarchyManagerBase.setSupportsHierarchy(supportsHierarchy);
	var defaultHierarchyName = oFF.PrUtils.getStringValueProperty(inaStructure, "DefaultHierarchy", "");
	var displayHierarchyFixInFilter = oFF.PrUtils.getBooleanValueProperty(inaStructure, "DisplayHierarchyFixInFilter", false);
	hierarchyManagerBase.setDefaultHierarchyName(defaultHierarchyName);
	hierarchyManagerBase.setNumberOfHierarchies(oFF.PrUtils.getIntegerValueProperty(inaStructure, "NumberOfHierarchies", 0));
	oFF.QInAMdHierarchy.importMdHierarchyForAutoSubmit(importer, inaStructure, dimension);
	if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.ACTIVATE_DEFAULT_HIERARCHY))
	{
		if (supportsHierarchy && oFF.XStringUtils.isNotNullAndNotEmpty(defaultHierarchyName))
		{
			hierarchyManagerBase.setHierarchyName(defaultHierarchyName);
			hierarchyManagerBase.setHierarchyActive(true);
		}
	}
	hierarchyManagerBase.setDisplayHierarchyFixInFilter(displayHierarchyFixInFilter);
	var availableLevelHierarchies = oFF.PrUtils.getListProperty(inaStructure, "LevelHierarchies");
	var capabilities = dimension.getModelCapabilities();
	if (oFF.notNull(capabilities))
	{
		if (capabilities.supportsDimensionHierarchyLevels())
		{
			oFF.QInAMdHierarchy.importLevelHierarchyDetails(importer, dimension, availableLevelHierarchies);
		}
		if (capabilities.supportsSpatialChoropleth())
		{
			var inAGeoShapeHierarchies = oFF.PrUtils.getListProperty(inaStructure, "GeoShapeHierarchies");
			if (!oFF.PrUtils.isListEmpty(inAGeoShapeHierarchies))
			{
				var geoHierarchies = hierarchyManagerBase.getGeoShapeHierarchiesBase();
				oFF.QInAMdHierarchy.importEachLeveledHierarchy(importer, dimension, inAGeoShapeHierarchies, geoHierarchies);
			}
		}
		if (!capabilities.supportsHierarchyMetadata())
		{
			return;
		}
	}
	var hierarchies = oFF.PrUtils.getListProperty(inaStructure, "Hierarchies");
	var hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
	oFF.QInAMdHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchies, dimension.getName());
	hierarchyManagerBase.setHierarchies(hierarchyCatalogResult);
	if (oFF.notNull(hierarchies))
	{
		oFF.QInAMdHierarchy.importLevelHierarchyDetails(importer, dimension, hierarchies);
	}
};
oFF.QInAMdHierarchy.importMdHierarchyForAutoSubmit = function(importer, inaStructure, dimension)
{
	var inaHierarchy = inaStructure.getStructureByKey("Hierarchy");
	var queryManager = dimension.getQueryManager();
	if (oFF.notNull(inaHierarchy) && dimension.supportsHierarchy() && oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit() && queryManager.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP)
	{
		var fixInFilter = dimension.isDisplayHierarchyFixInFilter();
		dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(false);
		var nameIs = inaHierarchy.getStringByKey("NameIs");
		var isNameVariable = oFF.notNull(nameIs) && oFF.XString.isEqual("Variable", nameIs);
		var isHierarchyNamePlaceHolder = isNameVariable && oFF.QInAMdHierarchy.isMetadataWithAutoSubmitCapability(importer, queryManager);
		var hierarchyName = oFF.QInAMdHierarchy.importHierarchyName(importer, inaHierarchy, dimension, isNameVariable);
		var hierarchy = null;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
		{
			if (inaHierarchy.getBooleanByKey("IsTransient"))
			{
				hierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, hierarchyName, inaHierarchy.getStringByKey("Description"));
			}
			else if (!isHierarchyNamePlaceHolder)
			{
				hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
			}
			oFF.QInAMdHierarchy.importHierarchyDueDate(inaHierarchy, dimension, hierarchy, importer.capabilities.supportsSapDate());
			oFF.QInAMdHierarchy.importHierarchyVersion(inaHierarchy, dimension, hierarchy);
			if (!isHierarchyNamePlaceHolder)
			{
				dimension.setHierarchy(hierarchy);
				var isActive = inaHierarchy.getBooleanByKeyExt("HierarchyActive", true);
				dimension.setHierarchyActive(isActive);
				dimension.setSelectorHierarchyActive(isActive);
			}
			oFF.QInAMdHierarchy.importHierarchyDrillInfo(importer, inaHierarchy, dimension);
			dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(fixInFilter);
		}
	}
};
oFF.QInAMdHierarchy.isMetadataWithAutoSubmitCapability = function(importer, queryManager)
{
	return importer.getOriginalMode() === oFF.QModelFormat.INA_METADATA || importer.getMode() === oFF.QModelFormat.INA_METADATA && oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit() && queryManager.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP;
};
oFF.QInAMdHierarchy.importHierarchyName = function(importer, inaStructure, dimension, isNameVariable)
{
	var hierarchyName;
	if (inaStructure.hasStringByKey("Name"))
	{
		hierarchyName = inaStructure.getStringByKey("Name");
	}
	else
	{
		hierarchyName = inaStructure.getStringByKey("HierarchyName");
	}
	dimension.setUseHierarchyNameVariable(isNameVariable);
	var isHierarchyNamePlaceHolder = isNameVariable && oFF.QInAMdHierarchy.isMetadataWithAutoSubmitCapability(importer, dimension.getQueryManager());
	if (isHierarchyNamePlaceHolder)
	{
		dimension.setHierarchyNameVariableName(hierarchyName);
	}
	return hierarchyName;
};
oFF.QInAMdHierarchy.importHierarchyDueDate = function(inaStructure, dimension, hierarchy, supportsSapDate)
{
	var dueDateIs = inaStructure.getStringByKey("DueDateIs");
	var isDueDateVariable = oFF.notNull(dueDateIs) && oFF.XString.isEqual("Variable", dueDateIs);
	var dueDate = inaStructure.getStringByKey("DueDate");
	dimension.setUseHierarchyDueDateVariable(isDueDateVariable);
	if (isDueDateVariable)
	{
		dimension.setHierarchyDueDateVariableName(oFF.XStringUtils.isNullOrEmpty(dueDate) ? null : dueDate);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyDueDate(oFF.XDate.createDateFromStringWithFlag(dueDate, supportsSapDate));
	}
};
oFF.QInAMdHierarchy.importHierarchyVersion = function(inaStructure, dimension, hierarchy)
{
	var versionIs = inaStructure.getStringByKey("VersionIs");
	var isVersionVariable = oFF.notNull(versionIs) && oFF.XString.isEqual("Variable", versionIs);
	var version = inaStructure.getStringByKey("Version");
	dimension.setUseHierarchyVersionVariable(isVersionVariable);
	if (isVersionVariable)
	{
		dimension.setHierarchyVersionVariableName(oFF.XStringUtils.isNullOrEmpty(version) ? null : version);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyVersion(version);
	}
};
oFF.QInAMdHierarchy.importHierarchyDrillInfo = function(importer, inaHierarchy, dimension)
{
	var initialDrillOffset = inaHierarchy.getIntegerByKeyExt("InitialDrillOffset", 0);
	var initialDrillLevel = inaHierarchy.getIntegerByKeyExt("InitialDrillLevel", 0);
	var modelCapabilities = dimension.getModelCapabilities();
	if (modelCapabilities.supportsVisibilityFilter() || !importer.mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		dimension.setInitialDrillLevel(initialDrillLevel);
		dimension.setSelectorInitialDrillLevel(initialDrillLevel);
	}
	else
	{
		if (initialDrillLevel === -1)
		{
			dimension.setInitialDrillLevel(initialDrillLevel);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel);
		}
		else if (initialDrillOffset === -1)
		{
			dimension.setInitialDrillLevel(0);
			dimension.setSelectorInitialDrillLevel(0);
		}
		else
		{
			dimension.setInitialDrillLevel(initialDrillLevel + initialDrillOffset);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel + initialDrillOffset);
		}
	}
	dimension.setInitialDrillOffset(initialDrillOffset);
	dimension.setExplicitDrillOnFilteredNodes(inaHierarchy.getBooleanByKeyExt("ExplicitDrillOnFilteredNodes", false));
	var alignment = oFF.Alignment.DEFAULT_VALUE;
	if (modelCapabilities.supportsExpandBottomUp())
	{
		var nodeAlignment = inaHierarchy.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
		alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
		if (inaHierarchy.containsKey("ExpandBottomUp"))
		{
			var isExpandingBottomUp = inaHierarchy.getBooleanByKeyExt("ExpandBottomUp", false);
			if (isExpandingBottomUp)
			{
				alignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
			}
		}
	}
	dimension.setLowerLevelNodeAlignment(alignment);
	var nodeCondensation = inaHierarchy.getBooleanByKeyExt("NodeCondensation", false);
	dimension.setHasNodeCondensation(nodeCondensation);
	var memberOfPostedNodeVisibility = inaHierarchy.getStringByKeyExt("MemberOfPostedNodeVisibility", "Visible");
	var visibility = oFF.QInAConverter.lookupResultSetVisibility(memberOfPostedNodeVisibility);
	dimension.setMemberOfPostedNodeVisibility(visibility);
};
oFF.QInAMdHierarchy.appendItemsToCatalogResult = function(catalogResult, hierarchiesList, dimensionName)
{
	var len = oFF.PrUtils.getListSize(hierarchiesList, 0);
	for (var i = 0; i < len; i++)
	{
		var hierarchyStructure = oFF.PrUtils.getStructureElement(hierarchiesList, i);
		var item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		var hierarchyName;
		if (hierarchyStructure.hasStringByKey("Name"))
		{
			hierarchyName = hierarchyStructure.getStringByKey("Name");
		}
		else
		{
			hierarchyName = hierarchyStructure.getStringByKey("HierarchyName");
		}
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName) || catalogResult.containsHierarchy(hierarchyName))
		{
			continue;
		}
		item.setHierarchyName(hierarchyName);
		var hierarchyDescription = oFF.PrUtils.getStringProperty(hierarchyStructure, "Description");
		if (oFF.notNull(hierarchyDescription))
		{
			item.setHierarchyLongText(hierarchyDescription.getString());
		}
		var version = oFF.PrUtils.getStringProperty(hierarchyStructure, "Version");
		if (oFF.notNull(version))
		{
			item.setVersionName(version.getString());
		}
		var structure = oFF.PrUtils.getStringProperty(hierarchyStructure, "Structure");
		if (oFF.notNull(structure))
		{
			item.setHierarchyType(oFF.HierarchyType.lookup(structure.getString()));
		}
		var isModeled = oFF.PrUtils.getBooleanValueProperty(hierarchyStructure, "IsModeled", false);
		item.setIsModeled(isModeled);
		var dateTo = oFF.PrUtils.getStringProperty(hierarchyStructure, "DateTo");
		if (oFF.notNull(dateTo))
		{
			var dateToString = dateTo.getString();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToString));
			}
		}
		var levels = oFF.PrUtils.getListProperty(hierarchyStructure, "Levels");
		if (oFF.notNull(levels))
		{
			item.setSupportsHierarchyLevels(true);
			var levelList = oFF.XList.create();
			var lenLevel = oFF.PrUtils.getListSize(levels, 0);
			for (var levelIndex = 0; levelIndex < lenLevel; levelIndex++)
			{
				var levelStructure = oFF.PrUtils.getStructureElement(levels, levelIndex);
				if (oFF.isNull(levelStructure))
				{
					continue;
				}
				var catalogLevel = oFF.HierarchyCatalogLevel.createCatalogLevel();
				var level = oFF.PrUtils.getIntegerValueProperty(levelStructure, "Level", -1);
				if (level > -1)
				{
					catalogLevel.setLevel(level);
				}
				var levelName = oFF.PrUtils.getStringProperty(levelStructure, "LevelName");
				if (oFF.notNull(levelName))
				{
					catalogLevel.setLevelName(levelName.getString());
				}
				var levelCaption = oFF.PrUtils.getStringProperty(levelStructure, "LevelCaption");
				if (oFF.notNull(levelCaption))
				{
					catalogLevel.setLevelDescription(levelCaption.getString());
				}
				var levelUniqueName = oFF.PrUtils.getStringProperty(levelStructure, "LevelUniqueName");
				if (oFF.notNull(levelUniqueName))
				{
					catalogLevel.setLevelUniqueName(levelUniqueName.getString());
				}
				var levelDimensionName = oFF.PrUtils.getStringProperty(levelStructure, "DimensionName");
				if (oFF.notNull(levelDimensionName))
				{
					catalogLevel.setLevelDimensionName(levelDimensionName.getString());
				}
				var levelType = oFF.PrUtils.getIntegerProperty(levelStructure, "LevelType");
				if (oFF.notNull(levelType))
				{
					catalogLevel.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelType.getInteger()));
				}
				levelList.add(catalogLevel);
			}
			item.setHierarchyLevels(levelList);
		}
		var restNode = hierarchyStructure.getStringByKey("RestNode");
		if (oFF.notNull(restNode))
		{
			item.setRestNode(restNode);
		}
		var virtualRootNode = hierarchyStructure.getStringByKey("VirtualRootNode");
		if (oFF.notNull(virtualRootNode))
		{
			item.setVirtualRootNode(virtualRootNode);
		}
		catalogResult.addItem(item);
	}
	return catalogResult;
};
oFF.QInAMdHierarchy.importLevelHierarchyDetails = function(importer, dimension, hierarchies)
{
	if (!oFF.PrUtils.isListEmpty(hierarchies))
	{
		var metadataModel = dimension.getQueryModelBase().getQueryManagerBase().getMetadataModelBase();
		var metaHierarchies = metadataModel.getLeveledHierarchiesBase();
		oFF.QInAMdHierarchy.importEachLeveledHierarchy(importer, dimension, hierarchies, metaHierarchies);
	}
};
oFF.QInAMdHierarchy.importEachLeveledHierarchy = function(importer, dimension, hierarchies, metaHierarchies)
{
	var size = hierarchies.size();
	for (var hierIdx = 0; hierIdx < size; hierIdx++)
	{
		var hier = oFF.QInAMdHierarchy.importLeveledHierarchy(importer, dimension.getContext(), dimension, hierarchies.getStructureAt(hierIdx));
		if (!metaHierarchies.contains(hier))
		{
			metaHierarchies.add(hier);
		}
	}
};
oFF.QInAMdHierarchy.importLeveledHierarchy = function(importer, context, dimension, inaHierarchy)
{
	var hier = oFF.QLeveledHierarchy.create(context, dimension, inaHierarchy.getStringByKey(inaHierarchy.containsKey("Name") ? "Name" : "HierarchyName"));
	hier.setHierarchyUniqueName(inaHierarchy.getStringByKey("UniqueName"));
	if (inaHierarchy.getStringByKey("DimensionName") === null)
	{
		hier.setDimensionName(dimension.getName());
	}
	else
	{
		hier.setDimensionName(inaHierarchy.getStringByKey("DimensionName"));
	}
	hier.setHierarchyType(oFF.HierarchyType.lookup(inaHierarchy.getStringByKey("Structure")));
	hier.setIsModeled(inaHierarchy.getBooleanByKeyExt("IsModeled", false));
	var hierDueDate = inaHierarchy.getStringByKey("DueDate");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierDueDate))
	{
		hier.setDateTo(oFF.XDate.createDateFromStringWithFlag(hierDueDate, importer.capabilities.supportsSapDate()));
	}
	hier.setHierarchyDescription(inaHierarchy.getStringByKey("Description"));
	var inaLevels = inaHierarchy.getListByKey("Levels");
	if (!oFF.PrUtils.isListEmpty(inaLevels))
	{
		oFF.QInAMdHierarchy.importLevels(hier, inaLevels);
	}
	return hier;
};
oFF.QInAMdHierarchy.importLevels = function(hier, inaLevels)
{
	var size = inaLevels.size();
	for (var levelIdx = 0; levelIdx < size; levelIdx++)
	{
		var inaLevel = inaLevels.getStructureAt(levelIdx);
		var level = oFF.QHierarchyLevel.create(hier, inaLevel.getStringByKey("LevelUniqueName"), inaLevel.getIntegerByKey("Level"));
		level.setLevelName(inaLevel.getStringByKey("LevelName"));
		level.setLevelText(inaLevel.getStringByKey("LevelCaption"));
		level.setLevelDimensionName(inaLevel.getStringByKey("DimensionName"));
		level.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(inaLevel.getIntegerByKey("LevelType")));
		level.setNavigationAttribute(inaLevel.getStringByKey("NavAttr"));
		hier.getAllLevelBase().add(level);
	}
};
oFF.QInAMdHierarchy.exportLevelsLevelHierarchy = function(inaHierarchy, hierarchyItem)
{
	var inaLevels = inaHierarchy.putNewList("Levels");
	var hierarchyLevels = hierarchyItem.getAllLevel();
	var size = hierarchyLevels.size();
	for (var levelIdx = 0; levelIdx < size; levelIdx++)
	{
		var currentLevel = hierarchyLevels.get(levelIdx);
		var inaLevel = inaLevels.addNewStructure();
		inaLevel.putInteger("Level", currentLevel.getLevelNumber());
		inaLevel.putStringNotNull("LevelUniqueName", currentLevel.getLevelUniqueName());
		inaLevel.putString("LevelName", currentLevel.getLevelName());
		inaLevel.putString("LevelCaption", currentLevel.getLevelText());
		inaLevel.putStringNotNull("DimensionName", currentLevel.getLevelDimensionName());
		inaLevel.putInteger("LevelType", oFF.QInAConverter.lookupHierarchyLevelTypeIna(currentLevel.getLevelType()));
	}
};
oFF.QInAMdHierarchy.exportMdHierarchy = function(exporter, inaStructure, dimension)
{
	inaStructure.putBoolean("HierarchiesPossible", dimension.supportsHierarchy());
	inaStructure.putInteger("NumberOfHierarchies", dimension.getNumberOfHierarchies());
	inaStructure.putString("DefaultHierarchy", dimension.getDefaultHierarchyName());
	if (exporter.capabilities.supportsDisplayHierarchyFixInFilter())
	{
		inaStructure.putBoolean("DisplayHierarchyFixInFilter", dimension.isDisplayHierarchyFixInFilter());
	}
	var leveledHierarchies = dimension.getLeveledHierarchies();
	var modelCapabilities = dimension.getModelCapabilities();
	if (oFF.XCollectionUtils.hasElements(leveledHierarchies) && modelCapabilities.supportsDimensionHierarchyLevels())
	{
		var inaLevelHierarchies = inaStructure.putNewList("LevelHierarchies");
		var numberOfLeveledHierarchies = leveledHierarchies.size();
		for (var i = 0; i < numberOfLeveledHierarchies; i++)
		{
			oFF.QInAMdHierarchy.exportLevelHierarchyDetails(exporter, inaLevelHierarchies, leveledHierarchies.get(i));
		}
	}
	if (modelCapabilities.supportsHierarchyMetadata())
	{
		var inaHierarchies = inaStructure.putNewList("Hierarchies");
		var hierarchies = dimension.getHierarchies();
		if (oFF.notNull(hierarchies))
		{
			var hierIt = hierarchies.getObjectsIterator();
			while (hierIt.hasNext())
			{
				oFF.QInAMdHierarchy.exportHierarchyDetails(exporter, inaHierarchies, hierIt);
			}
			oFF.XObjectExt.release(hierIt);
		}
	}
};
oFF.QInAMdHierarchy.exportLevelHierarchyDetails = function(exporter, inaHierarchies, hierarchyItem)
{
	var inaHierarchy = inaHierarchies.addNewStructure();
	inaHierarchy.putString("Name", hierarchyItem.getHierarchyName());
	inaHierarchy.putString("Description", hierarchyItem.getHierarchyDescription());
	inaHierarchy.putString("DimensionName", hierarchyItem.getDimensionName());
	inaHierarchy.putString("Structure", hierarchyItem.getHierarchyType().getName());
	inaHierarchy.putBoolean("IsModeled", hierarchyItem.isModeled());
	oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", hierarchyItem.getDateTo());
	oFF.QInAMdHierarchy.exportLevelsLevelHierarchy(inaHierarchy, hierarchyItem);
};
oFF.QInAMdHierarchy.exportHierarchyDetails = function(exporter, inaHierarchies, hierIt)
{
	var hierarchyItem = hierIt.next();
	var inaHierarchy = inaHierarchies.addNewStructure();
	inaHierarchy.putString("Name", hierarchyItem.getHierarchyName());
	inaHierarchy.putString("Description", hierarchyItem.getHierarchyDescription());
	if (hierarchyItem.hasVersionName())
	{
		inaHierarchy.putString("Version", hierarchyItem.getVersionName());
	}
	var hierarchyType = hierarchyItem.getHierarchyType();
	if (hierarchyType !== oFF.HierarchyType.UNKNOWN)
	{
		inaHierarchy.putString("Structure", hierarchyType.getName());
	}
	inaHierarchy.putString("RestNode", hierarchyItem.getRestNode());
	inaHierarchy.putString("VirtualRootNode", hierarchyItem.getVirtualRootNode());
	oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", hierarchyItem.getDateTo());
	oFF.QInAMdHierarchy.exportLevels(inaHierarchy, hierarchyItem);
};
oFF.QInAMdHierarchy.exportLevels = function(inaHierarchy, hierarchyItem)
{
	if (hierarchyItem.supportsHierarchyLevels())
	{
		var inaLevels = inaHierarchy.putNewList("Levels");
		var hierarchyLevels = hierarchyItem.getHierarchyLevels();
		var size = hierarchyLevels.size();
		for (var levelIdx = 0; levelIdx < size; levelIdx++)
		{
			var currentLevel = hierarchyLevels.get(levelIdx);
			var inaLevel = inaLevels.addNewStructure();
			inaLevel.putString("LevelUniqueName", currentLevel.getLevelUniqueName());
			inaLevel.putInteger("Level", currentLevel.getLevel());
			inaLevel.putString("LevelName", currentLevel.getLevelName());
			inaLevel.putString("LevelCaption", currentLevel.getLevelDescription());
			inaLevel.putStringNotNull("DimensionName", currentLevel.getLevelDimensionName());
			inaLevel.putInteger("LevelType", oFF.QInAConverter.lookupHierarchyLevelTypeIna(currentLevel.getLevelType()));
		}
	}
};
oFF.QInAMdHierarchy.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdHierarchy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdHierarchy.importMdHierarchy(importer, inaStructure, modelComponent);
	return modelComponent;
};
oFF.QInAMdHierarchy.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdHierarchy.exportMdHierarchy(exporter, inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdQuery = function() {};
oFF.QInAMdQuery.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdQuery.prototype._ff_c = "QInAMdQuery";

oFF.QInAMdQuery.importVariants = function(inaStructure, queryModel)
{
	if (oFF.isNull(inaStructure))
	{
		return;
	}
	var queryManager = queryModel.getQueryManagerBase();
	if (oFF.isNull(queryManager))
	{
		return;
	}
	var inaVariants = inaStructure.getListByKey("VariableVariants");
	if (oFF.isNull(inaVariants))
	{
		return;
	}
	var size = inaVariants.size();
	for (var idx = 0; idx < size; idx++)
	{
		var inaVariant = inaVariants.getStructureAt(idx);
		var variant = oFF.QVariableVariant.createVariantWithScopeInternal(queryModel.getDataSource(), inaVariant.getStringByKey("Name"), inaVariant.getStringByKey("Description"), oFF.Scope.lookupByName(inaVariant.getStringByKey("Scope")));
		queryManager.addVariableVariant(variant);
	}
};
oFF.QInAMdQuery.importVariant = function(inaStructure, queryModel)
{
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	var inaVariant = inaStructure.getStructureByKey("VariableVariant");
	if (oFF.isNull(inaVariant))
	{
		return null;
	}
	return inaVariant.getStringByKey("Name");
};
oFF.QInAMdQuery.exportVariants = function(inaStructure, queryModel)
{
	var variants = queryModel.getQueryManager().getVariableVariants();
	if (oFF.XCollectionUtils.hasElements(variants))
	{
		var inaVariants = inaStructure.putNewList("VariableVariants");
		var size = variants.size();
		for (var idx = 0; idx < size; idx++)
		{
			var variant = variants.get(idx);
			var inaVariant = inaVariants.addNewStructure();
			inaVariant.putString("Name", variant.getName());
			inaVariant.putString("Description", variant.getText());
			inaVariant.putString("Scope", variant.getScope().getName());
		}
	}
};
oFF.QInAMdQuery.importPlanning = function(inaStructure, queryModel)
{
	if (oFF.PrUtils.getBooleanValueProperty(inaStructure, "SupportsDataEntryReadOnly", false))
	{
		queryModel.setSupportsDataEntryReadOnly(true);
	}
	if (oFF.PrUtils.getBooleanValueProperty(inaStructure, "DataEntryEnabled", false))
	{
		queryModel.setDataEntryEnabled(true);
	}
};
oFF.QInAMdQuery.exportPlanning = function(inaStructure, queryModel)
{
	if (queryModel.supportsDataEntryReadOnly())
	{
		inaStructure.putBoolean("SupportsDataEntryReadOnly", true);
	}
	if (queryModel.isDataEntryEnabled())
	{
		inaStructure.putBoolean("DataEntryEnabled", true);
	}
};
oFF.QInAMdQuery.importSupportsFlags = function(importer, inaStructure, queryModel)
{
	queryModel.setExportEachMeasure(inaStructure.getBooleanByKeyExt("ExportingEachMeasure", true));
	queryModel.setExportFixedFilter(inaStructure.getBooleanByKeyExt("ExportingFixedFilter", true));
	queryModel.setExportVariables(inaStructure.getBooleanByKeyExt("ExportingVariables", true));
};
oFF.QInAMdQuery.exportSupportsFlags = function(inaStructure, queryModel)
{
	if (!queryModel.isExportingEachMeasure())
	{
		inaStructure.putBoolean("ExportingEachMeasure", false);
	}
	if (!queryModel.isExportingFixedFilter())
	{
		inaStructure.putBoolean("ExportingFixedFilter", false);
	}
	if (!queryModel.isExportingVariables())
	{
		inaStructure.putBoolean("ExportingVariables", false);
	}
};
oFF.QInAMdQuery.importTotals = function(inaStructure, queryModel)
{
	var capabilities = queryModel.getModelCapabilitiesBase();
	var inaQuery = inaStructure.getStructureByKey("QueryMd");
	if (oFF.isNull(inaQuery))
	{
		inaQuery = inaStructure.getStructureByKey("Query");
	}
	if (oFF.notNull(inaQuery))
	{
		if (capabilities.supportsQueryCurrencyTranslation())
		{
			var currencyTranslationEnabledInA = inaQuery.getStringByKey("CurrencyTranslationEnabled");
			var currencyTranslationManagerBase = queryModel.getCurrencyTranslationManagerBase();
			currencyTranslationManagerBase.setCurrencyTranslationEnabledProperty(currencyTranslationEnabledInA);
			if (oFF.XString.isEqual(currencyTranslationEnabledInA, oFF.CurrencyTranslationConstants.NO_CURRENCY))
			{
				currencyTranslationManagerBase.setCurrencyTranslationDetails(null);
			}
		}
		var inaResultStructureFeature = inaQuery.getStructureByKey("ResultStructureFeature");
		var rc = queryModel.getMdResultStructureControllerBase();
		if (oFF.notNull(inaResultStructureFeature) && inaResultStructureFeature.getBooleanByKeyExt("Enabled", false))
		{
			oFF.QInAOptions.importReturnedDataSelections(inaResultStructureFeature, queryModel.getQueryManager());
			rc.setSupportsTotals(true);
			var inaResultAlignment = inaResultStructureFeature.getStructureByKey("ResultAlignment");
			var inaResultAlignmentConfigLevel = inaResultAlignment.getStringByKey("ConfigLevel");
			var supportedAlignmentLocation = oFF.QInAConverter.lookupConfigLevel(inaResultAlignmentConfigLevel);
			capabilities.setSupportedResultAlignmentLevel(supportedAlignmentLocation);
			var inaResultAlignments = inaResultAlignment.getListByKey("ResultAlignmentList");
			capabilities.clearSupportedResultAlignment();
			var alignmentSize = inaResultAlignments.size();
			for (var idxAlignment = 0; idxAlignment < alignmentSize; idxAlignment++)
			{
				var alignment = oFF.QInAConverter.lookupAlignment(inaResultAlignments.getStringAt(idxAlignment));
				capabilities.addSupportedResultAlignment(alignment);
			}
			if (capabilities.getResultStructureReorderingCapability() === oFF.ReorderingCapability.FULL)
			{
				capabilities.addSupportedResultAlignment(oFF.ResultAlignment.STRUCTURE);
			}
			capabilities.setSupportedVisibilityLocation(oFF.QModelLevel.DIMENSIONS);
			capabilities.setSupportsConditionalResultVisibility(inaResultStructureFeature.getBooleanByKeyExt("ConditionalVisibility", false));
			var inaReordering = inaResultStructureFeature.getStringByKeyExt("Reordering", "None");
			capabilities.setResultStructureReorderingCapability(oFF.QInAConverter.lookupReordering(inaReordering));
			var conditionalResultsSupported = inaResultStructureFeature.getBooleanByKeyExt("ConditionalTotals", false);
			capabilities.setSupportsConditionalResult(conditionalResultsSupported);
			if (conditionalResultsSupported)
			{
				var inaConditionalTotals = inaResultStructureFeature.getListByKey("ConditionalTotalsList");
				var conditionSize = inaConditionalTotals.size();
				for (var idxCondition = 0; idxCondition < conditionSize; idxCondition++)
				{
					var inaConditionalTotalResult = inaConditionalTotals.getStringAt(idxCondition);
					if (oFF.XString.isEqual(inaConditionalTotalResult, "TotalIncludedMembers"))
					{
						capabilities.addSupportedConditionalElement(oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
					}
					else if (oFF.XString.isEqual(inaConditionalTotalResult, "TotalRemainingMembers"))
					{
						capabilities.addSupportedConditionalElement(oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
					}
				}
			}
		}
		else
		{
			rc.setSupportsTotals(false);
			capabilities.setSupportedResultAlignmentLevel(oFF.QModelLevel.NONE);
			capabilities.setSupportedVisibilityLocation(oFF.QModelLevel.NONE);
			capabilities.setSupportsConditionalResultVisibility(false);
			capabilities.setResultStructureReorderingCapability(oFF.ReorderingCapability.NONE);
			capabilities.setSupportsConditionalResult(false);
		}
	}
};
oFF.QInAMdQuery.exportReturnedDataSelections = function(inaResultStructureFeature, queryManager)
{
	if (!queryManager.supportsReturnedDataSelection())
	{
		return;
	}
	var inaReturnedDataSelection = inaResultStructureFeature.putNewStructure("ReturnedDataSelection");
	var itActive = queryManager.getAllEnabledReturnedDataSelections().getIterator();
	while (itActive.hasNext())
	{
		inaReturnedDataSelection.putBoolean(itActive.next(), true);
	}
	oFF.XObjectExt.release(itActive);
	var itInactive = queryManager.getAllDisabledReturnedDataSelections().getIterator();
	while (itInactive.hasNext())
	{
		inaReturnedDataSelection.putBoolean(itInactive.next(), false);
	}
	oFF.XObjectExt.release(itInactive);
};
oFF.QInAMdQuery.exportTotals = function(exporter, inaStructure, queryModel)
{
	var capabilities = queryModel.getModelCapabilities();
	var inaQuery = inaStructure.putNewStructure("QueryMd");
	if (exporter.mode.containsMetadata() || exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || exporter.mode === oFF.QModelFormat.INA_METADATA_CORE || exporter.mode === oFF.QModelFormat.INA_METADATA_RENDERING)
	{
		if (capabilities.supportsQueryCurrencyTranslation())
		{
			inaQuery.putString("CurrencyTranslationEnabled", queryModel.getCurrencyTranslationManager().getCurrencyTranslationEnabledType());
		}
		if (queryModel.supportsResultVisibility())
		{
			var inaResultStructureFeature = inaQuery.putNewStructure("ResultStructureFeature");
			inaResultStructureFeature.putBoolean("Enabled", queryModel.supportsResultVisibility());
			inaResultStructureFeature.putBoolean("ConditionalVisibility", capabilities.supportsConditionalResultVisibility());
			inaResultStructureFeature.putString("Reordering", oFF.QInAConverter.lookupReorderingInA(capabilities.getResultStructureReorderingCapability()));
			var inaResultAlignment = inaResultStructureFeature.putNewStructure("ResultAlignment");
			var supportedAlignmentLocation = capabilities.getSupportedResultAlignmentLevel();
			inaResultAlignment.putString("ConfigLevel", oFF.QInAConverter.lookupConfigLevelInA(supportedAlignmentLocation));
			var supportedResultAlignments = capabilities.getSupportedResultAlignments();
			if (supportedResultAlignments.hasElements())
			{
				var inaResultAlignments = inaResultAlignment.putNewList("ResultAlignmentList");
				var alignmentSize = supportedResultAlignments.size();
				for (var iResultAlignment = 0; iResultAlignment < alignmentSize; iResultAlignment++)
				{
					inaResultAlignments.addString(oFF.QInAConverter.lookupAlignmentInA(supportedResultAlignments.get(iResultAlignment)));
				}
			}
			var supportsConditionalResults = capabilities.supportsConditionalResults();
			inaResultStructureFeature.putBoolean("ConditionalTotals", supportsConditionalResults);
			if (supportsConditionalResults)
			{
				var inaConditionalTotals = inaResultStructureFeature.putNewList("ConditionalTotalsList");
				var supportedConditionalResults = capabilities.getSupportedConditionalResults();
				var conditionSize = supportedConditionalResults.size();
				for (var iSupportedConditionResults = 0; iSupportedConditionResults < conditionSize; iSupportedConditionResults++)
				{
					var rse = supportedConditionalResults.get(iSupportedConditionResults);
					if (rse === oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)
					{
						inaConditionalTotals.addString("TotalIncludedMembers");
					}
					else if (rse === oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS)
					{
						inaConditionalTotals.addString("TotalRemainingMembers");
					}
				}
			}
			oFF.QInAMdQuery.exportReturnedDataSelections(inaResultStructureFeature, queryModel.getQueryManager());
		}
	}
};
oFF.QInAMdQuery.importDimensions = function(importer, inaStructure, queryModel)
{
	var inaDimensions = inaStructure.getListByKey("Dimensions");
	if (oFF.notNull(inaDimensions))
	{
		var supportsLazyLoading = queryModel.supportsDimensionLazyLoad() && queryModel.getServerBaseSerialization() !== null;
		var dimensionManagerBase = queryModel.getDimensionManagerBase();
		if (supportsLazyLoading)
		{
			var useDesignTimeMetadata = inaStructure.hasStringByKey("MetadataType") && oFF.XString.isEqual(inaStructure.getStringByKey("MetadataType"), "DesignTime");
			dimensionManagerBase.setDimensionLazyLoader(oFF.InADimensionLazyLoader.createLazyLoader(queryModel, useDesignTimeMetadata));
		}
		var len = inaDimensions.size();
		for (var i = 0; i < len; i++)
		{
			var inaDimension = inaDimensions.getStructureAt(i);
			var isReference = inaDimension.getBooleanByKeyExt("IsReference", false);
			if (supportsLazyLoading && (isReference || importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE))
			{
				var axisDefault = oFF.AxisType.lookup(inaDimension.getStringByKey("AxisDefault"));
				if (axisDefault !== oFF.AxisType.COLUMNS && axisDefault !== oFF.AxisType.ROWS && queryModel.getDimensionByNameFromExistingMetadata(inaDimension.getStringByKey("Name")) === null)
				{
					var dimType = oFF.QInAMdQuery.getDimensionType(queryModel, inaDimension);
					dimensionManagerBase.addDimensionReference(inaDimension.getStringByKey("Name"), dimType, oFF.QInAMdQuery.isTechnicalDimension(inaDimension));
					continue;
				}
			}
			oFF.QInAMdQuery.importDimension(importer, inaDimension, queryModel);
		}
	}
};
oFF.QInAMdQuery.getDimensionType = function(queryModel, inaDimension)
{
	var inaDimType = inaDimension.getIntegerByKeyExt("DimensionType", 3);
	var dimType = oFF.QInAConverter.lookupDimensionType(inaDimType);
	return dimType;
};
oFF.QInAMdQuery.isTechnicalDimension = function(inaDimension)
{
	var axisConstraints = inaDimension.getListByKey("AxisConstraints");
	return oFF.XCollectionUtils.hasElements(axisConstraints) && axisConstraints.size() === 1 && oFF.QInAConverter.lookupAxisType(axisConstraints.getStringAt(0)) === oFF.AxisType.TECHNICAL;
};
oFF.QInAMdQuery.importDimension = function(importer, inaDimension, queryModel)
{
	var dimension = importer.importDimension(inaDimension, queryModel);
	var dimensionManagerBase = queryModel.getDimensionManagerBase();
	var dimensionExisting = dimensionManagerBase.getDimensionByNameInternal(inaDimension.getStringByKey("Name"));
	if (oFF.isNull(dimensionExisting))
	{
		queryModel.addDimension(dimension);
	}
	else if (queryModel.getQueryManagerBase().getPreviousVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		var settings = oFF.InAQMgrMergeSettings.create(false);
		dimensionExisting.mergeDeepRecursive(settings, dimension);
		oFF.XObjectExt.release(dimension);
		dimension = dimensionExisting;
	}
	else
	{
		dimensionExisting.setText(dimension.getText());
		dimension = dimensionExisting;
	}
	var defaultAxis = queryModel.getAxis(dimension.getDefaultAxisType());
	defaultAxis.add(dimension);
	dimensionManagerBase.finalizeDimensionMetadataSetup(dimension);
};
oFF.QInAMdQuery.exportDimensions = function(exporter, queryModel, inaStructure)
{
	var inaDimensions = oFF.PrFactory.createList();
	if (exporter.getOriginalMode() === oFF.QModelFormat.INA_METADATA)
	{
		queryModel.getDimensions();
	}
	var dimNames = oFF.XListOfString.createFromReadOnlyList(queryModel.getDimensionNames());
	dimNames.sortByDirection(oFF.XSortDirection.ASCENDING);
	var len = dimNames.size();
	var optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	var exporterMode = exporter.getMode();
	var usedDimensions = oFF.QInAMdQuery.collectUsedDimensionsForRendering(queryModel, exporterMode);
	var dimensionManagerBase = queryModel.getDimensionManagerBase();
	for (var i = 0; i < len; i++)
	{
		var dimName = dimNames.get(i);
		var dimension = dimensionManagerBase.getDimensionByNameInternal(dimName);
		var dimStruct;
		if (oFF.isNull(dimension))
		{
			if (exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE))
			{
				dimStruct = oFF.PrFactory.createStructure();
				dimStruct.putString("Name", dimName);
				dimStruct.putBoolean("IsReference", true);
			}
			else
			{
				continue;
			}
		}
		else
		{
			if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport())
			{
				continue;
			}
			var axisType = dimension.getAxisType();
			if (exporterMode === oFF.QModelFormat.INA_METADATA_RENDERING && axisType !== oFF.AxisType.ROWS && axisType !== oFF.AxisType.COLUMNS && !usedDimensions.contains(dimension.getName()))
			{
				continue;
			}
			dimStruct = exporter.exportDimension(dimension, null);
		}
		inaDimensions.add(dimStruct);
	}
	inaStructure.put("Dimensions", inaDimensions);
};
oFF.QInAMdQuery.collectUsedDimensionsForRendering = function(queryModel, qModelFormat)
{
	var usedDimensions = oFF.XHashSetOfString.create();
	if (qModelFormat === oFF.QModelFormat.INA_METADATA_RENDERING)
	{
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedBySorting(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByVariables(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedBySpatialClustering(queryModel, usedDimensions);
	}
	return usedDimensions;
};
oFF.QInAMdQuery.importProperties = function(inaStructure, queryModel)
{
	var description = inaStructure.getStringByKey("Description");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(description))
	{
		queryModel.setText(inaStructure.getStringByKey("Description"));
	}
	var metadataPropertiesBase = queryModel.getMetadataPropertiesBase();
	metadataPropertiesBase.putString("Type", inaStructure.getStringByKey("Type"));
	if (inaStructure.hasStringByKey("LastDataUpdateOn"))
	{
		metadataPropertiesBase.putString("LastDataUpdateOn", inaStructure.getStringByKey("LastDataUpdateOn"));
	}
	else
	{
		metadataPropertiesBase.putString("LastDataUpdate", inaStructure.getStringByKey("LastDataUpdate"));
	}
	metadataPropertiesBase.putString("LastDataUpdateBy", inaStructure.getStringByKey("LastDataUpdateBy"));
	metadataPropertiesBase.putString("CreatedBy", inaStructure.getStringByKey("CreatedBy"));
	metadataPropertiesBase.putString("CreatedOn", inaStructure.getStringByKey("CreatedOn"));
	metadataPropertiesBase.putString("RepositoryType", inaStructure.getStringByKey("RepositoryType"));
	metadataPropertiesBase.putString("DueDate", inaStructure.getStringByKey("DueDate"));
};
oFF.QInAMdQuery.exportProperties = function(inaStructure, queryModel)
{
	inaStructure.putString("Description", queryModel.getText());
	var metadataProperties = queryModel.getMetadataProperties();
	inaStructure.putString("Type", metadataProperties.getStringByKey("Type"));
	var lastUpdate = metadataProperties.getStringByKey("LastDataUpdateOn");
	if (oFF.isNull(lastUpdate))
	{
		inaStructure.putString("LastDataUpdate", metadataProperties.getStringByKey("LastDataUpdate"));
	}
	else
	{
		inaStructure.putString("LastDataUpdateOn", lastUpdate);
	}
	inaStructure.putString("LastDataUpdateBy", metadataProperties.getStringByKey("LastDataUpdateBy"));
	inaStructure.putString("RepositoryType", metadataProperties.getStringByKey("RepositoryType"));
	inaStructure.putString("CreatedBy", metadataProperties.getStringByKey("CreatedBy"));
	inaStructure.putString("CreatedOn", metadataProperties.getStringByKey("CreatedOn"));
	inaStructure.putString("DueDate", metadataProperties.getStringByKey("DueDate"));
	var infoProvider = queryModel.getInfoProvider();
	oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "BaseDataSource", infoProvider);
};
oFF.QInAMdQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInAMdQuery.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QueryModel.create(olapEnv, null, oFF.QCapabilities.create());
};
oFF.QInAMdQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = modelComponent;
	oFF.QInAMdDataSource.importMd(importer, inaStructure, queryModel, queryModel);
	var importerMode = importer.getMode();
	if (importerMode === oFF.QModelFormat.INA_METADATA || importerMode === oFF.QModelFormat.INA_METADATA_CORE || importerMode === oFF.QModelFormat.INA_METADATA_RENDERING)
	{
		queryModel.setServerBaseSerialization(importerMode, oFF.QModelOrigin.IMPORTER, inaStructure);
	}
	if (oFF.notNull(inaStructure))
	{
		oFF.QInAMdQuery.importSupportsFlags(importer, inaStructure, queryModel);
		oFF.QInAMdQuery.importProperties(inaStructure, queryModel);
		oFF.QInAMdQuery.importTotals(inaStructure, queryModel);
		importer.m_cacheKey = oFF.QFactory.createCacheKeyByContext(context);
		oFF.QInAMdQuery.importDimensions(importer, inaStructure, queryModel);
		queryModel.getDimensionManagerBase().finalizeStructures();
		importer.m_cacheKey = oFF.XObjectExt.release(importer.m_cacheKey);
	}
	importer.importSortingManager(inaStructure, queryModel.getSortingManagerBase(), null);
	importer.importVariableManager(inaStructure, queryModel.getVariableManagerBase(), queryModel);
	importer.importDrillManager(inaStructure, queryModel.getDrillManagerBase(), queryModel);
	importer.importExceptionAggregationManager(inaStructure, queryModel._getExceptionAggregationManagerBase(), queryModel);
	importer.importUniversalDisplayHierarchies(inaStructure, queryModel.getUniversalDisplayHierarchiesBase(), queryModel);
	oFF.QInAMdQuery.importPlanning(inaStructure, queryModel);
	oFF.QInAMdQuery.importVariants(inaStructure, queryModel);
	return queryModel;
};
oFF.QInAMdQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var queryModel = modelComponent;
	var isForRendering = exporter.mode === oFF.QModelFormat.INA_METADATA_RENDERING;
	oFF.QInAMdQuery.exportSupportsFlags(inaStructure, queryModel);
	if (flags === oFF.QImExFlag.DEFAULT_ALL)
	{
		oFF.QInAMdDataSource.exportMd(exporter, inaStructure, queryModel);
		exporter.exportVariableContainer(queryModel.getVariableManager(), inaStructure);
		oFF.QInAMdQuery.exportVariants(inaStructure, queryModel);
	}
	else if (flags === oFF.QImExFlag.VARIABLES)
	{
		exporter.exportVariableContainer(queryModel.getVariableManager(), inaStructure);
		oFF.QInAMdQuery.exportVariants(inaStructure, queryModel);
	}
	else if (flags === oFF.QImExFlag.DATASOURCE)
	{
		oFF.QInAMdDataSource.exportMd(exporter, inaStructure, queryModel);
	}
	oFF.QInAMdQuery.exportProperties(inaStructure, queryModel);
	if (!isForRendering)
	{
		oFF.QInAMdQuery.exportTotals(exporter, inaStructure, queryModel);
	}
	oFF.QInAMdQuery.exportDimensions(exporter, queryModel, inaStructure);
	exporter.exportSortingManager(queryModel.getSortingManager(), inaStructure);
	exporter.exportDrillManager(queryModel.getDrillManager(), inaStructure);
	if (!isForRendering)
	{
		exporter.exportExceptionAggregationManager(queryModel._getExceptionAggregationManagerBase(), inaStructure);
		exporter.exportUniversalDisplayHierarchies(queryModel.getUniversalDisplayHierarchies(), inaStructure);
		oFF.QInAMdQuery.exportPlanning(inaStructure, queryModel);
	}
	return inaStructure;
};

oFF.QInAMdSort = function() {};
oFF.QInAMdSort.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdSort.prototype._ff_c = "QInAMdSort";

oFF.QInAMdSort.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QInAMdSort.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var sortingManager = modelComponent;
	if (importer.capabilities.supportsExtendedSort() && oFF.notNull(inaStructure))
	{
		var sortTypes = inaStructure.getListByKey("ExtendedSortTypes");
		if (oFF.notNull(sortTypes))
		{
			sortingManager.clearSupportedSortType();
			var sortSize = sortTypes.size();
			for (var i = 0; i < sortSize; i++)
			{
				var inaSortType = sortTypes.getStringAt(i);
				var sortType = oFF.QInAConverter.lookupSortType(inaSortType);
				if (oFF.isNull(sortType))
				{
					importer.addWarning(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("Sort type unknown: ", inaSortType));
				}
				else
				{
					sortingManager.addSupportedSortType(sortType);
				}
			}
		}
		var breakingGroups = inaStructure.getListByKey("SortTypesBreakGrouping");
		if (oFF.notNull(breakingGroups))
		{
			var breakingSize = breakingGroups.size();
			for (var j = 0; j < breakingSize; j++)
			{
				var sortType2 = oFF.QInAConverter.lookupSortType(breakingGroups.getStringAt(j));
				sortingManager.addSupportedBreakGrouping(sortType2);
			}
		}
	}
	return sortingManager;
};
oFF.QInAMdSort.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (exporter.capabilities.supportsExtendedSort())
	{
		var sortManager = modelComponent;
		var modelCapabilities = sortManager.getQueryModel().getModelCapabilities();
		var inaSortTypes = inaStructure.putNewList("ExtendedSortTypes");
		var allSortTypes = oFF.SortType.getAllSortTypes();
		var allSize = allSortTypes.size();
		for (var i = 0; i < allSize; i++)
		{
			var sortType = allSortTypes.get(i);
			if (modelCapabilities.supportsSortType(sortType))
			{
				inaSortTypes.addString(oFF.QInAConverter.lookupSortTypeInA(sortType));
			}
		}
		var inaBreakingGroups = inaStructure.putNewList("SortTypesBreakGrouping");
		for (var j = 0; j < allSize; j++)
		{
			var sortType2 = allSortTypes.get(j);
			if (modelCapabilities.supportsBreakGrouping(sortType2))
			{
				inaBreakingGroups.addString(oFF.QInAConverter.lookupSortTypeInA(sortType2));
			}
		}
	}
	return inaStructure;
};

oFF.QInAMdUniversalDisplayHierarchies = function() {};
oFF.QInAMdUniversalDisplayHierarchies.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdUniversalDisplayHierarchies.prototype._ff_c = "QInAMdUniversalDisplayHierarchies";

oFF.QInAMdUniversalDisplayHierarchies.importUdhDimension = function(importer, queryModel, name)
{
	if (!queryModel.getDimensionNames().contains(name))
	{
		var inaDimension = oFF.PrFactory.createStructure();
		inaDimension.putString("Name", name);
		inaDimension.putString("AxisDefault", "Virtual");
		var axisConstraints = inaDimension.putNewList("AxisConstraints");
		axisConstraints.addString("Virtual");
		oFF.QInAMdQuery.importDimension(importer, inaDimension, queryModel);
	}
};
oFF.QInAMdUniversalDisplayHierarchies.importHierarchy = function(universalDisplayHierarchies, hierarchy)
{
	var hierarchyDimensions = hierarchy.getListByKey("DimensionNames");
	var dimensionNames = oFF.PrUtils.asListOfString(hierarchyDimensions);
	var name = hierarchy.getStringByKey("Name");
	var initialDrillLevel = hierarchy.getIntegerByKey("InitialDrillLevel");
	var alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(hierarchy.getStringByKey("LowerLevelNodeAlignment"));
	var active = hierarchy.getBooleanByKeyExt("Active", false);
	var customDimensions = hierarchy.getBooleanByKeyExt("CustomDimensions", false);
	universalDisplayHierarchies.addHierarchy(name, dimensionNames, initialDrillLevel, alignment, active, null, customDimensions);
};
oFF.QInAMdUniversalDisplayHierarchies.assignAxesToHierarchies = function(universalDisplayHierarchies)
{
	var queryModel = universalDisplayHierarchies.getQueryModel();
	var hierarchies = universalDisplayHierarchies.getHierarchies();
	var assignedAxisTypes = oFF.XList.create();
	var size = hierarchies.size();
	for (var i = 0; i < size; i++)
	{
		var udh = hierarchies.get(i);
		if (udh.getHierarchyDedicatedAxis() !== null)
		{
			assignedAxisTypes.add(udh.getHierarchyDedicatedAxis().getType());
			continue;
		}
		var axis = oFF.QInAMdUniversalDisplayHierarchies.getAxisForDimensionList(udh.getDimensionNames(), queryModel);
		if (oFF.notNull(axis) && !assignedAxisTypes.contains(axis.getType()))
		{
			udh.setAxis(axis);
			assignedAxisTypes.add(axis.getType());
		}
	}
	for (var k = 0; k < size; k++)
	{
		var hierarchy = hierarchies.get(k);
		if (hierarchy.getHierarchyDedicatedAxis() === null)
		{
			hierarchy.setAxis(assignedAxisTypes.contains(oFF.AxisType.ROWS) ? queryModel.getColumnsAxis() : queryModel.getRowsAxis());
		}
	}
};
oFF.QInAMdUniversalDisplayHierarchies.getAxisForDimensionList = function(dimensions, queryModel)
{
	if (oFF.notNull(dimensions))
	{
		for (var i = 0; i < dimensions.size(); i++)
		{
			var dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensions.get(i));
			if (oFF.notNull(dimension))
			{
				var axisType = dimension.getAxisType();
				if (axisType === oFF.AxisType.ROWS || axisType === oFF.AxisType.COLUMNS)
				{
					return dimension.getAxis();
				}
			}
		}
	}
	return null;
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES;
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QFactory.createUniversalDisplayHierarchies(context);
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(inaStructure) && importer.capabilities.supportsUniversalDisplayHierarchies())
	{
		var udh = inaStructure.getStructureByKey("UniversalDisplayHierarchies");
		if (oFF.notNull(udh))
		{
			var hierarchies = udh.getListByKey("DefinedHierarchies");
			var size = hierarchies.size();
			var queryModel = universalDisplayHierarchies.getQueryModel();
			for (var i = 0; i < size; i++)
			{
				var inaHierarchy = hierarchies.getStructureAt(i);
				oFF.QInAMdUniversalDisplayHierarchies.importHierarchy(universalDisplayHierarchies, inaHierarchy);
				oFF.QInAMdUniversalDisplayHierarchies.importUdhDimension(importer, queryModel, inaHierarchy.getStringByKey("Name"));
			}
		}
	}
	oFF.QInAMdUniversalDisplayHierarchies.assignAxesToHierarchies(universalDisplayHierarchies);
	return universalDisplayHierarchies;
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};

oFF.QInAMdVarDimMember = function() {};
oFF.QInAMdVarDimMember.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarDimMember.prototype._ff_c = "QInAMdVarDimMember";

oFF.QInAMdVarDimMember.prototype.getComponentType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QInAMdVarDimMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var variableContainer = parentComponent;
	var variableType = oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
	if (inaStructure.containsKey("isHierarchical"))
	{
		if (inaStructure.getBooleanByKeyExt("isHierarchical", false))
		{
			variableType = oFF.VariableType.HIERARCHY_NODE_VARIABLE;
		}
	}
	else
	{
		var inaSemanticType = oFF.PrUtils.getStringValueProperty(inaStructure, "SemanticType", null);
		if (oFF.notNull(inaSemanticType))
		{
			if (oFF.XString.isEqual(inaSemanticType, "HierarchyNodeVariable"))
			{
				variableType = oFF.VariableType.HIERARCHY_NODE_VARIABLE;
			}
			else if (oFF.XString.isEqual(inaSemanticType, "HierarchyNameVariable"))
			{
				variableType = oFF.VariableType.HIERARCHY_NAME_VARIABLE;
			}
		}
	}
	var memberVariable;
	var name = inaStructure.getStringByKey("Name");
	var variables = variableContainer.getVariables();
	if (variables.containsKey(name))
	{
		memberVariable = variables.getByKey(name);
	}
	else
	{
		if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			memberVariable = oFF.QHierarchyNodeVariable.createHierarchyNodeVariable(context, variableContainer, name, null);
		}
		else if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
		{
			memberVariable = oFF.QHierarchyNameVariable.createDimensionHierarchyVariable(context, variableContainer, name, null);
		}
		else
		{
			memberVariable = oFF.QDimensionMemberVariable.createDimensionMemberVariable(context, variableContainer, name, null);
		}
	}
	if (inaStructure.containsKey("IsInputEnabledAndExit"))
	{
		memberVariable.setIsInputEnabledAndExit(inaStructure.getBooleanByKey("IsInputEnabledAndExit"));
	}
	oFF.QInAMdVarMisc.importMd(inaStructure, memberVariable);
	var supportsValuehelp = inaStructure.getBooleanByKeyExt("SupportsValueHelp", true);
	memberVariable.setSupportsValueHelp(supportsValuehelp);
	var dimension = null;
	var inaDimensionReference = oFF.PrUtils.getStructureProperty(inaStructure, "DimensionReference");
	if (oFF.notNull(inaDimensionReference))
	{
		var dimensionName = inaDimensionReference.getStringByKey("Name");
		if (oFF.notNull(dimensionName))
		{
			var dimensionAccessor = variableContainer.getDimensionAccessor();
			if (oFF.notNull(dimensionAccessor))
			{
				dimension = dimensionAccessor.getDimensionByNameFromExistingMetadata(dimensionName);
			}
		}
	}
	if (oFF.isNull(dimension))
	{
		var isPartialData = variableContainer.getQueryModel() !== null && variableContainer.getQueryModel().isPartialResponse();
		if (!isPartialData)
		{
			var message = oFF.XStringUtils.concatenate3("Error in importing Variables: No dimension specified for variable ", name, " !");
			if (memberVariable.isInputEnabled())
			{
				importer.addError(oFF.ErrorCodes.INVALID_STATE, message);
				return null;
			}
			importer.addInfo(oFF.ErrorCodes.IMPORT_VARIABE_NO_DIMENSION, message);
		}
	}
	else
	{
		memberVariable.setDimension(dimension);
	}
	oFF.QInAMdVarSelectionCap.importMd(importer, inaStructure, memberVariable, context);
	var inaRuntimeReferences = inaStructure.getListByKey("RuntimeReferences");
	if (oFF.notNull(inaRuntimeReferences) && inaRuntimeReferences.size() > 0)
	{
		var numberOfRuntimeReferences = inaRuntimeReferences.size();
		for (var i = 0; i < numberOfRuntimeReferences; i++)
		{
			memberVariable.addRuntimeReferences(inaRuntimeReferences.getStringAt(i));
		}
	}
	oFF.QInAMdVarHierInfo.importMd(importer, inaStructure, memberVariable, context);
	memberVariable.setIsUsedInFixedFilter(inaStructure.getBooleanByKeyExt("UsedInFixedFilter", false));
	memberVariable.setIsUsedInDynamicFilter(inaStructure.getBooleanByKeyExt("UsedInDynamicFilter", false));
	var queryModel = memberVariable.getQueryModel();
	var queryManager = null;
	if (oFF.notNull(queryModel))
	{
		queryManager = queryModel.getQueryManager();
	}
	var inaValues = inaStructure.getStructureByKey("Values");
	if (oFF.notNull(inaValues) && oFF.notNull(queryManager) && queryManager.getVariableProcessorState() !== oFF.VariableProcessorState.PROCESSING_REINIT)
	{
		var selectionContainer = oFF.QFactory.createFilterExpression(context, memberVariable);
		var tmp = importer.mode;
		importer.mode = oFF.QModelFormat.INA_DATA;
		var newSelectionContainer = importer.importFilterExpression(selectionContainer, inaValues, memberVariable, context);
		importer.mode = tmp;
		var cProduct = newSelectionContainer.getCartesianProduct();
		if (oFF.notNull(cProduct))
		{
			var cartesianList = cProduct.getCartesianList(memberVariable.getDimension());
			memberVariable.setDefaultMemberFilter(cartesianList.cloneOlapComponent(memberVariable, null));
		}
	}
	return memberVariable;
};
oFF.QInAMdVarDimMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var memberVariable = modelComponent;
	inaStructure.putString("VariableType", "DimensionMemberVariable");
	var variableType = memberVariable.getVariableType();
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		inaStructure.putString("SemanticType", "HierarchyNameVariable");
	}
	else if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		inaStructure.putString("SemanticType", "HierarchyNodeVariable");
	}
	else
	{
		inaStructure.putString("SemanticType", "DimensionMemberVariable");
	}
	if (memberVariable.isInputEnabledAndExitProvidedInMd())
	{
		inaStructure.putBoolean("IsInputEnabledAndExit", memberVariable.isEnforcedDynamicValue());
	}
	oFF.QInAMdVarMisc.exportMd(exporter, memberVariable, inaStructure);
	inaStructure.putBoolean("SupportsValueHelp", memberVariable.supportsValueHelp());
	if (memberVariable.getDimension() !== null)
	{
		var inaDimensionReference = inaStructure.putNewStructure("DimensionReference");
		inaDimensionReference.putString("Name", memberVariable.getDimension().getName());
	}
	oFF.QInAMdVarSelectionCap.exportMd(exporter, inaStructure, memberVariable);
	oFF.QInAMdVarHierInfo.exportMd(inaStructure, memberVariable);
	inaStructure.putBoolean("UsedInFixedFilter", memberVariable.isUsedInFixedFilter());
	inaStructure.putBoolean("UsedInDynamicFilter", memberVariable.isUsedInDynamicFilter());
	var defaultMemberSelection = memberVariable.getDefaultMemberFilter();
	if (oFF.notNull(defaultMemberSelection) && defaultMemberSelection.hasElements())
	{
		var tmp = exporter.mode;
		exporter.mode = oFF.QModelFormat.INA_DATA;
		var inaVariableValues = inaStructure.putNewStructure("Values");
		var inaSelection = inaVariableValues.putNewStructure("Selection");
		exporter.exportCartesianList(defaultMemberSelection, inaSelection);
		exporter.mode = tmp;
	}
	var runtimeReferences = memberVariable.getRuntimeReferences();
	if (oFF.notNull(runtimeReferences))
	{
		var numberOfRuntimeReferences = runtimeReferences.size();
		if (numberOfRuntimeReferences > 0)
		{
			var putNewList = inaStructure.putNewList("RuntimeReferences");
			for (var i = 0; i < numberOfRuntimeReferences; i++)
			{
				putNewList.addString(runtimeReferences.get(i));
			}
		}
	}
	return inaStructure;
};

oFF.QInAMdVarHierInfo = function() {};
oFF.QInAMdVarHierInfo.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarHierInfo.prototype._ff_c = "QInAMdVarHierInfo";

oFF.QInAMdVarHierInfo.importMd = function(importer, inaStructure, variable, context)
{
	variable.setHierarchyName(null);
	variable.setHierarchyVersion(null);
	variable.setHierarchyKeyDate(null);
	variable.setHierarchyBaseDimension(null);
	var inaHierarchy = oFF.PrUtils.getStructureProperty(inaStructure, "Hierarchy");
	if (oFF.notNull(inaHierarchy))
	{
		variable.setHierarchyBaseDimension(inaHierarchy.getStringByKey("BaseDimension"));
		variable.setHierarchyName(inaHierarchy.getStringByKey("Name"));
		variable.setHierarchyVersion(inaHierarchy.getStringByKey("Version"));
		var date = inaHierarchy.getStringByKey("DueDate");
		if (oFF.isNull(date))
		{
			date = inaHierarchy.getStringByKey("DateTo");
		}
		variable.setHierarchyKeyDate(date);
	}
	var variableName = variable.getName();
	var variableType = variable.getVariableType();
	var variableContainer = variable.getVariableContext();
	var dimensionAccessor = variableContainer.getDimensionAccessor();
	var queryManager = variableContainer.getQueryManager();
	if (oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit())
	{
		var runtimeReferences = variable.getRuntimeReferences();
		for (var k = 0; k < runtimeReferences.size(); k++)
		{
			var dim = dimensionAccessor.getDimensionByName(runtimeReferences.get(k));
			if (oFF.XString.isEqual(variableName, dim.getHierarchyNameVariableName()) || oFF.XString.isEqual(variableName, dim.getHierarchyDueDateVariableName()) || oFF.XString.isEqual(variableName, dim.getHierarchyVersionVariableName()))
			{
				variable.setIsHierarchyInfoVariable(true);
			}
		}
	}
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		var dimensionHierarchyVariable = variable;
		var hierarchyBaseDimName = inaStructure.getStringByKey("HierarchyBaseDimension");
		if (oFF.isNull(hierarchyBaseDimName))
		{
			hierarchyBaseDimName = inaStructure.getStringByKey("HierachyBaseDimension");
		}
		if (oFF.notNull(hierarchyBaseDimName))
		{
			var hierarchyDimension = dimensionAccessor.getDimensionByNameFromExistingMetadata(hierarchyBaseDimName);
			dimensionHierarchyVariable.setHierarchyNameDimension(hierarchyDimension);
		}
	}
	else if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		var variableMode = variableContainer.getVariableMode();
		if (variableMode === oFF.VariableMode.DIRECT_VALUE_TRANSFER)
		{
			var hierarchyName = variable.getHierarchyName();
			var dimension = variable.getDimension();
			if (oFF.notNull(hierarchyName) && oFF.notNull(dimension))
			{
				var hierarchy = oFF.QHierarchy.create(context, dimension, hierarchyName);
				var hierarchyVersion = variable.getHierarchyVersion();
				hierarchy.setHierarchyVersion(hierarchyVersion);
				var hierarchyKeyDate = variable.getHierarchyKeyDate();
				if (!oFF.XString.isEqual(hierarchyKeyDate, ""))
				{
					var dueDate = oFF.XDate.createDateFromStringWithFlag(hierarchyKeyDate, importer.capabilities.supportsSapDate());
					if (oFF.notNull(dueDate))
					{
						hierarchy.setHierarchyDueDate(dueDate);
					}
					dimension.setHierarchy(hierarchy);
				}
			}
		}
	}
};
oFF.QInAMdVarHierInfo.exportMd = function(inaStructure, variable)
{
	var inaHierarchy = inaStructure.putNewStructure("Hierarchy");
	inaHierarchy.putStringNotNull("BaseDimension", variable.getHierarchyBaseDimension());
	inaHierarchy.putStringNotNull("Name", variable.getHierarchyName());
	inaHierarchy.putStringNotNull("Version", variable.getHierarchyVersion());
	inaHierarchy.putStringNotNull("DueDate", variable.getHierarchyKeyDate());
	var variableType = variable.getVariableType();
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		var hierarchyNameDimension = variable.getHierarchyNameDimension();
		oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "HierarchyBaseDimension", hierarchyNameDimension);
	}
};
oFF.QInAMdVarHierInfo.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarHierInfo.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdVarHierInfo.importMd(importer, inaStructure, modelComponent, context);
	return modelComponent;
};
oFF.QInAMdVarHierInfo.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdVarHierInfo.exportMd(inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdVarMisc = function() {};
oFF.QInAMdVarMisc.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarMisc.prototype._ff_c = "QInAMdVarMisc";

oFF.QInAMdVarMisc.importMd = function(inaStructure, variable)
{
	if (oFF.notNull(variable))
	{
		variable.setText(inaStructure.getStringByKey("Description"));
		var inaInputEnabled = inaStructure.getBooleanByKeyExt("InputEnabled", false);
		variable.setInputEnabled(inaInputEnabled);
		variable.setNameExternal(inaStructure.getStringByKey("NameExternal"));
		variable.setCustomVariable(inaStructure.getBooleanByKey("CustomVariable"));
		variable.setProcessingType(oFF.QInAConverter.lookupProcessingType(inaStructure.getStringByKey("ProcessingType")));
		var inaInputType = inaStructure.getStringByKeyExt("InputType", "Optional");
		if (oFF.XString.isEqual(inaInputType, "Optional"))
		{
			variable.setMandatory(false);
			variable.setInitialValueAllowed(true);
		}
		else if (oFF.XString.isEqual(inaInputType, "Mandatory"))
		{
			variable.setMandatory(true);
			variable.setInitialValueAllowed(true);
		}
		else if (oFF.XString.isEqual(inaInputType, "MandatoryNotInitial"))
		{
			variable.setMandatory(true);
			variable.setInitialValueAllowed(false);
		}
		variable.setIsDynamicVariable(inaStructure.getBooleanByKeyExt("IsDynamicValue", false));
		var screenOrder = inaStructure.getIntegerByKeyExt("ScreenOrder", 0);
		variable.setVariableOrder(screenOrder);
		var inaDependentVariables = inaStructure.getListByKey("DependentOfVariable");
		if (!oFF.PrUtils.isListEmpty(inaDependentVariables))
		{
			var dependentSize = inaDependentVariables.size();
			for (var i = 0; i < dependentSize; i++)
			{
				variable.addDependentVariableName(inaDependentVariables.getStringAt(i));
			}
		}
	}
};
oFF.QInAMdVarMisc.exportMd = function(exporter, variable, inaStructure)
{
	inaStructure.putString("Name", variable.getName());
	inaStructure.putString("Description", variable.getText());
	inaStructure.putBoolean("InputEnabled", variable.isInputEnabled());
	inaStructure.putString("NameExternal", variable.getNameExternal());
	inaStructure.putBoolean("CustomVariable", variable.isCustomVariable());
	inaStructure.putStringNotNull("ProcessingType", oFF.QInAConverter.lookupProcessingTypeIna(variable.getProcessingType()));
	if (variable.isDynamicVariable())
	{
		inaStructure.putBoolean("IsDynamicValue", variable.isDynamicVariable());
	}
	if (variable.isMandatory())
	{
		if (variable.isInitialValueAllowed())
		{
			inaStructure.putString("InputType", "Mandatory");
		}
		else
		{
			inaStructure.putString("InputType", "MandatoryNotInitial");
		}
	}
	else
	{
		if (variable.isInitialValueAllowed())
		{
			inaStructure.putString("InputType", "Optional");
		}
		else
		{
			exporter.addError(oFF.ErrorCodes.INVALID_STATE, "illegal combination: optional variables must support initial values");
		}
	}
	inaStructure.putInteger("ScreenOrder", variable.getVariableOrder());
	var dependentVariables = variable.getDependentVariablesNames();
	if (oFF.XCollectionUtils.hasElements(dependentVariables))
	{
		var inaDependentVariables = inaStructure.putNewList("DependentOfVariable");
		inaDependentVariables.addAllStrings(dependentVariables);
	}
};
oFF.QInAMdVarMisc.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarMisc.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdVarMisc.exportMd(exporter, modelComponent, inaStructure);
	return inaStructure;
};
oFF.QInAMdVarMisc.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAMdVarOptionList = function() {};
oFF.QInAMdVarOptionList.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarOptionList.prototype._ff_c = "QInAMdVarOptionList";

oFF.QInAMdVarOptionList.prototype.getComponentType = function()
{
	return oFF.VariableType.OPTION_LIST_VARIABLE;
};
oFF.QInAMdVarOptionList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var variableContainer = context.getVariableContainer();
	var name = inaStructure.getStringByKey("Name");
	var variables = variableContainer.getVariables();
	var optionListVariable;
	if (variables.containsKey(name))
	{
		var variable = variables.getByKey(name);
		optionListVariable = variable;
	}
	else
	{
		var inaSemanticType = oFF.PrUtils.getStringValueProperty(inaStructure, "SemanticType", null);
		var hasMultipleValues = inaStructure.getBooleanByKeyExt("MultipleValues", false);
		if (oFF.XString.isEqual("HierarchyVariable", inaSemanticType))
		{
			optionListVariable = oFF.QSimpleTypeVariable.createHierarchyVariable(context, variableContainer, name, null, hasMultipleValues);
		}
		else
		{
			optionListVariable = oFF.QSimpleTypeVariable.createOptionListVariable(context, variableContainer, name, null, hasMultipleValues);
		}
	}
	oFF.QInAMdVarMisc.importMd(inaStructure, optionListVariable);
	optionListVariable.clearOptions();
	var inaOptionList = inaStructure.getListByKey("Options");
	if (!oFF.PrUtils.isListEmpty(inaOptionList))
	{
		var len = inaOptionList.size();
		for (var i = 0; i < len; i++)
		{
			var inaOption = inaOptionList.getStructureAt(i);
			var inaOptionName = inaOption.getStringByKey("Name");
			var inaOptionDescription = inaOption.getStringByKey("Description");
			optionListVariable.createAndAddOption(inaOptionName, inaOptionDescription);
		}
	}
	return optionListVariable;
};
oFF.QInAMdVarOptionList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var variable = modelComponent;
	inaStructure.putString("VariableType", "OptionListVariable");
	var variableType = variable.getVariableType();
	if (variableType === oFF.VariableType.HIERARCHY_VARIABLE)
	{
		inaStructure.putString("SemanticType", "HierarchyVariable");
	}
	else
	{
		inaStructure.putString("SemanticType", "OptionListVariable");
	}
	oFF.QInAMdVarMisc.exportMd(exporter, variable, inaStructure);
	inaStructure.putBoolean("MultipleValues", variable.supportsMultipleValues());
	var options = variable.getOptions();
	var inaOptionList = inaStructure.putNewList("Options");
	var len = options.size();
	for (var i = 0; i < len; i++)
	{
		var option = options.get(i);
		var inaOption = inaOptionList.addNewStructure();
		inaOption.putString("Name", option.getName());
		inaOption.putString("Description", option.getText());
	}
	return inaStructure;
};

oFF.QInAMdVarSelectionCap = function() {};
oFF.QInAMdVarSelectionCap.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarSelectionCap.prototype._ff_c = "QInAMdVarSelectionCap";

oFF.QInAMdVarSelectionCap.importMd = function(importer, inaStructure, memberVariable, context)
{
	var variableField = null;
	var dimension = memberVariable.getDimension();
	if (oFF.notNull(dimension))
	{
		var inaValues = inaStructure.getStructureByKey("Values");
		if (oFF.notNull(inaValues))
		{
			var inaSelection = inaValues.getStructureByKey("Selection");
			if (oFF.notNull(inaSelection))
			{
				var inaSetOperand = inaSelection.getStructureByKey("SetOperand");
				if (oFF.notNull(inaSetOperand))
				{
					variableField = dimension.getFieldByName(inaSetOperand.getStringByKey("FieldName"));
				}
			}
		}
	}
	var definedSelectionCapability = oFF.QInAMdFilterCapability.importMd(importer, inaStructure, variableField, memberVariable, context);
	if (importer.isAbap(memberVariable) && importer.getSession().hasFeature(oFF.FeatureToggleOlap.SINGLE_VALUE_VARIABLES_ONLY_INCLUDE))
	{
		if (definedSelectionCapability.getGroup() === oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE)
		{
			definedSelectionCapability.setGroup(oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE_INCLUDE_ONLY);
		}
	}
	memberVariable.setFilterCapability(definedSelectionCapability);
	var variableSelectionCapabilities = oFF.QFilterCapabilityList.createFilterCapabilitiesForVariable(context, memberVariable);
	memberVariable.setFilterCapabilities(variableSelectionCapabilities);
	var supportsMultipleValues = oFF.PrUtils.getBooleanValueProperty(inaStructure, "MultipleValues", false);
	variableSelectionCapabilities.setSupportsMultipleValues(supportsMultipleValues);
	oFF.QInAMdVarSelectionCap.mergeCapabilities(dimension, definedSelectionCapability, variableSelectionCapabilities);
};
oFF.QInAMdVarSelectionCap.mergeCapabilities = function(dimension, definedSelectionCapability, variableSelectionCapabilities)
{
	if (oFF.notNull(dimension) && oFF.notNull(definedSelectionCapability))
	{
		var dimFilterCapabilities = dimension.getFilterCapabilities();
		var dimFilterableFields = dimFilterCapabilities.getSelectableFieldNames();
		var fieldSize = dimFilterableFields.size();
		for (var i = 0; i < fieldSize; i++)
		{
			var fieldName = dimFilterableFields.get(i);
			var dimFilterCapability = dimFilterCapabilities.getFilterCapabilitiesByFieldName(fieldName);
			if (dimFilterCapability.supportsSetSign(oFF.SetSign.INCLUDING))
			{
				var newVariableCapability = variableSelectionCapabilities.createAndAddFilterCapabilitiesForFieldName(fieldName);
				oFF.QInAMdVarSelectionCap.mergeOperators(oFF.SetSign.INCLUDING, newVariableCapability, dimFilterCapability, definedSelectionCapability);
				if (dimFilterCapability.supportsSetSign(oFF.SetSign.EXCLUDING))
				{
					oFF.QInAMdVarSelectionCap.mergeOperators(oFF.SetSign.EXCLUDING, newVariableCapability, dimFilterCapability, definedSelectionCapability);
				}
			}
		}
	}
};
oFF.QInAMdVarSelectionCap.mergeOperators = function(setSign, newVariableCapability, dimFilterCapability, definedSelectionCapability)
{
	if (oFF.notNull(definedSelectionCapability))
	{
		if (definedSelectionCapability.supportsSetSign(setSign))
		{
			newVariableCapability.addSupportedSetSign(setSign);
			var newIncludingOperators = newVariableCapability.getModifiableSupportedComparisonOperators(setSign);
			var includingsByField = dimFilterCapability.getSupportedComparisonOperators(setSign);
			var includingsVariable = definedSelectionCapability.getSupportedComparisonOperators(setSign);
			var size = includingsVariable.size();
			for (var j = 0; j < size; j++)
			{
				var comparionsOperator = includingsVariable.get(j);
				if (includingsByField.contains(comparionsOperator))
				{
					newIncludingOperators.add(comparionsOperator);
				}
			}
		}
	}
};
oFF.QInAMdVarSelectionCap.exportMd = function(exporter, inaStructure, memberVariable)
{
	var selectionCapability = memberVariable.getFilterCapability();
	oFF.QInAMdFilterCapability.exportMd(exporter, selectionCapability, inaStructure, memberVariable.getQueryModel());
	var selectionCapabilities = memberVariable.getFilterCapabilities();
	if (oFF.notNull(selectionCapabilities))
	{
		inaStructure.putBoolean("MultipleValues", selectionCapabilities.supportsMultipleValues());
	}
};
oFF.QInAMdVarSelectionCap.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarSelectionCap.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdVarSelectionCap.importMd(importer, inaStructure, modelComponent, context);
	return modelComponent;
};
oFF.QInAMdVarSelectionCap.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	return this.exportComponentWithStructure(exporter, modelComponent, oFF.isNull(inaParentStructure) ? oFF.PrFactory.createStructure() : inaParentStructure, flags);
};
oFF.QInAMdVarSelectionCap.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdVarSelectionCap.exportMd(exporter, inaStructure, modelComponent);
	return inaStructure;
};

oFF.QInAMdVarSimpleType = function() {};
oFF.QInAMdVarSimpleType.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarSimpleType.prototype._ff_c = "QInAMdVarSimpleType";

oFF.QInAMdVarSimpleType.importMd = function(inaStructure, variableContext, context)
{
	var simpleTypeVariable = null;
	var name = oFF.PrUtils.getStringValueProperty(inaStructure, "Name", null);
	if (oFF.notNull(name))
	{
		var variables = variableContext.getVariables();
		if (variables.containsKey(name))
		{
			simpleTypeVariable = variables.getByKey(name);
		}
		else
		{
			var inaSemanticType = oFF.PrUtils.getStringValueProperty(inaStructure, "SemanticType", null);
			var hasMultipleValues = inaStructure.getBooleanByKeyExt("MultipleValues", false);
			if (oFF.XString.isEqual("FormulaVariable", inaSemanticType))
			{
				simpleTypeVariable = oFF.QSimpleTypeVariable.createFormulaVariable(context, variableContext, name, null, hasMultipleValues);
			}
			else if (oFF.XString.isEqual("TextVariable", inaSemanticType))
			{
				simpleTypeVariable = oFF.QSimpleTypeVariable.createTextVariable(context, variableContext, name, null, hasMultipleValues);
			}
			else
			{
				var inaValueType = oFF.PrUtils.getStringValueProperty(inaStructure, "ValueType", null);
				var valueType = oFF.QInAConverter.lookupValueType(inaValueType);
				simpleTypeVariable = oFF.QSimpleTypeVariable.createSimpleTypeVariable(context, variableContext, valueType, name, null, hasMultipleValues);
			}
		}
		oFF.QInAMdVarMisc.importMd(inaStructure, simpleTypeVariable);
		var inaScale = inaStructure.getIntegerByKeyExt("Scale", -1);
		if (inaScale !== -1)
		{
			simpleTypeVariable.setValueScale(inaScale);
		}
		var inaLength = inaStructure.getIntegerByKeyExt("Length", -1);
		if (inaLength !== -1)
		{
			simpleTypeVariable.setValueLength(inaLength);
		}
	}
	return simpleTypeVariable;
};
oFF.QInAMdVarSimpleType.exportMd = function(exporter, variable, inaStructure)
{
	inaStructure.putString("VariableType", "SimpleTypeVariable");
	var variableType = variable.getVariableType();
	if (variableType === oFF.VariableType.FORMULA_VARIABLE)
	{
		inaStructure.putString("SemanticType", "FormulaVariable");
	}
	else if (variableType === oFF.VariableType.TEXT_VARIABLE)
	{
		inaStructure.putString("SemanticType", "TextVariable");
	}
	else
	{
		inaStructure.putString("SemanticType", "ValueVariable");
		var valueType = variable.getValueType();
		inaStructure.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(valueType));
	}
	oFF.QInAMdVarMisc.exportMd(exporter, variable, inaStructure);
	inaStructure.putInteger("Scale", variable.getValueScale());
	inaStructure.putInteger("Length", variable.getValueLength());
	inaStructure.putBoolean("MultipleValues", variable.supportsMultipleValues());
	return inaStructure;
};
oFF.QInAMdVarSimpleType.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarSimpleType.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return oFF.QInAMdVarSimpleType.exportMd(exporter, modelComponent, inaStructure);
};
oFF.QInAMdVarSimpleType.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAMdVariable = function() {};
oFF.QInAMdVariable.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVariable.prototype._ff_c = "QInAMdVariable";

oFF.QInAMdVariable.prototype.getComponentType = function()
{
	return oFF.VariableType.ANY_VARIABLE;
};
oFF.QInAMdVariable.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var variableContext = parentComponent;
	var variable;
	var inaVariableType = oFF.PrUtils.getStringValueProperty(inaStructure, "VariableType", null);
	if (oFF.XString.isEqual("DimensionMemberVariable", inaVariableType))
	{
		variable = importer.importDimensionMemberVariable(inaStructure, null, variableContext, variableContext);
	}
	else if (oFF.XString.isEqual("OptionListVariable", inaVariableType))
	{
		variable = importer.importOptionListVariable(inaStructure, null, variableContext);
	}
	else if (oFF.XString.isEqual("SimpleTypeVariable", inaVariableType))
	{
		variable = oFF.QInAMdVarSimpleType.importMd(inaStructure, variableContext, context);
	}
	else
	{
		importer.addError(0, oFF.XStringUtils.concatenate2("Variable type not supported: ", inaVariableType));
		return null;
	}
	return variable;
};
oFF.QInAMdVariable.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var variable = modelComponent;
	var variableType = variable.getVariableType();
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return exporter.exportDimensionMemberVariable(variable, inaStructure);
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		oFF.QInAMdVarSimpleType.exportMd(exporter, variable, inaStructure);
	}
	else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		exporter.exportOptionListVariable(variable, inaStructure);
	}
	else
	{
		exporter.addError(0, oFF.XStringUtils.concatenate2("Variable type not supported: ", variableType.getName()));
	}
	return inaStructure;
};

oFF.QInAMdVariableContainer = function() {};
oFF.QInAMdVariableContainer.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVariableContainer.prototype._ff_c = "QInAMdVariableContainer";

oFF.QInAMdVariableContainer.resolveVariableDependencies = function(variableContainer)
{
	var variables = variableContainer.getVariables();
	var variableSize = variables.size();
	for (var i = 0; i < variableSize; i++)
	{
		var variable = variables.get(i);
		var dependentVariablesNames = variable.getDependentVariablesNames();
		var dependentSize = dependentVariablesNames.size();
		for (var j = 0; j < dependentSize; j++)
		{
			var otherVariable = variables.getByKey(dependentVariablesNames.get(j));
			variable.addDependentVariable(otherVariable);
		}
	}
};
oFF.QInAMdVariableContainer.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QInAMdVariableContainer.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		var variableContainer = modelComponent;
		var inaList = inaStructure.getListByKey("VariablesMd");
		if (oFF.isNull(inaList))
		{
			inaList = inaStructure.getListByKey("Variables");
		}
		this.importVariableList(importer, inaList, variableContainer);
	}
	return modelComponent;
};
oFF.QInAMdVariableContainer.prototype.importVariableList = function(importer, inaElement, modelComponent)
{
	var variableContainer = modelComponent;
	var inaVariablesList = inaElement;
	if (oFF.notNull(inaVariablesList))
	{
		var variables = variableContainer.getVariables();
		var variableSize = inaVariablesList.size();
		for (var i = 0; i < variableSize; i++)
		{
			var inaStructure = oFF.PrUtils.getStructureElement(inaVariablesList, i);
			if (oFF.notNull(inaStructure))
			{
				var variable = importer.importVariable(inaStructure, variableContainer);
				if (oFF.notNull(variable) && !variables.contains(variable))
				{
					variableContainer.addVariable(variable);
				}
			}
		}
		oFF.QInAMdVariableContainer.resolveVariableDependencies(variableContainer);
	}
};
oFF.QInAMdVariableContainer.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var varMgr = modelComponent;
	var inaList = inaStructure.putNewList("VariablesMd");
	var variables = varMgr.getVariables();
	var variableSize = variables.size();
	for (var i = 0; i < variableSize; i++)
	{
		inaList.add(exporter.exportVariable(variables.get(i), null));
	}
	return inaStructure;
};

oFF.QInACalculatedDimension = function() {};
oFF.QInACalculatedDimension.prototype = new oFF.QInADimension();
oFF.QInACalculatedDimension.prototype._ff_c = "QInACalculatedDimension";

oFF.QInACalculatedDimension.prototype.getComponentType = function()
{
	return oFF.DimensionType.CALCULATED_DIMENSION;
};
oFF.QInACalculatedDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var queryModel = context.getQueryModel();
	var dimension = modelComponent;
	var calcDimName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(dimension) && oFF.notNull(queryModel))
	{
		dimension = queryModel.getDimensionManagerBase().getDimensionByNameInternal(calcDimName);
	}
	if (oFF.isNull(dimension))
	{
		dimension = oFF.QCalculatedDimension._createCalculatedDimension(context, parentComponent, calcDimName);
	}
	dimension.setDimensionType(oFF.DimensionType.CALCULATED_DIMENSION);
	dimension.setName(calcDimName);
	dimension.setTopEntries(inaStructure.getIntegerByKeyExt("Top", 0));
	dimension.setSkipEntries(inaStructure.getIntegerByKeyExt("Skip", 0));
	var inaDataSource = inaStructure.getStructureByKey("DataSource");
	dimension.setPreQueryName(inaDataSource.getStringByKey("ObjectName"));
	dimension.setJoinType(oFF.JoinType.lookup(inaStructure.getStringByKey("JoinType")));
	var inaJoinFields = inaStructure.getListByKey("JoinFields");
	var size = inaJoinFields.size();
	var idx;
	for (idx = 0; idx < size; idx++)
	{
		var inaJoinField = inaJoinFields.getStructureAt(idx);
		dimension.addJoinFieldByString(inaJoinField.getStringByKey("JoinFieldName"), inaJoinField.getStringByKey("JoinFieldNameInReferencedData"));
	}
	var inaFieldMappings = inaStructure.getListByKey("FieldMappings");
	size = inaFieldMappings.size();
	for (idx = 0; idx < size; idx++)
	{
		var inaFieldMapping = inaFieldMappings.getStructureAt(idx);
		dimension.addFieldMappingByString(inaFieldMapping.getStringByKey("FieldName"), inaFieldMapping.getStringByKey("FieldNameInReferencedData"));
		if (importer.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			if (inaFieldMapping.getStringByKey("CalculatedDimensionFieldValueType") !== null)
			{
				var fieldByName = dimension.getFieldByName(inaFieldMapping.getStringByKey("FieldName"));
				fieldByName.setValueType(oFF.QInAConverter.lookupValueType(inaFieldMapping.getStringByKey("CalculatedDimensionFieldValueType")));
			}
		}
	}
	this.importFieldsLayout(importer, inaStructure, dimension, context);
	importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
	return dimension;
};
oFF.QInACalculatedDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	inaStructure.putString("Name", dimension.getName());
	var type = dimension.getAxisType();
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(type));
	var topEntries = dimension.getTopEntries();
	if (topEntries > 0)
	{
		inaStructure.putInteger("Top", topEntries);
	}
	var skipEntries = dimension.getSkipEntries();
	if (skipEntries > 0)
	{
		inaStructure.putInteger("Skip", skipEntries);
	}
	var inaDataSource = inaStructure.putNewStructure("DataSource");
	inaDataSource.putString("ObjectName", dimension.getPreQueryName());
	inaDataSource.putString("Type", "Query");
	inaStructure.putString("JoinType", dimension.getJoinType().getName());
	var inaJoinFields = inaStructure.putNewList("JoinFields");
	var joinFields = dimension.getJoinFields();
	var size = joinFields.size();
	var i;
	for (i = 0; i < size; i++)
	{
		var fieldNamePair = joinFields.get(i);
		var inaJoinField = inaJoinFields.addNewStructure();
		inaJoinField.putString("JoinFieldName", fieldNamePair.getLocaleFieldName());
		inaJoinField.putString("JoinFieldNameInReferencedData", fieldNamePair.getReferencedFieldName());
	}
	var inaFieldMappings = inaStructure.putNewList("FieldMappings");
	var fieldMappings = dimension.getFieldMappings();
	var fieldMappingsReordered = oFF.XList.create();
	size = fieldMappings.size();
	for (i = 0; i < size; i++)
	{
		var fieldMappingOriginal = fieldMappings.get(i);
		if (oFF.XString.isEqual(dimension.getKeyField().getName(), fieldMappingOriginal.getLocaleFieldName()))
		{
			fieldMappingsReordered.insert(0, fieldMappingOriginal);
		}
		else
		{
			fieldMappingsReordered.add(fieldMappingOriginal);
		}
	}
	for (i = 0; i < size; i++)
	{
		var fieldMapping = fieldMappingsReordered.get(i);
		var inaFieldMapping = inaFieldMappings.addNewStructure();
		inaFieldMapping.putString("FieldName", fieldMapping.getLocaleFieldName());
		inaFieldMapping.putString("FieldNameInReferencedData", fieldMapping.getReferencedFieldName());
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			var localFieldName = fieldMapping.getLocaleFieldName();
			if (dimension.getFieldByName(localFieldName).getValueType() !== oFF.XValueType.STRING)
			{
				var inaValueType = oFF.QInAConverter.lookupValueTypeInA(dimension.getFieldByName(localFieldName).getValueType());
				inaFieldMapping.putString("CalculatedDimensionFieldValueType", inaValueType);
			}
		}
	}
	oFF.QInADimension.exportFieldLayout(exporter, inaStructure, dimension);
	exporter.exportTotals(dimension, inaStructure);
	return inaStructure;
};

oFF.QInAFilterDynamic = function() {};
oFF.QInAFilterDynamic.prototype = new oFF.QInAFilter();
oFF.QInAFilterDynamic.prototype._ff_c = "QInAFilterDynamic";

oFF.QInAFilterDynamic.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_DYNAMIC;
};
oFF.QInAFilterDynamic.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var inaFilter = inaStructure.getStructureByKey("DynamicFilter");
	if (oFF.isNull(inaFilter))
	{
		inaFilter = inaStructure.getStructureByKey("Filter");
	}
	var filter = parentComponent;
	var filterExpression = null;
	if (oFF.notNull(filter))
	{
		if (filter.isDynamicFilterInitialized())
		{
			filterExpression = filter.getDynamicFilter();
			filterExpression.setComplexRoot(null);
			if (filterExpression.getModelCapabilities().supportsCellValueOperand())
			{
				filterExpression.setIsSuppressingNulls(false);
			}
		}
		filter.resetEffectiveFilter();
	}
	if (oFF.notNull(inaFilter) && !inaFilter.isEmpty())
	{
		filterExpression = importer.importFilterExpression(filterExpression, inaFilter, filter, context);
	}
	if (oFF.notNull(filter))
	{
		filter.setDynamicFilter(filterExpression);
	}
	return filterExpression;
};
oFF.QInAFilterDynamic.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var modelComponent2 = modelComponent;
	var modelComponent3 = modelComponent2;
	var filter = modelComponent3;
	var filterExpressionState = null;
	if (filter.isDynamicFilterInitialized())
	{
		filterExpressionState = filter.getDynamicFilter();
	}
	var queryModel = modelComponent3.getQueryModel();
	var isAbap = exporter.isAbap(modelComponent3);
	var inaName;
	if (isAbap)
	{
		inaName = "Filter";
	}
	else
	{
		inaName = "DynamicFilter";
	}
	var useOnlyInternalFilter = oFF.notNull(exporter.variableProcessingDirective) && queryModel.getModelCapabilities().supportsVariableMasking();
	if (useOnlyInternalFilter)
	{
		var inaSelectionState = exporter.exportFilterExpression(filterExpressionState);
		if (oFF.notNull(inaSelectionState))
		{
			inaStructure.put(inaName, inaSelectionState);
		}
	}
	else
	{
		var tmpFilter = null;
		if (filter.isTmpFilterInitialized())
		{
			tmpFilter = filter.getTmpFilter();
		}
		var exportedFilter = this.exportFilter(exporter, filter, filterExpressionState, filter.getLinkedFilters(), tmpFilter, filter.getTransientZoomDisplayFilter(), filter.getZoomDataFilter());
		if (oFF.notNull(exportedFilter))
		{
			inaStructure.put(inaName, exportedFilter);
		}
	}
	return inaStructure;
};

oFF.QInAFilterVisibility = function() {};
oFF.QInAFilterVisibility.prototype = new oFF.QInAFilter();
oFF.QInAFilterVisibility.prototype._ff_c = "QInAFilterVisibility";

oFF.QInAFilterVisibility.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_VISIBILITY;
};
oFF.QInAFilterVisibility.prototype.getTagName = function()
{
	return "VisibilityFilter";
};
oFF.QInAFilterVisibility.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var filter = parentComponent;
	if (oFF.notNull(filter) && filter.isVisibilityFilterInitialized())
	{
		var filterExpression = filter.getVisibilityFilter();
		filterExpression.setComplexRoot(null);
		if (filterExpression.getModelCapabilities().supportsCellValueOperand())
		{
			filterExpression.setIsSuppressingNulls(false);
		}
	}
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	var selectionContainerVisibility = importer.importFilterExpression(null, inaStructure, filter, context);
	if (oFF.notNull(filter) && oFF.notNull(selectionContainerVisibility))
	{
		filter.setVisibilityFilter(selectionContainerVisibility);
	}
	return selectionContainerVisibility;
};
oFF.QInAFilterVisibility.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var filter = modelComponent;
	if (filter.getModelCapabilities().supportsVisibilityFilter())
	{
		if (exporter.mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
		{
			return filter.isValueHelpVisibilityFilterInitialized() ? this.exportFilter(exporter, filter, filter.getValuehelpVisibilityFilter(), null, null, null, null) : null;
		}
		var tmpVisibilityFilter = null;
		if (filter.isTmpVisibilityFilterInitialized())
		{
			tmpVisibilityFilter = filter.getTmpVisibilityFilter();
		}
		var visibilityFilter = null;
		if (filter.isVisibilityFilterInitialized())
		{
			visibilityFilter = filter.getVisibilityFilter();
		}
		return this.exportFilter(exporter, filter, visibilityFilter, filter.getLinkedVisibilityFilters(), tmpVisibilityFilter, filter.getTransientZoomVisibilityFilter(), null);
	}
	return null;
};
oFF.QInAFilterVisibility.prototype.isValidFilterExpression = function(filterExpressionState)
{
	return oFF.notNull(filterExpressionState);
};

oFF.QInAMemberFormulaMeasure = function() {};
oFF.QInAMemberFormulaMeasure.prototype = new oFF.QInAFormulaMeasure();
oFF.QInAMemberFormulaMeasure.prototype._ff_c = "QInAMemberFormulaMeasure";

oFF.QInAMemberFormulaMeasure.importIteration = function(importer, member, context, inaIteration)
{
	var iteration = oFF.QFactory.createIteration(context);
	member.setIteration(iteration);
	iteration.setStartValueMemberName(inaIteration.getStringByKey("StartValueMember"));
	var inaIterationDimensions = inaIteration.getListByKey("IterationDimensions");
	if (oFF.XCollectionUtils.hasElements(inaIterationDimensions))
	{
		var size = inaIterationDimensions.size();
		for (var i = 0; i < size; i++)
		{
			var inaIterationDimension = inaIterationDimensions.getStructureAt(i);
			var iterationDimension = oFF.QFactory.createIterationDimension(context);
			iterationDimension.setDimensionName(inaIterationDimension.getStringByKey("Name"));
			iterationDimension.setPartitionLevelName(inaIterationDimension.getStringByKey("PartitionLevel"));
			iteration.addIterationDimension(iterationDimension);
		}
	}
};
oFF.QInAMemberFormulaMeasure.signFlipCrossCalcMembers = function(queryModel, formulaItem)
{
	if (oFF.notNull(formulaItem))
	{
		var children = formulaItem.getChildren();
		var index = 0;
		while (children.hasNext())
		{
			var child = children.next();
			if (child.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
			{
				var formulaItemMember = child;
				if (queryModel.getMeasureDimension().getStructureMemberByAliasOrMember(formulaItemMember.getMemberName()) !== null)
				{
					var formulaItemFunction = formulaItem;
					if (!oFF.XString.isEqual(formulaItemFunction.getFunctionName(), oFF.FormulaOperator.GRAND_TOTAL.getName()))
					{
						formulaItemFunction.set(index, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember));
					}
				}
			}
			else
			{
				oFF.QInAMemberFormulaMeasure.signFlipCrossCalcMembers(queryModel, child);
				if (child.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
				{
					var childFormulaItemFunction = child;
					if (oFF.XString.isEqual(childFormulaItemFunction.getFunctionName(), oFF.FormulaOperator.GRAND_TOTAL.getName()) && formulaItem.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
					{
						var currentFormulaItemFunction = formulaItem;
						currentFormulaItemFunction.set(index, oFF.QInAFormulaMeasure.signFlipMember(child));
					}
				}
			}
			index++;
		}
	}
};
oFF.QInAMemberFormulaMeasure.isAccountModelCrossCalculation = function(formulaMeasure)
{
	var queryModel = formulaMeasure.getQueryModel();
	if (oFF.notNull(queryModel) && queryModel.getAccountDimension() !== null && queryModel.getAccountDimension().getAccountTypeAttributeName() !== null)
	{
		return formulaMeasure.getDimension() !== queryModel.getAccountDimension();
	}
	return false;
};
oFF.QInAMemberFormulaMeasure.exportCrossCalcSignFlip = function(exporter, formulaMeasure, inaFormula)
{
	var context = formulaMeasure.getContext();
	var queryModel = formulaMeasure.getQueryModel();
	var formula = formulaMeasure.getFormula();
	var signFlipOn = formula.cloneOlapComponent(context, null);
	if (signFlipOn.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
	{
		var formulaItemMember = signFlipOn;
		var signFlipMember = queryModel.getMeasureDimension().getStructureMemberByAliasOrMember(formulaItemMember.getMemberName());
		if (oFF.notNull(signFlipMember))
		{
			if ((signFlipMember.getExceptionAggregationType() === null || signFlipMember.getMemberType() === oFF.MemberType.EXCEPTION_AGGREGATION) && formulaMeasure.getExceptionAggregationType() === null)
			{
				signFlipOn = oFF.QInAFormulaMeasure.signFlipMember(signFlipOn);
			}
		}
	}
	else
	{
		oFF.QInAMemberFormulaMeasure.signFlipCrossCalcMembers(queryModel, signFlipOn);
		if (signFlipOn.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			var childFormulaItemFunction = signFlipOn;
			if (oFF.XString.isEqual(childFormulaItemFunction.getFunctionName(), oFF.FormulaOperator.GRAND_TOTAL.getName()))
			{
				signFlipOn = oFF.QInAFormulaMeasure.signFlipMember(signFlipOn);
			}
		}
	}
	var signFlipOff = formula.cloneOlapComponent(context, null);
	var ifFunc = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
	var or = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.OR.getName());
	ifFunc.add(or);
	var attributeName = queryModel.getAccountDimension().getAccountTypeAttributeName();
	var inc = oFF.QFactory.createFormulaOperation(context);
	inc.setOperator(oFF.ComparisonOperator.EQUAL);
	inc.setLeftSide(oFF.QFactory.createFormulaAttributeWithName(context, attributeName));
	inc.setRightSide(oFF.QFactory.createFormulaConstantWithStringValue(context, oFF.AccountType.INC.getName()));
	or.add(inc);
	var leq = oFF.QFactory.createFormulaOperation(context);
	leq.setOperator(oFF.ComparisonOperator.EQUAL);
	leq.setLeftSide(oFF.QFactory.createFormulaAttributeWithName(context, attributeName));
	leq.setRightSide(oFF.QFactory.createFormulaConstantWithStringValue(context, oFF.AccountType.LEQ.getName()));
	or.add(leq);
	var trueFunc = oFF.QFactory.createFormulaOperation(context);
	trueFunc.setOperator(oFF.MathOperator.MULT);
	trueFunc.setLeftSide(signFlipOn);
	trueFunc.setRightSide(oFF.QFactory.createFormulaConstantWithIntValue(context, -1));
	ifFunc.add(trueFunc);
	ifFunc.add(signFlipOff);
	oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, ifFunc, inaFormula, context, true, false, formulaMeasure.getName());
};
oFF.QInAMemberFormulaMeasure.exportIteration = function(exporter, formulaMeasure, inaFormula)
{
	var inaIteration = inaFormula.putNewStructure("Iteration");
	var iteration = formulaMeasure.getIteration();
	inaIteration.putString("StartValueMember", iteration.getStartValueMemberName());
	var iterationDimensions = iteration.getIterationDimensions();
	var inaIterationDimensions = inaIteration.putNewList("IterationDimensions");
	var size = iterationDimensions.size();
	for (var i = 0; i < size; i++)
	{
		var iterationDimension = iterationDimensions.get(i);
		var inaIterationDimension = inaIterationDimensions.addNewStructure();
		inaIterationDimension.putStringNotNullAndNotEmpty("Name", iterationDimension.getDimensionName());
		inaIterationDimension.putStringNotNullAndNotEmpty("PartitionLevel", iterationDimension.getPartitionLevelName());
	}
};
oFF.QInAMemberFormulaMeasure.exportInverseFormulas = function(exporter, formulaMeasure, inaFormula)
{
	var inaInverseFormulas = inaFormula.putNewList("InverseFormulas");
	var inverseFormulaList = formulaMeasure.getInverseFormulaList();
	var numberOfInverseFormulas = inverseFormulaList.size();
	for (var i = 0; i < numberOfInverseFormulas; i++)
	{
		var inaInverseFormula = oFF.PrFactory.createStructure();
		inaInverseFormulas.add(inaInverseFormula);
		var formulaInverseFormula = inverseFormulaList.get(i);
		var inaInverseFormulaFormula = oFF.PrFactory.createStructure();
		oFF.QInAFormulaMeasure.exportFormulaItem(exporter, formulaInverseFormula.getInternalFormulaItem(), inaInverseFormulaFormula, formulaMeasure.getContext());
		inaInverseFormula.put("Formula", inaInverseFormulaFormula);
		var targetMemberName = formulaInverseFormula.getTargetMemberName();
		var inaTarget = oFF.PrFactory.createStructure();
		inaInverseFormula.put("Target", inaTarget);
		var inaMember = oFF.PrFactory.createStructure();
		inaTarget.put("Member", inaMember);
		inaMember.putString("Name", targetMemberName);
		var condition = formulaInverseFormula.getCondition();
		if (oFF.notNull(condition))
		{
			var inaCondition = oFF.PrFactory.createStructure();
			inaInverseFormula.put("Condition", inaCondition);
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, condition, inaCondition, formulaMeasure.getContext());
		}
	}
};
oFF.QInAMemberFormulaMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var dimension = parentComponent;
	var queryModel = context.getQueryModel();
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getMeasureDimension();
	}
	var member;
	var newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	var inaFormula;
	if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && dimension.getStructureMember(newMemberName) !== null)
	{
		member = dimension.getStructureMember(newMemberName);
		inaFormula = inaStructure.getStructureByKey("[Measures].[MemberDetails]").getStructureByKey("Formula");
	}
	else
	{
		member = oFF.QFormulaMeasure._createFormulaMeasure(context, dimension);
		oFF.QInAFormulaMeasure.importNameAndText(inaStructure, member, dimension);
		inaFormula = inaStructure.getStructureByKey("Formula");
	}
	importer.importExceptions(inaStructure, member);
	var importFormula = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inaFormula, null, context);
	member.setFormula(importFormula);
	if (member.supportsCalculatedBeforeAggregation())
	{
		member.setIsCalculatedBeforeAggregation(oFF.XString.isEqual("CalculationBeforeAggregation", inaStructure.getStringByKey("ExecutionStep")));
	}
	if (oFF.notNull(inaFormula))
	{
		var inAInverseFormulaList = inaFormula.getListByKey("InverseFormulas");
		if (oFF.XCollectionUtils.hasElements(inAInverseFormulaList))
		{
			this.importInverseFormula(importer, context, member, inAInverseFormulaList);
		}
	}
	var inaIteration = inaFormula.getStructureByKey("Iteration");
	if (oFF.XCollectionUtils.hasElements(inaIteration))
	{
		oFF.QInAMemberFormulaMeasure.importIteration(importer, member, context, inaIteration);
	}
	return member;
};
oFF.QInAMemberFormulaMeasure.prototype.importInverseFormula = function(importer, context, member, inAInverseFormulaList)
{
	var dimension = member.getDimension();
	var numberOfInverseFormula = inAInverseFormulaList.size();
	var inverseFormulaList = member.getInverseFormulaList();
	for (var i = 0; i < numberOfInverseFormula; i++)
	{
		var inAInverseFormula = inAInverseFormulaList.get(i);
		var inAInverseFormulaTarget = inAInverseFormula.getStructureByKey("Target");
		var inAInverseFormulaCondition = inAInverseFormula.getStructureByKey("Condition");
		var inAInverseFormulaFormula = inAInverseFormula.getStructureByKey("Formula");
		var inATargetMember = inAInverseFormulaTarget.getStructureByKey("Member");
		var targetMemberName = inATargetMember.getStringByKey("Name");
		var inverseFormulaItem = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inAInverseFormulaFormula, null, context);
		var conditionFormulaItem = null;
		if (oFF.notNull(inAInverseFormulaCondition))
		{
			conditionFormulaItem = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inAInverseFormulaCondition, null, context);
		}
		var inverseFormula = oFF.QFormulaInverseFormula.createInverseFormula(context, member, conditionFormulaItem, targetMemberName, inverseFormulaItem);
		inverseFormulaList.add(inverseFormula);
	}
};
oFF.QInAMemberFormulaMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var formulaMeasure = modelComponent;
	inaStructure.putString("Name", formulaMeasure.getName());
	oFF.QInAMember.exportText(exporter, inaStructure, formulaMeasure);
	var inaFormula = oFF.PrFactory.createStructure();
	if (formulaMeasure.isAutoSignFlip() && oFF.QInAMemberFormulaMeasure.isAccountModelCrossCalculation(formulaMeasure))
	{
		oFF.QInAMemberFormulaMeasure.exportCrossCalcSignFlip(exporter, formulaMeasure, inaFormula);
	}
	else
	{
		oFF.QInAFormulaMeasure.exportFormulaMeasure(exporter, formulaMeasure, inaFormula);
	}
	if (oFF.XCollectionUtils.hasElements(formulaMeasure.getInverseFormulaList()))
	{
		oFF.QInAMemberFormulaMeasure.exportInverseFormulas(exporter, formulaMeasure, inaFormula);
	}
	if (formulaMeasure.getIteration() !== null)
	{
		oFF.QInAMemberFormulaMeasure.exportIteration(exporter, formulaMeasure, inaFormula);
	}
	if (inaFormula.hasElements())
	{
		inaStructure.put("Formula", inaFormula);
	}
	if (formulaMeasure.supportsCalculatedBeforeAggregation() && formulaMeasure.isCalculatedBeforeAggregation())
	{
		inaStructure.putString("ExecutionStep", "CalculationBeforeAggregation");
	}
	return inaStructure;
};

oFF.QInAVarHierNode = function() {};
oFF.QInAVarHierNode.prototype = new oFF.QInAVarDimMember();
oFF.QInAVarHierNode.prototype._ff_c = "QInAVarHierNode";

oFF.QInAVarHierNode.prototype.getComponentType = function()
{
	return oFF.VariableType.HIERARCHY_NODE_VARIABLE;
};
oFF.QInAVarHierNode.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	var nodeVariable = modelComponent;
	var inaNodeValues = inaStructure.getStructureByKey("Values");
	var selectionContainerNode = oFF.QFactory.createFilterExpression(context, nodeVariable);
	importer.importFilterExpression(selectionContainerNode, inaNodeValues, nodeVariable, context);
	nodeVariable.setFilter(selectionContainerNode);
	return nodeVariable;
};

oFF.QInAValueHelpFilter = function() {};
oFF.QInAValueHelpFilter.prototype = new oFF.QInAFilter();
oFF.QInAValueHelpFilter.prototype._ff_c = "QInAValueHelpFilter";

oFF.QInAValueHelpFilter.getValueHelpFilter = function(dimension, filter)
{
	var selectorFilterUsage = dimension.getSelectorFilterUsage();
	var selectionContainer = null;
	if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER && filter.isDynamicFilterInitialized())
	{
		selectionContainer = filter.getDynamicFilter();
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE)
	{
		selectionContainer = filter.getEffectiveFilter();
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EXCLUDING_DIMENSION && filter.isDynamicFilterInitialized())
	{
		selectionContainer = filter.getDynamicFilter();
		oFF.QInAValueHelpFilter.removeFilterOnDimensionVh(selectionContainer, dimension);
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.SELECTOR_FILTER && filter.isValueHelpFilterInitialized())
	{
		selectionContainer = filter.getValuehelpFilter();
	}
	return selectionContainer;
};
oFF.QInAValueHelpFilter.removeFilterOnDimensionVh = function(querySelectionState, dimension)
{
	var cartesianProduct = querySelectionState.getCartesianProduct();
	if (oFF.notNull(cartesianProduct))
	{
		var filterIndex = 0;
		while (filterIndex < cartesianProduct.size())
		{
			var cartesianChild = cartesianProduct.getCartesianChild(filterIndex);
			if (cartesianChild.getDimension().isEqualTo(dimension))
			{
				cartesianProduct.removeAt(filterIndex);
			}
			else
			{
				filterIndex++;
			}
		}
	}
};
oFF.QInAValueHelpFilter.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QInAValueHelpFilter.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_VALUE_HELP;
};
oFF.QInAValueHelpFilter.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QInAValueHelpFilter.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	var dimension = modelComponent;
	var filter = dimension.getQueryModel().getFilter();
	var valueHelpFilter = oFF.QInAValueHelpFilter.getValueHelpFilter(dimension, filter);
	if (oFF.notNull(valueHelpFilter))
	{
		var selectorFilterUsage = dimension.getSelectorFilterUsage();
		if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE && filter.isIgnoreInternalNonMeasureFilter())
		{
			return this.exportFilter(exporter, filter, filter.getDynamicFilter(), filter.getLinkedFilters(), filter.getTmpFilter(), filter.getTransientZoomDisplayFilter(), filter.getZoomDataFilter());
		}
		else if (dimension.isSelectorUseQueryDrillOperations())
		{
			return this.exportFilter(exporter, filter, valueHelpFilter, null, null, filter.getTransientZoomDisplayFilter(), filter.getZoomDataFilter());
		}
		else
		{
			return exporter.exportFilterExpression(valueHelpFilter);
		}
	}
	return null;
};

oFF.InAFusionResult = function() {};
oFF.InAFusionResult.prototype = new oFF.DfSessionContext();
oFF.InAFusionResult.prototype._ff_c = "InAFusionResult";

oFF.InAFusionResult.create = function(application, config)
{
	var newObj = new oFF.InAFusionResult();
	newObj.setupSessionContext(application.getSession());
	newObj.m_config = config;
	newObj.m_application = application;
	newObj.m_layers = oFF.XList.create();
	return newObj;
};
oFF.InAFusionResult.prototype.m_config = null;
oFF.InAFusionResult.prototype.m_application = null;
oFF.InAFusionResult.prototype.m_connectionContainer = null;
oFF.InAFusionResult.prototype.m_serverMetadata = null;
oFF.InAFusionResult.prototype.m_capabilities = null;
oFF.InAFusionResult.prototype.m_exporter = null;
oFF.InAFusionResult.prototype.m_metadataContent = null;
oFF.InAFusionResult.prototype.m_modelContent = null;
oFF.InAFusionResult.prototype.m_repoContent = null;
oFF.InAFusionResult.prototype.m_layers = null;
oFF.InAFusionResult.prototype.m_cubeDataSource = null;
oFF.InAFusionResult.prototype.getConfig = function()
{
	return this.m_config;
};
oFF.InAFusionResult.prototype.getApplication = function()
{
	return this.m_application;
};
oFF.InAFusionResult.prototype.getConnectionContainer = function()
{
	return this.m_connectionContainer;
};
oFF.InAFusionResult.prototype.getServerMetadata = function()
{
	return this.m_serverMetadata;
};
oFF.InAFusionResult.prototype.setServerMetadata = function(serverMetadata)
{
	this.m_serverMetadata = serverMetadata;
};
oFF.InAFusionResult.prototype.setConnectionContainer = function(connectionContainer)
{
	this.m_connectionContainer = connectionContainer;
};
oFF.InAFusionResult.prototype.getCapabilities = function()
{
	return this.m_capabilities;
};
oFF.InAFusionResult.prototype.setCapabilities = function(capabilities)
{
	this.m_capabilities = capabilities;
};
oFF.InAFusionResult.prototype.getMainCapabilities = function()
{
	return this.m_capabilities.getActiveCapabilities();
};
oFF.InAFusionResult.prototype.getExporter = function()
{
	return this.m_exporter;
};
oFF.InAFusionResult.prototype.setExporter = function(exporter)
{
	this.m_exporter = exporter;
};
oFF.InAFusionResult.prototype.getMetadataContent = function()
{
	return this.m_metadataContent;
};
oFF.InAFusionResult.prototype.setMetadataContent = function(metadata)
{
	this.m_metadataContent = metadata;
};
oFF.InAFusionResult.prototype.getModelContent = function()
{
	return this.m_modelContent;
};
oFF.InAFusionResult.prototype.setModelResponse = function(model)
{
	this.m_modelContent = model;
};
oFF.InAFusionResult.prototype.getRepositoryContent = function()
{
	return this.m_repoContent;
};
oFF.InAFusionResult.prototype.setRepositoryContent = function(repo)
{
	this.m_repoContent = repo;
};
oFF.InAFusionResult.prototype.addLayer = function(layer)
{
	this.m_layers.add(layer);
};
oFF.InAFusionResult.prototype.getLayer = function(type)
{
	for (var i = 0; i < this.m_layers.size(); i++)
	{
		var layer = this.m_layers.get(i);
		if (layer.getComponentType() === type)
		{
			return layer;
		}
	}
	return null;
};
oFF.InAFusionResult.prototype.getDataSource = function()
{
	return this.m_cubeDataSource;
};
oFF.InAFusionResult.prototype.setDataSource = function(dataSource)
{
	this.m_cubeDataSource = dataSource;
};

oFF.InARsDataCellProvider = function() {};
oFF.InARsDataCellProvider.prototype = new oFF.DfApplicationContext();
oFF.InARsDataCellProvider.prototype._ff_c = "InARsDataCellProvider";

oFF.InARsDataCellProvider.create = function(application, queryProvider)
{
	var provider = new oFF.InARsDataCellProvider();
	provider.setupProvider(application, queryProvider);
	return provider;
};
oFF.InARsDataCellProvider.prototype.m_supportsDataCellMixedValues = false;
oFF.InARsDataCellProvider.prototype.m_supportsSAPDateFormat = false;
oFF.InARsDataCellProvider.prototype.m_supportsInputReadinessStates = false;
oFF.InARsDataCellProvider.prototype.m_ocpStructure = null;
oFF.InARsDataCellProvider.prototype.m_exceptionSettings = null;
oFF.InARsDataCellProvider.prototype.m_rowsCount = 0;
oFF.InARsDataCellProvider.prototype.m_columnsCount = 0;
oFF.InARsDataCellProvider.prototype.m_csValueException = null;
oFF.InARsDataCellProvider.prototype.m_csMaxAlertLevelName = null;
oFF.InARsDataCellProvider.prototype.m_csMaxAlertLevel = null;
oFF.InARsDataCellProvider.prototype.m_csExceptionSetting = null;
oFF.InARsDataCellProvider.prototype.m_csExceptionPriority = null;
oFF.InARsDataCellProvider.prototype.m_lastX = 0;
oFF.InARsDataCellProvider.prototype.m_lastY = 0;
oFF.InARsDataCellProvider.prototype.m_valueType = null;
oFF.InARsDataCellProvider.prototype.m_csStringValue = null;
oFF.InARsDataCellProvider.prototype.m_csFormattedValue = null;
oFF.InARsDataCellProvider.prototype.m_csFormatString = null;
oFF.InARsDataCellProvider.prototype.m_csPlanningCommandIds = null;
oFF.InARsDataCellProvider.prototype.m_csQueryDataCellReference = null;
oFF.InARsDataCellProvider.prototype.m_csFormattedCurrencyUnit = null;
oFF.InARsDataCellProvider.prototype.m_csCurrencyUnit = null;
oFF.InARsDataCellProvider.prototype.m_csDoubleValue = 0.0;
oFF.InARsDataCellProvider.prototype.m_csCurrencyUnitType = 0;
oFF.InARsDataCellProvider.prototype.m_csCurrencyUnitPosition = 0;
oFF.InARsDataCellProvider.prototype.m_csComplexUnitIndex = 0;
oFF.InARsDataCellProvider.prototype.m_csDocumentId = null;
oFF.InARsDataCellProvider.prototype.m_csInputReadinessIndex = 0;
oFF.InARsDataCellProvider.prototype.m_csInputEnabled = false;
oFF.InARsDataCellProvider.prototype.m_csLockedValue = false;
oFF.InARsDataCellProvider.prototype.m_csIsInsideBounds = false;
oFF.InARsDataCellProvider.prototype.m_exceptions = null;
oFF.InARsDataCellProvider.prototype.m_inputEnabled = null;
oFF.InARsDataCellProvider.prototype.m_inputReadinessIndex = null;
oFF.InARsDataCellProvider.prototype.m_lockedValue = null;
oFF.InARsDataCellProvider.prototype.m_unitDescriptions = null;
oFF.InARsDataCellProvider.prototype.m_unitTypes = null;
oFF.InARsDataCellProvider.prototype.m_unitPositions = null;
oFF.InARsDataCellProvider.prototype.m_units = null;
oFF.InARsDataCellProvider.prototype.m_values = null;
oFF.InARsDataCellProvider.prototype.m_roundedValues = null;
oFF.InARsDataCellProvider.prototype.m_valuesFormatted = null;
oFF.InARsDataCellProvider.prototype.m_formatStrings = null;
oFF.InARsDataCellProvider.prototype.m_cellValueTypes = null;
oFF.InARsDataCellProvider.prototype.m_cellDataTypes = null;
oFF.InARsDataCellProvider.prototype.m_queryDataCellReferences = null;
oFF.InARsDataCellProvider.prototype.m_exceptionNameWithSettings = null;
oFF.InARsDataCellProvider.prototype.m_exceptionName = null;
oFF.InARsDataCellProvider.prototype.m_exceptionAlertLevel = null;
oFF.InARsDataCellProvider.prototype.m_exceptionSettingIndex = null;
oFF.InARsDataCellProvider.prototype.m_planningCommandIds = null;
oFF.InARsDataCellProvider.prototype.m_complexUnitIndices = null;
oFF.InARsDataCellProvider.prototype.m_documentIds = null;
oFF.InARsDataCellProvider.prototype.m_supportsUnifiedDataCells = false;
oFF.InARsDataCellProvider.prototype.m_csDecimalPlaces = 0;
oFF.InARsDataCellProvider.prototype.m_csScalingFactor = 0;
oFF.InARsDataCellProvider.prototype.m_decimalPlaces = null;
oFF.InARsDataCellProvider.prototype.m_scalingFactors = null;
oFF.InARsDataCellProvider.prototype.m_explainQueryNames = null;
oFF.InARsDataCellProvider.prototype.m_explainQueryName = null;
oFF.InARsDataCellProvider.prototype.copyInARsDataCellProvider = function(origin)
{
	this.m_supportsDataCellMixedValues = origin.m_supportsDataCellMixedValues;
	this.m_supportsSAPDateFormat = origin.m_supportsSAPDateFormat;
	this.m_supportsInputReadinessStates = origin.m_supportsInputReadinessStates;
	this.m_supportsUnifiedDataCells = origin.m_supportsUnifiedDataCells;
	var exceptionSettings = oFF.isNull(origin.m_exceptionSettings) ? null : origin.m_exceptionSettings.getPermaCopy();
	var ocpStructure = oFF.isNull(origin.m_ocpStructure) ? null : origin.m_ocpStructure.getPermaCopy();
	this.setOcpStructure(ocpStructure, origin.m_columnsCount, origin.m_rowsCount, exceptionSettings);
};
oFF.InARsDataCellProvider.prototype.setupProvider = function(application, queryProvider)
{
	this.setupApplicationContext(application);
	this.m_supportsSAPDateFormat = queryProvider.getCapabilitiesBase().supportsSapDate();
	this.m_supportsUnifiedDataCells = queryProvider.getCapabilitiesBase().supportsUnifiedDataCells();
	this.m_supportsDataCellMixedValues = queryProvider.getCapabilitiesBase().supportsDataCellMixedValues();
	this.m_supportsInputReadinessStates = queryProvider.supportsInputReadinessStates();
};
oFF.InARsDataCellProvider.prototype.releaseObject = function()
{
	this.m_ocpStructure = null;
	this.m_exceptionSettings = null;
	this.m_csValueException = null;
	this.m_csMaxAlertLevelName = null;
	this.m_csExceptionSetting = oFF.XObjectExt.release(this.m_csExceptionSetting);
	this.m_csExceptionPriority = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_csExceptionPriority);
	this.m_csMaxAlertLevel = null;
	this.m_csFormattedValue = null;
	this.m_csFormatString = null;
	this.m_csPlanningCommandIds = null;
	this.m_csQueryDataCellReference = null;
	this.m_csFormattedCurrencyUnit = null;
	this.m_csCurrencyUnit = null;
	this.m_exceptions = oFF.XObjectExt.release(this.m_exceptions);
	this.m_inputEnabled = oFF.XObjectExt.release(this.m_inputEnabled);
	this.m_inputReadinessIndex = oFF.XObjectExt.release(this.m_inputReadinessIndex);
	this.m_lockedValue = oFF.XObjectExt.release(this.m_lockedValue);
	this.m_unitDescriptions = oFF.XObjectExt.release(this.m_unitDescriptions);
	this.m_unitTypes = oFF.XObjectExt.release(this.m_unitTypes);
	this.m_unitPositions = oFF.XObjectExt.release(this.m_unitPositions);
	this.m_units = oFF.XObjectExt.release(this.m_units);
	this.m_values = oFF.XObjectExt.release(this.m_values);
	this.m_valuesFormatted = oFF.XObjectExt.release(this.m_valuesFormatted);
	this.m_formatStrings = oFF.XObjectExt.release(this.m_formatStrings);
	this.m_cellValueTypes = oFF.XObjectExt.release(this.m_cellValueTypes);
	this.m_cellDataTypes = oFF.XObjectExt.release(this.m_cellDataTypes);
	this.m_queryDataCellReferences = oFF.XObjectExt.release(this.m_queryDataCellReferences);
	this.m_exceptionNameWithSettings = null;
	this.m_exceptionName = oFF.XObjectExt.release(this.m_exceptionName);
	this.m_exceptionAlertLevel = oFF.XObjectExt.release(this.m_exceptionAlertLevel);
	this.m_exceptionSettingIndex = oFF.XObjectExt.release(this.m_exceptionSettingIndex);
	this.m_planningCommandIds = oFF.XObjectExt.release(this.m_planningCommandIds);
	this.m_decimalPlaces = oFF.XObjectExt.release(this.m_decimalPlaces);
	this.m_scalingFactors = oFF.XObjectExt.release(this.m_scalingFactors);
	this.m_complexUnitIndices = oFF.XObjectExt.release(this.m_complexUnitIndices);
	this.m_documentIds = oFF.XObjectExt.release(this.m_documentIds);
	this.m_explainQueryNames = oFF.XObjectExt.release(this.m_explainQueryNames);
	oFF.DfApplicationContext.prototype.releaseObject.call( this );
};
oFF.InARsDataCellProvider.prototype.setOcpStructure = function(ocpStructure, columnsCount, rowsCount, exceptionSettings)
{
	this.m_ocpStructure = ocpStructure;
	this.m_rowsCount = rowsCount;
	this.m_columnsCount = columnsCount;
	if (oFF.notNull(this.m_ocpStructure))
	{
		this.m_exceptions = this.getColumn("Exceptions");
		if (oFF.isNull(exceptionSettings))
		{
			this.m_exceptionName = this.getColumn("ExceptionName");
			this.m_exceptionAlertLevel = this.getColumn("ExceptionAlertLevel");
		}
		else
		{
			this.m_exceptionSettings = exceptionSettings;
			this.m_exceptionSettingIndex = this.getColumn("ExceptionSettingIndex");
		}
		if (this.m_supportsInputReadinessStates)
		{
			this.m_inputReadinessIndex = this.getColumn("InputReadinessIndex");
		}
		else
		{
			this.m_inputEnabled = this.getColumn("InputEnabled");
		}
		this.m_lockedValue = this.getColumn("LockedValue");
		this.m_unitDescriptions = this.getColumn("UnitDescriptions");
		this.m_unitTypes = this.getColumn("UnitTypes");
		this.m_unitPositions = this.getColumn("UnitPositions");
		this.m_units = this.getColumn("Units");
		this.m_complexUnitIndices = this.getColumn("UnitIndex");
		this.m_documentIds = this.getColumn("DocumentIds");
		this.m_values = this.getColumn("Values");
		this.m_valuesFormatted = this.getColumn("ValuesFormatted");
		if (this.m_supportsDataCellMixedValues)
		{
			this.m_roundedValues = this.getColumn("ValuesRounded");
		}
		else
		{
			this.m_roundedValues = null;
		}
		this.m_planningCommandIds = this.getColumn("Actions");
		this.m_formatStrings = this.getColumn("CellFormat");
		this.m_cellValueTypes = this.getColumn("CellValueTypes");
		this.m_cellDataTypes = this.getColumn("CellDataType");
		this.m_queryDataCellReferences = this.getColumn("QueryDataCellReferences");
		this.m_explainQueryNames = this.getColumn("ExplainQueryName");
		if (this.m_supportsUnifiedDataCells)
		{
			this.m_decimalPlaces = this.getColumn("NumericRounding");
			this.m_scalingFactors = this.getColumn("NumericShift");
		}
	}
	this.m_lastX = -1;
	this.m_lastY = -1;
	this.m_csIsInsideBounds = true;
	this.m_csMaxAlertLevel = oFF.AlertLevel.NORMAL;
};
oFF.InARsDataCellProvider.prototype.getColumn = function(name)
{
	var inaValueElement = this.m_ocpStructure.getStructureByKey(name);
	if (oFF.isNull(inaValueElement))
	{
		return null;
	}
	return oFF.InARsEncodedValues.createByStructure(inaValueElement);
};
oFF.InARsDataCellProvider.prototype.resetIfNotNull = function(cursor)
{
	if (oFF.notNull(cursor))
	{
		cursor.resetCursor();
	}
};
oFF.InARsDataCellProvider.prototype.resetCursor = function()
{
	this.m_lastX = -1;
	this.m_lastY = -1;
	this.m_csIsInsideBounds = true;
	this.resetIfNotNull(this.m_exceptions);
	this.resetIfNotNull(this.m_exceptionName);
	this.resetIfNotNull(this.m_exceptionAlertLevel);
	this.resetIfNotNull(this.m_exceptionSettingIndex);
	this.resetIfNotNull(this.m_inputEnabled);
	this.resetIfNotNull(this.m_inputReadinessIndex);
	this.resetIfNotNull(this.m_lockedValue);
	this.resetIfNotNull(this.m_unitDescriptions);
	this.resetIfNotNull(this.m_unitTypes);
	this.resetIfNotNull(this.m_unitPositions);
	this.resetIfNotNull(this.m_units);
	this.resetIfNotNull(this.m_values);
	this.resetIfNotNull(this.m_roundedValues);
	this.resetIfNotNull(this.m_valuesFormatted);
	this.resetIfNotNull(this.m_planningCommandIds);
	this.resetIfNotNull(this.m_formatStrings);
	this.resetIfNotNull(this.m_cellValueTypes);
	this.resetIfNotNull(this.m_queryDataCellReferences);
	this.resetIfNotNull(this.m_cellDataTypes);
	this.resetIfNotNull(this.m_decimalPlaces);
	this.resetIfNotNull(this.m_scalingFactors);
	this.resetIfNotNull(this.m_explainQueryNames);
	this.resetIfNotNull(this.m_complexUnitIndices);
	this.resetIfNotNull(this.m_documentIds);
};
oFF.InARsDataCellProvider.prototype.notifyCursorChange = function(cell, x, y)
{
	cell.setColumn(x);
	cell.setRow(y);
	cell.reset();
	if (y < this.m_lastY || y === this.m_lastY && x < this.m_lastX)
	{
		this.resetCursor();
	}
	while (this.m_csIsInsideBounds && (y > this.m_lastY || x > this.m_lastX))
	{
		this.readNextIndex();
		this.m_lastX++;
		if (this.m_lastX >= this.m_columnsCount || this.m_lastY === -1)
		{
			this.m_lastX = 0;
			this.m_lastY++;
		}
	}
	if (!this.m_csIsInsideBounds)
	{
		cell.setValueException(oFF.ValueException.NULL_VALUE);
		if (this.m_supportsUnifiedDataCells)
		{
			cell.setFormattedValue("");
		}
		else
		{
			cell.setFormattedValue(oFF.ValueException.NULL_VALUE.getName());
		}
		cell.setInitialValue(null);
	}
	else if (y === this.m_lastY && x === this.m_lastX)
	{
		this.updateValidCell(cell);
	}
	else
	{
		cell.setValueException(oFF.ValueException.NULL_VALUE);
		if (this.m_supportsUnifiedDataCells)
		{
			cell.setFormattedValue("");
		}
		else
		{
			cell.setFormattedValue(oFF.ValueException.NULL_VALUE.getName());
		}
		cell.setInitialValue(null);
	}
};
oFF.InARsDataCellProvider.prototype.updateValidCell = function(cell)
{
	cell.setValueType(this.m_valueType);
	var isValueExceptionIndicationEmptyValue = this.m_supportsUnifiedDataCells && this.m_csValueException !== oFF.ValueException.NORMAL && this.m_csValueException !== oFF.ValueException.ZERO && this.m_csValueException !== oFF.ValueException.MIXED_CURRENCIES_OR_UNITS;
	if (this.m_csValueException === oFF.ValueException.NULL_VALUE || this.m_csValueException === oFF.ValueException.UNDEFINED || isValueExceptionIndicationEmptyValue)
	{
		cell.setInitialValue(null);
	}
	else
	{
		cell.setInitialValue(this.getXValue());
	}
	if (isValueExceptionIndicationEmptyValue)
	{
		cell.setFormattedValue("");
	}
	else
	{
		cell.setFormattedValue(this.m_csFormattedValue);
	}
	cell.setFormatString(this.m_csFormatString);
	cell.setValueException(this.m_csValueException);
	if (oFF.isNull(this.m_csMaxAlertLevelName))
	{
		cell.setMaxAlertLevelName(this.m_exceptionNameWithSettings);
	}
	else
	{
		cell.setMaxAlertLevelName(this.m_csMaxAlertLevelName);
	}
	cell.setMaxAlertLevel(this.m_csMaxAlertLevel);
	cell.setDataEntryEnabled(this.m_csInputEnabled);
	cell.setInputReadinessIndex(this.m_csInputReadinessIndex);
	cell.setExceptionSettings(this.m_csExceptionSetting);
	cell.setExceptionPriorities(this.m_csExceptionPriority);
	cell.setOriginalValueLock(this.m_csLockedValue);
	cell.setQueryDataCellReference(this.m_csQueryDataCellReference);
	if (oFF.notNull(this.m_complexUnitIndices))
	{
		cell.setUnitIndex(this.m_csComplexUnitIndex);
	}
	if (oFF.notNull(this.m_documentIds))
	{
		cell.setDocumentId(this.m_csDocumentId);
	}
	this.updateCurrencyUnit(cell.getCurrencyUnitBase());
	var planningCommandIdsBase = cell.getPlanningCommandIdsBase();
	planningCommandIdsBase.clear();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_csPlanningCommandIds))
	{
		var planningCommandIds = oFF.XStringTokenizer.splitString(this.m_csPlanningCommandIds, " ");
		if (oFF.notNull(planningCommandIds))
		{
			planningCommandIdsBase.addAll(planningCommandIds);
		}
	}
	if (this.m_supportsUnifiedDataCells && !this.m_valueType.isNumber())
	{
		cell.setDecimalPlaces(0);
		cell.setScalingFactor(0);
	}
	else
	{
		cell.setDecimalPlaces(this.m_csDecimalPlaces);
		cell.setScalingFactor(this.m_csScalingFactor);
	}
	if (oFF.notNull(this.m_explainQueryNames))
	{
		cell.setExplainQueryName(this.m_explainQueryName);
	}
};
oFF.InARsDataCellProvider.prototype.updateCurrencyUnit = function(currencyUnitBase)
{
	if (this.m_csCurrencyUnitType === 1)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(false);
		currencyUnitBase.setIsMixed(false);
	}
	else if (this.m_csCurrencyUnitType === 2)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(false);
		currencyUnitBase.setHasUnit(true);
		currencyUnitBase.setIsMixed(false);
	}
	else if (this.m_csCurrencyUnitType === 3)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(true);
		currencyUnitBase.setIsMixed(false);
	}
	else if (this.m_csCurrencyUnitType === -1)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setIsMixed(true);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(true);
	}
	else
	{
		currencyUnitBase.setIsEmpty(true);
		currencyUnitBase.setHasCurrency(false);
		currencyUnitBase.setHasUnit(false);
		currencyUnitBase.setIsMixed(false);
	}
	if (!currencyUnitBase.isEmpty())
	{
		if (oFF.notNull(this.m_csFormattedCurrencyUnit))
		{
			currencyUnitBase.setFormatted(this.m_csFormattedCurrencyUnit);
		}
		if (oFF.notNull(this.m_csCurrencyUnit))
		{
			if (this.m_csCurrencyUnitPosition === 2)
			{
				currencyUnitBase.setPrefix(this.m_csCurrencyUnit);
			}
			else
			{
				currencyUnitBase.setSuffix(this.m_csCurrencyUnit);
			}
		}
	}
};
oFF.InARsDataCellProvider.prototype.getXValue = function()
{
	if (this.m_valueType.isNumber())
	{
		return oFF.XDoubleValue.create(this.m_csDoubleValue);
	}
	else if (this.m_valueType === oFF.XValueType.TIMESPAN)
	{
		return oFF.XTimeSpan.create(oFF.XDouble.convertToLong(this.m_csDoubleValue));
	}
	else if (this.m_valueType === oFF.XValueType.DATE)
	{
		return oFF.XDate.createDateFromStringWithFlag(this.m_csStringValue, this.m_supportsSAPDateFormat);
	}
	else if (this.m_valueType === oFF.XValueType.TIME)
	{
		return oFF.XTime.createTimeFromStringWithFlag(this.m_csStringValue, this.m_supportsSAPDateFormat);
	}
	else if (this.m_valueType === oFF.XValueType.DATE_TIME)
	{
		return oFF.XDateTime.createDateTimeFromStringWithFlag(this.m_csStringValue, this.m_supportsSAPDateFormat);
	}
	else if (this.m_valueType === oFF.XValueType.STRING)
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_csStringValue))
		{
			return oFF.XStringValue.create(this.m_csStringValue);
		}
		return null;
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Unsupported type:", this.m_valueType.getName()));
};
oFF.InARsDataCellProvider.prototype.setExceptionSettings = function(exceptionSettingIndex)
{
	var isAlertLevelInSettings = false;
	if (exceptionSettingIndex === -1)
	{
		this.m_csExceptionSetting = null;
		this.m_csExceptionPriority = null;
		this.m_exceptionNameWithSettings = null;
	}
	else
	{
		var activeExceptionSettings = this.m_exceptionSettings.getListAt(exceptionSettingIndex);
		this.m_csExceptionSetting = oFF.XHashMapOfStringByString.create();
		this.m_csExceptionPriority = oFF.XHashMapByString.create();
		var exceptionSize = activeExceptionSettings.size();
		for (var idx = 0; idx < exceptionSize; idx++)
		{
			var exceptionSetting = activeExceptionSettings.getStructureAt(idx);
			var exceptionSettingName = exceptionSetting.getStringByKey("SettingName");
			var exceptionSettingValue = exceptionSetting.getStringByKey("Value");
			this.m_csExceptionSetting.put(exceptionSettingName, exceptionSettingValue);
			this.m_csExceptionPriority.put(exceptionSettingName, oFF.XIntegerValue.create(exceptionSetting.getIntegerByKey("Priority")));
			if (oFF.ExceptionSetting.getByName(exceptionSettingName) === oFF.ExceptionSetting.ALERT_LEVEL)
			{
				isAlertLevelInSettings = true;
				var inaAlertLevel = oFF.XInteger.convertFromStringWithRadix(exceptionSettingValue, 10);
				this.m_csMaxAlertLevel = oFF.QInAConverter.lookupAlertLevel(inaAlertLevel);
				this.m_exceptionNameWithSettings = exceptionSetting.getStringByKey("ExceptionName");
			}
		}
	}
	if (!isAlertLevelInSettings)
	{
		this.m_csMaxAlertLevel = oFF.AlertLevel.NORMAL;
	}
};
oFF.InARsDataCellProvider.prototype.readNextIndex = function()
{
	if (oFF.notNull(this.m_values) && this.m_values.hasNextValue())
	{
		if (oFF.isNull(this.m_exceptions))
		{
			this.m_csValueException = oFF.ValueException.NORMAL;
		}
		else
		{
			this.m_csValueException = oFF.QInAConverter.lookupException(this.m_exceptions.getNextIntegerValue());
		}
		if (oFF.notNull(this.m_exceptionSettingIndex))
		{
			this.setExceptionSettings(this.m_exceptionSettingIndex.getNextIntegerValue());
		}
		else if (oFF.notNull(this.m_exceptionAlertLevel))
		{
			this.m_csMaxAlertLevel = oFF.QInAConverter.lookupAlertLevel(this.m_exceptionAlertLevel.getNextIntegerValue());
		}
		if (oFF.notNull(this.m_exceptionSettingIndex))
		{
			this.m_csMaxAlertLevelName = this.m_exceptionNameWithSettings;
		}
		else if (oFF.notNull(this.m_exceptionAlertLevel))
		{
			this.m_csMaxAlertLevelName = this.m_exceptionName.getNextStringValue();
		}
		if (oFF.notNull(this.m_valuesFormatted))
		{
			this.m_csFormattedValue = this.m_valuesFormatted.getNextStringValue();
		}
		if (oFF.notNull(this.m_planningCommandIds))
		{
			this.m_csPlanningCommandIds = this.m_planningCommandIds.getNextStringValue();
		}
		if (oFF.notNull(this.m_formatStrings))
		{
			this.m_csFormatString = this.m_formatStrings.getNextStringValue();
		}
		if (oFF.notNull(this.m_queryDataCellReferences))
		{
			this.m_csQueryDataCellReference = this.m_queryDataCellReferences.getNextStringValue();
		}
		if (oFF.notNull(this.m_units))
		{
			this.m_csFormattedCurrencyUnit = this.m_units.getNextStringValue();
			this.m_csCurrencyUnitType = 1;
		}
		if (oFF.notNull(this.m_unitTypes))
		{
			this.m_csCurrencyUnitType = this.m_unitTypes.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_unitPositions))
		{
			this.m_csCurrencyUnitPosition = this.m_unitPositions.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_unitDescriptions))
		{
			this.m_csCurrencyUnit = this.m_unitDescriptions.getNextStringValue();
		}
		if (oFF.notNull(this.m_complexUnitIndices))
		{
			this.m_csComplexUnitIndex = this.m_complexUnitIndices.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_documentIds))
		{
			this.m_csDocumentId = this.m_documentIds.getNextStringValue();
		}
		this.readNextValues();
		if (oFF.isNull(this.m_inputEnabled))
		{
			this.m_csInputEnabled = false;
		}
		else
		{
			this.m_csInputEnabled = this.m_inputEnabled.getNextIntegerValue() !== 0;
		}
		if (oFF.notNull(this.m_inputReadinessIndex))
		{
			this.m_csInputReadinessIndex = this.m_inputReadinessIndex.getNextIntegerValue();
		}
		if (oFF.isNull(this.m_lockedValue))
		{
			this.m_csLockedValue = false;
		}
		else
		{
			this.m_csLockedValue = this.m_lockedValue.getNextIntegerValue() !== 0;
		}
		if (oFF.notNull(this.m_decimalPlaces))
		{
			this.m_csDecimalPlaces = this.m_decimalPlaces.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_scalingFactors))
		{
			this.m_csScalingFactor = this.m_scalingFactors.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_explainQueryNames))
		{
			this.m_explainQueryName = this.m_explainQueryNames.getNextStringValue();
		}
	}
	else
	{
		this.m_csIsInsideBounds = false;
	}
};
oFF.InARsDataCellProvider.prototype.readNextValues = function()
{
	if (this.m_supportsDataCellMixedValues)
	{
		this.m_valueType = oFF.XValueType.DOUBLE;
		if (oFF.notNull(this.m_cellValueTypes))
		{
			this.m_valueType = oFF.QInAConverter.lookupValueTypeByInt(this.m_cellValueTypes.getNextIntegerValue());
		}
		if (this.m_csValueException === oFF.ValueException.NORMAL || this.m_csValueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS)
		{
			if (this.m_valueType.isNumber())
			{
				this.m_csDoubleValue = this.m_values.getNextDoubleValue();
			}
			else
			{
				this.m_csDoubleValue = 0;
				this.m_values.skip();
			}
			if (oFF.notNull(this.m_roundedValues))
			{
				this.m_csStringValue = this.m_roundedValues.getNextStringValue();
			}
		}
		else
		{
			this.m_csDoubleValue = 0;
			this.m_csStringValue = null;
			this.m_values.skip();
			if (oFF.notNull(this.m_roundedValues))
			{
				this.m_roundedValues.skip();
			}
		}
	}
	else
	{
		if (oFF.notNull(this.m_cellDataTypes))
		{
			var cellDataTypeStr = this.m_cellDataTypes.getNextStringValue();
			var cellDataType = oFF.QInAConverter.lookupValueType(cellDataTypeStr);
			this.m_valueType = cellDataType;
			if (cellDataType.isNumber())
			{
				this.m_csDoubleValue = this.m_values.getNextDoubleValue();
				this.m_csStringValue = null;
			}
			else
			{
				this.m_csStringValue = this.m_values.getNextStringValue();
				this.m_csDoubleValue = 0;
			}
		}
		else if (oFF.notNull(this.m_cellValueTypes))
		{
			var inaValueType2 = this.m_cellValueTypes.getNextIntegerValue();
			this.m_valueType = oFF.QInAConverter.lookupValueTypeByInt(inaValueType2);
			this.m_csDoubleValue = this.m_values.getNextDoubleValue();
		}
		else
		{
			throw oFF.XException.createIllegalStateException("Bad protocol: Values cannot be retrieved");
		}
	}
};
oFF.InARsDataCellProvider.prototype.getAvailableDataCellCount = function()
{
	return this.m_columnsCount * this.m_rowsCount;
};
oFF.InARsDataCellProvider.prototype.getAvailableDataCellColumns = function()
{
	return this.m_columnsCount;
};
oFF.InARsDataCellProvider.prototype.getAvailableDataCellRows = function()
{
	return this.m_rowsCount;
};

oFF.InARsAxisProvider = function() {};
oFF.InARsAxisProvider.prototype = new oFF.DfRsAxisProvider();
oFF.InARsAxisProvider.prototype._ff_c = "InARsAxisProvider";

oFF.InARsAxisProvider.create = function(application, axisType, requestContext, supportsSapDateFormat, supportsObtainability)
{
	if (oFF.AxisType.ROWS !== axisType && oFF.AxisType.COLUMNS !== axisType)
	{
		throw oFF.XException.createIllegalStateException("illegal axis type");
	}
	var provider = new oFF.InARsAxisProvider();
	provider.setupProvider(application, requestContext, supportsSapDateFormat, supportsObtainability);
	return provider;
};
oFF.InARsAxisProvider.prototype.m_dataCount = 0;
oFF.InARsAxisProvider.prototype.m_tuplesCount = 0;
oFF.InARsAxisProvider.prototype.m_tuplesCountTotal = 0;
oFF.InARsAxisProvider.prototype.m_tupleElementsCount = 0;
oFF.InARsAxisProvider.prototype.m_rsDimensionsList = null;
oFF.InARsAxisProvider.prototype.m_supportsObtainability = false;
oFF.InARsAxisProvider.prototype.m_supportsSapDateFormat = false;
oFF.InARsAxisProvider.prototype.m_currentIndex = 0;
oFF.InARsAxisProvider.prototype.m_alertLevel = null;
oFF.InARsAxisProvider.prototype.m_exceptionNames = null;
oFF.InARsAxisProvider.prototype.m_requestContext = null;
oFF.InARsAxisProvider.prototype.m_lbhToUdhConversionEnabled = false;
oFF.InARsAxisProvider.prototype.m_memberOverrideTexts = null;
oFF.InARsAxisProvider.prototype.copyInARsAxisProvider = function(origin)
{
	this.m_dataCount = origin.m_dataCount;
	this.m_tuplesCount = origin.m_tuplesCount;
	this.m_tuplesCountTotal = origin.m_tuplesCountTotal;
	this.m_tupleElementsCount = origin.m_tupleElementsCount;
	if (oFF.notNull(origin.m_rsDimensionsList))
	{
		var sizeRsDimensions = origin.m_rsDimensionsList.size();
		this.m_rsDimensionsList = oFF.XArray.create(sizeRsDimensions);
		for (var i = 0; i < sizeRsDimensions; i++)
		{
			var inARsDimension = origin.m_rsDimensionsList.get(i);
			this.m_rsDimensionsList.set(i, inARsDimension.clone());
		}
	}
	this.m_supportsObtainability = origin.m_supportsObtainability;
	this.m_supportsSapDateFormat = origin.m_supportsSapDateFormat;
	this.m_currentIndex = -1;
	if (oFF.notNull(origin.m_alertLevel))
	{
		this.m_alertLevel = origin.m_alertLevel.getPermaCopy();
	}
	if (oFF.notNull(origin.m_exceptionNames))
	{
		this.m_exceptionNames = origin.m_exceptionNames.getPermaCopy();
	}
	this.m_requestContext = origin.m_requestContext;
	this.m_lbhToUdhConversionEnabled = origin.m_lbhToUdhConversionEnabled;
};
oFF.InARsAxisProvider.prototype.setupProvider = function(application, requestContext, supportsSapDateFormat, supportsObtainability)
{
	this.setupApplicationContext(application);
	this.m_supportsObtainability = supportsObtainability;
	this.m_supportsSapDateFormat = supportsSapDateFormat;
	this.m_requestContext = requestContext;
	this.m_currentIndex = -1;
	this.m_memberOverrideTexts = oFF.XHashMapByString.create();
};
oFF.InARsAxisProvider.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_rsDimensionsList))
	{
		var rsDimsSize = this.m_rsDimensionsList.size();
		for (var i = 0; i < rsDimsSize; i++)
		{
			oFF.XObjectExt.release(this.m_rsDimensionsList.get(i));
			this.m_rsDimensionsList.set(i, null);
		}
		oFF.XObjectExt.release(this.m_rsDimensionsList);
		this.m_rsDimensionsList = null;
	}
	this.m_alertLevel = oFF.XObjectExt.release(this.m_alertLevel);
	this.m_exceptionNames = oFF.XObjectExt.release(this.m_exceptionNames);
	this.m_requestContext = null;
	this.m_memberOverrideTexts = oFF.XObjectExt.release(this.m_memberOverrideTexts);
	oFF.DfRsAxisProvider.prototype.releaseObject.call( this );
};
oFF.InARsAxisProvider.prototype.getElementAsListByName = function(ocpStructure, name)
{
	var inaElement = ocpStructure.getByKey(name);
	if (oFF.isNull(inaElement))
	{
		return null;
	}
	if (inaElement.isStructure())
	{
		var inaStructure = inaElement;
		var inaValues = inaStructure.getListByKey("Values");
		var valuesSize = inaStructure.getIntegerByKey("Size");
		if (valuesSize !== inaValues.size())
		{
			throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("Indicated size of ", name, " names and actual size differ!"));
		}
		if (valuesSize !== this.m_tuplesCount)
		{
			throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("Indicated size of ", name, " names and tuple count differ!"));
		}
		return inaValues;
	}
	return inaElement.isList() ? inaElement : null;
};
oFF.InARsAxisProvider.prototype.importRsDimensions = function(ocpStructure, queryModel, rsDefAxis)
{
	this.m_tuplesCount = ocpStructure.getIntegerByKey("TupleCount");
	this.m_tuplesCountTotal = ocpStructure.getIntegerByKeyExt("TupleCountTotal", -1);
	var inaDimensions = ocpStructure.getListByKey("Dimensions");
	var dimensionCount = inaDimensions.size();
	this.m_rsDimensionsList = oFF.XArray.create(dimensionCount);
	var inaTupleElements = ocpStructure.getListByKey("Tuples");
	if (dimensionCount !== inaTupleElements.size())
	{
		throw oFF.XException.createIllegalStateException("Indicated dimension count and tuple element count is not the same");
	}
	var importer = null;
	for (var dimIdx = 0; dimIdx < dimensionCount; dimIdx++)
	{
		var inaDimension = inaDimensions.getStructureAt(dimIdx);
		var name = this.getDimensionName(inaDimension, queryModel, rsDefAxis);
		var inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		var dimension = null;
		if (oFF.notNull(queryModel))
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(name);
			if (oFF.notNull(inaHierarchy) && oFF.notNull(dimension) && dimension.getModelCapabilities() !== null && dimension.getModelCapabilities().supportsDimensionHierarchyLevels() && !oFF.PrUtils.isListEmpty(inaHierarchy.getListByKey("Levels")))
			{
				if (oFF.isNull(importer))
				{
					importer = oFF.QInAImportFactory.createWithQueryManagerCapabilities(this.getApplication(), oFF.QModelFormat.INA_DATA, queryModel.getQueryManager());
				}
				if (oFF.notNull(importer))
				{
					queryModel.stopEventing();
					importer.importHierarchy(dimension, inaDimension);
					queryModel.resumeEventing();
				}
			}
		}
		var rsDimension = oFF.InARsDimension.create(inaDimension, dimension, this.m_requestContext, rsDefAxis, this.m_lbhToUdhConversionEnabled);
		if (oFF.isNull(dimension))
		{
			rsDimension.setName(name);
			rsDimension.setText(inaDimension.getStringByKey("Description"));
		}
		var inaValueElement = inaDimension.getStructureByKey("MemberTypes");
		if (oFF.notNull(inaValueElement))
		{
			rsDimension.setMemberTypes(oFF.InARsEncodedValues.createByStructure(inaValueElement));
		}
		rsDimension.setupFromRsTuple(inaTupleElements.getStructureAt(dimIdx));
		this.m_rsDimensionsList.set(dimIdx, rsDimension);
	}
	this.m_alertLevel = this.getElementAsListByName(ocpStructure, "ExceptionAlertLevel");
	this.m_exceptionNames = this.getElementAsListByName(ocpStructure, "ExceptionName");
	this.m_tupleElementsCount = dimensionCount;
};
oFF.InARsAxisProvider.prototype.getDimensionName = function(inaDimension, queryModel, rsDefAxis)
{
	var name = inaDimension.getStringByKey("Name");
	if (this.m_lbhToUdhConversionEnabled && queryModel.getUniversalDisplayHierarchies().getByName(name) !== null)
	{
		var axis = queryModel.getAxis(rsDefAxis.getType());
		name = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis).getName();
		inaDimension.putString("Name", name);
	}
	return name;
};
oFF.InARsAxisProvider.prototype.setOcpStructure = function(queryModel, ocpStructure, dataCount, rsDefAxis, lbhToUdhConversionEnabled)
{
	this.m_dataCount = dataCount;
	if (oFF.notNull(queryModel) && lbhToUdhConversionEnabled)
	{
		var axis = queryModel.getAxis(rsDefAxis.getType());
		this.m_lbhToUdhConversionEnabled = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis) !== null;
	}
	if (oFF.notNull(ocpStructure))
	{
		this.importRsDimensions(ocpStructure, queryModel, rsDefAxis);
	}
};
oFF.InARsAxisProvider.prototype.getRsDimensionSize = function()
{
	return oFF.isNull(this.m_rsDimensionsList) ? 0 : this.m_rsDimensionsList.size();
};
oFF.InARsAxisProvider.prototype.notifySetAxisMetadata = function()
{
	var cursorAxis = this.getCursorAxis();
	var dimensionCount = this.getRsDimensionSize();
	cursorAxis.startAddMetadata(dimensionCount);
	for (var idxDimension = 0; idxDimension < dimensionCount; idxDimension++)
	{
		var rsDimension = this.m_rsDimensionsList.get(idxDimension);
		cursorAxis.addNextTupleElementMetadata(idxDimension, rsDimension);
		var fields = rsDimension.getFields();
		var fieldCount = fields.size();
		for (var idxField = 0; idxField < fieldCount; idxField++)
		{
			var field = fields.get(idxField);
			var isVisible = !this.m_supportsObtainability || field.isVisible();
			cursorAxis.addNextFieldMetadata(field.getName(), field.getText(), isVisible, field.getPresentationType(), field.getValueType());
		}
	}
	cursorAxis.endAddMetadata();
};
oFF.InARsAxisProvider.prototype.resetIfNotNull = function(cursor)
{
	if (oFF.notNull(cursor))
	{
		cursor.resetCursor();
	}
};
oFF.InARsAxisProvider.prototype.resetAxisCursor = function(newIndex)
{
	if (newIndex !== 0)
	{
		throw oFF.XException.createIllegalStateException("The axis cursor can only be resetted to 0.");
	}
	var size = this.getRsDimensionSize();
	for (var dimensionIndex = 0; dimensionIndex < size; dimensionIndex++)
	{
		var rsDimension = this.m_rsDimensionsList.get(dimensionIndex);
		this.resetIfNotNull(rsDimension.getMemberIndexes());
		this.resetIfNotNull(rsDimension.getParentIndexes());
		this.resetIfNotNull(rsDimension.getDrillGroupIndexes());
		this.resetIfNotNull(rsDimension.getDisplayValues());
		this.resetIfNotNull(rsDimension.getAbsoluteLevelValues());
		this.resetIfNotNull(rsDimension.getDrillStates());
		this.resetIfNotNull(rsDimension.getNodeIds());
		this.resetIfNotNull(rsDimension.getChildCountValues());
	}
};
oFF.InARsAxisProvider.prototype.notifyAxisCursorChange = function(newIndex)
{
	if (this.m_currentIndex >= newIndex)
	{
		this.resetAxisCursor(newIndex);
	}
	this.m_currentIndex = newIndex;
	var line = this.getCursorAxis();
	line.setTupleElementCursorBeforeStart();
	var isAlertLevelValid = !oFF.PrUtils.isListEmpty(this.m_alertLevel);
	var isExceptionNameValid = !oFF.PrUtils.isListEmpty(this.m_exceptionNames);
	var size = this.getRsDimensionSize();
	for (var dimensionIndex = 0; dimensionIndex < size; dimensionIndex++)
	{
		line.nextTupleElement();
		var rsDimension = this.m_rsDimensionsList.get(dimensionIndex);
		var memberIndexes = rsDimension.getMemberIndexes();
		var memberIndex = memberIndexes.getNextIntegerValue();
		line.setDimensionMemberType(rsDimension.getMemberType(memberIndex));
		var parentIndexes = rsDimension.getParentIndexes();
		if (oFF.notNull(parentIndexes))
		{
			line.setParentNodeIndex(memberIndexes.getIndexForIntegerValue(parentIndexes.getNextIntegerValue()));
		}
		var drillGroupIndexes = rsDimension.getDrillGroupIndexes();
		if (oFF.notNull(drillGroupIndexes))
		{
			line.setDrillGroupIndex(drillGroupIndexes.getNextIntegerValue());
		}
		var displayValues = rsDimension.getDisplayValues();
		if (oFF.notNull(displayValues))
		{
			line.setDisplayLevel(displayValues.getNextIntegerValue());
		}
		var drillStates = rsDimension.getDrillStates();
		if (oFF.notNull(drillStates))
		{
			line.setDrillState(oFF.QInAConverter.lookupDrillState(drillStates.getNextIntegerValue(), this.m_lbhToUdhConversionEnabled));
		}
		var absoluteLevelValues = rsDimension.getAbsoluteLevelValues();
		if (oFF.notNull(absoluteLevelValues) && absoluteLevelValues.hasNextValue())
		{
			line.setAbsoluteLevel(absoluteLevelValues.getNextIntegerValue());
		}
		else
		{
			line.setAbsoluteLevel(-1);
		}
		var nodeIds = rsDimension.getNodeIds();
		if (oFF.notNull(nodeIds))
		{
			line.setNodeId(nodeIds.getNextStringValue());
		}
		var childCountValues = rsDimension.getChildCountValues();
		if (oFF.notNull(childCountValues))
		{
			var childCount = childCountValues.getNextIntegerValue();
			line.setChildCount(childCount);
		}
		else
		{
			line.setChildCount(-1);
		}
		if (isAlertLevelValid && isExceptionNameValid)
		{
			line.setAlertLevel(this.m_alertLevel.getIntegerAtExt(memberIndex, 0));
			line.setExceptionName(this.m_exceptionNames.getStringAtExt(memberIndex, null));
		}
		this.iterateFields(line, rsDimension, memberIndex);
	}
};
oFF.InARsAxisProvider.prototype.iterateFields = function(line, rsDimension, memberIndex)
{
	var keyFieldIndex = rsDimension.getKeyFieldIndex();
	var hierarchyNavigationKeyIndex = rsDimension.getHierarchyNavigationKeyIndex();
	var rsFields = rsDimension.getFields();
	var fieldCount = rsFields.size();
	var overrideText = this.getMemberOverrideText(line, rsDimension, memberIndex);
	var textFieldIndex = rsDimension.getTextFieldIndex();
	for (var fieldIdx = 0; fieldIdx < fieldCount; fieldIdx++)
	{
		line.nextFieldValue();
		var rsField = rsFields.get(fieldIdx);
		var inaValueException = rsField.getValueExceptionAt(memberIndex);
		if (inaValueException !== -1)
		{
			line.setValueException(oFF.QInAConverter.lookupException(inaValueException));
		}
		var formattedValue = this.setValueAndReturnFormattedValue(line, rsField.getValues(), memberIndex, rsField.getValueType());
		if (oFF.notNull(overrideText) && textFieldIndex === fieldIdx)
		{
			formattedValue = overrideText;
			line.setString(overrideText);
		}
		if (fieldIdx === keyFieldIndex)
		{
			line.setDimensionMemberName(formattedValue);
			line.setDimensionMemberNameValueException(line.getValueException());
		}
		if (fieldIdx === hierarchyNavigationKeyIndex)
		{
			line.setValueOfHierarchyNavigationKey(formattedValue);
		}
		line.setFormattedValue(formattedValue);
	}
};
oFF.InARsAxisProvider.prototype.getMemberOverrideText = function(line, rsDimension, memberIndex)
{
	var overrideText = null;
	if (this.getApplication().getSession().hasFeature(oFF.FeatureToggleOlap.MEMBER_OVERRIDE_TEXTS))
	{
		var dimensionType = rsDimension.getDimensionType();
		if (dimensionType === oFF.DimensionType.ACCOUNT || dimensionType === oFF.DimensionType.MEASURE_STRUCTURE || dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
		{
			var keyFieldIndex = rsDimension.getKeyFieldIndex();
			var rsFields = rsDimension.getFields();
			var dimensionName = rsDimension.getName();
			var overrideTextMap = this.m_memberOverrideTexts.getByKey(dimensionName);
			if (oFF.isNull(overrideTextMap))
			{
				overrideTextMap = oFF.XHashMapOfStringByString.create();
				this.m_memberOverrideTexts.put(dimensionName, overrideTextMap);
			}
			var memberIndexKey = oFF.XInteger.convertToString(memberIndex);
			overrideText = overrideTextMap.getByKey(memberIndexKey);
			if (!overrideTextMap.containsKey(memberIndexKey))
			{
				var keyRsField = rsFields.get(keyFieldIndex);
				var memberKey = keyRsField.getValues().getStringAt(memberIndex);
				var resultSet = this.getCursorAxis().getCursorResultSet();
				overrideText = resultSet.getDimensionMemberOverrideText(dimensionName, memberKey);
				if (oFF.isNull(overrideText))
				{
					var dimension = line.getDimensionAtCurrentPositionFromQueryModel();
					if (oFF.notNull(dimension))
					{
						if (oFF.notNull(memberKey))
						{
							var member = dimension.getStructureMember(memberKey);
							if (oFF.notNull(member) && member.hasOverrideTextDefined())
							{
								overrideText = member.getText();
							}
						}
					}
				}
				overrideTextMap.put(memberIndexKey, overrideText);
			}
		}
	}
	return overrideText;
};
oFF.InARsAxisProvider.prototype.setValueAndReturnFormattedValue = function(line, inaFieldValues, memberIndex, rsValueType)
{
	if (oFF.isNull(inaFieldValues))
	{
		return "InA Error: No data available";
	}
	var fieldValueType = rsValueType;
	if (fieldValueType === oFF.XValueType.UNSUPPORTED)
	{
		var field = line.getField();
		if (oFF.isNull(field) || field.getMetadata() === null)
		{
			fieldValueType = oFF.XValueType.STRING;
		}
		else
		{
			fieldValueType = field.getValueType();
		}
	}
	var formattedValue;
	var memberType = line.getDimensionMemberType();
	var isTypeTotals = memberType === oFF.MemberType.RESULT || memberType === oFF.MemberType.CONDITION_RESULT || memberType === oFF.MemberType.CONDITION_OTHERS_RESULT;
	var valueException = line.getValueException();
	var isNullValue = valueException === oFF.ValueException.NULL_VALUE;
	if (fieldValueType === oFF.XValueType.STRING || isTypeTotals)
	{
		formattedValue = inaFieldValues.getStringAt(memberIndex);
		if (isTypeTotals && oFF.notNull(valueException))
		{
			if (memberType === oFF.MemberType.RESULT)
			{
				formattedValue = "Total";
			}
			else if (memberType === oFF.MemberType.CONDITION_RESULT)
			{
				formattedValue = "Total Including";
			}
			else
			{
				formattedValue = "Total Remaining";
			}
			line.setValueException(oFF.ValueException.NORMAL);
		}
		if (line.getValueException() === oFF.ValueException.NULL_VALUE)
		{
			formattedValue = "";
		}
		line.setString(formattedValue);
	}
	else if (fieldValueType === oFF.XValueType.BOOLEAN)
	{
		var booleanValue = inaFieldValues.getBooleanAt(memberIndex);
		line.setBoolean(booleanValue);
		formattedValue = oFF.XBoolean.convertToString(booleanValue);
	}
	else if (fieldValueType === oFF.XValueType.INTEGER)
	{
		var intValue = inaFieldValues.getIntegerAt(memberIndex);
		line.setInteger(intValue);
		formattedValue = oFF.XInteger.convertToString(intValue);
	}
	else if (fieldValueType === oFF.XValueType.LONG)
	{
		var longValue = inaFieldValues.getLongAt(memberIndex);
		line.setLong(longValue);
		formattedValue = oFF.XLong.convertToString(longValue);
	}
	else if (fieldValueType === oFF.XValueType.DOUBLE || fieldValueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		var doubleValue = inaFieldValues.getDoubleAt(memberIndex);
		line.setDouble(doubleValue);
		formattedValue = oFF.XDouble.convertToString(doubleValue);
	}
	else if (fieldValueType === oFF.XValueType.DATE)
	{
		formattedValue = inaFieldValues.getStringAt(memberIndex);
		if (isNullValue)
		{
			line.setNullByType(fieldValueType);
		}
		else
		{
			var dateValue = oFF.XDate.createDateFromStringWithFlag(formattedValue, this.m_supportsSapDateFormat);
			if (this.m_supportsSapDateFormat && oFF.notNull(dateValue))
			{
				formattedValue = dateValue.toIsoFormat();
			}
			line.setDate(dateValue);
		}
	}
	else if (fieldValueType === oFF.XValueType.TIME)
	{
		formattedValue = inaFieldValues.getStringAt(memberIndex);
		if (isNullValue)
		{
			line.setNullByType(fieldValueType);
		}
		else
		{
			var timeValue = oFF.XTime.createTimeFromStringWithFlag(formattedValue, this.m_supportsSapDateFormat);
			if (this.m_supportsSapDateFormat && oFF.notNull(timeValue))
			{
				formattedValue = timeValue.toIsoFormat();
			}
			line.setTime(timeValue);
		}
	}
	else if (fieldValueType === oFF.XValueType.DATE_TIME)
	{
		formattedValue = inaFieldValues.getStringAt(memberIndex);
		if (isNullValue)
		{
			line.setNullByType(fieldValueType);
		}
		else
		{
			var dateTimeValue = oFF.XDateTime.createDateTimeFromStringWithFlag(formattedValue, this.m_supportsSapDateFormat);
			if (this.m_supportsSapDateFormat && oFF.notNull(dateTimeValue))
			{
				formattedValue = dateTimeValue.toIsoFormat();
			}
			line.setDateTime(dateTimeValue);
		}
	}
	else if (fieldValueType.isSpatial())
	{
		formattedValue = inaFieldValues.getStringAt(memberIndex);
		var geometry = oFF.XGeometryValue.createGeometryValueWithWkt(formattedValue);
		if (oFF.isNull(geometry))
		{
			line.setString(formattedValue);
		}
		else
		{
			var spatialType = geometry.getValueType();
			if (spatialType === oFF.XValueType.MULTI_POLYGON)
			{
				line.setMultiPolygon(geometry);
			}
			else if (spatialType === oFF.XValueType.LINE_STRING)
			{
				line.setLineString(geometry);
			}
			else if (spatialType === oFF.XValueType.MULTI_LINE_STRING)
			{
				line.setMultiLineString(geometry);
			}
			else if (spatialType === oFF.XValueType.POINT)
			{
				line.setPoint(geometry);
			}
			else if (spatialType === oFF.XValueType.POLYGON)
			{
				line.setPolygon(geometry);
			}
			else if (spatialType === oFF.XValueType.MULTI_POINT)
			{
				line.setMultiPoint(geometry);
			}
		}
	}
	else
	{
		var error = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.INVALID_DATATYPE, "Unsupported datatype", null, false, fieldValueType);
		line.setErrorValue(error);
		formattedValue = error.getText();
	}
	return formattedValue;
};
oFF.InARsAxisProvider.prototype.getTuplesCount = function()
{
	return this.m_tuplesCount;
};
oFF.InARsAxisProvider.prototype.getTuplesCountTotal = function()
{
	return this.m_tuplesCountTotal;
};
oFF.InARsAxisProvider.prototype.getTupleElementsCount = function()
{
	return this.m_tupleElementsCount;
};
oFF.InARsAxisProvider.prototype.getDataCount = function()
{
	return this.m_dataCount;
};
oFF.InARsAxisProvider.prototype.setTuplesCount = function(tuplesCount, tuplesCountTotal)
{
	if (tuplesCount <= this.m_tuplesCount)
	{
		this.m_tuplesCount = tuplesCount;
		this.m_tuplesCountTotal = tuplesCountTotal;
	}
};
oFF.InARsAxisProvider.prototype.resetMemberOverrideTexts = function()
{
	oFF.XObjectExt.release(this.m_memberOverrideTexts);
	this.m_memberOverrideTexts = oFF.XHashMapByString.create();
};

oFF.InARsDimension = function() {};
oFF.InARsDimension.prototype = new oFF.DfNameTextObject();
oFF.InARsDimension.prototype._ff_c = "InARsDimension";

oFF.InARsDimension.create = function(inaDimension, dimension, requestContext, rsDefAxis, lbhToUdhConversionEnabled)
{
	var object = new oFF.InARsDimension();
	var name = inaDimension.getStringByKey("Name");
	var inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
	var hierarchyName;
	var childAlignment;
	if (oFF.isNull(inaHierarchy))
	{
		hierarchyName = null;
		childAlignment = oFF.Alignment.DEFAULT_VALUE;
	}
	else
	{
		hierarchyName = inaHierarchy.getStringByKey("Name");
		if (inaHierarchy.hasStringByKey("LowerLevelNodeAlignment"))
		{
			var nodeAlignment = inaHierarchy.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
			childAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
		}
		else
		{
			var isBottomUp = inaHierarchy.getBooleanByKeyExt("ExpandBottomUp", false);
			childAlignment = isBottomUp ? oFF.Alignment.CHILDREN_ABOVE_PARENT : oFF.Alignment.CHILDREN_BELOW_PARENT;
		}
	}
	var inaAttributes = inaDimension.getListByKey("Attributes");
	var dimensionType = oFF.QInAConverter.lookupDimensionType(inaDimension.getIntegerByKeyExt("DimensionType", 0));
	object.setupExt(name, inaAttributes, dimension, requestContext, rsDefAxis, hierarchyName, dimensionType, childAlignment, lbhToUdhConversionEnabled);
	return object;
};
oFF.InARsDimension.prototype.m_fields = null;
oFF.InARsDimension.prototype.m_displayValues = null;
oFF.InARsDimension.prototype.m_drillStates = null;
oFF.InARsDimension.prototype.m_memberIndexes = null;
oFF.InARsDimension.prototype.m_parentIndexes = null;
oFF.InARsDimension.prototype.m_drillGroupIndexes = null;
oFF.InARsDimension.prototype.m_nodeIds = null;
oFF.InARsDimension.prototype.m_childCountValues = null;
oFF.InARsDimension.prototype.m_memberTypesEncoded = null;
oFF.InARsDimension.prototype.m_memberTypes = null;
oFF.InARsDimension.prototype.m_keyFieldIndex = 0;
oFF.InARsDimension.prototype.m_hierarchyNavigationFieldIndex = 0;
oFF.InARsDimension.prototype.m_textFieldIndex = 0;
oFF.InARsDimension.prototype.m_absoluteLevels = null;
oFF.InARsDimension.prototype.m_lbhToUdhConversionEnabled = false;
oFF.InARsDimension.prototype.m_isHierarchyActive = false;
oFF.InARsDimension.prototype.m_hierarchyName = null;
oFF.InARsDimension.prototype.m_dimensionType = null;
oFF.InARsDimension.prototype.m_childAlignment = null;
oFF.InARsDimension.prototype.cloneExt = function(flags)
{
	var clone = new oFF.InARsDimension();
	clone.copyInARsDimension(this);
	return clone;
};
oFF.InARsDimension.prototype.copyInARsDimension = function(origin)
{
	this.setupWithNameText(origin.getName(), origin.getText());
	this.m_fields = oFF.XCollectionUtils.createListOfClones(origin.m_fields);
	if (oFF.notNull(origin.m_displayValues))
	{
		this.m_displayValues = origin.m_displayValues.clone();
	}
	if (oFF.notNull(origin.m_drillStates))
	{
		this.m_drillStates = origin.m_drillStates.clone();
	}
	this.m_memberIndexes = origin.m_memberIndexes.clone();
	if (oFF.notNull(origin.m_parentIndexes))
	{
		this.m_parentIndexes = origin.m_parentIndexes.clone();
	}
	if (oFF.notNull(origin.m_drillGroupIndexes))
	{
		this.m_drillGroupIndexes = origin.m_drillGroupIndexes.clone();
	}
	if (oFF.notNull(origin.m_nodeIds))
	{
		this.m_nodeIds = origin.m_nodeIds.clone();
	}
	if (oFF.notNull(origin.m_childCountValues))
	{
		this.m_childCountValues = origin.m_childCountValues.clone();
	}
	this.m_memberTypesEncoded = origin.m_memberTypesEncoded.clone();
	this.m_memberTypes = origin.m_memberTypes.createArrayCopy();
	this.m_keyFieldIndex = origin.m_keyFieldIndex;
	this.m_hierarchyNavigationFieldIndex = origin.m_hierarchyNavigationFieldIndex;
	this.m_textFieldIndex = origin.m_textFieldIndex;
	if (oFF.notNull(this.m_absoluteLevels))
	{
		this.m_absoluteLevels = origin.m_absoluteLevels.clone();
	}
	this.m_isHierarchyActive = origin.m_isHierarchyActive;
	this.m_hierarchyName = origin.m_hierarchyName;
	this.m_dimensionType = origin.m_dimensionType;
	this.m_childAlignment = origin.m_childAlignment;
	this.m_lbhToUdhConversionEnabled = origin.m_lbhToUdhConversionEnabled;
};
oFF.InARsDimension.prototype.releaseObject = function()
{
	this.m_fields = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_fields);
	this.m_displayValues = oFF.XObjectExt.release(this.m_displayValues);
	this.m_drillStates = oFF.XObjectExt.release(this.m_drillStates);
	this.m_memberIndexes = oFF.XObjectExt.release(this.m_memberIndexes);
	this.m_parentIndexes = oFF.XObjectExt.release(this.m_parentIndexes);
	this.m_drillGroupIndexes = oFF.XObjectExt.release(this.m_drillGroupIndexes);
	this.m_nodeIds = oFF.XObjectExt.release(this.m_nodeIds);
	this.m_memberTypesEncoded = oFF.XObjectExt.release(this.m_memberTypesEncoded);
	this.m_memberTypes = oFF.XObjectExt.release(this.m_memberTypes);
	this.m_childCountValues = oFF.XObjectExt.release(this.m_childCountValues);
	this.m_absoluteLevels = oFF.XObjectExt.release(this.m_absoluteLevels);
	this.m_dimensionType = null;
	this.m_hierarchyName = null;
	this.m_childAlignment = null;
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.InARsDimension.prototype.setupExt = function(name, inaAttributes, dimension, requestContext, rsDefAxis, hierarchyName, dimensionType, childAlignment, lbhToUdhConversionEnabled)
{
	this._setupInternal(name);
	this.m_keyFieldIndex = -1;
	this.m_hierarchyNavigationFieldIndex = -1;
	this.m_textFieldIndex = -1;
	this.m_hierarchyName = hierarchyName;
	this.m_dimensionType = dimensionType;
	this.m_childAlignment = childAlignment;
	this.m_lbhToUdhConversionEnabled = lbhToUdhConversionEnabled;
	var isValueHelp = requestContext === oFF.QContextType.SELECTOR;
	var rsDimension = oFF.XCollectionUtils.getByName(rsDefAxis.getRsDimensions(), name);
	this.m_isHierarchyActive = this._isHierarchyActiveForContext(rsDimension, hierarchyName, isValueHelp);
	if (oFF.notNull(inaAttributes))
	{
		var flatKeyField = null;
		var hierarchyKeyField = null;
		var hierarchyNavigationField = null;
		var textField = null;
		if (oFF.notNull(dimension))
		{
			flatKeyField = dimension.getFlatKeyField();
			textField = dimension.getTextField();
			this.m_dimensionType = dimension.getDimensionType();
			if (this.m_isHierarchyActive || isValueHelp)
			{
				hierarchyKeyField = dimension.getHierarchyKeyField();
				hierarchyNavigationField = dimension.getHierarchyNavigationField();
			}
		}
		this.extractFieldIndices(inaAttributes, rsDefAxis, dimension, flatKeyField, hierarchyKeyField, hierarchyNavigationField, textField);
	}
};
oFF.InARsDimension.prototype.extractFieldIndices = function(inaAttributes, rsDefAxis, dimension, flatKeyField, hierarchyKeyField, hierarchyNavigationField, textField)
{
	var flatKeyIndex = oFF.isNull(dimension) ? 0 : -1;
	var hierarchyKeyIndex = -1;
	this.m_fields = oFF.XList.create();
	var inaFieldSize = inaAttributes.size();
	for (var fieldIndex = 0; fieldIndex < inaFieldSize; fieldIndex++)
	{
		var inaField = inaAttributes.getStructureAt(fieldIndex);
		var fieldName = this.getFieldName(inaField, dimension, rsDefAxis);
		var presentationType = oFF.QInAConverter.lookupPresentationType(inaField.getStringByKey("PresentationType"));
		if (presentationType === oFF.PresentationType.KEY || oFF.notNull(flatKeyField) && oFF.XString.isEqual(fieldName, flatKeyField.getName()))
		{
			flatKeyIndex = fieldIndex;
		}
		if (presentationType === oFF.PresentationType.HIERARCHY_KEY || oFF.notNull(hierarchyKeyField) && oFF.XString.isEqual(fieldName, hierarchyKeyField.getName()))
		{
			hierarchyKeyIndex = fieldIndex;
		}
		if (oFF.notNull(hierarchyNavigationField) && oFF.XString.isEqual(fieldName, hierarchyNavigationField.getName()))
		{
			this.m_hierarchyNavigationFieldIndex = fieldIndex;
		}
		if (oFF.notNull(textField) && oFF.XString.isEqual(fieldName, textField.getName()))
		{
			this.m_textFieldIndex = fieldIndex;
		}
		if (oFF.isNull(textField) && presentationType === oFF.PresentationType.HIERARCHY_TEXT)
		{
			this.m_textFieldIndex = fieldIndex;
		}
		if (oFF.isNull(textField) && this.m_textFieldIndex === -1 && presentationType === oFF.PresentationType.TEXT)
		{
			this.m_textFieldIndex = fieldIndex;
		}
		if (oFF.notNull(dimension) && dimension.isMeasureStructure() && oFF.XString.startsWith(fieldName, "1ROWCOUNT"))
		{
			var fieldSufix = oFF.XStringTokenizer.splitString(fieldName, ".").get(1);
			if (oFF.XString.endsWith(dimension.getKeyField().getName(), fieldSufix))
			{
				flatKeyIndex = fieldIndex;
			}
		}
		this.m_fields.add(oFF.InARsField.create(fieldName, inaField));
	}
	this.m_keyFieldIndex = hierarchyKeyIndex === -1 ? flatKeyIndex : hierarchyKeyIndex;
};
oFF.InARsDimension.prototype._isHierarchyActiveForContext = function(rsDimension, hierarchyName, isValueHelp)
{
	if (oFF.isNull(rsDimension))
	{
		return oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName);
	}
	return isValueHelp ? rsDimension.isSelectorHierarchyActive() : rsDimension.isHierarchyActive();
};
oFF.InARsDimension.prototype.getFieldName = function(inaField, dimension, rsDefAxis)
{
	var name = inaField.getStringByKey("Name");
	if (oFF.notNull(dimension) && this.m_lbhToUdhConversionEnabled)
	{
		var queryModel = dimension.getQueryModel();
		var fieldDimName = oFF.XString.containsString(name, ".") ? oFF.XString.substring(name, 0, oFF.XString.indexOf(name, ".")) : name;
		var udh = queryModel.getUniversalDisplayHierarchies().getByName(fieldDimName);
		if (oFF.notNull(udh))
		{
			var axis = queryModel.getAxis(rsDefAxis.getType());
			var originalDimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis);
			if (oFF.notNull(originalDimension))
			{
				var dimName = originalDimension.getName();
				name = oFF.XString.replace(name, udh.getName(), dimName);
				inaField.putString("Name", name);
			}
		}
	}
	return name;
};
oFF.InARsDimension.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.InARsDimension.prototype.getDimensionType = function()
{
	return this.m_dimensionType;
};
oFF.InARsDimension.prototype.getFields = function()
{
	return this.m_fields;
};
oFF.InARsDimension.prototype.getMemberIndexes = function()
{
	return this.m_memberIndexes;
};
oFF.InARsDimension.prototype.getParentIndexes = function()
{
	return this.m_parentIndexes;
};
oFF.InARsDimension.prototype.getDrillGroupIndexes = function()
{
	return this.m_drillGroupIndexes;
};
oFF.InARsDimension.prototype.getDisplayValues = function()
{
	return this.m_displayValues;
};
oFF.InARsDimension.prototype.getAbsoluteLevelValues = function()
{
	return this.m_absoluteLevels;
};
oFF.InARsDimension.prototype.getDrillStates = function()
{
	return this.m_drillStates;
};
oFF.InARsDimension.prototype.getNodeIds = function()
{
	return this.m_nodeIds;
};
oFF.InARsDimension.prototype.setMemberTypes = function(encodedValues)
{
	this.m_memberTypesEncoded = encodedValues;
	this.m_memberTypes = oFF.XArray.create(this.m_memberTypesEncoded.size());
	for (var index = 0; this.m_memberTypesEncoded.hasNextValue(); index++)
	{
		var memberTypeValue = this.m_memberTypesEncoded.getNextIntegerValue();
		this.m_memberTypes.set(index, oFF.QInAConverter.lookupMemberType(memberTypeValue));
	}
};
oFF.InARsDimension.prototype.getMemberType = function(memberIndex)
{
	if (oFF.isNull(this.m_memberTypes) || memberIndex >= this.m_memberTypes.size())
	{
		return oFF.MemberType.MEMBER;
	}
	return this.m_memberTypes.get(memberIndex);
};
oFF.InARsDimension.prototype.getKeyFieldIndex = function()
{
	return this.m_keyFieldIndex;
};
oFF.InARsDimension.prototype.getHierarchyNavigationKeyIndex = function()
{
	return this.m_hierarchyNavigationFieldIndex;
};
oFF.InARsDimension.prototype.getTextFieldIndex = function()
{
	return this.m_textFieldIndex;
};
oFF.InARsDimension.prototype.getChildCountValues = function()
{
	return this.m_childCountValues;
};
oFF.InARsDimension.prototype.setupFromRsTuple = function(rsTuple)
{
	var rsTupleProperty = rsTuple.getStructureByKey("DisplayLevel");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_displayValues = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("Level");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_absoluteLevels = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("DrillState");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_drillStates = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("MemberIndexes");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_memberIndexes = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("ParentIndexes");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_parentIndexes = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("DrillGroupIndexes");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_drillGroupIndexes = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("TupleElementIds");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_nodeIds = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("ChildCount");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_childCountValues = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
};
oFF.InARsDimension.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_childAlignment;
};
oFF.InARsDimension.prototype.hasDefaultLowerLevelNodeAlignment = function()
{
	return this.m_childAlignment === oFF.Alignment.DEFAULT_VALUE;
};
oFF.InARsDimension.prototype.isHierarchyActive = function()
{
	return this.m_isHierarchyActive;
};
oFF.InARsDimension.prototype.setName = function(name)
{
	this.m_name = name;
};

oFF.InARsField = function() {};
oFF.InARsField.prototype = new oFF.DfNameTextObject();
oFF.InARsField.prototype._ff_c = "InARsField";

oFF.InARsField.create = function(name, inaField)
{
	var object = new oFF.InARsField();
	var fieldText = inaField.getStringByKey("Description");
	var valueType = oFF.QInAConverter.lookupValueType(inaField.getStringByKey("ValueType"));
	var presentationType;
	var inaPresentationType = inaField.getStringByKey("PresentationType");
	if (oFF.isNull(inaPresentationType))
	{
		presentationType = oFF.PresentationType.UNDEFINED;
	}
	else
	{
		presentationType = oFF.QInAConverter.lookupPresentationType(inaPresentationType);
	}
	var obtainability = inaField.getStringByKeyExt("Obtainability", "Always");
	var isVisible = oFF.XString.isEqual("Always", obtainability);
	var inaValueExceptions = inaField.getListByKey("ValuesException");
	var inaValues = inaField.getListByKey("Values");
	object.setupExt(name, fieldText, inaValues, isVisible, inaValueExceptions, valueType, presentationType);
	return object;
};
oFF.InARsField.prototype.m_values = null;
oFF.InARsField.prototype.m_valueExceptions = null;
oFF.InARsField.prototype.m_isVisible = false;
oFF.InARsField.prototype.m_valueType = null;
oFF.InARsField.prototype.m_presentationType = null;
oFF.InARsField.prototype.cloneExt = function(flags)
{
	var clone = new oFF.InARsField();
	var values = oFF.isNull(this.m_values) ? null : this.m_values.getPermaCopy();
	var valuesExceptions = oFF.isNull(this.m_valueExceptions) ? null : this.m_valueExceptions.getPermaCopy();
	clone.setupExt(this.getName(), this.getText(), values, this.m_isVisible, valuesExceptions, this.m_valueType, this.m_presentationType);
	return clone;
};
oFF.InARsField.prototype.setupExt = function(name, text, values, isVisible, inaValueExceptions, valueType, presentationType)
{
	this.setupWithNameText(name, text);
	this.m_values = values;
	this.m_isVisible = isVisible;
	this.m_valueExceptions = inaValueExceptions;
	this.m_valueType = valueType;
	this.m_presentationType = presentationType;
};
oFF.InARsField.prototype.releaseObject = function()
{
	this.m_valueType = null;
	this.m_presentationType = null;
	this.m_values = oFF.XObjectExt.release(this.m_values);
	this.m_valueExceptions = oFF.XObjectExt.release(this.m_valueExceptions);
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.InARsField.prototype.getValues = function()
{
	return this.m_values;
};
oFF.InARsField.prototype.getValueExceptionAt = function(index)
{
	return oFF.isNull(this.m_valueExceptions) ? -1 : this.m_valueExceptions.getIntegerAt(index);
};
oFF.InARsField.prototype.isVisible = function()
{
	return this.m_isVisible;
};
oFF.InARsField.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.InARsField.prototype.getPresentationType = function()
{
	return this.m_presentationType;
};

oFF.MeasureValueHelpRsAxisProvider = function() {};
oFF.MeasureValueHelpRsAxisProvider.prototype = new oFF.DfRsAxisProvider();
oFF.MeasureValueHelpRsAxisProvider.prototype._ff_c = "MeasureValueHelpRsAxisProvider";

oFF.MeasureValueHelpRsAxisProvider.create = function(context)
{
	var object = new oFF.MeasureValueHelpRsAxisProvider();
	object.m_isCorrectDrillState = context.getQueryManager().getSession().hasFeature(oFF.FeatureToggleOlap.CORRECT_DRILLSTATE_IN_CLASSIC_RESULTSET);
	return object;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.m_nodes = null;
oFF.MeasureValueHelpRsAxisProvider.prototype.m_rsDimension = null;
oFF.MeasureValueHelpRsAxisProvider.prototype.m_tupleCountTotal = 0;
oFF.MeasureValueHelpRsAxisProvider.prototype.m_isCorrectDrillState = false;
oFF.MeasureValueHelpRsAxisProvider.prototype.releaseObject = function()
{
	oFF.DfRsAxisProvider.prototype.releaseObject.call( this );
	this.m_nodes = oFF.XObjectExt.release(this.m_nodes);
	this.m_rsDimension = oFF.XObjectExt.release(this.m_rsDimension);
};
oFF.MeasureValueHelpRsAxisProvider.prototype.setValueHelpNodes = function(nodes, measureDimension)
{
	if (oFF.notNull(nodes) && oFF.notNull(measureDimension))
	{
		this.m_nodes = nodes;
		this.m_rsDimension = oFF.MeasureValueHelpRsDimension.create(measureDimension);
		var allStructureMembers = measureDimension.getAllStructureMembers();
		this.m_tupleCountTotal = oFF.notNull(allStructureMembers) ? allStructureMembers.size() : nodes.size();
		this.m_isCorrectDrillState = measureDimension.getQueryManager().getSession().hasFeature(oFF.FeatureToggleOlap.CORRECT_DRILLSTATE_IN_CLASSIC_RESULTSET);
	}
};
oFF.MeasureValueHelpRsAxisProvider.prototype.copyValueHelpRsAxisProvider = function(origin)
{
	this.m_isCorrectDrillState = origin.m_isCorrectDrillState;
	if (oFF.notNull(origin.m_nodes))
	{
		this.m_nodes = oFF.XList.create();
		for (var i = 0; i < origin.m_nodes.size(); i++)
		{
			var node = origin.m_nodes.get(i);
			this.m_nodes.add(oFF.QValueHelpNode2.createValueHelpNode(node.getName(), node.getDimensionMember(), node.getDrillState(), node.getDisplayLevel(), node.getChildCount(), node.getAbsoluteLevel(), origin.m_isCorrectDrillState));
		}
	}
	if (oFF.notNull(origin.m_rsDimension))
	{
		this.m_rsDimension = origin.m_rsDimension.clone();
	}
};
oFF.MeasureValueHelpRsAxisProvider.prototype.notifySetAxisMetadata = function()
{
	var cursorAxis = this.getCursorAxis();
	if (oFF.notNull(this.m_nodes) && oFF.notNull(this.m_rsDimension))
	{
		cursorAxis.startAddMetadata(1);
		cursorAxis.addNextTupleElementMetadata(0, this.m_rsDimension);
		var fields = this.m_rsDimension.getFields();
		for (var i = 0; i < fields.size(); i++)
		{
			var field = fields.get(i);
			cursorAxis.addNextFieldMetadata(field.getName(), field.getText(), true, field.getPresentationType(), field.getValueType());
		}
	}
	else
	{
		cursorAxis.startAddMetadata(0);
	}
	cursorAxis.endAddMetadata();
};
oFF.MeasureValueHelpRsAxisProvider.prototype.notifyAxisCursorChange = function(newIndex)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_nodes) || newIndex >= this.m_nodes.size())
	{
		return;
	}
	var node = this.m_nodes.get(newIndex);
	var dimensionMember = node.getDimensionMember();
	var cursorAxis = this.getCursorAxis();
	cursorAxis.setTupleElementCursorBeforeStart();
	cursorAxis.nextTupleElement();
	cursorAxis.setDimensionMemberType(dimensionMember.getMemberType());
	cursorAxis.setNodeId(node.getName());
	cursorAxis.setAbsoluteLevel(-1);
	cursorAxis.setChildCount(-1);
	var dimension = node.getDimension();
	var fields = dimension.getFields();
	for (var i = 0; i < fields.size(); i++)
	{
		cursorAxis.nextFieldValue();
		var field = fields.get(i);
		var fieldValue = dimensionMember.getFieldValue(field);
		var value = oFF.notNull(fieldValue) ? fieldValue.getString() : "";
		cursorAxis.setString(value);
		cursorAxis.setFormattedValue(value);
		if (field === dimension.getKeyField())
		{
			cursorAxis.setDimensionMemberName(value);
		}
	}
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getTuplesCount = function()
{
	return oFF.notNull(this.m_nodes) ? this.m_nodes.size() : 0;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getTuplesCountTotal = function()
{
	return this.m_tupleCountTotal;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getTupleElementsCount = function()
{
	return oFF.notNull(this.m_rsDimension) ? 1 : 0;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getDataCount = function()
{
	return this.getTuplesCount();
};
oFF.MeasureValueHelpRsAxisProvider.prototype.setTuplesCount = oFF.noSupport;

oFF.QInAImportAction = function() {};
oFF.QInAImportAction.prototype = new oFF.SyncAction();
oFF.QInAImportAction.prototype._ff_c = "QInAImportAction";

oFF.QInAImportAction.create = function(context, componentType, inaElement, modelComponent, parentComponent, modelContext)
{
	var newObj = new oFF.QInAImportAction();
	newObj.setupAction(null, null, null, context);
	return newObj;
};
oFF.QInAImportAction.prototype.m_componentType = null;
oFF.QInAImportAction.prototype.m_inaElement = null;
oFF.QInAImportAction.prototype.m_modelComponent = null;
oFF.QInAImportAction.prototype.m_parentComponent = null;
oFF.QInAImportAction.prototype.m_modelContext = null;
oFF.QInAImportAction.prototype.releaseObject = function()
{
	this.m_componentType = null;
	this.m_inaElement = null;
	this.m_modelComponent = null;
	this.m_parentComponent = null;
	this.m_modelContext = null;
	oFF.SyncAction.prototype.releaseObject.call( this );
};
oFF.QInAImportAction.prototype.processSynchronization = function(syncType)
{
	var importer = this.getActionContext();
	var component = importer.importComponent(this.m_componentType, this.m_inaElement, this.m_modelComponent, this.m_parentComponent, this.m_modelContext);
	this.setData(component);
	this.endSync();
	return false;
};
oFF.QInAImportAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onImportDone(extResult, data, customIdentifier);
};

oFF.DfFunctionalValueHelpSyncAction = function() {};
oFF.DfFunctionalValueHelpSyncAction.prototype = new oFF.SyncAction();
oFF.DfFunctionalValueHelpSyncAction.prototype._ff_c = "DfFunctionalValueHelpSyncAction";

oFF.DfFunctionalValueHelpSyncAction.prototype.setupFunctionalValueHelp = function(dimension)
{
	this.setupAction(null, null, null, dimension);
};
oFF.DfFunctionalValueHelpSyncAction.prototype.processSynchronization = function(syncType)
{
	var queryManager = this.getActionContext().getQueryManager();
	var connectionContainer = queryManager.getServiceConfig().getConnectionContainer();
	var relativeUri = oFF.XUri.createFromUrl(this.getPath(connectionContainer).toString());
	relativeUri.addQueryElements(this.getUriParameters());
	var rpcFunction = connectionContainer.newRpcFunctionByServiceAndPath(oFF.ServerService.DIMENSION_EXTENSION, relativeUri);
	rpcFunction.setStaticURL(true);
	var request = rpcFunction.getRpcRequest();
	request.setMethod(oFF.HttpRequestMethod.HTTP_GET);
	request.setAcceptContentType(oFF.ContentType.APPLICATION_JSON);
	rpcFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.DfFunctionalValueHelpSyncAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.clearMessages();
	if (extResult.getServerStatusCode() === oFF.HttpStatusCode.SC_NOT_FOUND)
	{
		this.setData(oFF.XList.create());
		this.endSync();
		return;
	}
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		this.setData(this.createDataFromResponse(response.getRootElementGeneric()));
	}
	this.endSync();
};
oFF.DfFunctionalValueHelpSyncAction.prototype.getUriParameters = function()
{
	return null;
};
oFF.DfFunctionalValueHelpSyncAction.prototype.getPath = function(connectionContainer)
{
	var name = this.getActionContext().getExternalName();
	if (oFF.XStringUtils.isNullOrEmpty(name))
	{
		name = this.getActionContext().getName();
	}
	var path = oFF.XStringBuffer.create();
	path.append("/dimension").append("/").append(name);
	path.append("/rsel");
	return path;
};

oFF.InAFusionLayer = function() {};
oFF.InAFusionLayer.prototype = new oFF.SyncAction();
oFF.InAFusionLayer.prototype._ff_c = "InAFusionLayer";

oFF.InAFusionLayer.URL_ACTION = null;
oFF.InAFusionLayer.METADATA_ACTION = null;
oFF.InAFusionLayer.MODEL_ACTION = null;
oFF.InAFusionLayer.REPO_ACTION = null;
oFF.InAFusionLayer.DATASOURCE_ACTION = null;
oFF.InAFusionLayer.staticSetup = function()
{
	oFF.InAFusionLayer.URL_ACTION = oFF.XComponentType.createType("QDocUrlAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.METADATA_ACTION = oFF.XComponentType.createType("QDocMetadataAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.MODEL_ACTION = oFF.XComponentType.createType("QDocModelAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.REPO_ACTION = oFF.XComponentType.createType("QDocRepoAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.DATASOURCE_ACTION = oFF.XComponentType.createType("QDocDataSourceAction", oFF.OlapComponentType.OLAP);
};
oFF.InAFusionLayer.prototype.m_queryServiceConfig = null;
oFF.InAFusionLayer.prototype.m_dataSource = null;
oFF.InAFusionLayer.prototype.m_connectionContainer = null;
oFF.InAFusionLayer.prototype.m_serverMetadata = null;
oFF.InAFusionLayer.prototype.m_content = null;
oFF.InAFusionLayer.prototype.m_nextActionType = null;
oFF.InAFusionLayer.prototype.m_nextDataSource = null;
oFF.InAFusionLayer.prototype.m_nextDocument = null;
oFF.InAFusionLayer.prototype.endSync = function()
{
	this.setData(this);
	oFF.SyncAction.prototype.endSync.call( this );
};
oFF.InAFusionLayer.prototype.getConfig = function()
{
	return this.m_queryServiceConfig;
};
oFF.InAFusionLayer.prototype.setConfig = function(config)
{
	this.m_queryServiceConfig = config;
};
oFF.InAFusionLayer.prototype.getConnectionContainer = function()
{
	return this.m_connectionContainer;
};
oFF.InAFusionLayer.prototype.getServerMetadata = function()
{
	return this.m_serverMetadata;
};
oFF.InAFusionLayer.prototype.setServerMetadata = function(serverMetadata)
{
	this.m_serverMetadata = serverMetadata;
};
oFF.InAFusionLayer.prototype.setConnection = function(connectionContainer)
{
	this.m_connectionContainer = connectionContainer;
};
oFF.InAFusionLayer.prototype.getConnection = function()
{
	return this.m_connectionContainer;
};
oFF.InAFusionLayer.prototype.getContent = function()
{
	return this.m_content;
};
oFF.InAFusionLayer.prototype.setContent = function(model)
{
	this.m_content = model;
};
oFF.InAFusionLayer.prototype.setContentExt = function(modelResponse, sourceType)
{
	var docConverter = oFF.DocConverterFactory.createDocConverter(sourceType, oFF.QModelFormat.INA_REPOSITORY);
	if (oFF.notNull(docConverter))
	{
		var extResult = docConverter.convert(this.getApplication(), modelResponse, oFF.QModelFormat.INA_REPOSITORY);
		this.addAllMessages(extResult);
		if (this.isValid())
		{
			var modelAsRepo = extResult.getData();
			this.m_content = modelAsRepo;
		}
	}
	else
	{
		this.addErrorExt(oFF.OriginLayer.APPLICATION, 0, oFF.XStringUtils.concatenate2("Cannot find document to ina_repo converter for ", sourceType.getName()), null);
	}
};
oFF.InAFusionLayer.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onDocFusionLayerDone(extResult, data, customIdentifier);
};
oFF.InAFusionLayer.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.InAFusionLayer.prototype.getSystemName = function()
{
	return this.getSystemDescription().getSystemName();
};
oFF.InAFusionLayer.prototype.getSystemType = function()
{
	return this.getSystemDescription().getSystemType();
};
oFF.InAFusionLayer.prototype.getSystemDescription = function()
{
	return this.getConfig().getSystemDescription();
};
oFF.InAFusionLayer.prototype.hasPrivateConnection = function()
{
	return this.getConfig().hasPrivateConnection();
};
oFF.InAFusionLayer.prototype.getConnectionName = function()
{
	return this.getConfig().getConnectionName();
};
oFF.InAFusionLayer.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.InAFusionLayer.prototype.setDataSource = function(dataSource)
{
	this.m_dataSource = dataSource;
};
oFF.InAFusionLayer.prototype.getOlapEnv = function()
{
	return this.getApplication().getOlapEnvironment();
};
oFF.InAFusionLayer.prototype.getNextDataSource = function()
{
	return this.m_nextDataSource;
};
oFF.InAFusionLayer.prototype.setNextDataSource = function(dataSource)
{
	this.m_nextDataSource = dataSource;
};
oFF.InAFusionLayer.prototype.getNextActionType = function()
{
	return this.m_nextActionType;
};
oFF.InAFusionLayer.prototype.setNextActionType = function(nextActionType)
{
	this.m_nextActionType = nextActionType;
};
oFF.InAFusionLayer.prototype.getNextDocument = function()
{
	return this.m_nextDocument;
};
oFF.InAFusionLayer.prototype.setNextDocument = function(nextDocument)
{
	this.m_nextDocument = nextDocument;
};

oFF.InAFusionMainAction = function() {};
oFF.InAFusionMainAction.prototype = new oFF.SyncAction();
oFF.InAFusionMainAction.prototype._ff_c = "InAFusionMainAction";

oFF.InAFusionMainAction.createAndRun = function(syncType, listener, customIdentifier, carrier)
{
	var object = new oFF.InAFusionMainAction();
	object.setupActionAndRun(syncType, listener, customIdentifier, carrier);
	return object;
};
oFF.InAFusionMainAction.prototype.m_nextDataSource = null;
oFF.InAFusionMainAction.prototype.m_nextActionType = null;
oFF.InAFusionMainAction.prototype.m_nextDocument = null;
oFF.InAFusionMainAction.prototype.m_connections = null;
oFF.InAFusionMainAction.prototype.processSynchronization = function(syncType)
{
	var fusionResult = this.getActionContext();
	this.setData(fusionResult);
	var config = this.getConfig();
	this.m_connections = oFF.XHashMapByString.create();
	var connectionContainer = config.getConnectionContainer();
	if (oFF.notNull(connectionContainer))
	{
		this.m_connections.put(connectionContainer.getSystemName(), connectionContainer);
	}
	var definitionContent = config.getDefinitionContent();
	if (oFF.notNull(definitionContent))
	{
		var contentType = definitionContent.getContentType();
		if (contentType.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || contentType.isTypeOf(oFF.QModelFormat.INA_CLONE))
		{
			this.m_nextActionType = oFF.InAFusionLayer.REPO_ACTION;
			this.m_nextDocument = definitionContent;
		}
		else if (contentType.isTypeOf(oFF.QModelFormat.INA_METADATA))
		{
			this.m_nextActionType = oFF.InAFusionLayer.METADATA_ACTION;
			this.m_nextDocument = definitionContent;
		}
	}
	var dataSource = config.getDataSource();
	if (oFF.isNull(this.m_nextActionType) && oFF.notNull(dataSource))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataSource.getName()))
		{
			this.m_nextDataSource = dataSource;
			this.m_nextActionType = oFF.InAFusionLayer.DATASOURCE_ACTION;
		}
	}
	if (this.getActiveSyncType() === oFF.SyncType.BLOCKING)
	{
		while (oFF.notNull(this.m_nextActionType))
		{
			this.processLayer();
		}
		this.endSync();
	}
	else
	{
		this.processLayer();
	}
	return true;
};
oFF.InAFusionMainAction.prototype.processLayer = function()
{
	if (oFF.isNull(this.m_nextActionType))
	{
		this.endSync();
	}
	else
	{
		var config = this.getConfig();
		var listener = this;
		var syncType = this.getActiveSyncType();
		var action = null;
		if (syncType === oFF.SyncType.BLOCKING)
		{
			listener = null;
		}
		if (this.m_nextActionType === oFF.InAFusionLayer.URL_ACTION)
		{
			action = oFF.InAFusionUrlAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.MODEL_ACTION)
		{
			action = oFF.InAFusionModelAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.METADATA_ACTION)
		{
			action = oFF.InAFusionMetadataAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource, this.m_nextDocument);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.REPO_ACTION)
		{
			action = oFF.InAFusionRepoAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource, this.m_nextDocument);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.DATASOURCE_ACTION)
		{
			action = oFF.InAFusionDataSourceAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource, this.m_nextDocument);
		}
		if (oFF.notNull(action))
		{
			if (syncType === oFF.SyncType.BLOCKING)
			{
				var layer = action.getData();
				this.onDocFusionLayerDone(action, layer, null);
			}
		}
		else
		{
			this.m_nextActionType = null;
			this.addError(0, "Cannot find action type for fusion");
			if (syncType === oFF.SyncType.NON_BLOCKING)
			{
				this.endSync();
			}
		}
	}
};
oFF.InAFusionMainAction.prototype.onDocFusionLayerDone = function(extResult, fusionLayer, customIdentifier)
{
	this.addAllMessages(extResult);
	this.getActionContext().addLayer(fusionLayer);
	this.m_nextDataSource = null;
	this.m_nextActionType = null;
	this.m_nextDocument = null;
	if (this.isValid())
	{
		var fusionLayerType = fusionLayer.getComponentType();
		var fusionResult = this.getActionContext();
		var content = fusionLayer.getContent();
		this.m_nextActionType = fusionLayer.getNextActionType();
		this.m_nextDataSource = fusionLayer.getNextDataSource();
		this.m_nextDocument = fusionLayer.getNextDocument();
		if (fusionLayerType === oFF.InAFusionLayer.METADATA_ACTION)
		{
			var metadataAction = fusionLayer;
			fusionResult.setConnectionContainer(metadataAction.getConnectionContainer());
			fusionResult.setServerMetadata(metadataAction.getServerMetadata());
			fusionResult.setMetadataContent(content);
			fusionResult.setDataSource(this.m_nextDataSource);
		}
		else if (fusionLayerType === oFF.InAFusionLayer.REPO_ACTION)
		{
			fusionResult.setRepositoryContent(content);
		}
	}
	if (this.getActiveSyncType() === oFF.SyncType.NON_BLOCKING)
	{
		if (oFF.notNull(this.m_nextActionType))
		{
			this.processLayer();
		}
		else
		{
			this.endSync();
		}
	}
};
oFF.InAFusionMainAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onDocFusionDone(this, data, customIdentifier);
};
oFF.InAFusionMainAction.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.InAFusionMainAction.prototype.getConfig = function()
{
	return this.getActionContext().getConfig();
};
oFF.InAFusionMainAction.prototype.getConnectionExt = function(systemName, isPrivate, name)
{
	var connection = this.m_connections.getByKey(systemName);
	if (oFF.isNull(connection))
	{
		var application = this.getApplication();
		var connectionPool = application.getConnectionPool();
		connection = connectionPool.getConnectionExt(systemName, isPrivate, name);
		this.m_connections.put(systemName, connection);
	}
	return connection;
};

oFF.InACustomHierarchyProvider = function() {};
oFF.InACustomHierarchyProvider.prototype = new oFF.SyncAction();
oFF.InACustomHierarchyProvider.prototype._ff_c = "InACustomHierarchyProvider";

oFF.InACustomHierarchyProvider.create = function(queryProvider, customHierarchyDefinition, enforceRequest)
{
	var provider = new oFF.InACustomHierarchyProvider();
	provider.setupAction(null, null, null, queryProvider);
	provider.m_queryProvider = oFF.XWeakReferenceUtil.getWeakRef(queryProvider);
	provider.m_customHierarchyDefinition = oFF.XWeakReferenceUtil.getWeakRef(customHierarchyDefinition);
	provider.m_enforceRequest = enforceRequest;
	return provider;
};
oFF.InACustomHierarchyProvider.prototype.m_queryProvider = null;
oFF.InACustomHierarchyProvider.prototype.m_customHierarchyDefinition = null;
oFF.InACustomHierarchyProvider.prototype.m_enforceRequest = false;
oFF.InACustomHierarchyProvider.prototype.releaseObject = function()
{
	oFF.SyncAction.prototype.releaseObject.call( this );
	this.m_queryProvider = oFF.XObjectExt.release(this.m_queryProvider);
	this.m_customHierarchyDefinition = oFF.XObjectExt.release(this.m_customHierarchyDefinition);
};
oFF.InACustomHierarchyProvider.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.InACustomHierarchyProvider.prototype.getCustomHierarchyDefinition = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_customHierarchyDefinition);
};
oFF.InACustomHierarchyProvider.prototype.getQueryProvider = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_queryProvider);
};
oFF.InACustomHierarchyProvider.prototype.getCustomHierarchyRepo = function()
{
	return this.getQueryProvider().getOlapEnv().getCustomHierarchyRepository();
};
oFF.InACustomHierarchyProvider.prototype.getCustomHierarchySessionData = function()
{
	var customHierarchySessionData = null;
	var connectionContainer = this.getQueryProvider().getConnection();
	if (oFF.notNull(connectionContainer))
	{
		customHierarchySessionData = connectionContainer.getCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA);
		if (oFF.isNull(customHierarchySessionData))
		{
			customHierarchySessionData = oFF.CustomHierarchySessionData.create();
			connectionContainer.addCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA, customHierarchySessionData);
		}
	}
	return customHierarchySessionData;
};
oFF.InACustomHierarchyProvider.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	var definition = this.getCustomHierarchyDefinition();
	if (oFF.isNull(definition) || oFF.XStringUtils.isNullOrEmpty(definition.getDimensionName()) || !oFF.XCollectionUtils.hasElements(definition.getChildNodes()))
	{
		this.addError(oFF.ErrorCodes.INVALID_STATE, "Invalid custom hierarchy definition!");
		return this;
	}
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.InACustomHierarchyProvider.prototype.processSynchronization = function(syncType)
{
	var queryProvider = this.getQueryProvider();
	var customHierarchyDefinition = this.getCustomHierarchyDefinition();
	var customHierarchySessionData = this.getCustomHierarchySessionData();
	var customHierarchyResponse = !this.m_enforceRequest && oFF.notNull(customHierarchySessionData) ? customHierarchySessionData.getHierarchyInAResponse(customHierarchyDefinition) : null;
	if (oFF.notNull(customHierarchyResponse))
	{
		this.applyCustomHierarchy(this.createCustomHierarchy(customHierarchyDefinition, customHierarchyResponse));
		return false;
	}
	else if (oFF.notNull(customHierarchySessionData) && customHierarchySessionData.registerOnActiveHierarchySubmit(customHierarchyDefinition, this))
	{
		return true;
	}
	else
	{
		if (oFF.notNull(customHierarchySessionData))
		{
			customHierarchySessionData.flagHierarchySubmitActive(customHierarchyDefinition);
		}
		var ocpFunction = queryProvider.createFunction();
		this.setSyncChild(ocpFunction);
		var request = ocpFunction.getRpcRequest();
		request.setRequestStructure(this.fillCustomHierarchyRequestStructure(customHierarchyDefinition));
		ocpFunction.processFunctionExecution(syncType, this, null);
		return true;
	}
};
oFF.InACustomHierarchyProvider.prototype.fillCustomHierarchyRequestStructure = function(customHierarchyDefinition)
{
	this.addProfileStep("fillCustomHierarchyRequestStructure");
	var dataStructure = oFF.PrFactory.createStructure();
	var innerRequestStructure = this.getQueryProvider().setInnerStructure(dataStructure, "Analytics", oFF.ProcessingStep.HIERARCHY_SUBMIT);
	var exportInAData = oFF.QInAExportFactory.createForData(this.getApplication(), this.getQueryProvider().getModelCapabilities());
	var inaDefinition = exportInAData.exportCustomHierarchyDefinition(customHierarchyDefinition);
	innerRequestStructure.put("Definition", inaDefinition);
	this.addAllMessages(exportInAData);
	var inaContext = dataStructure.getStructureByKey("Analytics");
	var inaProcessingDirective = inaContext.putNewStructure("ProcessingDirectives");
	inaProcessingDirective.putString("ProcessingStep", "TransientHierarchySubmit");
	this.endProfileStep();
	return dataStructure;
};
oFF.InACustomHierarchyProvider.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	var customHierarchyDefinition = this.getCustomHierarchyDefinition();
	var inaHierarchy = null;
	if (extResult.isValid() && oFF.notNull(response) && oFF.notNull(customHierarchyDefinition))
	{
		var inaGrids = oFF.PrUtils.getListProperty(response.getRootElement(), "Grids");
		var inaGrid = oFF.PrUtils.getStructureElement(inaGrids, 0);
		var inaAxes = oFF.PrUtils.getListProperty(inaGrid, "Axes");
		var inaAxis = oFF.PrUtils.getStructureElement(inaAxes, 0);
		var inaDimensions = oFF.PrUtils.getListProperty(inaAxis, "Dimensions");
		var inaDimension = oFF.PrUtils.getStructureElement(inaDimensions, 0);
		var dimensionName = customHierarchyDefinition.getDimensionName();
		var dimension = this.getQueryProvider().getQueryModel().getDimensionByName(dimensionName);
		if (oFF.isNull(dimension) || oFF.isNull(inaDimension) || !oFF.XString.isEqual(dimensionName, inaDimension.getStringByKey("Name")))
		{
			this.addError(oFF.ErrorCodes.OTHER_ERROR, "Invalid custom hierarchy submit response");
			this.finalizeCustomHierarchyProcessing(customHierarchyDefinition, null);
			return;
		}
		inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		if (oFF.isNull(inaHierarchy) || inaHierarchy.getStringByKey("Name") === null)
		{
			this.addError(oFF.ErrorCodes.OTHER_ERROR, oFF.XStringUtils.concatenate2("Invalid custom hierarchy submit response for dimension ", dimensionName));
			this.finalizeCustomHierarchyProcessing(customHierarchyDefinition, null);
			return;
		}
		customHierarchyDefinition.setName(inaHierarchy.getStringByKey("Name"));
		this.getCustomHierarchyRepo().addCustomHierarchy(customHierarchyDefinition);
		this.applyCustomHierarchy(this.createCustomHierarchy(customHierarchyDefinition, inaHierarchy));
	}
	this.finalizeCustomHierarchyProcessing(customHierarchyDefinition, inaHierarchy);
};
oFF.InACustomHierarchyProvider.prototype.finalizeCustomHierarchyProcessing = function(customHierarchyDefinition, inaHierarchy)
{
	var customHierarchySessionData = this.getCustomHierarchySessionData();
	if (oFF.notNull(customHierarchySessionData))
	{
		customHierarchySessionData.finishHierarchySubmit(customHierarchyDefinition, inaHierarchy);
	}
	this.endSync();
};
oFF.InACustomHierarchyProvider.prototype.onCustomHierarchySubmitted = function(customHierarchyDefinition, inaHierarchy)
{
	if (oFF.notNull(customHierarchyDefinition) && customHierarchyDefinition.isEqualTo(this.getCustomHierarchyDefinition()) && this.getSyncState() === oFF.SyncState.PROCESSING)
	{
		if (oFF.notNull(inaHierarchy))
		{
			this.applyCustomHierarchy(this.createCustomHierarchy(customHierarchyDefinition, inaHierarchy));
		}
		this.endSync();
	}
};
oFF.InACustomHierarchyProvider.prototype.createCustomHierarchy = function(customHierarchyDefinition, inaHierarchy)
{
	var dimension = this.getQueryProvider().getQueryModel().getDimensionByName(customHierarchyDefinition.getDimensionName());
	var inaCustomHierarchyName = oFF.PrUtils.getStringProperty(inaHierarchy, "Name");
	var ianCustomHierarchyVersion = oFF.PrUtils.getStringProperty(inaHierarchy, "Version");
	var inaCustomHierarchyDueDate = oFF.PrUtils.getStringProperty(inaHierarchy, "DueDate");
	var customHierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, inaCustomHierarchyName.getString(), customHierarchyDefinition.getDescription());
	if (oFF.notNull(ianCustomHierarchyVersion))
	{
		customHierarchy.setHierarchyVersion(ianCustomHierarchyVersion.getString());
	}
	if (oFF.notNull(inaCustomHierarchyDueDate))
	{
		var isBW = dimension.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.ABAP);
		var inaDueDate = isBW ? oFF.XDate.createDateFromSAPFormat(inaCustomHierarchyDueDate.getString()) : oFF.XDate.createDateFromIsoFormat(inaCustomHierarchyDueDate.getString());
		customHierarchy.setHierarchyDueDate(inaDueDate);
	}
	return customHierarchy;
};
oFF.InACustomHierarchyProvider.prototype.applyCustomHierarchy = function(customHierarchy)
{
	var dimension = customHierarchy.getDimension();
	dimension.getHierarchyManager().addCustomHierarchy(customHierarchy);
	var customHierarchyDef = dimension.getCustomHierarchyDefinition();
	if (oFF.notNull(customHierarchyDef) && oFF.XString.isEqual(customHierarchyDef.getName(), customHierarchy.getName()))
	{
		dimension.setHierarchy(customHierarchy);
		var queryManager = dimension.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			var variableProcessorState = queryManager.getVariableProcessorState();
			if (queryManager.isAutoVariableSubmitActive() && variableProcessorState !== oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT && variableProcessorState !== oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT)
			{
				var hierarchyNameVarainleName = dimension.getHierarchyNameVariableName();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyNameVarainleName))
				{
					queryManager.getVariable(hierarchyNameVarainleName).setWinControlInAutoSubmit(false);
				}
			}
		}
	}
	this.setData(customHierarchy);
};

oFF.InAUpdatedMDProcessor = function() {};
oFF.InAUpdatedMDProcessor.prototype = new oFF.DfQContext();
oFF.InAUpdatedMDProcessor.prototype._ff_c = "InAUpdatedMDProcessor";

oFF.InAUpdatedMDProcessor.create = function(context, rsQueryModelDef, inaUpdatedMetadata)
{
	var processor = new oFF.InAUpdatedMDProcessor();
	processor.setupProcessor(context, rsQueryModelDef, inaUpdatedMetadata);
	return processor;
};
oFF.InAUpdatedMDProcessor.merge = function(importer, inaUpdatedMetadata, queryModel, rsQueryModelDef)
{
	queryModel.queueEventing();
	var settings = oFF.InAQMgrMergeSettings.create(true);
	oFF.InAUpdatedMDProcessor.updateCubeInfo(inaUpdatedMetadata, queryModel);
	oFF.InAUpdatedMDProcessor.updateDimensions(importer, inaUpdatedMetadata, queryModel, rsQueryModelDef, settings);
	oFF.InAUpdatedMDProcessor.updateVariables(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAUpdatedMDProcessor.updateFilters(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAUpdatedMDProcessor.updateConditions(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAUpdatedMDProcessor.updateSorting(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAUpdatedMDProcessor.updateUniversalDisplayHierarchies(importer, inaUpdatedMetadata, queryModel, settings);
	queryModel.resumeEventing();
};
oFF.InAUpdatedMDProcessor.updateCubeInfo = function(inaStructure, queryModel)
{
	var cubeInfo = queryModel.getCubeInfo();
	if (oFF.notNull(cubeInfo) && oFF.notNull(inaStructure))
	{
		var createdOn = inaStructure.getStringByKey("CreatedOn");
		var createdOnObj = oFF.XDateTime.createDateTimeSafe(createdOn);
		cubeInfo.setCreatedOn(createdOnObj);
		cubeInfo.setCreatedBy(inaStructure.getStringByKey("CreatedBy"));
		var lastUpdate = inaStructure.getStringByKey("LastDataUpdate");
		var lastUpdateOnObj = oFF.XDateTime.createDateTimeSafe(lastUpdate);
		cubeInfo.setLastUpdateOn(lastUpdateOnObj);
		var dueDateValue = inaStructure.getStringByKey("DueDate");
		var dueDate = oFF.XDateTime.createDateTimeSafe(dueDateValue);
		cubeInfo.setDueDate(dueDate);
	}
};
oFF.InAUpdatedMDProcessor.updateFilters = function(importer, inaStructure, queryModel, settings)
{
	var filterManager = queryModel.getFilterBase();
	var inaFixedFilter = inaStructure.getStructureByKey("FixedFilter");
	oFF.InAUpdatedMDProcessor.updateFilter(importer, oFF.OlapComponentType.FILTER_FIXED, inaFixedFilter, filterManager, settings);
	var inaDynamicFilter = inaStructure.getStructureByKey("DynamicFilter");
	oFF.InAUpdatedMDProcessor.updateFilter(importer, oFF.OlapComponentType.FILTER_DYNAMIC, inaDynamicFilter, filterManager, settings);
};
oFF.InAUpdatedMDProcessor.updateFilter = function(importer, filterType, inaFilter, filter, settings)
{
	if (oFF.notNull(filter))
	{
		var filterExpression = null;
		if (filterType === oFF.OlapComponentType.FILTER_DYNAMIC && filter.isDynamicFilterInitialized())
		{
			filterExpression = filter.getDynamicFilter();
		}
		else if (filterType === oFF.OlapComponentType.FILTER_FIXED && filter.isFixedFilterInitialized())
		{
			filterExpression = filter.getFixedFilter();
		}
		var newFilterExpression = oFF.isNull(inaFilter) ? null : importer.importComponent(oFF.OlapComponentType.FILTER_EXPRESSION, inaFilter, null, null, filter.getQueryModel());
		if (oFF.notNull(filterExpression))
		{
			var newFilterProduct = oFF.isNull(newFilterExpression) ? null : newFilterExpression.getCartesianProduct();
			var oldFilterProduct = filterExpression.getCartesianProduct();
			if (oFF.notNull(oldFilterProduct))
			{
				var dimensionsToUpdateWithVariables = oFF.InAUpdatedMDProcessor.getDimensionNamesForPlaceholderFilters(oldFilterProduct);
				var dimensionIterator = dimensionsToUpdateWithVariables.getIterator();
				while (dimensionIterator.hasNext())
				{
					var dimensionName = dimensionIterator.next();
					var newFilterList = oFF.isNull(newFilterProduct) ? null : newFilterProduct.getCartesianListByDimensionName(dimensionName);
					if (oFF.notNull(newFilterList))
					{
						oldFilterProduct.getCartesianListByDimensionName(dimensionName).copyFrom(newFilterList, null);
					}
					else
					{
						oldFilterProduct.removeByDimensionName(dimensionName);
					}
				}
			}
		}
	}
};
oFF.InAUpdatedMDProcessor.getDimensionNamesForPlaceholderFilters = function(cartesianProduct)
{
	return oFF.XStream.of(cartesianProduct).filter( function(list){
		var cartesianList = list;
		return oFF.notNull(cartesianList) && cartesianList.size() === 1 && cartesianList.getCartesianElement(0).getLow() !== null && cartesianList.getCartesianElement(0).getLow().getValueType() !== null && cartesianList.getCartesianElement(0).getLow().getValueType().isVariable();
	}.bind(this)).collect(oFF.XStreamCollector.toSetOfString( function(el){
		return el.getDimensionName();
	}.bind(this)));
};
oFF.InAUpdatedMDProcessor.updateDimensions = function(importer, inaStructure, queryModel, rsQueryModelDef, settings)
{
	var inaDimensions = inaStructure.getListByKey("Dimensions");
	if (oFF.notNull(inaDimensions))
	{
		var len = inaDimensions.size();
		for (var i = 0; i < len; i++)
		{
			var inaDimension = inaDimensions.getStructureAt(i);
			var dimensionName = inaDimension.getStringByKey("Name");
			var dimension = queryModel.getDimensionByName(dimensionName);
			var rsDimension = rsQueryModelDef.getDimensionByName(dimensionName);
			oFF.InAUpdatedMDProcessor.updateDimension(importer, inaDimension, dimension, rsDimension, settings);
		}
	}
};
oFF.InAUpdatedMDProcessor.updateDimension = function(importer, inaDimension, dimension, rsDimension, settings)
{
	if (oFF.notNull(dimension) && oFF.notNull(inaDimension))
	{
		dimension.setText(inaDimension.getStringByKey("Description"));
		oFF.InAUpdatedMDProcessor.updateHierarchy(importer, inaDimension, dimension);
		oFF.InAUpdatedMDProcessor.updateMembers(importer, inaDimension, dimension, settings);
		oFF.InAUpdatedMDProcessor.updateRsDimension(dimension, rsDimension);
	}
};
oFF.InAUpdatedMDProcessor.updateHierarchy = function(importer, inaDimension, dimension)
{
	var inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
	if (oFF.notNull(inaHierarchy))
	{
		importer.importHierarchy(dimension, inaDimension);
	}
};
oFF.InAUpdatedMDProcessor.updateMembers = function(importer, inaDimension, dimension, settings)
{
	var inaMembers = inaDimension.getListByKey("Members");
	if (!oFF.PrUtils.isListEmpty(inaMembers) && dimension.isMeasureStructure())
	{
		var keyFieldName = dimension.getKeyField().getName();
		var textField = dimension.getTextField();
		var textFieldName = oFF.isNull(textField) ? null : textField.getName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(textFieldName))
		{
			var inaMemberSize = inaMembers.size();
			for (var iMember = 0; iMember < inaMemberSize; iMember++)
			{
				var inaStructureMember = inaMembers.getStructureAt(iMember);
				var memberName = inaStructureMember.getStringByKey(keyFieldName);
				var memberText = inaStructureMember.getStringByKey(textFieldName);
				var member = dimension.getDimensionMember(memberName);
				if (oFF.notNull(member) && !oFF.XString.isEqual(member.getText(), memberText))
				{
					member.setText(memberText);
					member.getFieldValue(textField).setString(memberText);
				}
			}
		}
	}
};
oFF.InAUpdatedMDProcessor.updateRsDimension = function(dimension, rsDimension)
{
	if (oFF.notNull(rsDimension) && oFF.notNull(dimension))
	{
		rsDimension.setText(dimension.getText());
		rsDimension.setHierarchyName(dimension.getHierarchyName());
		rsDimension.setHierarchyActive(dimension.isHierarchyActive());
		rsDimension.setSelectorHierarchyActive(dimension.isSelectorHierarchyActive());
		rsDimension.setLowerLevelNodeAlignment(dimension.getLowerLevelNodeAlignment());
	}
};
oFF.InAUpdatedMDProcessor.updateVariables = function(importer, inaStructure, queryModel, settings)
{
	var variableContainer = queryModel.getVariableContainer();
	var inaVariables = inaStructure.getListByKey("Variables");
	if (oFF.notNull(variableContainer) && oFF.notNull(inaVariables))
	{
		var variableSize = inaVariables.size();
		for (var i = 0; i < variableSize; i++)
		{
			var inaVariable = oFF.PrUtils.getStructureElement(inaVariables, i);
			if (oFF.notNull(inaVariable))
			{
				var variableName = inaVariable.getStringByKey("Name");
				var variable = variableContainer.getVariable(variableName);
				oFF.InAUpdatedMDProcessor.updateVariable(importer, variableContainer, inaVariable, variable, settings);
			}
		}
	}
};
oFF.InAUpdatedMDProcessor.updateVariable = function(importer, variableContainer, inaVariable, variable, settings)
{
	if (oFF.notNull(variable) && oFF.notNull(inaVariable))
	{
		variable.setText(inaVariable.getStringByKey("Description"));
		var inaInputEnabled = inaVariable.getBooleanByKeyExt("InputEnabled", false);
		variable.setInputEnabled(inaInputEnabled);
		if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) && inaVariable.containsKey("IsInputEnabledAndExit"))
		{
			variable.setIsInputEnabledAndExit(inaVariable.getBooleanByKey("IsInputEnabledAndExit"));
		}
		oFF.InAUpdatedMDProcessor.updateVariableValues(importer, variableContainer, inaVariable, variable, settings);
	}
};
oFF.InAUpdatedMDProcessor.updateVariableValues = function(importer, variableContainer, inaVariable, variable, settings)
{
	var tmp = importer.mode;
	importer.mode = oFF.QModelFormat.INA_DATA;
	var variableType = variable.getVariableType();
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		var inaValues = inaVariable.getStructureByKey("Values");
		if (oFF.notNull(inaValues))
		{
			var dimensionMemberVariable = variable;
			importer.importDimensionMemberVariable(inaVariable, dimensionMemberVariable, variableContainer, dimensionMemberVariable);
		}
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		importer.importSimpleTypeVariable(inaVariable, variable, variableContainer);
	}
	importer.mode = tmp;
};
oFF.InAUpdatedMDProcessor.updateConditions = function(importer, inaStructure, queryModel, settings)
{
	var conditionManager = queryModel.getConditionManagerBase();
	var inaConditions = inaStructure.getListByKey("Conditions");
	if (oFF.notNull(conditionManager) && oFF.notNull(inaConditions))
	{
		importer.importConditionManager(inaStructure, conditionManager, queryModel);
	}
};
oFF.InAUpdatedMDProcessor.updateSorting = function(importer, inaStructure, queryModel, settings)
{
	var sortingManager = queryModel.getSortingManagerBase();
	var inaSorting = inaStructure.getListByKey("Sort");
	if (oFF.notNull(sortingManager) && oFF.notNull(inaSorting))
	{
		var newSortingManager = oFF.QSortingManager.create(queryModel);
		importer.importComponent(oFF.OlapComponentType.SORT_MANAGER, inaStructure, newSortingManager, queryModel, queryModel);
		var newOperations = newSortingManager.getSortingOperations();
		var newSortingSize = newOperations.size();
		for (var i = 0; i < newSortingSize; i++)
		{
			var newOperation = newOperations.get(i);
			var newComponentType = newOperation.getComponentType();
			var oldOperation = null;
			if (newComponentType === oFF.OlapComponentType.FIELD_SORTING)
			{
				var field = newOperation.getField();
				oldOperation = sortingManager.getFieldSorting(field, true);
			}
			else if (newComponentType === oFF.OlapComponentType.MEASURE_SORTING)
			{
				var measureMember = newOperation.getMeasure();
				oldOperation = sortingManager.getMeasureSorting(measureMember, true);
				var structureMember = newOperation.getStructure();
				if (oFF.notNull(structureMember) && oFF.notNull(oldOperation) && oldOperation.getStructure() !== structureMember)
				{
					oldOperation.setStructure(structureMember);
				}
			}
			else if (newComponentType === oFF.OlapComponentType.DATA_CELL_SORTING)
			{
				var path01 = newOperation.getElementPath();
				oldOperation = sortingManager.getDataCellSorting(path01, true);
			}
			else if (newComponentType === oFF.OlapComponentType.COMPLEX_SORTING)
			{
				var path02 = newOperation.getElementPath();
				oldOperation = sortingManager.getComplexSorting(path02, true);
			}
			else if (newComponentType === oFF.OlapComponentType.DIMENSION_SORTING)
			{
				var dimension = newOperation.getDimension();
				oldOperation = sortingManager.getDimensionSorting(dimension, true);
				var newSortType = newOperation.getSortingType();
				if (newSortType === oFF.SortType.FILTER)
				{
					oldOperation.setSortByFilter();
				}
				else if (newSortType === oFF.SortType.MEMBER_KEY)
				{
					oldOperation.setSortByKey();
					var newCustomSort = newOperation.getCustomSort();
					var newCustomSortPosition = newOperation.getCustomSortPosition();
					if (oFF.notNull(newCustomSort) && !newCustomSort.isEmpty())
					{
						if (newCustomSort !== oldOperation.getCustomSort())
						{
							oldOperation.setCustomSort(newCustomSort);
						}
						if (newCustomSortPosition !== oldOperation.getCustomSortPosition())
						{
							oldOperation.setCustomSortPosition(newOperation.getCustomSortPosition());
						}
					}
				}
				else if (newSortType === oFF.SortType.MEMBER_TEXT)
				{
					oldOperation.setSortByText();
				}
				else if (newSortType === oFF.SortType.HIERARCHY)
				{
					oldOperation.setSortByHierarchy();
				}
			}
			if (oFF.notNull(oldOperation))
			{
				var newDirection = newOperation.getDirection();
				if (newDirection !== oldOperation.getDirection())
				{
					oldOperation.setDirection(newDirection);
				}
				if (newOperation.isPreserveGroupingEnabled() !== oldOperation.isPreserveGroupingEnabled())
				{
					oldOperation.setPreserveGrouping(newOperation.isPreserveGroupingEnabled());
				}
			}
		}
		oFF.XObjectExt.release(newSortingManager);
	}
};
oFF.InAUpdatedMDProcessor.updateUniversalDisplayHierarchies = function(importer, inaStructure, queryModel, settings)
{
	var inaUdh = inaStructure.getStructureByKey("UniversalDisplayHierarchies");
	if (oFF.notNull(inaUdh))
	{
		var inaUdhList = inaUdh.getListByKey("DefinedHierarchies");
		if (!oFF.PrUtils.isListEmpty(inaUdhList))
		{
			var universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchiesBase();
			var udhSize = inaUdhList.size();
			for (var i = 0; i < udhSize; i++)
			{
				var inaUdHierarchy = inaUdhList.getStructureAt(i);
				var udhName = inaUdHierarchy.getStringByKey("Name");
				var udh = oFF.isNull(universalDisplayHierarchies) ? null : universalDisplayHierarchies.getByName(udhName);
				if (oFF.notNull(udh))
				{
					var active = inaUdHierarchy.getBooleanByKeyExt("Active", udh.isActive());
					udh.setActive(active);
				}
			}
		}
	}
};
oFF.InAUpdatedMDProcessor.prototype.m_inaUpdatedMetadata = null;
oFF.InAUpdatedMDProcessor.prototype.m_rsQueryModelDef = null;
oFF.InAUpdatedMDProcessor.prototype.setupProcessor = function(context, rsQueryModelDef, inaUpdatedMetadata)
{
	this.setupContext(context);
	this.m_inaUpdatedMetadata = inaUpdatedMetadata;
	this.m_rsQueryModelDef = rsQueryModelDef;
};
oFF.InAUpdatedMDProcessor.prototype.releaseObject = function()
{
	this.m_inaUpdatedMetadata = oFF.XObjectExt.release(this.m_inaUpdatedMetadata);
	this.m_rsQueryModelDef = null;
};
oFF.InAUpdatedMDProcessor.prototype.importMetadataAndUpdateState = function()
{
	var provider = this.getContext();
	var queryModel = provider.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		queryModel.setIsMetadataUpdatedByAutoSubmit(false);
		var variableProcessorState = provider.getVariableProcessorState();
		if (oFF.notNull(this.m_inaUpdatedMetadata) && this.m_rsQueryModelDef.isAutoVariableSubmitActive())
		{
			this.updateModelMetadata(queryModel);
			this.updateState(queryModel);
		}
		else if (variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT)
		{
			var previousVariableState = provider.getPreviousVariableProcessorState();
			provider.setVariableProcessorState(previousVariableState);
		}
	}
};
oFF.InAUpdatedMDProcessor.prototype.updateState = function(queryModel)
{
	var provider = this.getContext();
	if (oFF.notNull(provider))
	{
		oFF.InAQMgrVarAction.clearSavedStateAndExternalizeDynamicFilter(provider, provider.getVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT, false);
		provider.setVariableProcessorState(oFF.VariableProcessorState.SUBMITTED);
		provider.prepareAfterVariables();
	}
	queryModel.setIsMetadataUpdatedByAutoSubmit(true);
};
oFF.InAUpdatedMDProcessor.prototype.updateModelMetadata = function(queryModel)
{
	var application = queryModel.getApplication();
	var modelCapabilities = queryModel.getModelCapabilities();
	var importer = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
	oFF.InAUpdatedMDProcessor.merge(importer, this.m_inaUpdatedMetadata, queryModel, this.m_rsQueryModelDef);
};

oFF.InAValueHelpProvider = function() {};
oFF.InAValueHelpProvider.prototype = new oFF.DfQContext();
oFF.InAValueHelpProvider.prototype._ff_c = "InAValueHelpProvider";

oFF.InAValueHelpProvider.prototype.m_valuehelpCallbacks = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpResults = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpResultNodes = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpIdentifiers = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpProcessedKeys = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpIdentifier = 0;
oFF.InAValueHelpProvider.prototype.m_exportValueHelp = null;
oFF.InAValueHelpProvider.prototype.m_isBwHierarchyNameVariable = false;
oFF.InAValueHelpProvider.prototype.setupExt = function(context)
{
	this.setContext(context);
	this.m_valuehelpIdentifier = 0;
};
oFF.InAValueHelpProvider.prototype.releaseObject = function()
{
	this.m_valuehelpCallbacks = oFF.XObjectExt.release(this.m_valuehelpCallbacks);
	this.m_valuehelpResults = oFF.XObjectExt.release(this.m_valuehelpResults);
	this.m_valuehelpResultNodes = oFF.XObjectExt.release(this.m_valuehelpResultNodes);
	this.m_valuehelpIdentifiers = oFF.XObjectExt.release(this.m_valuehelpIdentifiers);
	this.m_valuehelpProcessedKeys = oFF.XObjectExt.release(this.m_valuehelpProcessedKeys);
	this.m_exportValueHelp = oFF.XObjectExt.release(this.m_exportValueHelp);
};
oFF.InAValueHelpProvider.prototype.lazyLoadValueHelpObjects = function()
{
	if (oFF.isNull(this.m_exportValueHelp))
	{
		this.m_exportValueHelp = oFF.QInAExportFactory.createForValueHelp(this.getApplication(), this.getModelCapabilities());
		this.m_valuehelpCallbacks = oFF.XHashMapByString.create();
		this.m_valuehelpResults = oFF.XHashMapByString.create();
		this.m_valuehelpResultNodes = oFF.XHashMapByString.create();
		this.m_valuehelpIdentifiers = oFF.XHashMapByString.create();
		this.m_valuehelpProcessedKeys = oFF.XHashSetOfString.create();
	}
	var iter = this.m_valuehelpProcessedKeys.getIterator();
	while (iter.hasNext())
	{
		var key = iter.next();
		this.m_valuehelpResults.remove(key);
		this.m_valuehelpResultNodes.remove(key);
		this.m_valuehelpCallbacks.remove(key);
		this.m_valuehelpIdentifiers.remove(key);
	}
	this.m_valuehelpProcessedKeys.clear();
};
oFF.InAValueHelpProvider.prototype.getExport = function()
{
	return this.m_exportValueHelp;
};
oFF.InAValueHelpProvider.prototype.getValueHelpResultSetNode = function(key)
{
	return this.m_valuehelpResultNodes.getByKey(key);
};
oFF.InAValueHelpProvider.prototype.getValueHelpResult = function(key)
{
	return this.m_valuehelpResults.getByKey(key);
};
oFF.InAValueHelpProvider.prototype.getNextValueHelpIdentifier = function()
{
	this.m_valuehelpIdentifier++;
	return oFF.XInteger.convertToString(this.m_valuehelpIdentifier);
};
oFF.InAValueHelpProvider.prototype.getValueHelpIdentifier = function()
{
	return oFF.XIntegerValue.create(this.m_valuehelpIdentifier);
};
oFF.InAValueHelpProvider.prototype.getValueHelpIdentifierString = function()
{
	return oFF.XInteger.convertToString(this.m_valuehelpIdentifier);
};
oFF.InAValueHelpProvider.prototype.putValueHelpCallback = function(key, value)
{
	this.m_valuehelpCallbacks.put(key, value);
};
oFF.InAValueHelpProvider.prototype.putValueHelpIdentifier = function(key, value)
{
	this.m_valuehelpIdentifiers.put(key, value);
};
oFF.InAValueHelpProvider.prototype.putValueHelpResult = function(key, value)
{
	this.m_valuehelpResults.put(key, value);
};
oFF.InAValueHelpProvider.prototype.putValueHelpResultNode = function(key, value)
{
	this.m_valuehelpResultNodes.put(key, value);
};
oFF.InAValueHelpProvider.prototype.transform = function(extResult)
{
	if (extResult.hasErrors())
	{
		return oFF.ExtResult.create(null, extResult);
	}
	var data = extResult.getData();
	if (oFF.isNull(data) || data.hasErrors())
	{
		return oFF.ExtResult.create(null, extResult);
	}
	var cursorResultSet = data.getCursorResultSet();
	if (cursorResultSet.hasErrors() || cursorResultSet.getState() === oFF.ResultSetState.ERROR)
	{
		return oFF.ExtResult.create(null, extResult);
	}
	var profileTransform = oFF.ProfileNode.create("ValueHelp", 0);
	profileTransform.addProfileStep("Transforming ResultSet to List");
	var customHier = this.m_isBwHierarchyNameVariable ? this.getOlapEnv().getCustomHierarchyRepository().getCustomHierarchyDefinitions().getValuesAsReadOnlyList() : null;
	var customHierNames = oFF.XListOfString.create();
	if (oFF.notNull(customHier))
	{
		for (var c = 0; c < customHier.size(); c++)
		{
			var hierNameRepo = customHier.get(c).getName();
			oFF.XCollectionUtils.addIfNotPresent(customHierNames, hierNameRepo);
		}
	}
	var queryManager = data.getQueryManager();
	var connection = queryManager.getConnection();
	var customHierarchySessionData = oFF.notNull(connection) ? connection.getCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA) : null;
	if (oFF.notNull(customHierarchySessionData))
	{
		var customHierSession = customHierarchySessionData.getHierarchyDefinitionNames();
		for (var h = 0; h < customHierSession.size(); h++)
		{
			var hierNameSession = customHierSession.get(h);
			oFF.XCollectionUtils.addIfNotPresent(customHierNames, hierNameSession);
		}
	}
	var parentIndices = oFF.XList.create();
	var nodes = oFF.XList.create();
	var cursorRowsAxis = cursorResultSet.getCursorRowsAxis();
	var isCorrectDrillState = queryManager.getSession().hasFeature(oFF.FeatureToggleOlap.CORRECT_DRILLSTATE_IN_CLASSIC_RESULTSET);
	while (cursorRowsAxis.hasNextTuple())
	{
		cursorRowsAxis.nextTuple();
		while (cursorRowsAxis.hasNextTupleElement())
		{
			var tupleElement = cursorRowsAxis.nextTupleElement();
			var dimensionMemberName = tupleElement.getDimensionMemberName();
			var dimension = tupleElement.getDimensionAtCurrentPositionFromQueryModel();
			var member = dimension.getDimensionMemberWithFormat(dimensionMemberName, null);
			member.setName(dimensionMemberName);
			member.setDimensionMemberNameValueException(tupleElement.getDimensionMemberNameValueException());
			while (cursorRowsAxis.hasNextFieldValue())
			{
				var fieldValue = cursorRowsAxis.nextFieldValue();
				var field = fieldValue.getField();
				var value = fieldValue.getValue();
				var memberFieldValue = null;
				if (oFF.notNull(value))
				{
					memberFieldValue = member.createAndAddFieldWithValue(field, value);
				}
				else if (field.getValueType().isDateBased())
				{
					memberFieldValue = member.createAndAddField(field);
				}
				if (oFF.notNull(memberFieldValue))
				{
					memberFieldValue.setValueException(fieldValue.getValueException());
					memberFieldValue.setFormattedValue(fieldValue.getFormattedValue());
				}
				if (oFF.notNull(value))
				{
					var stringValue = value.toString();
					if (field.isEqualTo(dimension.getSelectorTextField()))
					{
						member.setText(stringValue);
					}
					else if (field.isEqualTo(dimension.getSelectorKeyField()))
					{
						member.setName(stringValue);
					}
				}
			}
			var memberName = member.getName();
			if (this.m_isBwHierarchyNameVariable)
			{
				if (!customHierNames.contains(memberName))
				{
					parentIndices.add(oFF.XIntegerValue.create(tupleElement.getParentNodeIndex()));
					nodes.add(oFF.QValueHelpNode2.createValueHelpNode(memberName, member, tupleElement.getDrillState(), tupleElement.getDisplayLevel(), tupleElement.getChildCount(), tupleElement.getAbsoluteLevel(), isCorrectDrillState));
				}
			}
			else
			{
				parentIndices.add(oFF.XIntegerValue.create(tupleElement.getParentNodeIndex()));
				nodes.add(oFF.QValueHelpNode2.createValueHelpNode(memberName, member, tupleElement.getDrillState(), tupleElement.getDisplayLevel(), tupleElement.getChildCount(), tupleElement.getAbsoluteLevel(), isCorrectDrillState));
			}
		}
	}
	profileTransform.addProfileStep("Assign parent nodes");
	var sizeNodes = nodes.size();
	for (var idxNode = 0; idxNode < sizeNodes; idxNode++)
	{
		var parentIdx = parentIndices.get(idxNode).getInteger();
		if (parentIdx >= 0)
		{
			var parentNode = nodes.get(parentIdx);
			parentNode.addChildNode(nodes.get(idxNode));
		}
	}
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(parentIndices);
	profileTransform.endProfileStep();
	extResult.getRootProfileNode().addProfileNode(profileTransform);
	return oFF.ExtResult.create(nodes, extResult);
};
oFF.InAValueHelpProvider.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	var key = customIdentifier.toString();
	var realCallback = this.m_valuehelpCallbacks.getByKey(key);
	var realIdentifier = this.m_valuehelpIdentifiers.getByKey(key);
	if (this.m_valuehelpResultNodes.containsKey(key))
	{
		var extResultWithNodes = this.m_valuehelpResultNodes.getByKey(key);
		if (oFF.isNull(extResultWithNodes))
		{
			extResultWithNodes = this.transform(extResult);
			this.m_valuehelpResultNodes.put(key, extResultWithNodes);
		}
		if (oFF.notNull(realCallback))
		{
			realCallback.onValuehelpExecuted(extResultWithNodes, resultSetContainer, realIdentifier);
		}
	}
	else
	{
		this.m_valuehelpResults.put(key, extResult);
		if (oFF.notNull(realCallback))
		{
			realCallback.onValuehelpExecuted(extResult, resultSetContainer, realIdentifier);
		}
	}
	this.m_valuehelpProcessedKeys.add(key);
};
oFF.InAValueHelpProvider.prototype.hasValueHelpResultNodeForKey = function(valueHelpKey)
{
	return this.m_valuehelpResultNodes.containsKey(valueHelpKey);
};
oFF.InAValueHelpProvider.prototype.checkVariableType = function(variable)
{
	this.m_isBwHierarchyNameVariable = this.getQueryManager() !== null && this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.ABAP) && variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE;
};
oFF.InAValueHelpProvider.prototype.requiresMeasureValueHelp = function(dimension)
{
	return oFF.notNull(dimension) && dimension.isStructure() && !dimension.isHierarchyActive();
};
oFF.InAValueHelpProvider.prototype.createResultSetProvider = function(procedure, structure, rsDefQueryModel)
{
	oFF.XBooleanUtils.checkTrue(this.getQueryManagerBase().getCapabilitiesBase().supportsEncodedResultset(), "Only encoded resultset is supported");
	var valueHelpDimension = rsDefQueryModel.getRowsAxisDef().getRsDimensions().get(0);
	if (this.requiresMeasureValueHelp(valueHelpDimension))
	{
		var measureValueHelpRsProvider = oFF.MeasureValueHelpRsProvider.create(this.getDimensionAccessor().getDimensionByName(valueHelpDimension.getName()));
		var valueHelpKey = this.getValueHelpIdentifierString();
		if (this.hasValueHelpResultNodeForKey(valueHelpKey))
		{
			this.putValueHelpResultNode(valueHelpKey, measureValueHelpRsProvider.getMeasureHelpNodes());
		}
		return measureValueHelpRsProvider;
	}
	return oFF.InARsEnProvider.create(this.getQueryManager(), procedure, structure, oFF.QContextType.SELECTOR);
};

oFF.RuntimeRemoteBlendingQueryUpdaterAction = function() {};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype = new oFF.SyncAction();
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype._ff_c = "RuntimeRemoteBlendingQueryUpdaterAction";

oFF.RuntimeRemoteBlendingQueryUpdaterAction.create = function(systemToDependentQueriesMap, queryManager)
{
	var action = new oFF.RuntimeRemoteBlendingQueryUpdaterAction();
	action.setupAction(null, null, null, queryManager);
	action.m_systemToDependentQueriesMap = systemToDependentQueriesMap;
	action.m_queryNameToRpcFunctionMap = oFF.XHashMapByString.create();
	return action;
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.m_queryNameToRpcFunctionMap = null;
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.m_systemToDependentQueriesMap = null;
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.remainingQueries = 0;
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.releaseObject = function()
{
	this.m_systemToDependentQueriesMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_systemToDependentQueriesMap);
	this.m_queryNameToRpcFunctionMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_queryNameToRpcFunctionMap);
	this.remainingQueries = 0;
	oFF.SyncAction.prototype.releaseObject.call( this );
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.processSynchronization = function(syncType)
{
	var queryManager = this.getActionContext();
	if (queryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.RAW_QUERY)
	{
		this.addErrorWithMessage("processMetadataSerializedQuery is only supported for query managers in raw query mode.");
	}
	var iter = this.m_systemToDependentQueriesMap.getKeysAsIteratorOfString();
	while (iter.hasNext())
	{
		var systemName = iter.next();
		var isValidMetadataSerializedQuery = false;
		var dependentQueryName = null;
		var inaRequestsIter = this.m_systemToDependentQueriesMap.getByKey(systemName).getIterator();
		while (inaRequestsIter.hasNext())
		{
			var inaRequest = oFF.XContent.createStringContent(oFF.QModelFormat.INA_DATA, inaRequestsIter.next()).getJsonContent();
			var structureWalker = oFF.PrUtils.getStructureProperty(inaRequest, "Analytics");
			structureWalker = oFF.PrUtils.getStructureProperty(structureWalker, "Definition");
			dependentQueryName = oFF.PrUtils.getStringValueProperty(structureWalker, "Name", null);
			structureWalker = oFF.PrUtils.getStructureProperty(structureWalker, "ResultSetFeatureRequest");
			if (oFF.PrUtils.getBooleanValueProperty(structureWalker, "IsCubeBlendingSubquery", false) && oFF.XString.isEqual(oFF.PrUtils.getStringValueProperty(structureWalker, "ResultFormat", null), "SerializedData"))
			{
				isValidMetadataSerializedQuery = true;
			}
			if (isValidMetadataSerializedQuery && oFF.notNull(dependentQueryName))
			{
				var dependentQueryRpcFunction = this.getActionContext().createFunction();
				dependentQueryRpcFunction.getRpcRequest().setRequestStructure(inaRequest);
				this.m_queryNameToRpcFunctionMap.put(dependentQueryName, dependentQueryRpcFunction);
			}
			else
			{
				this.addErrorWithMessage("The query is not a blending subquery.");
			}
		}
	}
	var isValidSyncAction = !this.hasErrors() && this.m_queryNameToRpcFunctionMap.size() > 0;
	if (isValidSyncAction)
	{
		this.remainingQueries = this.m_queryNameToRpcFunctionMap.size();
		var queryNamesIter = this.m_queryNameToRpcFunctionMap.getKeysAsIteratorOfString();
		while (queryNamesIter.hasNext())
		{
			var queryName = queryNamesIter.next();
			this.m_queryNameToRpcFunctionMap.getByKey(queryName).processFunctionExecution(syncType, this, oFF.XStringValue.create(queryName));
		}
	}
	return isValidSyncAction;
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onRuntimeRemoteBlendingQueryUpdated(extResult, data, customIdentifier);
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.remainingQueries--;
	if (extResult.isValid() && oFF.notNull(response))
	{
		var serializedData = response.getRootElement().getStructureByKey("SerializedData");
		if (oFF.notNull(serializedData))
		{
			var view = serializedData.getStringByKey("View");
			var cube = serializedData.getStringByKey("Cube");
			var mainQuery = this.getActionContext().getQueryServiceConfig().getDefinitionAsStructure();
			if (oFF.notNull(mainQuery))
			{
				var structureWalker1 = oFF.PrUtils.getStructureProperty(mainQuery, "Analytics");
				structureWalker1 = oFF.PrUtils.getStructureProperty(structureWalker1, "DataSource");
				var sourcesList = oFF.PrUtils.getPropertyAsList(structureWalker1, "Sources");
				if (oFF.notNull(sourcesList))
				{
					oFF.XCollectionUtils.findFirst(sourcesList,  function(sourceStructure){
						var structureWalker2 = oFF.PrUtils.asStructure(sourceStructure);
						if (oFF.XString.isEqual(oFF.PrUtils.getStringValueProperty(structureWalker2, "AliasName", null), customIdentifier.getString()))
						{
							structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "DefiningContext");
							structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "Definition");
							structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "DataSource");
							structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "SerializedData");
							if (oFF.notNull(view) && oFF.PrUtils.getStringProperty(structureWalker2, "View") !== null)
							{
								structureWalker2.putString("View", view);
							}
							if (oFF.notNull(cube) && oFF.PrUtils.getStringProperty(structureWalker2, "Cube") !== null)
							{
								structureWalker2.putString("Cube", cube);
							}
							return true;
						}
						return false;
					}.bind(this));
				}
			}
			this.getActionContext().getQueryServiceConfig().setDefinitionByStructure(oFF.QModelFormat.INA_DATA, mainQuery);
		}
	}
	if (this.remainingQueries === 0)
	{
		this.setData(oFF.RuntimeRemoteBlendingQueryUpdateResult.create(!this.hasErrors()));
		this.endSync();
	}
};

oFF.QInAExportImpl = function() {};
oFF.QInAExportImpl.prototype = new oFF.QInAExport();
oFF.QInAExportImpl.prototype._ff_c = "QInAExportImpl";

oFF.QInAExportImpl.prototype.exportMemberHelpRequest = function(queryModel, dimension)
{
	return oFF.QInAValueHelp.exportMemberHelpRequest(this, queryModel, dimension);
};
oFF.QInAExportImpl.prototype.exportPlanningVariableHelpRequest = function(planningOperation, dimension, variable)
{
	return oFF.QInAValueHelp.exportPlanningVariableHelpRequest(this, planningOperation, dimension, variable);
};
oFF.QInAExportImpl.prototype.exportVariableHelpRequest = function(queryModel, dimension, variable)
{
	return oFF.QInAValueHelp.exportVariableHelpRequest(this, queryModel, dimension, variable);
};
oFF.QInAExportImpl.prototype.exportComponent = function(componentType, modelComponent, inaParentStructure, flags)
{
	var olapComponentType = componentType;
	if (oFF.isNull(olapComponentType) && oFF.notNull(modelComponent))
	{
		olapComponentType = modelComponent.getOlapComponentType();
	}
	var resultElement = null;
	if (oFF.isNull(olapComponentType))
	{
		this.addError(0, "No component type given for export");
	}
	else
	{
		var inaComponent;
		if (this.mode.isComplexModelFormat())
		{
			var originalMode = this.mode;
			var inaRoot = inaParentStructure;
			if (oFF.isNull(inaRoot))
			{
				inaRoot = oFF.PrFactory.createStructure();
			}
			for (var i = 0; i < originalMode.getSizeOfComplexModelFormat(); i++)
			{
				this.mode = originalMode.getSubModelFormat(i);
				var inAKeyForModelFormat = oFF.QModelFormat.getInAKeyForModelFormat(this.mode);
				inaComponent = this.lookupInAComponent(olapComponentType, null);
				if (oFF.notNull(inaComponent))
				{
					var inaElement = inaComponent.exportComponent(this, modelComponent, inaParentStructure, flags);
					if (oFF.notNull(inaElement))
					{
						inaRoot.put(inAKeyForModelFormat, inaElement);
					}
					this.addDataRequest(originalMode, olapComponentType, modelComponent, inaRoot);
				}
			}
			resultElement = inaRoot;
			this.mode = originalMode;
		}
		else
		{
			inaComponent = this.lookupInAComponent(olapComponentType, null);
			if (oFF.notNull(inaComponent))
			{
				resultElement = inaComponent.exportComponent(this, modelComponent, inaParentStructure, flags);
			}
		}
	}
	return resultElement;
};
oFF.QInAExportImpl.prototype.addDataRequest = function(originalMode, olapComponentType, modelComponent, inaRoot)
{
	if (olapComponentType === oFF.OlapComponentType.QUERY_MODEL && originalMode === oFF.QModelFormat.INA_CLONE_RENDERING && this.mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING)
	{
		var queryModel = modelComponent;
		var dataRequestContent = queryModel.getQueryManager().serializeToContentExt(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA, queryModel.getModelCapabilities());
		if (oFF.notNull(dataRequestContent))
		{
			var inaDataRequestElement = dataRequestContent.getJsonContent();
			inaRoot.put(oFF.InAConstantsBios.QY_DATA_REQUEST, inaDataRequestElement);
		}
	}
};
oFF.QInAExportImpl.prototype.exportQueryModel = function(queryModel, withVariables, withDataSource)
{
	var flags = oFF.QImExFlag.DEFAULT_ALL;
	if (!withDataSource)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.DATASOURCE);
	}
	if (!withVariables)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.VARIABLES);
	}
	return this.exportComponent(null, queryModel, null, flags);
};
oFF.QInAExportImpl.prototype.exportLovRequest = function(queryModel, withVariables, withDataSource, lovProcessConfig)
{
	return oFF.QInAValueHelp.exportResultSetRequest(this, lovProcessConfig, queryModel, withVariables, withDataSource);
};
oFF.QInAExportImpl.prototype.exportQuerySettings = function(queryModel, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.QUERY_SETTINGS, queryModel, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportTotals = function(rc, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.TOTALS, rc, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportAxesSettings = function(queryModel, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.AXES_SETTINGS, queryModel, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportAxis = function(axis, inaStructure)
{
	return this.exportComponent(oFF.OlapComponentType.AXIS, axis, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDataCell = function(queryDataCell, inaQueryModel)
{
	return this.exportComponent(oFF.OlapComponentType.DATA_CELL, queryDataCell, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDataCells = function(queryModel, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.DATA_CELLS, queryModel, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDrillPathElement = function(element, isDrillContext)
{
	var flags = oFF.QImExFlag.DEFAULT_ALL;
	if (isDrillContext)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.DRILL_CONTEXT);
	}
	return this.exportComponent(oFF.MemberType.DRILL_PATH_ELEMENT, element, null, flags);
};
oFF.QInAExportImpl.prototype.exportDrillOperation = function(operation)
{
	return this.exportComponent(oFF.OlapComponentType.DRILL_OPERATION, operation, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDrillManager = function(drillManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.DRILL_MANAGER, drillManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportExceptionAggregationManager = function(excepAggrManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER, excepAggrManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportStructureDimension = function(structureDimension)
{
	return this.exportComponent(null, structureDimension, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariables = function(variableContainer, parentStructure)
{
	return this.exportComponent(null, variableContainer, parentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariableContainer = function(variableContainer, parentStructure)
{
	this.exportComponent(oFF.OlapComponentType.VARIABLE_CONTAINER, variableContainer, parentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariableList = function(variableContainer)
{
	return this.exportComponent(oFF.OlapComponentType.VARIABLE_LIST, variableContainer, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDataSource = function(datasource, withRunAsUser)
{
	var flags = oFF.QImExFlag.DEFAULT_ALL;
	if (withRunAsUser)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.RUN_AS_USER);
	}
	return this.exportComponent(null, datasource, null, flags);
};
oFF.QInAExportImpl.prototype.exportCurrencyTranslationManager = function(currencyTranslationManager, inaQueryModel)
{
	if (oFF.notNull(currencyTranslationManager))
	{
		if (currencyTranslationManager.shouldExportInAStructure(this.getMode()))
		{
			this.exportComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER, currencyTranslationManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
		}
		if (currencyTranslationManager.shouldExportInAList(this.getMode()))
		{
			this.exportComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST, currencyTranslationManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
		}
	}
};
oFF.QInAExportImpl.prototype.exportCurrencyTranslationElement = function(currencyTranslation, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM, currencyTranslation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportSortingManager = function(sortingManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.SORT_MANAGER, sortingManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCondition = function(condition)
{
	return this.exportComponent(oFF.OlapComponentType.CONDITION, condition, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportMembers = function(dimension, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.MEMBERS, dimension, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
	if (this.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		var orderedStructureMemberNames = dimension.getOrderedStructureMemberNames();
		if (oFF.notNull(orderedStructureMemberNames))
		{
			var orderedNamesList = null;
			if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				for (var i = 0; i < orderedStructureMemberNames.size(); i++)
				{
					var memberName = orderedStructureMemberNames.get(i);
					var loadedStructureMember = dimension.getLoadedStructureMember(memberName);
					if (oFF.notNull(loadedStructureMember) && !loadedStructureMember.isModelDefinedMember())
					{
						if (oFF.isNull(orderedNamesList))
						{
							orderedNamesList = inaParentStructure.putNewList("OrderedStructureMemberNames");
						}
						orderedNamesList.addString(memberName);
					}
				}
			}
			else
			{
				orderedNamesList = inaParentStructure.putNewList("OrderedStructureMemberNames");
				orderedNamesList.addAllStrings(orderedStructureMemberNames);
			}
		}
		if (this.mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			var orderedStructureLayoutMemberNames = dimension.getStructureLayout().getKeysAsReadOnlyListOfString();
			if (oFF.XCollectionUtils.hasElements(orderedStructureMemberNames) && oFF.XCollectionUtils.hasElements(orderedStructureLayoutMemberNames) && !oFF.XListUtils.isListOfStringEquals(orderedStructureMemberNames, orderedStructureLayoutMemberNames))
			{
				var orderedStructureLayoutNamesList = inaParentStructure.putNewList("OrderedStructureLayoutMemberNames");
				orderedStructureLayoutNamesList.addAllStrings(orderedStructureLayoutMemberNames);
			}
		}
	}
};
oFF.QInAExportImpl.prototype.exportConditionThreshold = function(conditionThreshold)
{
	return this.exportComponent(oFF.OlapComponentType.CONDITIONS_THRESHOLD, conditionThreshold, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDimensionMemberVariable = function(dimensionMemberVariable, inaParentStructure)
{
	return this.exportComponent(oFF.VariableType.DIMENSION_MEMBER_VARIABLE, dimensionMemberVariable, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportOptionListVariable = function(variable, inaStructure)
{
	this.exportComponent(oFF.VariableType.OPTION_LIST_VARIABLE, variable, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportRestrictedMeasure = function(restrictedMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.RESTRICTED_MEASURE, restrictedMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVarianceMeasure = function(varianceMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.VARIANCE, varianceMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportExceptionAggregationMeasure = function(exceptionAggregationMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.EXCEPTION_AGGREGATION, exceptionAggregationMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCurrencyMeasure = function(currencyMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.CURRENCY_MEASURE, currencyMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportBasicMeasure = function(basicMeasure, inaMember)
{
	this.exportComponent(oFF.MemberType.BASIC_MEASURE, basicMeasure, inaMember, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFormulaMeasure = function(formulaMeasure, inaMember)
{
	this.exportComponent(oFF.MemberType.FORMULA, formulaMeasure, inaMember, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterTuple = function(filterTuple)
{
	return this.exportComponent(oFF.FilterComponentType.TUPLE, filterTuple, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterVirtualDatasource = function(filterVirtualDatasource)
{
	return this.exportComponent(oFF.FilterComponentType.VIRTUAL_DATASOURCE, filterVirtualDatasource, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterElement = function(filterElement)
{
	return this.exportComponent(oFF.OlapComponentType.FILTER_ELEMENT, filterElement, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterAlgebra = function(logicalContainer, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.BOOLEAN_ALGEBRA, logicalContainer, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportStructureMember = function(member)
{
	var result;
	if (this.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		var resultNew = this.exportComponent(null, member, null, oFF.QImExFlag.DEFAULT_ALL);
		result = resultNew;
	}
	else
	{
		result = this.exportComponent(oFF.MemberType.ABSTRACT_MEMBER, member, null, oFF.QImExFlag.DEFAULT_ALL);
	}
	return result;
};
oFF.QInAExportImpl.prototype.exportCartesianList = function(cartesianList, inaParentStructure)
{
	return this.exportComponent(oFF.FilterComponentType.CARTESIAN_LIST, cartesianList, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportConvertedTimeCartesianList = function(convertedTimeCartesianList, inaParentStructure)
{
	return this.exportComponent(oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST, convertedTimeCartesianList, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterExpression = function(filterExpression)
{
	return this.exportComponent(oFF.OlapComponentType.FILTER_EXPRESSION, filterExpression, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFixedFilter = function(filter, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.FILTER_FIXED, filter, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDynamicFilter = function(filter, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.FILTER_DYNAMIC, filter, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVisibilityFilter = function(filter, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.FILTER_VISIBILITY, filter, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilter = function(filter, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.SELECTOR, filter, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportValueHelpFilter = function(dimension, inaParentStructure)
{
	return this.exportComponent(oFF.OlapComponentType.SELECTOR, dimension, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterOperation = function(filterOperation, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.OPERATION, filterOperation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCellValueOperand = function(cellValueOperand)
{
	return this.exportComponent(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND, cellValueOperand, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterGeo = function(operation, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.SPATIAL_FILTER, operation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterCartesianProduct = function(cartesianProduct, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.CARTESIAN_PRODUCT, cartesianProduct, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportConditionManager = function(conditionManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.CONDITIONS_MANAGER, conditionManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDimension = function(dimension, inaStructure)
{
	var dimensionType = dimension.getDimensionType();
	if (dimensionType === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION || dimensionType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
	{
		return this.exportComponent(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION, dimension, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
	}
	else if (dimensionType === oFF.DimensionType.CALCULATED_DIMENSION || dimensionType === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION)
	{
		return this.exportCalculatedDimension(dimension, inaStructure);
	}
	return this.exportComponent(oFF.OlapComponentType.ABSTRACT_DIMENSION, dimension, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCalculatedDimension = function(dimension, inaStructure)
{
	return this.exportComponent(oFF.DimensionType.CALCULATED_DIMENSION, dimension, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariable = function(variable, inaStructure)
{
	return this.exportComponent(variable.getVariableType(), variable, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportHierarchy = function(dimension, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.HIERARCHY, dimension, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDimensions = function(query, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.DIMENSIONS, query, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportExceptions = function(structureMember, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.EXCEPTION_MANAGER, structureMember, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFormulaExceptionManager = function(formulaExceptionManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER, formulaExceptionManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFormulaException = function(formulaException, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.FORMULA_EXCEPTION, formulaException, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportPreQuery = function(query)
{
	return this.exportComponent(oFF.OlapComponentType.QUERY_MODEL, query, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportUniversalDisplayHierarchies = function(universalDisplayHierarchies, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES, universalDisplayHierarchies, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	return this.exportComponent(oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION, customHierarchyDefinition, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportBlendingMappings = function(mappings)
{
	return oFF.QInADataSourceBlending.exportBlendingMappings(mappings);
};
oFF.QInAExportImpl.prototype.exportQueryCells = function(cellManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.QUERY_CELLS, cellManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};

oFF.QInAImportImpl = function() {};
oFF.QInAImportImpl.prototype = new oFF.QInAImport();
oFF.QInAImportImpl.prototype._ff_c = "QInAImportImpl";

oFF.QInAImportImpl.prototype.importComponent = function(componentType, inaElement, modelComponent, parentComponent, context)
{
	if (oFF.notNull(modelComponent))
	{
		if (this.mode === oFF.QModelFormat.INA_METADATA || this.mode === oFF.QModelFormat.INA_CLONE || this.mode === oFF.QModelFormat.INA_CLONE_RENDERING || this.mode === oFF.QModelFormat.INA_METADATA_CORE || this.mode === oFF.QModelFormat.INA_METADATA_RENDERING || modelComponent.isEventingStopped())
		{
			modelComponent.stopEventing();
		}
		else
		{
			modelComponent.queueEventing();
		}
	}
	var validatingContextFreeNavigations = true;
	var deactiveContextFreeNavValidation = oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.QUERY_MODEL && this.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
	if (deactiveContextFreeNavValidation && oFF.notNull(modelComponent))
	{
		var drillManager = modelComponent.getDrillManager();
		if (oFF.notNull(inaElement) && inaElement.asStructure().containsKey("ValidateContextFreeNavigations"))
		{
			validatingContextFreeNavigations = inaElement.asStructure().getBooleanByKey("ValidateContextFreeNavigations");
		}
		else
		{
			validatingContextFreeNavigations = drillManager.isValidatingContextFreeNavigations();
		}
		drillManager.setValidateContextFreeNavigations(false);
	}
	var component = this.innerImportComponent(componentType, inaElement, modelComponent, parentComponent, context);
	if (oFF.notNull(modelComponent))
	{
		modelComponent.resumeEventing();
		if (deactiveContextFreeNavValidation)
		{
			modelComponent.getDrillManager().setValidateContextFreeNavigations(validatingContextFreeNavigations);
		}
	}
	if (componentType === oFF.OlapComponentType.QUERY_MODEL && oFF.notNull(modelComponent) && oFF.notNull(inaElement))
	{
		var queryModel = modelComponent;
		if (this.mode === oFF.QModelFormat.INA_METADATA || this.mode === oFF.QModelFormat.INA_METADATA_CORE || this.mode === oFF.QModelFormat.INA_METADATA_RENDERING)
		{
			queryModel.setServerBaseSerialization(this.mode, oFF.QModelOrigin.IMPORTER, inaElement.asStructure());
		}
	}
	return component;
};
oFF.QInAImportImpl.prototype.innerImportComponent = function(componentType, inaElement, modelComponent, parentComponent, context)
{
	var olapComponentType = componentType;
	if (oFF.isNull(olapComponentType) && oFF.notNull(modelComponent))
	{
		olapComponentType = modelComponent.getOlapComponentType();
	}
	if (oFF.isNull(olapComponentType) && oFF.notNull(inaElement) && inaElement.isStructure())
	{
		var inaStructure = inaElement;
		var cType = inaStructure.getStringByKey("CType");
		if (oFF.notNull(cType))
		{
			olapComponentType = oFF.QInAConverter.lookupComponentType(cType);
		}
	}
	if (oFF.isNull(olapComponentType))
	{
		this.addError(0, "Cannot find olap component type for import");
		return modelComponent;
	}
	var componentModel;
	var importedModelComponent = modelComponent;
	if (this.mode === oFF.QModelFormat.INA_METADATA)
	{
		this.mode = oFF.QModelFormat.INA_METADATA_CORE;
		componentModel = this.lookupInAComponent(olapComponentType, inaElement);
		if (oFF.isNull(componentModel))
		{
			return modelComponent;
		}
		importedModelComponent = componentModel.importComponent(this, inaElement, importedModelComponent, parentComponent, context);
		this.mode = oFF.QModelFormat.INA_DATA;
		componentModel = this.lookupInAComponent(olapComponentType, inaElement);
		if (oFF.isNull(componentModel))
		{
			return modelComponent;
		}
		importedModelComponent = componentModel.importComponent(this, inaElement, importedModelComponent, parentComponent, context);
		this.mode = oFF.QModelFormat.INA_METADATA;
	}
	else if (this.mode.isComplexModelFormat())
	{
		var originalMode = this.mode;
		var inaComplexElement = inaElement;
		for (var i = 0; i < originalMode.getSizeOfComplexModelFormat(); i++)
		{
			this.mode = originalMode.getSubModelFormat(i);
			var inAKeyForModelFormat = oFF.QModelFormat.getInAKeyForModelFormat(this.mode);
			var inAElement = inaComplexElement.getByKey(inAKeyForModelFormat);
			componentModel = this.lookupInAComponent(olapComponentType, inAElement);
			if (oFF.isNull(componentModel))
			{
				return modelComponent;
			}
			importedModelComponent = componentModel.importComponent(this, inAElement, importedModelComponent, parentComponent, context);
		}
		this.mode = originalMode;
	}
	else
	{
		componentModel = this.lookupInAComponent(olapComponentType, inaElement);
		if (oFF.isNull(componentModel))
		{
			return modelComponent;
		}
		importedModelComponent = componentModel.importComponent(this, inaElement, importedModelComponent, parentComponent, context);
	}
	return importedModelComponent;
};
oFF.QInAImportImpl.prototype.importQueryModel = function(inaQueryModel, queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUERY_MODEL, inaQueryModel, queryModel, null, queryModel);
};
oFF.QInAImportImpl.prototype.importQuerySettings = function(inaStructure, queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUERY_SETTINGS, inaStructure, null, null, queryModel);
};
oFF.QInAImportImpl.prototype.importDataSource = function(structure)
{
	return this.importComponent(oFF.OlapComponentType.DATA_SOURCE, structure, null, null, null);
};
oFF.QInAImportImpl.prototype.importTotals = function(inaStructure, rc, context)
{
	this.importComponent(oFF.OlapComponentType.TOTALS, inaStructure, rc, null, context);
};
oFF.QInAImportImpl.prototype.importAttribute = function(inaAttribute, dimension, context)
{
	this.importComponent(oFF.OlapComponentType.ATTRIBUTE, inaAttribute, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importAxesSettings = function(inaStructure, queryModel)
{
	this.importComponent(oFF.OlapComponentType.AXES_SETTINGS, inaStructure, queryModel, null, queryModel);
};
oFF.QInAImportImpl.prototype.importAxis = function(inaStructure, axis, context)
{
	this.importComponent(oFF.OlapComponentType.AXIS, inaStructure, axis, null, context);
};
oFF.QInAImportImpl.prototype.importExceptionAggregationManager = function(inaDefinition, excepAggrManager, context)
{
	this.importComponent(oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER, inaDefinition, excepAggrManager, null, context);
};
oFF.QInAImportImpl.prototype.importSortingManager = function(inaDefinition, qSortingManager, context)
{
	this.importComponent(oFF.OlapComponentType.SORT_MANAGER, inaDefinition, qSortingManager, null, context);
};
oFF.QInAImportImpl.prototype.importCurrencyTranslationManager = function(inaDefinition, qCurrencyTranslationManager, context)
{
	this.importComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER, inaDefinition, qCurrencyTranslationManager, null, context);
	this.importComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST, inaDefinition, qCurrencyTranslationManager, null, context);
	this.importComponent(oFF.OlapComponentType.MEASURE_TRANSLATIONS, inaDefinition, qCurrencyTranslationManager, null, context);
};
oFF.QInAImportImpl.prototype.importCurrencyTranslationElement = function(inaStructure, currencyTranslation, context)
{
	this.importComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM, inaStructure, currencyTranslation, null, context);
};
oFF.QInAImportImpl.prototype.importQueryCells = function(inaStructure, queryCellManager, context)
{
	this.importComponent(oFF.OlapComponentType.QUERY_CELLS, inaStructure, queryCellManager, null, context);
};
oFF.QInAImportImpl.prototype.importHierarchy = function(dimension, inaHierarchy)
{
	this.importComponent(oFF.OlapComponentType.HIERARCHY, inaHierarchy, dimension, null, dimension.getContext());
};
oFF.QInAImportImpl.prototype.importExceptions = function(inaStructure, member)
{
	this.importComponent(oFF.OlapComponentType.EXCEPTION_MANAGER, inaStructure, member, null, null);
};
oFF.QInAImportImpl.prototype.importFormulaExceptionManager = function(inAModel, formulaExceptionManager, context)
{
	this.importComponent(oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER, inAModel, formulaExceptionManager, null, context);
};
oFF.QInAImportImpl.prototype.importFormulaException = function(inAModel, formulaException, formulaExceptionManager, context)
{
	return this.importComponent(oFF.OlapComponentType.FORMULA_EXCEPTION, inAModel, formulaException, formulaExceptionManager, context);
};
oFF.QInAImportImpl.prototype.importUniversalDisplayHierarchies = function(inaStructure, universalDisplayHierarchies, context)
{
	this.importComponent(oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES, inaStructure, universalDisplayHierarchies, null, context);
};
oFF.QInAImportImpl.prototype.importFixedFilter = function(inaElement, filterComponent, context)
{
	this.importComponent(oFF.OlapComponentType.FILTER_FIXED, inaElement, null, filterComponent, context);
};
oFF.QInAImportImpl.prototype.importDynamicFilter = function(inaElement, filterComponent, context)
{
	this.importComponent(oFF.OlapComponentType.FILTER_DYNAMIC, inaElement, null, filterComponent, context);
};
oFF.QInAImportImpl.prototype.importVisibilityFilter = function(inaElement, filterComponent, context)
{
	this.importComponent(oFF.OlapComponentType.FILTER_VISIBILITY, inaElement, null, filterComponent, context);
};
oFF.QInAImportImpl.prototype.importFilterElement = function(inaFilterElement, filterElementExt, filterExpression, context)
{
	return this.importComponent(oFF.OlapComponentType.FILTER_ELEMENT, inaFilterElement, filterElementExt, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importFilterAlgebra = function(filterExpression, inaParentStructure, context)
{
	return this.importComponent(oFF.FilterComponentType.BOOLEAN_ALGEBRA, inaParentStructure, null, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importCartesianList = function(inaCartesianList, cartesianListExt, filterExpression, context)
{
	return this.importComponent(oFF.FilterComponentType.CARTESIAN_LIST, inaCartesianList, cartesianListExt, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importConvertedTimeCartesianList = function(inaCartesianList, cartesianListExt, filterExpression, context)
{
	return this.importComponent(oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST, inaCartesianList, cartesianListExt, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importFilterExpression = function(qDefaultExpression, inaExpression, parent, context)
{
	return this.importComponent(oFF.OlapComponentType.FILTER_EXPRESSION, inaExpression, qDefaultExpression, parent, context);
};
oFF.QInAImportImpl.prototype.importFilter = function(inaDefinition, filter, context)
{
	this.importComponent(oFF.OlapComponentType.SELECTOR, inaDefinition, filter, null, context);
};
oFF.QInAImportImpl.prototype.importFilterOperation = function(inaOperation, cartesianList, context)
{
	return this.importComponent(oFF.FilterComponentType.OPERATION, inaOperation, null, cartesianList, context);
};
oFF.QInAImportImpl.prototype.importFilterCellValueOperand = function(inaStructure, context)
{
	return this.importComponent(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND, inaStructure, null, null, context);
};
oFF.QInAImportImpl.prototype.importFilterGeo = function(filterExpression, inaGeoOperand, context)
{
	return this.importComponent(oFF.FilterComponentType.SPATIAL_FILTER, inaGeoOperand, null, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importDrillManager = function(inaQueryModel, drillManager, context)
{
	this.importComponent(oFF.OlapComponentType.DRILL_MANAGER, inaQueryModel, drillManager, null, context);
};
oFF.QInAImportImpl.prototype.importDrillPathElement = function(inaDrillMember, drillManager, context)
{
	return this.importComponent(oFF.MemberType.DRILL_PATH_ELEMENT, inaDrillMember, null, drillManager, context);
};
oFF.QInAImportImpl.prototype.importDrillOperation = function(inaHierarchyNavigation, drillManager, context)
{
	this.importComponent(oFF.OlapComponentType.DRILL_OPERATION, inaHierarchyNavigation, null, drillManager, context);
};
oFF.QInAImportImpl.prototype.importVariableManager = function(inaElement, variableContainer, context)
{
	this.importComponent(oFF.OlapComponentType.VARIABLE_MANAGER, inaElement, variableContainer, null, context);
};
oFF.QInAImportImpl.prototype.importVariables = function(variables, variableContainer)
{
	this.importComponent(oFF.OlapComponentType.VARIABLE_CONTAINER, variables, variableContainer, null, null);
};
oFF.QInAImportImpl.prototype.importVariableList = function(variables, variableContainer)
{
	this.importComponent(oFF.OlapComponentType.VARIABLE_LIST, variables, variableContainer, null, null);
};
oFF.QInAImportImpl.prototype.importSimpleTypeVariable = function(inaStructure, simpleTypeVariable, context)
{
	this.importComponent(oFF.VariableType.SIMPLE_TYPE_VARIABLE, inaStructure, simpleTypeVariable, null, context);
};
oFF.QInAImportImpl.prototype.importDimensionMemberVariable = function(inaVariable, memberVariable, variableContainer, context)
{
	return this.importComponent(oFF.VariableType.DIMENSION_MEMBER_VARIABLE, inaVariable, memberVariable, variableContainer, context);
};
oFF.QInAImportImpl.prototype.importOptionListVariable = function(inaVariable, optionListVariable, context)
{
	return this.importComponent(oFF.VariableType.OPTION_LIST_VARIABLE, inaVariable, optionListVariable, null, context);
};
oFF.QInAImportImpl.prototype.importConditionManager = function(inAModel, conditionManager, context)
{
	this.importComponent(oFF.OlapComponentType.CONDITIONS_MANAGER, inAModel, conditionManager, null, context);
};
oFF.QInAImportImpl.prototype.importCondition = function(queryModelBase, inaCondition, condition)
{
	return this.importComponent(oFF.OlapComponentType.CONDITION, inaCondition, condition, queryModelBase.getConditionManager(), queryModelBase);
};
oFF.QInAImportImpl.prototype.importConditionThreshold = function(queryModel, inaSingleThreshold, conditionThreshold, parentComponent)
{
	return this.importComponent(oFF.OlapComponentType.CONDITIONS_THRESHOLD, inaSingleThreshold, conditionThreshold, parentComponent, queryModel);
};
oFF.QInAImportImpl.prototype.importDataCell = function(inaQDataCell, queryModel)
{
	this.importComponent(oFF.OlapComponentType.DATA_CELL, inaQDataCell, null, null, queryModel);
};
oFF.QInAImportImpl.prototype.importDataCells = function(inaQueryModel, queryModel)
{
	this.importComponent(oFF.OlapComponentType.DATA_CELLS, inaQueryModel, null, null, queryModel);
};
oFF.QInAImportImpl.prototype.importMembers = function(inaDimension, dimension, context)
{
	this.importComponent(oFF.OlapComponentType.MEMBERS, inaDimension, dimension, null, context);
	var orderedStructureMemberNames = null;
	if (this.mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		var orderedNamesList = oFF.PrUtils.getListProperty(inaDimension, "OrderedStructureMemberNames");
		if (oFF.notNull(orderedNamesList))
		{
			orderedStructureMemberNames = this.getOrderedList(orderedNamesList);
			dimension.reOrderStructureMembers(orderedStructureMemberNames);
		}
	}
	if (this.mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		var orderedStructureLayoutNamesList = oFF.PrUtils.getListProperty(inaDimension, "OrderedStructureLayoutMemberNames");
		if (oFF.notNull(orderedStructureLayoutNamesList))
		{
			orderedStructureMemberNames = this.getOrderedList(orderedStructureLayoutNamesList);
		}
		oFF.XListUtils.reorderList(dimension.getStructureLayout(), orderedStructureMemberNames);
	}
};
oFF.QInAImportImpl.prototype.getOrderedList = function(orderedNamesList)
{
	var orderedStructureMemberNames;
	orderedStructureMemberNames = oFF.XListOfString.create();
	var len = oFF.PrUtils.getListSize(orderedNamesList, 0);
	for (var orderedNameIndex = 0; orderedNameIndex < len; orderedNameIndex++)
	{
		var orderedNameString = oFF.PrUtils.getStringElement(orderedNamesList, orderedNameIndex);
		oFF.XObjectExt.assertNotNullExt(orderedNameString, "illegal state");
		orderedStructureMemberNames.add(orderedNameString.getString());
	}
	return orderedStructureMemberNames;
};
oFF.QInAImportImpl.prototype.importRestrictedMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.RESTRICTED_MEASURE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importVarianceMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.VARIANCE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importExceptionAggregationMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.EXCEPTION_AGGREGATION, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importCurrencyMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.CURRENCY_MEASURE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importBasicMeasure = function(inaMember, qStructure, context)
{
	return this.importComponent(oFF.MemberType.BASIC_MEASURE, inaMember, null, qStructure, context);
};
oFF.QInAImportImpl.prototype.importFormulaMeasure = function(inaMember, dimension, queryModel)
{
	return this.importComponent(oFF.MemberType.FORMULA, inaMember, null, dimension, queryModel);
};
oFF.QInAImportImpl.prototype.importStructureMember = function(dimension, inaMember, context)
{
	return this.importComponent(oFF.MemberType.ABSTRACT_MEMBER, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importDimensions = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.DIMENSIONS, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importDimension = function(inaDimension, context)
{
	return this.importComponent(oFF.OlapComponentType.ABSTRACT_DIMENSION, inaDimension, null, null, context);
};
oFF.QInAImportImpl.prototype.importCalculatedDimension = function(inaDimension, context)
{
	return this.importComponent(oFF.DimensionType.CALCULATED_DIMENSION, inaDimension, null, null, context);
};
oFF.QInAImportImpl.prototype.importFormulaCalculatedDimension = function(inaDimension, context, modelComponent)
{
	return this.importComponent(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION, inaDimension, modelComponent, null, context);
};
oFF.QInAImportImpl.prototype.importModellerDimensions = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_DIMENSIONS, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importModellerCurrencyTranslation = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_CURRENCY_TRANSLATION, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importModellerMetadataProperties = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_METADATA_PROPERTIES, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importModellerDefinedVariables = function(inaElement, variableContainer, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_VARIABLES, inaElement, variableContainer, null, context);
};
oFF.QInAImportImpl.prototype.importVariable = function(inaStructure, variableContext)
{
	return this.importComponent(oFF.VariableType.ANY_VARIABLE, inaStructure, null, variableContext, variableContext);
};
oFF.QInAImportImpl.prototype.importBasicQueryModelCapabilities = function(queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUERY_MODEL, null, queryModel, null, queryModel);
};
oFF.QInAImportImpl.prototype.importPreQuery = function(inaPreQuery, preQuery)
{
	this.importQueryModel(inaPreQuery, preQuery);
};
oFF.QInAImportImpl.prototype.importDataSourceExternalDimensions = function(inaDataSource, dataSource)
{
	oFF.QInADataSourceExtDims.importQd(this, dataSource, inaDataSource);
};
oFF.QInAImportImpl.prototype.importCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	return this.importComponent(oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION, customHierarchyDefinition, null, null, null);
};
oFF.QInAImportImpl.prototype.processImport = function(syncType, listener, customIdentifier, componentType, inaElement, modelComponent, parentComponent, context)
{
	var action = oFF.QInAImportAction.create(this, componentType, inaElement, modelComponent, parentComponent, context);
	action.processSyncAction(syncType, listener, customIdentifier);
	return action;
};

oFF.FunctionalValueHelpParameterValues = function() {};
oFF.FunctionalValueHelpParameterValues.prototype = new oFF.DfFunctionalValueHelpSyncAction();
oFF.FunctionalValueHelpParameterValues.prototype._ff_c = "FunctionalValueHelpParameterValues";

oFF.FunctionalValueHelpParameterValues.create = function(parameter)
{
	var valueHelpParameterValues = new oFF.FunctionalValueHelpParameterValues();
	valueHelpParameterValues.setupFunctionalValueHelp(parameter.getFunction().getDimension());
	valueHelpParameterValues.m_parameter = parameter;
	return valueHelpParameterValues;
};
oFF.FunctionalValueHelpParameterValues.prototype.m_parameter = null;
oFF.FunctionalValueHelpParameterValues.prototype.releaseObject = function()
{
	oFF.DfFunctionalValueHelpSyncAction.prototype.releaseObject.call( this );
	this.m_parameter = null;
};
oFF.FunctionalValueHelpParameterValues.prototype.getPath = function(connectionContainer)
{
	var path = oFF.DfFunctionalValueHelpSyncAction.prototype.getPath.call( this , connectionContainer);
	path.append("/").append(this.m_parameter.getFunction().getName());
	path.append("/parameter");
	path.append("/").append(this.m_parameter.getName());
	return path;
};
oFF.FunctionalValueHelpParameterValues.prototype.createDataFromResponse = function(element)
{
	var list = oFF.PrUtils.asList(element);
	if (oFF.PrUtils.isListEmpty(list))
	{
		this.addErrorWithMessage("No parameter values available");
		return null;
	}
	var result = oFF.XList.create();
	for (var i = 0; i < list.size(); i++)
	{
		var value = oFF.PrUtils.getStructureElement(list, i);
		var name = oFF.PrUtils.getStringValueProperty(value, "name", null);
		var description = oFF.PrUtils.getStringValueProperty(value, "description", null);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(name))
		{
			result.add(oFF.QFValueHelpParameterValue.createParameterValue(name, description, this.m_parameter));
		}
	}
	return result;
};
oFF.FunctionalValueHelpParameterValues.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onParameterValuesLoaded(extResult, data, customIdentifier);
};

oFF.FunctionalValueHelpParameters = function() {};
oFF.FunctionalValueHelpParameters.prototype = new oFF.DfFunctionalValueHelpSyncAction();
oFF.FunctionalValueHelpParameters.prototype._ff_c = "FunctionalValueHelpParameters";

oFF.FunctionalValueHelpParameters.create = function(selectFunction)
{
	var valueHelpParameters = new oFF.FunctionalValueHelpParameters();
	valueHelpParameters.setupFunctionalValueHelp(selectFunction.getDimension());
	valueHelpParameters.m_selectFunction = selectFunction;
	return valueHelpParameters;
};
oFF.FunctionalValueHelpParameters.prototype.m_selectFunction = null;
oFF.FunctionalValueHelpParameters.prototype.releaseObject = function()
{
	oFF.DfFunctionalValueHelpSyncAction.prototype.releaseObject.call( this );
	this.m_selectFunction = null;
};
oFF.FunctionalValueHelpParameters.prototype.getPath = function(connectionContainer)
{
	var path = oFF.DfFunctionalValueHelpSyncAction.prototype.getPath.call( this , connectionContainer);
	path.append("/").append(this.m_selectFunction.getName());
	path.append("/parameter");
	return path;
};
oFF.FunctionalValueHelpParameters.prototype.createDataFromResponse = function(element)
{
	var result = oFF.XList.create();
	var list = oFF.PrUtils.asList(element);
	if (!oFF.PrUtils.isListEmpty(list))
	{
		for (var i = 0; i < list.size(); i++)
		{
			var parameter = oFF.PrUtils.getStructureElement(list, i);
			var name = oFF.PrUtils.getStringValueProperty(parameter, "parameterName", null);
			var description = oFF.PrUtils.getStringValueProperty(parameter, "description", null);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(name))
			{
				result.add(oFF.QFValueHelpParameter.createParameter(name, description, this.m_selectFunction));
			}
		}
	}
	return result;
};
oFF.FunctionalValueHelpParameters.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onParametersLoaded(extResult, data, customIdentifier);
};

oFF.FunctionalValueHelpResolveValues = function() {};
oFF.FunctionalValueHelpResolveValues.prototype = new oFF.DfFunctionalValueHelpSyncAction();
oFF.FunctionalValueHelpResolveValues.prototype._ff_c = "FunctionalValueHelpResolveValues";

oFF.FunctionalValueHelpResolveValues.create = function(selectFunction, parameterValues)
{
	var resolveValues = new oFF.FunctionalValueHelpResolveValues();
	resolveValues.setupFunctionalValueHelp(selectFunction.getDimension());
	resolveValues.m_selectFunction = selectFunction;
	resolveValues.m_parameterValues = parameterValues;
	return resolveValues;
};
oFF.FunctionalValueHelpResolveValues.prototype.m_selectFunction = null;
oFF.FunctionalValueHelpResolveValues.prototype.m_parameterValues = null;
oFF.FunctionalValueHelpResolveValues.prototype.releaseObject = function()
{
	oFF.DfFunctionalValueHelpSyncAction.prototype.releaseObject.call( this );
	this.m_selectFunction = null;
	this.m_parameterValues = null;
};
oFF.FunctionalValueHelpResolveValues.prototype.getPath = function(connectionContainer)
{
	var path = oFF.DfFunctionalValueHelpSyncAction.prototype.getPath.call( this , connectionContainer);
	path.append("/").append(this.m_selectFunction.getName());
	path.append("/value");
	return path;
};
oFF.FunctionalValueHelpResolveValues.prototype.getUriParameters = function()
{
	var uriParameters = oFF.XList.create();
	for (var i = 0; i < this.m_parameterValues.size(); i++)
	{
		var parameterValue = this.m_parameterValues.get(i);
		uriParameters.add(oFF.XNameValuePair.create(parameterValue.getParameter().getName(), parameterValue.getName()));
	}
	return uriParameters;
};
oFF.FunctionalValueHelpResolveValues.prototype.createDataFromResponse = function(element)
{
	oFF.InAHelper.importMessages(element, this);
	var ranges = oFF.PrUtils.getListProperty(oFF.PrUtils.asStructure(element), "range");
	var result = oFF.XList.create();
	if (!oFF.PrUtils.isListEmpty(ranges))
	{
		for (var i = 0; i < ranges.size(); i++)
		{
			var range = ranges.getStructureAt(i);
			result.add(oFF.QFValueHelpResolvedValue.create(range.getStringByKey("low"), range.getStringByKey("high")));
		}
	}
	return result;
};
oFF.FunctionalValueHelpResolveValues.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onFunctionalValueResolved(extResult, data, customIdentifier);
};

oFF.FunctionalValueHelpSelectFunctions = function() {};
oFF.FunctionalValueHelpSelectFunctions.prototype = new oFF.DfFunctionalValueHelpSyncAction();
oFF.FunctionalValueHelpSelectFunctions.prototype._ff_c = "FunctionalValueHelpSelectFunctions";

oFF.FunctionalValueHelpSelectFunctions.create = function(dimension)
{
	var valueHelpSelects = new oFF.FunctionalValueHelpSelectFunctions();
	valueHelpSelects.setupFunctionalValueHelp(dimension);
	return valueHelpSelects;
};
oFF.FunctionalValueHelpSelectFunctions.prototype.createDataFromResponse = function(element)
{
	var dimension = this.getActionContext();
	var result = oFF.XList.create();
	var list = oFF.PrUtils.asList(element);
	var listSize = oFF.PrUtils.getListSize(list, 0);
	for (var i = 0; i < listSize; i++)
	{
		var selectFct = oFF.PrUtils.getStructureElement(list, i);
		var name = oFF.PrUtils.getStringValueProperty(selectFct, "functionName", null);
		var description = oFF.PrUtils.getStringValueProperty(selectFct, "description", null);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(name))
		{
			result.add(oFF.QFValueHelpSelectFunction.createSelect(name, description, dimension));
		}
	}
	return result;
};
oFF.FunctionalValueHelpSelectFunctions.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onFunctionsLoaded(extResult, data, customIdentifier);
};

oFF.InAFusionDataSourceAction = function() {};
oFF.InAFusionDataSourceAction.prototype = new oFF.InAFusionLayer();
oFF.InAFusionDataSourceAction.prototype._ff_c = "InAFusionDataSourceAction";

oFF.InAFusionDataSourceAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource, content)
{
	var object = new oFF.InAFusionDataSourceAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	if (oFF.notNull(content))
	{
		object.setContent(content);
	}
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionDataSourceAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.DATASOURCE_ACTION;
};
oFF.InAFusionDataSourceAction.prototype.processSynchronization = function(syncType)
{
	var dataSource = this.getDataSource();
	var dataSourceType = dataSource.getType();
	if (dataSourceType === oFF.MetaObjectType.URL)
	{
		this.setNextActionType(oFF.InAFusionLayer.URL_ACTION);
	}
	else if (dataSourceType === oFF.MetaObjectType.SFX)
	{
		this.setNextActionType(oFF.InAFusionLayer.MODEL_ACTION);
	}
	else
	{
		if (oFF.isNull(dataSourceType))
		{
			var config = this.getConfig();
			var mode = config.getMode();
			if (mode === oFF.QueryManagerMode.BLENDING)
			{
				var targetDataSource = oFF.QDataSource.create();
				targetDataSource.copyFrom(dataSource, null);
				targetDataSource.setType(oFF.MetaObjectType.BLENDING);
				var blendingDefinition = targetDataSource.getBlendingDefinition();
				if (oFF.isNull(blendingDefinition))
				{
					blendingDefinition = config.getBlendingDefinition();
					targetDataSource.setBlendingDefinition(blendingDefinition);
				}
				if (oFF.notNull(blendingDefinition) && oFF.XStringUtils.isNullOrEmpty(targetDataSource.getObjectName()))
				{
					var objectName = oFF.XStringBuffer.create();
					for (var idx = 0; idx < blendingDefinition.getSources().size(); idx++)
					{
						objectName.append(blendingDefinition.getSources().get(idx).getQueryAliasName());
					}
					var objectNameStr = objectName.toString();
					if (objectName.length() >= 256)
					{
						objectNameStr = oFF.XSha1.createSHA1(objectNameStr);
					}
					targetDataSource.setObjectName(objectNameStr);
				}
				dataSource = targetDataSource;
			}
		}
		this.setNextActionType(oFF.InAFusionLayer.METADATA_ACTION);
	}
	this.setNextDataSource(dataSource);
	return false;
};

oFF.InAFusionLayerRpc = function() {};
oFF.InAFusionLayerRpc.prototype = new oFF.InAFusionLayer();
oFF.InAFusionLayerRpc.prototype._ff_c = "InAFusionLayerRpc";

oFF.InAFusionLayerRpc.prototype.processSynchronization = function(syncType)
{
	var systemDescription = this.getSystemDescription();
	if (oFF.notNull(systemDescription))
	{
		this.processServerMetadataFetch(systemDescription);
	}
	else
	{
		this.processMainContentFetch();
	}
	return true;
};
oFF.InAFusionLayerRpc.prototype.processServerMetadataFetch = function(systemDescription)
{
	var connection = this.getActionContext().getConnectionExt(systemDescription.getSystemName(), this.hasPrivateConnection(), this.getConnectionName());
	this.setConnection(connection);
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.SERVER_METADATA_VIA_SYSTEM_CONNECT))
	{
		connection.getSystemConnect().getServerMetadataExt(this.getActiveSyncType(), this, null);
	}
	else
	{
		connection.getServerMetadataExt(this.getActiveSyncType(), this, null, false);
	}
};
oFF.InAFusionLayerRpc.prototype.onServerMetadataLoaded = function(extResult, serverMetadata, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		this.setServerMetadata(serverMetadata);
		this.processMainContentFetch();
	}
	else
	{
		this.endSync();
	}
};
oFF.InAFusionLayerRpc.prototype.processMainContentFetch = function()
{
	this.prepare();
	var rpcFunction = this.createSpecificFunction();
	var request = rpcFunction.getRpcRequest();
	var requestStructure = this.constructPayload();
	request.setRequestStructure(requestStructure);
	rpcFunction.processFunctionExecution(this.getActiveSyncType(), this, null);
};
oFF.InAFusionLayerRpc.prototype.prepare = function() {};
oFF.InAFusionLayerRpc.prototype.createFunction = function(path)
{
	var connection = this.getConnection();
	if (oFF.isNull(connection))
	{
		var connectionPool = this.getApplication().getConnectionPool();
		connection = connectionPool.getOpenConnection(this.getSystemName());
	}
	var rpcFunction = connection.newRpcFunction(path);
	var request = rpcFunction.getRpcRequest();
	request.setMethod(oFF.HttpRequestMethod.HTTP_POST);
	return rpcFunction;
};

oFF.InAFusionRepoAction = function() {};
oFF.InAFusionRepoAction.prototype = new oFF.InAFusionLayer();
oFF.InAFusionRepoAction.prototype._ff_c = "InAFusionRepoAction";

oFF.InAFusionRepoAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource, content)
{
	var object = new oFF.InAFusionRepoAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	if (oFF.notNull(content))
	{
		object.setContent(content);
	}
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionRepoAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.REPO_ACTION;
};
oFF.InAFusionRepoAction.prototype.processSynchronization = function(syncType)
{
	var content = this.getContent();
	if (oFF.notNull(content))
	{
		var contentType = content.getContentType();
		if (contentType.isTypeOf(oFF.QModelFormat.INA_CLONE))
		{
			var cloneDoc = content.getJsonContent();
			var metadataDoc = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA_CORE, cloneDoc.getStructureByKey("Metadata"));
			var repoDoc = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_REPOSITORY, cloneDoc.getStructureByKey("Runtime"));
			this.setContent(repoDoc);
			this.setNextDocument(metadataDoc);
			this.setNextActionType(oFF.InAFusionLayer.METADATA_ACTION);
		}
		else if (contentType.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			var inaRepoStructure = content.getJsonContent().asStructure();
			var ctype = inaRepoStructure.getStringByKey("CType");
			var importer = oFF.QInAImportFactory.createForRepository(this.getApplication(), null);
			if (oFF.XString.isEqual("QueryManager", ctype))
			{
				var inaServiceConfig = inaRepoStructure.getStructureByKey("QueryServiceConfig");
				var newServiceConfig = importer.importComponent(oFF.OlapComponentType.QUERY_SERVICE_CONFIG, inaServiceConfig, null, null, null);
				newServiceConfig.getSystemName();
			}
			else
			{
				var dataSource = importer.importDataSource(inaRepoStructure);
				this.addAllMessages(importer);
				this.setNextDataSource(dataSource);
				this.setNextActionType(oFF.InAFusionLayer.METADATA_ACTION);
			}
		}
	}
	return false;
};

oFF.InAFusionUrlAction = function() {};
oFF.InAFusionUrlAction.prototype = new oFF.InAFusionLayer();
oFF.InAFusionUrlAction.prototype._ff_c = "InAFusionUrlAction";

oFF.InAFusionUrlAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource)
{
	var object = new oFF.InAFusionUrlAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionUrlAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.URL_ACTION;
};
oFF.InAFusionUrlAction.prototype.processSynchronization = function(syncType)
{
	var objectName = this.getDataSource().getObjectName();
	var session = this.getSession();
	var uri = oFF.XUri.createFromFileSystemPath(session, objectName, oFF.PathFormat.AUTO_DETECT, oFF.VarResolveMode.PERCENT);
	var client = oFF.HttpClientFactory.newInstanceByConnection(session, uri);
	client.getRequest().setFromUri(uri);
	client.processHttpRequest(this.getActiveSyncType(), this, oFF.XIntegerValue.create(0));
	return true;
};
oFF.InAFusionUrlAction.prototype.onHttpResponse = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		var contentType = response.getContentType();
		if (contentType === oFF.QModelFormat.SFX || contentType === oFF.QModelFormat.UQM)
		{
			this.setContentExt(response, contentType);
		}
		else
		{
			this.setContent(response);
		}
		var content = this.getContent();
		if (content.getContentType() === oFF.QModelFormat.INA_REPOSITORY)
		{
			this.setNextActionType(oFF.InAFusionLayer.REPO_ACTION);
			this.setNextDocument(content);
		}
	}
	this.endSync();
};

oFF.InAPlanningValueHelpProvider = function() {};
oFF.InAPlanningValueHelpProvider.prototype = new oFF.InAValueHelpProvider();
oFF.InAPlanningValueHelpProvider.prototype._ff_c = "InAPlanningValueHelpProvider";

oFF.InAPlanningValueHelpProvider.create = function(planningCommand)
{
	var instance = new oFF.InAPlanningValueHelpProvider();
	instance.setupExt(planningCommand);
	return instance;
};
oFF.InAPlanningValueHelpProvider.prototype.m_queryManager = null;
oFF.InAPlanningValueHelpProvider.prototype._valHelpError = function(errorMessage, listener, customIdentifier)
{
	var extResult = oFF.ExtResult.createWithErrorMessage(errorMessage);
	if (oFF.notNull(listener))
	{
		listener.onValuehelpExecuted(extResult, null, customIdentifier);
	}
	return extResult;
};
oFF.InAPlanningValueHelpProvider.prototype._valHelpResultSetError = function(errorMessage, listener, customIdentifier)
{
	var extResult = oFF.ExtResult.createWithErrorMessage(errorMessage);
	if (oFF.notNull(listener))
	{
		listener.onValuehelpExecuted(extResult, null, customIdentifier);
	}
	return extResult;
};
oFF.InAPlanningValueHelpProvider.prototype.processValueHelp = function(dimension, syncType, listener, customIdentifier)
{
	return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
};
oFF.InAPlanningValueHelpProvider.prototype.processValueHelpResultSet = function(dimension, syncType, listener, customIdentifier)
{
	return this._valHelpResultSetError("Valuehelp is not supported in this context", listener, customIdentifier);
};
oFF.InAPlanningValueHelpProvider.prototype.processVarHelp = function(dimension, variable, syncType, listener, customIdentifier)
{
	this.lazyLoadValueHelpObjects();
	this.applyContext(dimension);
	var request = this.getExport().exportPlanningVariableHelpRequest(this.getPlanningCommand(), dimension, variable);
	this.checkVariableType(variable);
	var key = this.getNextValueHelpIdentifier();
	this.putValueHelpCallback(key, listener);
	this.putValueHelpIdentifier(key, customIdentifier);
	this.putValueHelpResult(key, null);
	this.putValueHelpResultNode(key, null);
	var rowsAxis = null;
	var columnsAxis = null;
	var isIgnoreAutoVariableSubmit = true;
	var rsDefQueryModel = oFF.RsDefQueryModel.create(null, rowsAxis, columnsAxis, dimension, isIgnoreAutoVariableSubmit);
	var resultSetManager = oFF.ResultSetContainer.createWithRequest(this.getQueryManager(), this, request, rsDefQueryModel);
	resultSetManager.setOffsetRows(dimension.getSelectorPagingStart());
	resultSetManager.setMaxRows(dimension.getSelectorPagingEnd() - dimension.getSelectorPagingStart());
	if (oFF.ValueHelpProcessingSequence.customHierarchySubmitRequiredForValueHelp(dimension))
	{
		var sequence = oFF.ValueHelpProcessingSequence.createSequence(this.getQueryManager(), dimension, resultSetManager, this.getExport(), true, false);
		sequence.processSyncAction(syncType, this, this.getValueHelpIdentifier());
	}
	else
	{
		resultSetManager.processExecution(syncType, this, this.getValueHelpIdentifier());
	}
	return !this.isReleased() ? this.getValueHelpResultSetNode(key) : null;
};
oFF.InAPlanningValueHelpProvider.prototype.getPlanningCommand = function()
{
	return this.getContext();
};
oFF.InAPlanningValueHelpProvider.prototype.getQueryManager = function()
{
	if (oFF.isNull(this.m_queryManager))
	{
		var planningCommand = this.getPlanningCommand();
		var queryServiceConfig = oFF.QueryServiceConfig.create(this.getApplication());
		queryServiceConfig.setSystemName(planningCommand.getSystemName());
		var planning = oFF.PrFactory.createStructure();
		var command = planning.putNewStructure("Command");
		var dataSource = command.putNewStructure("DataSource");
		var dataAreaName = planningCommand.getDataArea().getDataArea();
		if (oFF.isNull(dataAreaName))
		{
			dataAreaName = "DEFAULT";
		}
		dataSource.putString("DataArea", dataAreaName);
		var metadata = planningCommand.getPlanningOperationMetadata();
		var identifier = metadata.getPlanningOperationIdentifier();
		dataSource.putString("ObjectName", identifier.getPlanningOperationName());
		dataSource.putString("Type", identifier.getPlanningOperationType().getCamelCaseName());
		dataSource.putString("InstanceId", metadata.getInstanceId());
		command.put("Dimensions", metadata.getDimensions());
		command.put("Variables", metadata.getVariables());
		queryServiceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_METADATA, planning);
		queryServiceConfig.setMode(oFF.QueryManagerMode.RAW_QUERY);
		var result = queryServiceConfig.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
		oFF.MessageUtil.checkNoError(result);
		var queryModel = result.getData().getQueryModel();
		queryModel.deserializeFromElementExt(oFF.QModelFormat.INA_METADATA, command);
		result.getData().setValueHelpProvider(this);
		this.m_queryManager = result.getData();
	}
	return this.m_queryManager;
};
oFF.InAPlanningValueHelpProvider.prototype.applyContext = function(dimension)
{
	if (dimension.getQueryModel() !== null)
	{
		var planningDimension = this.getPlanningCommand().getDimensionAccessor().getDimensionByName(dimension.getName());
		var selectorHierarchyNode = dimension.getSelectorHierarchyNode();
		if (oFF.notNull(selectorHierarchyNode))
		{
			planningDimension.setSelectorHierarchyNode(selectorHierarchyNode);
		}
		var originQFilterExpression = dimension.getQueryModel().getFilter().getValuehelpFilter();
		var targetQFilterExpression = this.getPlanningCommand().getSelector().getValuehelpFilter();
		targetQFilterExpression.copyFrom(originQFilterExpression, null);
	}
};

oFF.InAQueryValueHelpProvider = function() {};
oFF.InAQueryValueHelpProvider.prototype = new oFF.InAValueHelpProvider();
oFF.InAQueryValueHelpProvider.prototype._ff_c = "InAQueryValueHelpProvider";

oFF.InAQueryValueHelpProvider.create = function(queryManagerProviderBase)
{
	var instance = new oFF.InAQueryValueHelpProvider();
	instance.setupExt(queryManagerProviderBase);
	return instance;
};
oFF.InAQueryValueHelpProvider.prototype.processValueHelp = function(dimension, syncType, listener, customIdentifier)
{
	var formulaCalcDim = null;
	if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
	{
		formulaCalcDim = dimension;
	}
	if (oFF.notNull(formulaCalcDim))
	{
		formulaCalcDim.generateTransientObjects(this, this.getQueryManager());
	}
	this.lazyLoadValueHelpObjects();
	var key = this.internalProcessValueHelp(dimension, syncType, listener, customIdentifier, this.getValueHelpRequest(dimension), true, this.getQueryManagerBase().variablesRequireImplicitSubmit());
	if (oFF.notNull(formulaCalcDim))
	{
		formulaCalcDim.destroyTransientObjects(this);
	}
	return !this.isReleased() ? this.getValueHelpResultSetNode(key) : null;
};
oFF.InAQueryValueHelpProvider.prototype.processValueHelpResultSet = function(dimension, syncType, listener, customIdentifier)
{
	this.lazyLoadValueHelpObjects();
	var key = this.internalProcessValueHelp(dimension, syncType, listener, customIdentifier, this.getValueHelpRequest(dimension), false, this.getQueryManagerBase().variablesRequireImplicitSubmit());
	return !this.isReleased() ? this.getValueHelpResult(key) : null;
};
oFF.InAQueryValueHelpProvider.prototype.processVarHelp = function(dimension, variable, syncType, listener, customIdentifier)
{
	this.lazyLoadValueHelpObjects();
	var request = this.getExport().exportVariableHelpRequest(this.getQueryModel(), dimension, variable);
	this.checkVariableType(variable);
	var key = this.internalProcessValueHelp(dimension, syncType, listener, customIdentifier, request, true, false);
	return !this.isReleased() ? this.getValueHelpResultSetNode(key) : null;
};
oFF.InAQueryValueHelpProvider.prototype.internalProcessValueHelp = function(dimension, syncType, listener, customIdentifier, request, transformResult, variableRequireImplicitSubmit)
{
	if (oFF.notNull(request))
	{
		this.setMiscRequest(request, this.getQueryManager());
	}
	var key = this.getNextValueHelpIdentifier();
	this.putValueHelpCallback(key, listener);
	this.putValueHelpIdentifier(key, customIdentifier);
	this.putValueHelpResult(key, null);
	if (transformResult)
	{
		this.putValueHelpResultNode(key, null);
	}
	var rowsAxis = null;
	var columnsAxis = null;
	var initSettings = this.getQueryManager().getInitSettings();
	var isExecuteAutoVariableSubmit = initSettings.isExecuteAutoVariableSubmit();
	var isMeasureValueHelp = this.requiresMeasureValueHelp(dimension) && oFF.isNull(request);
	if (isMeasureValueHelp)
	{
		initSettings.setIsExecuteAutoVariableSubmit(false);
	}
	var queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		rowsAxis = queryModel.getRowsAxis();
		columnsAxis = queryModel.getColumnsAxis();
	}
	var rsDefQueryModel = oFF.RsDefQueryModel.create(this.getQueryManager(), rowsAxis, columnsAxis, dimension, isExecuteAutoVariableSubmit);
	var resultSetManager = oFF.ResultSetContainer.createWithRequest(this.getQueryManager(), this, request, rsDefQueryModel);
	resultSetManager.setOffsetRows(dimension.getSelectorPagingStart());
	resultSetManager.setMaxRows(dimension.getSelectorPagingEnd() - dimension.getSelectorPagingStart());
	var requiresHierarchySubmit = oFF.ValueHelpProcessingSequence.customHierarchySubmitRequiredForValueHelp(dimension);
	if (variableRequireImplicitSubmit || requiresHierarchySubmit)
	{
		var sequence = oFF.ValueHelpProcessingSequence.createSequence(this.getQueryManager(), dimension, resultSetManager, this.getExport(), requiresHierarchySubmit, variableRequireImplicitSubmit);
		sequence.processSyncAction(syncType, this, this.getValueHelpIdentifier());
	}
	else
	{
		resultSetManager.processExecution(syncType, this, this.getValueHelpIdentifier());
	}
	if (isMeasureValueHelp)
	{
		initSettings.setIsExecuteAutoVariableSubmit(isExecuteAutoVariableSubmit);
	}
	return key;
};
oFF.InAQueryValueHelpProvider.prototype.setMiscRequest = function(request, provider)
{
	oFF.QInAOptions.setRequestTimeZone(request, provider);
	var inaAnalytics = request.getStructureByKey("Analytics");
	if (oFF.isNull(inaAnalytics))
	{
		inaAnalytics = request.getStructureByKey("Planning");
	}
	oFF.QInAOptions.setLanguage(inaAnalytics, provider);
	oFF.QInAOptions.fillOptions(request, provider.getCapabilitiesBase(), provider.getSession(), provider.getQueryServiceConfig());
	provider.getInaCapabilities().exportActiveCapabilities(inaAnalytics);
	var inaDefinition = inaAnalytics.getStructureByKey("Definition");
	oFF.QInAOptions.exportOptimizerHints(inaDefinition, provider.getQueryModel());
	oFF.QInAOptions.exportReturnedDataSelections(inaDefinition.getStructureByKey("ResultSetFeatureRequest"), provider);
};
oFF.InAQueryValueHelpProvider.prototype.getValueHelpRequest = function(dimension)
{
	return !this.requiresMeasureValueHelp(dimension) ? this.getExport().exportMemberHelpRequest(this.getQueryModel(), dimension) : null;
};

oFF.InAFusionMetadataAction = function() {};
oFF.InAFusionMetadataAction.prototype = new oFF.InAFusionLayerRpc();
oFF.InAFusionMetadataAction.prototype._ff_c = "InAFusionMetadataAction";

oFF.InAFusionMetadataAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource, content)
{
	var object = new oFF.InAFusionMetadataAction();
	object.setConfig(queryServiceConfig);
	if (oFF.notNull(dataSource))
	{
		var dataSourceClone = dataSource.clone();
		dataSourceClone.setInstanceId(queryServiceConfig.getInstanceId());
		object.setDataSource(dataSourceClone);
	}
	if (oFF.notNull(content))
	{
		object.setContent(content);
	}
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionMetadataAction.prototype.m_inaCapabilities = null;
oFF.InAFusionMetadataAction.prototype.m_queryManagerCapabilities = null;
oFF.InAFusionMetadataAction.prototype.m_exporter = null;
oFF.InAFusionMetadataAction.prototype.m_importer = null;
oFF.InAFusionMetadataAction.prototype.m_cacheKey = null;
oFF.InAFusionMetadataAction.prototype.m_masterCacheAction = null;
oFF.InAFusionMetadataAction.prototype.m_isCacheCall = false;
oFF.InAFusionMetadataAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.METADATA_ACTION;
};
oFF.InAFusionMetadataAction.prototype.processMainContentFetch = function()
{
	this.prepareInACapabilities();
	var capabilities = this.prepareQueryManagerCapabilities();
	var exporter = oFF.QInAExportFactory.createForData(this.getApplication(), capabilities);
	var importer = oFF.QInAImportFactory.createForData(this.getApplication(), capabilities);
	this.setExporter(exporter);
	this.setImporter(importer);
	var content = this.getContent();
	if (oFF.notNull(content))
	{
		this.generateNextDataSource(content);
		this.endSync();
	}
	else
	{
		this.m_masterCacheAction = this.getMasterCacheAction();
		if (oFF.notNull(this.m_masterCacheAction) && this.m_masterCacheAction.getSyncState() !== oFF.SyncState.IN_SYNC_WITH_ERROR)
		{
			var syncState = this.m_masterCacheAction.getSyncState();
			if (syncState === oFF.SyncState.PROCESSING)
			{
				this.m_masterCacheAction.attachCubeMetadataListener(this, null);
			}
			else if (syncState === oFF.SyncState.OUT_OF_SYNC)
			{
				this.m_isCacheCall = true;
				this.m_masterCacheAction.startProcessing(this);
			}
			else
			{
				this.onCacheFilled(this.m_masterCacheAction, this.m_masterCacheAction.getData(), null);
			}
		}
		else
		{
			this.m_isCacheCall = true;
		}
		if (this.m_isCacheCall)
		{
			oFF.InAFusionLayerRpc.prototype.processMainContentFetch.call( this );
		}
	}
};
oFF.InAFusionMetadataAction.prototype.prepare = function()
{
	this.prepareQueryManagerCapabilities();
	var dataSource = this.getDataSource();
	if (oFF.notNull(dataSource) && dataSource.getType() === oFF.MetaObjectType.CATALOG_VIEW_2 && this.m_queryManagerCapabilities.supportsCatalogServiceV2() === false)
	{
		dataSource.setType(oFF.MetaObjectType.CATALOG_VIEW);
	}
};
oFF.InAFusionMetadataAction.prototype.prepareInACapabilities = function()
{
	var serverMetadata;
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.SERVER_METADATA_VIA_SYSTEM_CONNECT))
	{
		serverMetadata = this.getConnection().getSystemConnect().getServerMetadata();
	}
	else
	{
		serverMetadata = this.getConnection().getServerMetadata();
	}
	var providerType = this.getConfig().getProviderType();
	var session = this.getSession();
	this.m_inaCapabilities = oFF.InACapabilitiesProvider.create(session, serverMetadata, providerType, null);
	var serverBetaCapabilities = this.m_inaCapabilities.getServerBetaCapabilities();
	var serverMainCapabilities = this.m_inaCapabilities.getServerMainCapabilities();
	var experimentalFeatures = session.getFeatureToggles();
	if (oFF.notNull(experimentalFeatures))
	{
		var activeMainCapabilities = this.m_inaCapabilities.getActiveCapabilities();
		var devCapaNames = experimentalFeatures.getKeysAsIteratorOfString();
		while (devCapaNames.hasNext())
		{
			var experimentalFeature = devCapaNames.next();
			if (serverBetaCapabilities.containsKey(experimentalFeature) && oFF.InACapabilitiesProvider.isDevCapabilityValid(experimentalFeature, session))
			{
				activeMainCapabilities.addCapability(experimentalFeature);
			}
			if (serverMainCapabilities.containsKey(experimentalFeature))
			{
				activeMainCapabilities.addCapability(experimentalFeature);
			}
		}
	}
	return this.m_inaCapabilities;
};
oFF.InAFusionMetadataAction.prototype.prepareQueryManagerCapabilities = function()
{
	if (oFF.isNull(this.m_queryManagerCapabilities))
	{
		this.m_queryManagerCapabilities = this.getInACapabilities().getQueryCapabilities();
	}
	return this.m_queryManagerCapabilities;
};
oFF.InAFusionMetadataAction.prototype.createSpecificFunction = function()
{
	var systemDescription = this.getSystemDescription();
	oFF.XObjectExt.assertNotNullExt(systemDescription, "System description is null");
	var fastPathCap = this.getInAMainCapabilities().getByKey(oFF.InACapabilities.C032_FAST_PATH);
	var path;
	if (oFF.notNull(fastPathCap) && fastPathCap.getValue() !== null)
	{
		path = fastPathCap.getValue();
	}
	else
	{
		path = systemDescription.getSystemType().getInAPath();
	}
	return this.createFunction(path);
};
oFF.InAFusionMetadataAction.prototype.constructPayload = function()
{
	var payload = oFF.PrFactory.createStructure();
	var config = this.getConfig();
	var innerRequestStructure = payload.putNewStructure("Metadata");
	var providerType = config.getProviderType();
	if (providerType === oFF.ProviderType.ANALYTICS || providerType === oFF.ProviderType.CATALOG)
	{
		innerRequestStructure.putString("Context", "Analytics");
	}
	else if (providerType === oFF.ProviderType.PLANNING || providerType === oFF.ProviderType.PLANNING_VALUE_HELP)
	{
		innerRequestStructure.putString("Context", "Planning");
	}
	else if (providerType === oFF.ProviderType.LIST_REPORTING)
	{
		innerRequestStructure.putString("Context", "ListReporting");
	}
	innerRequestStructure.putString("Language", config.getSystemDescription().getLanguage());
	var dataSource = this.getDataSource();
	var inaDatasource = this.m_exporter.exportDataSource(dataSource, false);
	oFF.QInAExportUtil.setNonEmptyString(inaDatasource, "ValidationHash", dataSource.getValidationHash());
	innerRequestStructure.put("DataSource", inaDatasource);
	this.m_inaCapabilities.exportActiveCapabilities(innerRequestStructure);
	oFF.QInAOptions.fillOptions(payload, this.m_queryManagerCapabilities, this.getSession(), this.getConfig());
	var dataArea = dataSource.getDataArea();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dataArea))
	{
		var inaDataAreas = this.getDataAreas(dataArea);
		payload.putIfNotNull("DataAreas", inaDataAreas);
	}
	var inaExpand = oFF.PrFactory.createList();
	inaExpand.addString("Cube");
	innerRequestStructure.putIfNotNull("Expand", inaExpand);
	return payload;
};
oFF.InAFusionMetadataAction.prototype.getDataAreas = function(dataArea)
{
	var list = null;
	var systemType = this.getSystemType();
	if (systemType.isTypeOf(oFF.SystemType.BW) === true)
	{
		var dataAreaState = oFF.PlanningStateHandler.getDataAreaStateByName(this.getApplication(), this.getSystemName(), dataArea);
		if (oFF.notNull(dataAreaState))
		{
			if (dataAreaState.isSubmitted() === false)
			{
				list = oFF.PrFactory.createList();
				list.add(dataAreaState.serializeToJson());
			}
		}
	}
	return list;
};
oFF.InAFusionMetadataAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	var content = null;
	if (this.isValid())
	{
		var metadataResponse = response.getRootElement();
		content = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, metadataResponse);
		this.setContent(content);
		this.storeMetadataInCache(metadataResponse);
	}
	if (oFF.notNull(this.m_masterCacheAction))
	{
		if (this.m_masterCacheAction.getPrimarySequenceHandle() === this && this.m_isCacheCall === true)
		{
			this.m_masterCacheAction.endProcessing(extResult, content);
		}
	}
	this.generateNextDataSource(content);
	this.endSync();
};
oFF.InAFusionMetadataAction.prototype.generateNextDataSource = function(metadata)
{
	var dataSource = this.getDataSource();
	if (oFF.isNull(dataSource) && oFF.notNull(metadata))
	{
		var inaMetadata = metadata.getJsonContent();
		var inaCube = inaMetadata.getStructureByKey("Cube");
		if (oFF.isNull(inaCube))
		{
			inaCube = inaMetadata;
		}
		var importDataSource = this.m_importer.importDataSource(inaCube);
		this.addAllMessages(this.m_importer);
		if (oFF.notNull(importDataSource))
		{
			importDataSource.setInstanceId(this.getConfig().getInstanceId());
			importDataSource.setSystemName(this.getSystemName());
			dataSource = importDataSource;
		}
	}
	this.setNextDataSource(dataSource);
};
oFF.InAFusionMetadataAction.prototype.onCacheFilled = function(extResult, entry, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setContent(entry);
	this.setNextDataSource(this.getDataSource());
	this.endSync();
};
oFF.InAFusionMetadataAction.prototype.getInACapabilities = function()
{
	return this.m_inaCapabilities;
};
oFF.InAFusionMetadataAction.prototype.getInAMainCapabilities = function()
{
	return this.m_inaCapabilities.getActiveCapabilities();
};
oFF.InAFusionMetadataAction.prototype.getExporter = function()
{
	return this.m_exporter;
};
oFF.InAFusionMetadataAction.prototype.setExporter = function(exporter)
{
	this.m_exporter = exporter;
};
oFF.InAFusionMetadataAction.prototype.getImporter = function()
{
	return this.m_importer;
};
oFF.InAFusionMetadataAction.prototype.setImporter = function(importer)
{
	this.m_importer = importer;
};
oFF.InAFusionMetadataAction.prototype.getMasterCacheAction = function()
{
	var metadataAction = null;
	if (this.getConfig().isCachingActive())
	{
		var cacheKey = this.getCacheKey();
		if (oFF.notNull(cacheKey))
		{
			var olapEnv = this.getOlapEnv();
			if (oFF.notNull(olapEnv))
			{
				var cubeContainer = olapEnv.getCubeContainer(cacheKey);
				if (cubeContainer.getDataSource() === null)
				{
					cubeContainer.setDataSource(this.getDataSource());
				}
				metadataAction = cubeContainer.getMetadataAction(cacheKey);
			}
		}
	}
	return metadataAction;
};
oFF.InAFusionMetadataAction.prototype.getCacheKey = function()
{
	if (oFF.isNull(this.m_cacheKey))
	{
		var config = this.getConfig();
		var dataSource = this.getDataSource();
		if (oFF.notNull(dataSource))
		{
			var dataSourceCacheKey = dataSource.getCacheKeyName2();
			var providerType = config.getProviderType();
			var systemDescription = this.getSystemDescription();
			var systemName = systemDescription.getSystemName();
			var key1 = null;
			var key2 = null;
			this.m_cacheKey = oFF.QFactory.createCacheKey(null, systemName, dataSourceCacheKey, providerType, key1, key2, null, null);
		}
	}
	return this.m_cacheKey;
};
oFF.InAFusionMetadataAction.prototype.storeMetadataInCache = function(rootElement)
{
	if (oFF.notNull(rootElement))
	{
		if (this.m_isCacheCall === true)
		{
			if (oFF.notNull(this.m_cacheKey))
			{
				var olapEnv = this.getOlapEnv();
				var cubeContainer = olapEnv.getCubeContainer(this.m_cacheKey);
				var cube = rootElement.getStructureByKey("Cube");
				if (olapEnv.isCachingEnabled())
				{
					cubeContainer.setQueryMetadata(this.m_cacheKey, cube);
				}
			}
		}
	}
};

oFF.InAFusionModelAction = function() {};
oFF.InAFusionModelAction.prototype = new oFF.InAFusionLayerRpc();
oFF.InAFusionModelAction.prototype._ff_c = "InAFusionModelAction";

oFF.InAFusionModelAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource)
{
	var object = new oFF.InAFusionModelAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionModelAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.MODEL_ACTION;
};
oFF.InAFusionModelAction.prototype.createSpecificFunction = function()
{
	return this.createFunction("/sap/fpa/services/rest/epm/contentlib");
};
oFF.InAFusionModelAction.prototype.constructPayload = function()
{
	var payload = oFF.PrFactory.createStructure();
	var dataSource = this.getDataSource();
	var objectName = dataSource.getObjectName();
	payload.putString(oFF.ContentlibConstants.ACTION, oFF.ContentlibConstants.V_ACTION_GET_RES);
	var clData = payload.putNewStructure(oFF.ContentlibConstants.DATA);
	clData.putNewList(oFF.ContentlibConstants.RESOURCE_IDS).addString(objectName);
	clData.putString(oFF.ContentlibConstants.RESOURCE_TYPE, oFF.ContentlibConstants.V_RESOURCE_TYPE_CUBE);
	var clMetadata = clData.putNewStructure(oFF.ContentlibConstants.METADATA);
	clMetadata.putBoolean(oFF.ContentlibConstants.NAME, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.DESCRIPTION, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.ACCESS, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.USER_AUTH_ONLY, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.RESOURCE_TYPE, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.PACKAGE_ID, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.CREATED_BY, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.MODIFIED_BY, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.UPDATE_COUNTER, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.CREATED_TIME, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.MODIFIED_TIME, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.EXCEPTION_NOT_THROWN_FOR_NO_ACCESS, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.TRANSLATION_ENABLED, true);
	var clAnchestorPath = clMetadata.putNewStructure(oFF.ContentlibConstants.ANCHESTOR_PATH);
	clAnchestorPath.putBoolean(oFF.ContentlibConstants.NAME, true);
	clAnchestorPath.putBoolean(oFF.ContentlibConstants.ACCESS, true);
	var clEpmObjectData = clMetadata.putNewStructure(oFF.ContentlibConstants.EPM_OBJECT_DATA);
	clEpmObjectData.putBoolean(oFF.ContentlibConstants.INCLUDE_DEPENDENCIES, true);
	clEpmObjectData.putBoolean(oFF.ContentlibConstants.INCLUDE_SUB_ITEMS, true);
	var clOptions = clEpmObjectData.putNewStructure(oFF.ContentlibConstants.OPTIONS);
	clOptions.putBoolean(oFF.ContentlibConstants.DETAIL, true);
	clOptions.putBoolean(oFF.ContentlibConstants.VISUALIZATION, true);
	clOptions.putBoolean(oFF.ContentlibConstants.RATE, true);
	clOptions.putBoolean(oFF.ContentlibConstants.LIST_FORMULA, true);
	clOptions.putBoolean(oFF.ContentlibConstants.LIST_VERSION, true);
	clOptions.putBoolean(oFF.ContentlibConstants.ADD_METADATA, true);
	clOptions.putBoolean(oFF.ContentlibConstants.INCL_SUB_OBJECT_TYPES, true);
	clOptions.putBoolean(oFF.ContentlibConstants.PLANNING_FEATURES, true);
	clOptions.putBoolean(oFF.ContentlibConstants.TRANSLATED_CUSTOMIZED_DESCRIPTION, true);
	clOptions.putBoolean(oFF.ContentlibConstants.NEED_DIMENSION_VALIDATION_RULES, true);
	return payload;
};
oFF.InAFusionModelAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		var contentLibData = response.getRootElementGeneric().asList();
		var model = contentLibData.getStructureAt(0);
		var content = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.SFX, model);
		this.setContentExt(content, oFF.QModelFormat.SFX);
		this.setNextDocument(this.getContent());
		this.setNextActionType(oFF.InAFusionLayer.REPO_ACTION);
	}
	this.endSync();
};

oFF.InAQMgrApplyStateAction = function() {};
oFF.InAQMgrApplyStateAction.prototype = new oFF.QOlapSyncAction();
oFF.InAQMgrApplyStateAction.prototype._ff_c = "InAQMgrApplyStateAction";

oFF.InAQMgrApplyStateAction.createAndRun = function(syncType, context, listener, customIdentifier, stateId, stateManager)
{
	var action = new oFF.InAQMgrApplyStateAction();
	action.stateId = stateId;
	action.m_stateManager = stateManager;
	action.setupActionAndRun(syncType, listener, customIdentifier, context);
	return action;
};
oFF.InAQMgrApplyStateAction.prototype.stateId = null;
oFF.InAQMgrApplyStateAction.prototype.m_stateManager = null;
oFF.InAQMgrApplyStateAction.prototype.processSynchronization = function(syncType)
{
	var result = this.m_stateManager.applyState(this.stateId);
	if (result.hasErrors())
	{
		this.addAllMessages(result);
	}
	this.setData(result.getData());
	return false;
};
oFF.InAQMgrApplyStateAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.modelStateApplied(extResult, data, customIdentifier);
};

oFF.InAQMgrStartupCacheSync = function() {};
oFF.InAQMgrStartupCacheSync.prototype = new oFF.QOlapSyncAction();
oFF.InAQMgrStartupCacheSync.prototype._ff_c = "InAQMgrStartupCacheSync";

oFF.InAQMgrStartupCacheSync.createAndRun = function(syncType, listener, customIdentifier, context)
{
	var newObj = new oFF.InAQMgrStartupCacheSync();
	newObj.setupActionAndRun(syncType, listener, customIdentifier, context);
	return newObj;
};
oFF.InAQMgrStartupCacheSync.prototype.m_isCacheCall = false;
oFF.InAQMgrStartupCacheSync.prototype.m_cacheKey = null;
oFF.InAQMgrStartupCacheSync.prototype.m_cubeStructure = null;
oFF.InAQMgrStartupCacheSync.prototype.processSynchronization = function(syncType)
{
	var metadataAction = this.getMasterCacheAction();
	if (oFF.notNull(metadataAction))
	{
		if (metadataAction.getSyncState() === oFF.SyncState.PROCESSING)
		{
			metadataAction.attachCubeMetadataListener(this, null);
			return true;
		}
		else if (metadataAction.getSyncState() === oFF.SyncState.OUT_OF_SYNC)
		{
			this.m_isCacheCall = true;
			metadataAction.startProcessing(this);
		}
	}
	return false;
};
oFF.InAQMgrStartupCacheSync.prototype.onCacheFilled = function(extResult, entry, customIdentifier)
{
	this.endSync();
};
oFF.InAQMgrStartupCacheSync.prototype.onActionSequenceFinalized = function(messages, data)
{
	var metadataAction = this.getMasterCacheAction();
	if (oFF.notNull(metadataAction))
	{
		if (metadataAction.getPrimarySequenceHandle() === this && this.m_isCacheCall === true)
		{
			var content = oFF.XContent.createJsonObjectContent(oFF.ContentType.APPLICATION_JSON, this.m_cubeStructure);
			metadataAction.endProcessing(messages, content);
		}
	}
};
oFF.InAQMgrStartupCacheSync.prototype.getMasterCacheAction = function()
{
	var metadataAction = null;
	var isCachingActive = this.getQueryManager().getQueryServiceConfig().isCachingActive();
	if (isCachingActive === true)
	{
		var cacheKey = this.getCacheKey();
		if (oFF.notNull(cacheKey))
		{
			var olapEnv = this.getActionContext().getOlapEnv();
			if (oFF.notNull(olapEnv))
			{
				var cubeContainer = olapEnv.getCubeContainer(cacheKey);
				metadataAction = cubeContainer.getMetadataAction(cacheKey);
			}
		}
	}
	return metadataAction;
};
oFF.InAQMgrStartupCacheSync.prototype.getCacheKey = function()
{
	if (oFF.isNull(this.m_cacheKey))
	{
		this.m_cacheKey = oFF.QFactory.createCacheKeyByContext(this.getActionContext());
	}
	return this.m_cacheKey;
};
oFF.InAQMgrStartupCacheSync.prototype.isMasterCacheCall = function()
{
	return this.m_isCacheCall;
};
oFF.InAQMgrStartupCacheSync.prototype.storeMetadataInCache = function(rootElement)
{
	if (oFF.notNull(rootElement))
	{
		if (this.m_isCacheCall === true)
		{
			if (oFF.notNull(this.m_cacheKey))
			{
				var olapEnv = this.getOlapEnv();
				var cubeContainer = olapEnv.getCubeContainer(this.m_cacheKey);
				this.m_cubeStructure = rootElement.getStructureByKey("Cube");
				if (olapEnv.isCachingEnabled())
				{
					cubeContainer.setQueryMetadata(this.m_cacheKey, this.m_cubeStructure);
				}
			}
		}
	}
};
oFF.InAQMgrStartupCacheSync.prototype.getMetadataInCache = function()
{
	var root = null;
	if (oFF.notNull(this.m_cacheKey))
	{
		var olapEnv = this.getOlapEnv();
		if (olapEnv.isCachingEnabled())
		{
			var cubeContainer = olapEnv.getCubeContainer(this.m_cacheKey);
			var cubeStructure = cubeContainer.getQueryMetadata(this.m_cacheKey);
			if (oFF.notNull(cubeStructure))
			{
				root = oFF.PrFactory.createStructure();
				root.put("Cube", cubeStructure);
			}
		}
	}
	return root;
};

oFF.InAQMgrSyncAction = function() {};
oFF.InAQMgrSyncAction.prototype = new oFF.QOlapSyncAction();
oFF.InAQMgrSyncAction.prototype._ff_c = "InAQMgrSyncAction";

oFF.InAQMgrSyncAction.prototype.m_rpcFunction = null;
oFF.InAQMgrSyncAction.prototype.releaseObject = function()
{
	this.m_rpcFunction = oFF.XObjectExt.release(this.m_rpcFunction);
	oFF.QOlapSyncAction.prototype.releaseObject.call( this );
};
oFF.InAQMgrSyncAction.prototype.createFunction = function()
{
	return this.getActionContext().createFunction();
};
oFF.InAQMgrSyncAction.prototype.cancelSynchronization = function()
{
	oFF.QOlapSyncAction.prototype.cancelSynchronization.call( this );
	this.m_rpcFunction.cancelSynchronization();
};
oFF.InAQMgrSyncAction.prototype.fillRequestStructure = function()
{
	var parent = this.getActionContext();
	var instanceId = parent.getInstanceId();
	if (oFF.isNull(instanceId))
	{
		return null;
	}
	var requestStructure = oFF.PrFactory.createStructure();
	var application = this.getApplication();
	var session = this.getSession();
	if (session.hasFeature(oFF.FeatureToggleOlap.CLIENT_INFO_METADATA))
	{
		var systemContainer = parent.getOlapSystemContainer();
		var analyticCapabilities = systemContainer.getServiceCapabilities(oFF.ServerService.ANALYTIC);
		var queryModel = this.getQueryModel();
		if (oFF.isNull(queryModel))
		{
			oFF.QInAClientInfo.exportClientInfo(requestStructure, application, analyticCapabilities.supportsClientInfo());
		}
		else
		{
			oFF.QInAClientInfo.exportClientInfo(requestStructure, queryModel, analyticCapabilities.supportsClientInfo());
		}
	}
	return requestStructure;
};
oFF.InAQMgrSyncAction.prototype.initPlanningSupport = function(inaStructure, beforeVariables)
{
	var provider = this.getActionContext();
	var capabilities = provider.getCapabilitiesBase();
	var isBW = capabilities.getSystemType().isTypeOf(oFF.SystemType.BW);
	var supportsDataEntryReadOnly = provider.supportsDataEntryReadOnly();
	var isDataEntryEnabled = provider.isDataEntryEnabled();
	var isDataEntryReadOnly;
	if (isBW)
	{
		isDataEntryEnabled = oFF.PrUtils.getBooleanProperty(inaStructure, "DefaultInputMode") !== null;
		if (isDataEntryEnabled)
		{
			if (beforeVariables)
			{
				isDataEntryReadOnly = !oFF.PrUtils.getBooleanValueProperty(inaStructure, "DefaultInputMode", false);
			}
			else
			{
				isDataEntryReadOnly = !oFF.PrUtils.getBooleanValueProperty(inaStructure, "InputEnabled", false);
			}
		}
		else
		{
			isDataEntryReadOnly = true;
		}
		supportsDataEntryReadOnly = isDataEntryEnabled;
	}
	else
	{
		if (!isDataEntryEnabled)
		{
			isDataEntryEnabled = oFF.PrUtils.getBooleanValueProperty(inaStructure, "InputEnabled", false);
		}
		isDataEntryReadOnly = !isDataEntryEnabled;
	}
	provider.getQueryModelBase().setSupportsDataEntryReadOnly(supportsDataEntryReadOnly);
	provider.setDataEntryReadOnly(isDataEntryReadOnly);
	provider.setDataEntryEnabled(isDataEntryEnabled);
	if (isBW && isDataEntryEnabled)
	{
		provider.initializeDataAreaState();
	}
};

oFF.InARsEnProvider = function() {};
oFF.InARsEnProvider.prototype = new oFF.DfResultSetProvider();
oFF.InARsEnProvider.prototype._ff_c = "InARsEnProvider";

oFF.InARsEnProvider.create = function(queryProvider, initProcedure, initStructure, context)
{
	var provider = new oFF.InARsEnProvider();
	provider.setupHanalyticsResultSetProvider(queryProvider, initProcedure, initStructure, context);
	return provider;
};
oFF.InARsEnProvider.prototype.m_columnAxisProvider = null;
oFF.InARsEnProvider.prototype.m_dataCellProvider = null;
oFF.InARsEnProvider.prototype.m_rowsAxisProvider = null;
oFF.InARsEnProvider.prototype.m_initProcedure = null;
oFF.InARsEnProvider.prototype.m_initStructure = null;
oFF.InARsEnProvider.prototype.m_queryProvider = null;
oFF.InARsEnProvider.prototype.m_isTransientQueryProvider = false;
oFF.InARsEnProvider.prototype.m_complexUnitsSetting = null;
oFF.InARsEnProvider.prototype.m_contextType = null;
oFF.InARsEnProvider.prototype.m_updatedMetadataProcessor = null;
oFF.InARsEnProvider.prototype.cloneExt = function(flags)
{
	var providerClone = oFF.InARsEnProvider.create(this.m_queryProvider, this.m_initProcedure, this.m_initStructure, this.m_contextType);
	providerClone.copyFromResultSetProvider(this);
	return providerClone;
};
oFF.InARsEnProvider.prototype.copyFromResultSetProvider = function(template)
{
	var origin = template;
	this.m_columnAxisProvider.copyInARsAxisProvider(origin.m_columnAxisProvider);
	this.m_rowsAxisProvider.copyInARsAxisProvider(origin.m_rowsAxisProvider);
	this.m_dataCellProvider.copyInARsDataCellProvider(origin.m_dataCellProvider);
	this.m_initProcedure = origin.m_initProcedure;
	if (oFF.notNull(origin.m_initStructure))
	{
		this.m_initStructure = origin.m_initStructure.getPermaCopy();
	}
	this.m_queryProvider = origin.m_queryProvider;
	this.m_isTransientQueryProvider = origin.m_isTransientQueryProvider;
	if (oFF.notNull(origin.m_complexUnitsSetting))
	{
		this.m_complexUnitsSetting = oFF.XCollectionUtils.createListOfClones(this.m_complexUnitsSetting);
	}
};
oFF.InARsEnProvider.prototype.setupHanalyticsResultSetProvider = function(queryProvider, initProcedure, initStructure, context)
{
	var application = queryProvider.getApplication();
	this.setupAction(null, null, null, queryProvider);
	this.m_queryProvider = queryProvider;
	this.m_isTransientQueryProvider = queryProvider.getPreQueryName() !== null && queryProvider.getTagging().containsKey(oFF.QStateConstants.TAG_HAS_TRANSIENT_DEPS);
	this.m_initProcedure = initProcedure;
	this.m_initStructure = initStructure;
	this.m_contextType = context;
	this.m_dataCellProvider = oFF.InARsDataCellProvider.create(application, queryProvider);
	var supportsSapDateFormat = queryProvider.getCapabilitiesBase().supportsSapDate();
	var supportsObtainability = queryProvider.getCapabilitiesBase().supportsObtainability();
	this.m_columnAxisProvider = oFF.InARsAxisProvider.create(application, oFF.AxisType.COLUMNS, context, supportsSapDateFormat, supportsObtainability);
	this.m_rowsAxisProvider = oFF.InARsAxisProvider.create(application, oFF.AxisType.ROWS, context, supportsSapDateFormat, supportsObtainability);
};
oFF.InARsEnProvider.prototype.releaseObject = function()
{
	this.m_columnAxisProvider = oFF.XObjectExt.release(this.m_columnAxisProvider);
	this.m_rowsAxisProvider = oFF.XObjectExt.release(this.m_rowsAxisProvider);
	this.m_dataCellProvider = oFF.XObjectExt.release(this.m_dataCellProvider);
	this.m_complexUnitsSetting = oFF.XObjectExt.release(this.m_complexUnitsSetting);
	this.m_contextType = null;
	this.m_updatedMetadataProcessor = oFF.XObjectExt.release(this.m_updatedMetadataProcessor);
	oFF.DfResultSetProvider.prototype.releaseObject.call( this );
};
oFF.InARsEnProvider.prototype.getColumnAxisProvider = function()
{
	return this.m_columnAxisProvider;
};
oFF.InARsEnProvider.prototype.getDataCellProvider = function()
{
	return this.m_dataCellProvider;
};
oFF.InARsEnProvider.prototype.getRowsAxisProvider = function()
{
	return this.m_rowsAxisProvider;
};
oFF.InARsEnProvider.prototype.processSynchronization = function(syncType)
{
	var requestStructure = null;
	if (this.m_initProcedure === oFF.ProviderInitProcedure.REQUEST_BY_MODEL)
	{
		var activeResultSetContainer = this.m_queryProvider.getActiveResultSetContainerBase();
		var resultSetContainer = this.getResultSet().getResultSetContainer();
		if (activeResultSetContainer !== resultSetContainer)
		{
			this.m_queryProvider.setActiveResultSetContainer(resultSetContainer);
			requestStructure = this.m_queryProvider.fillDataRequestStructure(true);
			this.m_queryProvider.setActiveResultSetContainer(activeResultSetContainer);
		}
		else
		{
			requestStructure = this.m_queryProvider.fillDataRequestStructure(true);
		}
	}
	else if (this.m_initProcedure === oFF.ProviderInitProcedure.REQUEST_BY_STRUCTURE)
	{
		requestStructure = this.m_initStructure;
	}
	var ocpFunction = this.m_queryProvider.createFunction();
	this.setSyncChild(ocpFunction);
	var request = ocpFunction.getRpcRequest();
	var decorator = oFF.RsRequestDecoratorFactory.getResultsetRequestDecorator(this.m_queryProvider.getApplication(), this.m_queryProvider.getSystemDescription(), requestStructure);
	if (oFF.isNull(decorator))
	{
		request.setRequestStructure(requestStructure);
	}
	else
	{
		request.setRequestStructure(decorator.getDecoratedRequest());
	}
	ocpFunction.getProcessingHint().put(oFF.ConnectionParameters.CACHE_HINTS_ENABLED, oFF.PrFactory.createBoolean(this.m_queryProvider.getQueryManager().isCacheHintEnabled()));
	ocpFunction.processFunctionExecution(syncType, this, decorator);
	return true;
};
oFF.InARsEnProvider.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid() && oFF.notNull(response))
	{
		var responseStructure = response.getRootElement();
		var updatePlanning = true;
		var planningRequest = null;
		var planningResponse = null;
		if (oFF.notNull(customIdentifier))
		{
			updatePlanning = false;
			var decorator = customIdentifier;
			responseStructure = decorator.buildResponse(responseStructure);
			planningRequest = decorator.getPlanningRequest();
			planningResponse = decorator.getPlanningResponse();
		}
		var ok = this.setResultStructure(responseStructure, updatePlanning);
		if (!ok && !this.m_isTransientQueryProvider)
		{
			this.addError(oFF.ErrorCodes.MODEL_INFRASTRUCTURE_TERMINATED, "Model infrastructure terminated");
		}
		if (oFF.notNull(planningRequest) && oFF.notNull(planningResponse))
		{
			oFF.PlanningStateHandler.updateFromResponse(this.getApplication(), this.getSystemName(), planningRequest, planningResponse, this);
		}
	}
	this.trackRequestExecuted(extResult);
	this.endSync();
};
oFF.InARsEnProvider.prototype.trackRequestExecuted = function(result)
{
	var usageTracker = oFF.UsageTrackerProvider.getUsageTracker();
	if (usageTracker.isEnabled())
	{
		var response = result.getData();
		if (oFF.isNull(response))
		{
			return;
		}
		try
		{
			var event = new oFF.UTEvent();
			event.setFeature("InaRequest");
			event.setSession(this.getSession());
			var request = response.getFunction().getRpcRequest();
			event.setEventId(request.getRequestType().getName());
			var connectionInfo = request.getConnectionInfo();
			var systemName = connectionInfo.getSystemName();
			var parameters = oFF.XHashMapOfStringByString.create();
			parameters.put("SystemName", systemName);
			parameters.put("SystemHost", connectionInfo.getHost());
			var systemType = connectionInfo.getSystemType();
			parameters.put("SystemType", systemType.getName());
			event.setParameters(parameters);
			if (result.hasErrors())
			{
				var errors = oFF.XHashMapOfStringByString.create();
				var messages = result.getErrors().getIterator();
				while (messages.hasNext())
				{
					var message = messages.next();
					errors.put(oFF.XInteger.convertToString(message.getCode()), message.getText());
				}
			}
			usageTracker.track(event);
		}
		catch (ignored)
		{
			return;
		}
	}
};
oFF.InARsEnProvider.prototype.getSystemName = function()
{
	return this.m_queryProvider.getSystemName();
};
oFF.InARsEnProvider.prototype.setResultStructure = function(resultStructure, updatePlanning)
{
	if (oFF.notNull(resultStructure))
	{
		var resultSet = this.getResultSet();
		if (oFF.isNull(resultSet))
		{
			return false;
		}
		var application = resultSet.getApplication();
		if (oFF.isNull(application))
		{
			return false;
		}
		this.addProfileStep("setResultStructure");
		if (updatePlanning)
		{
			oFF.PlanningStateHandler.update(application, this.getSystemName(), resultStructure, this);
		}
		if (oFF.InAHelper.importMessages(resultStructure, this))
		{
			resultSet.setState(oFF.ResultSetState.ERROR);
		}
		if (this.isValid())
		{
			var provider = this.getQueryManager();
			var rsQueryModelDef = resultSet.getRsQueryModelDef();
			this.processAutoSubmitMetadata(provider, rsQueryModelDef, resultStructure);
			var inaResultSetList = resultStructure.getListByKey("Grids");
			if (oFF.isNull(inaResultSetList) && provider.isShallow())
			{
				var batch = resultStructure.getListByKey(oFF.ConnectionConstants.INA_BATCH);
				if (oFF.notNull(batch))
				{
					if (provider.supportsServerState())
					{
						provider.setupQueryModel();
						var importInAMetadata = oFF.QInAImportFactory.createForMetadata(application, provider.getModelCapabilities());
						var queryModel = provider.getQueryModelBase();
						var instanceId = queryModel.getDataSource().getInstanceId();
						if (oFF.isNull(instanceId))
						{
							instanceId = provider.getInstanceId();
							if (oFF.isNull(instanceId))
							{
								instanceId = provider.getApplication().createNextInstanceId();
							}
							var dataSourceBase = queryModel.getDataSourceBase();
							dataSourceBase.setInstanceId(instanceId);
							dataSourceBase.setSystemName(provider.getSystemName());
						}
						importInAMetadata.importQueryModel(batch.getStructureAt(0).getStructureByKey("Cube"), queryModel);
					}
					var lastResult = batch.getStructureAt(batch.size() - 1);
					inaResultSetList = lastResult.getListByKey("Grids");
				}
			}
			this.processGrids(inaResultSetList, resultSet);
		}
		this.importSerializedData(resultStructure, resultSet);
		this.endProfileStep();
	}
	return true;
};
oFF.InARsEnProvider.prototype.processGrids = function(inaGridsList, resultSet)
{
	if (!oFF.PrUtils.isListEmpty(inaGridsList))
	{
		var rsStructure = inaGridsList.getStructureAt(0);
		var inaResultSetState = rsStructure.getIntegerByKeyExt("ResultSetState", 0);
		var resultSetState = oFF.QInAConverter.lookupResultSetState(inaResultSetState);
		resultSet.setState(resultSetState);
		if (resultSetState === oFF.ResultSetState.DATA_AVAILABLE)
		{
			this.processGridData(resultSet, rsStructure);
		}
	}
};
oFF.InARsEnProvider.prototype.processGridData = function(resultSet, rsStructure)
{
	var queryModel = resultSet.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		var dataSource = rsStructure.getStructureByKey("DataSource");
		if (oFF.notNull(dataSource))
		{
			var lastDataRefresh;
			var lastDataRefreshObj = null;
			var cubeInfo = queryModel.getCubeInfo();
			if (oFF.notNull(cubeInfo))
			{
				if (queryModel.getModelCapabilities().supportsDataRefreshAndDataTopicality())
				{
					var rollUpMinValue = dataSource.getStringByKey("DataRollupMin");
					var rollUpMaxValue = dataSource.getStringByKey("DataRollupMax");
					var rollUpMin = oFF.XDateTime.createDateTimeSafe(rollUpMinValue);
					var rollUpMax = oFF.XDateTime.createDateTimeSafe(rollUpMaxValue);
					cubeInfo.setDataRollUpMin(rollUpMin);
					cubeInfo.setDataRollUpMax(rollUpMax);
					lastDataRefresh = dataSource.getStringByKey("DataLastRefresh");
				}
				else
				{
					lastDataRefresh = dataSource.getStringByKey("LastDataUpdate");
				}
				if (oFF.notNull(lastDataRefresh))
				{
					lastDataRefreshObj = oFF.XDateTime.createDateTimeSafe(lastDataRefresh);
					cubeInfo.setLastUpdateOn(lastDataRefreshObj);
				}
			}
		}
		if (this.getSession().hasFeature(oFF.FeatureToggleOlap.ASSERT_CONDITIONS_SIZE))
		{
			this.processRsConditions(rsStructure.getListByKey("Conditions"), queryModel.getConditionManager());
		}
	}
	var dataEntryMask = rsStructure.getStructureByKey("DataEntryMask");
	this.setDataEntryMask(dataEntryMask);
	var isInputEnabled = rsStructure.getBooleanByKeyExt("InputEnabled", false);
	resultSet.setDataEntryEnabled(isInputEnabled);
	var inputReadinessStateList = rsStructure.getListByKey("InputReadinessStates");
	this.setInputReadinessStates(inputReadinessStateList);
	this.processComplexUnitsSetting(rsStructure.getListByKey("Units"));
	this.connectDataCells(rsStructure);
	var rows = null;
	var columns = null;
	var axes = rsStructure.getListByKey("Axes");
	var size = axes.size();
	for (var i = 0; i < size; i++)
	{
		var axis = axes.getStructureAt(i);
		var type = axis.getStringByKey("Type");
		if (oFF.notNull(type))
		{
			var axisType = oFF.QInAConverter.lookupAxisType(type);
			if (axisType === oFF.AxisType.ROWS)
			{
				rows = axis;
			}
			else if (axisType === oFF.AxisType.COLUMNS)
			{
				columns = axis;
			}
			else
			{
				this.addWarning(oFF.ErrorCodes.ET_WRONG_TYPE, "Unrecognized axis type");
			}
		}
		else
		{
			var name = oFF.XString.toLowerCase(axis.getStringByKey("Name"));
			if (oFF.XString.isEqual("columns", name))
			{
				columns = axis;
			}
			else if (oFF.XString.isEqual("rows", name))
			{
				rows = axis;
			}
			else
			{
				if (i === 0)
				{
					rows = axis;
				}
				else if (i === 1)
				{
					columns = axis;
				}
				else
				{
					this.addWarning(oFF.ErrorCodes.ET_WRONG_TYPE, "Unrecognized axis index");
				}
			}
		}
	}
	this.importUniversalDisplayHierarchyDimensions(queryModel, rows, columns);
	var rsQueryModelDef = resultSet.getRsQueryModelDef();
	var lbhToUdhConvertionEnabled = resultSet.getResultSetContainer().isHierarchyToUDHConversionEnabled();
	this.m_rowsAxisProvider.setOcpStructure(queryModel, rows, this.m_dataCellProvider.getAvailableDataCellRows(), rsQueryModelDef.getRowsAxisDef(), lbhToUdhConvertionEnabled);
	this.m_columnAxisProvider.setOcpStructure(queryModel, columns, this.m_dataCellProvider.getAvailableDataCellColumns(), rsQueryModelDef.getColumnsAxisDef(), lbhToUdhConvertionEnabled);
};
oFF.InARsEnProvider.prototype.processRsConditions = function(inaConditionsList, conditionManager)
{
	if (oFF.notNull(conditionManager) && !oFF.PrUtils.isListEmpty(inaConditionsList))
	{
		var inaCondSize = inaConditionsList.size();
		var effectiveConds = conditionManager.getEffectiveConditions();
		oFF.XBooleanUtils.checkTrue(inaCondSize === effectiveConds.size(), "Number of conditions returned in result-set is not equal to query's conditions!");
		for (var i = 0; i < inaCondSize; i++)
		{
			var inaConditionStructure = inaConditionsList.getStructureAt(i);
			var condition = effectiveConds.getByKey(inaConditionStructure.getStringByKey("Name"));
			condition.setUsedState(inaConditionStructure.getStringByKey("IsUsed"));
		}
	}
};
oFF.InARsEnProvider.prototype.processAutoSubmitMetadata = function(queryManager, rsQueryModelDef, resultStructure)
{
	var variableProcessorState = queryManager.getVariableProcessorState();
	if (queryManager.isAutoVariableSubmitActive() && (variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT))
	{
		var inaUpdatedMetadata = resultStructure.getStructureByKey("Update");
		this.m_updatedMetadataProcessor = oFF.InAUpdatedMDProcessor.create(queryManager, rsQueryModelDef, inaUpdatedMetadata);
		this.m_updatedMetadataProcessor.importMetadataAndUpdateState();
		oFF.XObjectExt.release(this.m_updatedMetadataProcessor);
	}
};
oFF.InARsEnProvider.prototype.importSerializedData = function(resultStructure, resultSet)
{
	if (resultSet.getState() !== oFF.ResultSetState.EMPTY_JSON)
	{
		var view = null;
		var cube = null;
		var serializedData = resultStructure.getStructureByKey("SerializedData");
		var queryManager = resultSet.getQueryManager();
		if (this.isValid() && oFF.notNull(serializedData))
		{
			view = serializedData.getStringByKeyExt("View", queryManager.getActiveResultSetContainer().getSerializedView());
			cube = serializedData.getStringByKey("Cube");
			this.getOlapEnv().cacheRemoteBlendingData(queryManager, view, cube);
		}
		queryManager.getActiveResultSetContainer().setSerializedData(view, cube);
	}
};
oFF.InARsEnProvider.prototype.importUniversalDisplayHierarchyDimensions = function(queryModel, rows, columns)
{
	if (oFF.notNull(queryModel) && queryModel.getModelCapabilities().supportsUniversalDisplayHierarchies())
	{
		var udh = queryModel.getUniversalDisplayHierarchies();
		var hierarchies = udh.getHierarchies().getIterator();
		var rsQueryModelDef = this.getResultSet().getRsQueryModelDef();
		while (hierarchies.hasNext())
		{
			var hierarchy = hierarchies.next();
			if (hierarchy.isActive())
			{
				var axis = hierarchy.getHierarchyDedicatedAxis();
				var hierarchyName = hierarchy.getName();
				if (oFF.notNull(axis) && oFF.AxisType.ROWS === axis.getType())
				{
					this.importUdhDimension(rows, hierarchyName, queryModel, rsQueryModelDef.getRowsAxisDef());
				}
				else if (oFF.notNull(axis) && oFF.AxisType.COLUMNS === axis.getType())
				{
					this.importUdhDimension(columns, hierarchyName, queryModel, rsQueryModelDef.getColumnsAxisDef());
				}
			}
		}
	}
};
oFF.InARsEnProvider.prototype.importUdhDimension = function(inaStructure, udhName, queryModel, rsDefAxis)
{
	if (oFF.notNull(inaStructure))
	{
		var inaDimensions = inaStructure.getListByKey("Dimensions");
		if (oFF.notNull(inaDimensions))
		{
			var size = inaDimensions.size();
			for (var i = 0; i < size; i++)
			{
				var inaDimension = inaDimensions.getStructureAt(i);
				var dimensionName = inaDimension.getStringByKey("Name");
				if (oFF.XString.isEqual(dimensionName, udhName))
				{
					var importer = oFF.QInAImportFactory.createForMetadata(this.getApplication(), null);
					queryModel.stopEventing();
					var existingDim = queryModel.getDimensionByName(udhName);
					var importedDim = importer.importDimension(inaDimension, queryModel);
					existingDim.setText(importedDim.getText());
					existingDim.getFieldContainer().reinit(importedDim.getFieldContainer());
					existingDim.getAttributeContainer().reinit(importedDim.getAttributeContainer());
					this.updateDimensionDefinitions(inaDimensions, queryModel, rsDefAxis);
					queryModel.resumeEventing();
					return;
				}
			}
		}
	}
};
oFF.InARsEnProvider.prototype.updateDimensionDefinitions = function(inaDimensions, queryModel, rsDefAxis)
{
	rsDefAxis.clearDimensions();
	var size = inaDimensions.size();
	for (var i = 0; i < size; i++)
	{
		var inaDimension = inaDimensions.getStructureAt(i);
		var dimension = queryModel.getDimensionByName(inaDimension.getStringByKey("Name"));
		rsDefAxis.addDimension(dimension);
	}
};
oFF.InARsEnProvider.prototype.connectDataCells = function(firstResultSetStructure)
{
	var cellsSparse = firstResultSetStructure.getStructureByKey("Cells");
	if (oFF.notNull(cellsSparse))
	{
		var listByName = firstResultSetStructure.getListByKey("CellArraySizes");
		var size = oFF.PrUtils.getListSize(listByName, 0);
		var dataCountRows = 0;
		var dataCountColumns = 0;
		if (size > 0)
		{
			dataCountRows = listByName.getIntegerAt(0);
		}
		if (size > 1)
		{
			dataCountColumns = listByName.getIntegerAt(1);
		}
		var exceptionSettings = firstResultSetStructure.getListByKey("ExceptionSettings");
		this.m_dataCellProvider.setOcpStructure(cellsSparse, dataCountColumns, dataCountRows, exceptionSettings);
	}
};
oFF.InARsEnProvider.prototype.setDataEntryMask = function(dataEntryMask)
{
	if (oFF.isNull(dataEntryMask))
	{
		return;
	}
	var inaCellNames = dataEntryMask.getListByKey("QueryCellNames");
	if (oFF.isNull(inaCellNames))
	{
		return;
	}
	var cellNames = oFF.PrUtils.asListOfString(inaCellNames);
	this.getResultSet().setDataEntryMask(cellNames);
};
oFF.InARsEnProvider.prototype.setInputReadinessStates = function(stateListStructure)
{
	if (oFF.isNull(stateListStructure))
	{
		return;
	}
	var states = oFF.XList.create();
	for (var i = 0; i < stateListStructure.size(); i++)
	{
		states.add(oFF.RsInputReadinessState.create(i, stateListStructure.getListAt(i)));
	}
	if (states.isEmpty())
	{
		return;
	}
	this.getResultSet().setInputReadinessStates(states);
};
oFF.InARsEnProvider.prototype.processComplexUnitsSetting = function(unitsSetting)
{
	if (oFF.notNull(unitsSetting))
	{
		var unitsSettingSize = unitsSetting.size();
		if (oFF.isNull(this.m_complexUnitsSetting))
		{
			this.m_complexUnitsSetting = oFF.XList.create();
		}
		for (var i = 0; i < unitsSettingSize; i++)
		{
			var unit = unitsSetting.getStructureAt(i);
			if (oFF.notNull(unit))
			{
				this.m_complexUnitsSetting.add(this.buildComplexUnit(unit.getListByKey("Type"), unit.getListByKey("Value"), unit.getListByKey("Description"), unit.getListByKey("Exp")));
			}
		}
	}
};
oFF.InARsEnProvider.prototype.buildComplexUnit = function(typesList, valuesList, descriptionsList, exponentList)
{
	if (oFF.PrUtils.isListEmpty(typesList) || oFF.PrUtils.isListEmpty(valuesList) || oFF.PrUtils.isListEmpty(descriptionsList) || oFF.PrUtils.isListEmpty(exponentList))
	{
		throw oFF.XException.createIllegalArgumentException("Invalid component of Complex Unit");
	}
	var types = oFF.XListOfString.create();
	var values = oFF.XListOfString.create();
	var descriptions = oFF.XListOfString.create();
	var exponents = oFF.XList.create();
	var size = valuesList.size();
	for (var j = 0; j < size; j++)
	{
		types.add(typesList.getStringAt(j));
		values.add(valuesList.getStringAt(j));
		descriptions.add(descriptionsList.getStringAt(j));
		exponents.add(oFF.XIntegerValue.create(exponentList.getIntegerAt(j)));
	}
	return oFF.RsComplexUnit.create(types, values, descriptions, exponents);
};
oFF.InARsEnProvider.prototype.getComplexUnitsSetting = function()
{
	return this.m_complexUnitsSetting;
};

oFF.MeasureValueHelpRsProvider = function() {};
oFF.MeasureValueHelpRsProvider.prototype = new oFF.DfResultSetProvider();
oFF.MeasureValueHelpRsProvider.prototype._ff_c = "MeasureValueHelpRsProvider";

oFF.MeasureValueHelpRsProvider.create = function(measureDimension)
{
	var provider = new oFF.MeasureValueHelpRsProvider();
	provider.setupProvider(measureDimension);
	return provider;
};
oFF.MeasureValueHelpRsProvider.prototype.m_measureDimension = null;
oFF.MeasureValueHelpRsProvider.prototype.m_columnAxisProvider = null;
oFF.MeasureValueHelpRsProvider.prototype.m_rowsAxisProvider = null;
oFF.MeasureValueHelpRsProvider.prototype.m_dataCellProvider = null;
oFF.MeasureValueHelpRsProvider.prototype.m_measureHelpResult = null;
oFF.MeasureValueHelpRsProvider.prototype.setupProvider = function(measureDimension)
{
	this.setupAction(null, null, null, measureDimension);
	this.m_measureDimension = measureDimension;
	this.m_columnAxisProvider = oFF.MeasureValueHelpRsAxisProvider.create(measureDimension);
	this.m_rowsAxisProvider = oFF.MeasureValueHelpRsAxisProvider.create(measureDimension);
	this.m_dataCellProvider = oFF.MeasureValueHelpRsDataCellProvider.create();
};
oFF.MeasureValueHelpRsProvider.prototype.releaseObject = function()
{
	oFF.DfResultSetProvider.prototype.releaseObject.call( this );
	this.m_measureDimension = null;
	this.m_columnAxisProvider = oFF.XObjectExt.release(this.m_columnAxisProvider);
	this.m_rowsAxisProvider = oFF.XObjectExt.release(this.m_rowsAxisProvider);
	this.m_dataCellProvider = oFF.XObjectExt.release(this.m_dataCellProvider);
};
oFF.MeasureValueHelpRsProvider.prototype.cloneExt = function(flags)
{
	var providerClone = oFF.MeasureValueHelpRsProvider.create(this.m_measureDimension);
	providerClone.copyFromResultSetProvider(this);
	return providerClone;
};
oFF.MeasureValueHelpRsProvider.prototype.copyFromResultSetProvider = function(template)
{
	var origin = template;
	this.m_measureDimension = origin.m_measureDimension;
	this.m_columnAxisProvider.copyValueHelpRsAxisProvider(origin.m_columnAxisProvider);
	this.m_rowsAxisProvider.copyValueHelpRsAxisProvider(origin.m_rowsAxisProvider);
};
oFF.MeasureValueHelpRsProvider.prototype.processSynchronization = function(syncType)
{
	this.m_measureHelpResult = this.getMeasureHelpNodes();
	this.addAllMessages(this.m_measureHelpResult);
	this.m_rowsAxisProvider.setValueHelpNodes(this.m_measureHelpResult.getData(), this.m_measureDimension);
	this.endSync();
	return true;
};
oFF.MeasureValueHelpRsProvider.prototype.getMeasureHelpNodes = function()
{
	if (oFF.isNull(this.m_measureHelpResult))
	{
		this.m_measureHelpResult = this.m_measureDimension.getSelector().processMeasureHelp();
	}
	return this.m_measureHelpResult;
};
oFF.MeasureValueHelpRsProvider.prototype.getColumnAxisProvider = function()
{
	return this.m_columnAxisProvider;
};
oFF.MeasureValueHelpRsProvider.prototype.getRowsAxisProvider = function()
{
	return this.m_rowsAxisProvider;
};
oFF.MeasureValueHelpRsProvider.prototype.getDataCellProvider = function()
{
	return this.m_dataCellProvider;
};
oFF.MeasureValueHelpRsProvider.prototype.getComplexUnitsSetting = function()
{
	return null;
};

oFF.InAQMgrCancelThreadsAction = function() {};
oFF.InAQMgrCancelThreadsAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrCancelThreadsAction.prototype._ff_c = "InAQMgrCancelThreadsAction";

oFF.InAQMgrCancelThreadsAction.createAndRun = function(syncType, listener, customIdentifier, parent)
{
	var newObject = new oFF.InAQMgrCancelThreadsAction();
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.InAQMgrCancelThreadsAction.prototype.processSynchronization = function(syncType)
{
	this.m_rpcFunction = this.getActionContext().createFunction();
	var request = this.m_rpcFunction.getRpcRequest();
	var requestStructure = this.fillRequestStructure();
	if (oFF.isNull(requestStructure))
	{
		return false;
	}
	request.setRequestStructure(requestStructure);
	this.m_rpcFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.InAQMgrCancelThreadsAction.prototype.fillRequestStructure = function()
{
	var requestStructure = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	if (oFF.isNull(requestStructure))
	{
		return null;
	}
	var inaAnalytics = requestStructure.putNewStructure("Analytics");
	var inaActions = inaAnalytics.putNewList("Actions");
	var inaCloseAction = inaActions.addNewStructure();
	inaCloseAction.putString("Type", "Close");
	var inaDataSources = inaCloseAction.putNewList("DataSources");
	inaDataSources.addString(this.getActionContext().getInstanceId());
	return requestStructure;
};
oFF.InAQMgrCancelThreadsAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(this.getActionContext());
	this.endSync();
};
oFF.InAQMgrCancelThreadsAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderCancelThreads(extResult, data, customIdentifier);
};

oFF.InAQMgrClearCacheAction = function() {};
oFF.InAQMgrClearCacheAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrClearCacheAction.prototype._ff_c = "InAQMgrClearCacheAction";

oFF.InAQMgrClearCacheAction.createAndRun = function(syncType, listener, customIdentifier, parent, timestamp)
{
	var newObject = new oFF.InAQMgrClearCacheAction();
	newObject.m_timestamp = timestamp;
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.InAQMgrClearCacheAction.prototype.m_timestamp = null;
oFF.InAQMgrClearCacheAction.prototype.processSynchronization = function(syncType)
{
	this.m_rpcFunction = this.getActionContext().createFunction();
	var request = this.m_rpcFunction.getRpcRequest();
	var requestStructure = this.fillRequestStructure();
	if (oFF.notNull(requestStructure))
	{
		request.setRequestStructure(requestStructure);
		this.m_rpcFunction.processFunctionExecution(syncType, this, null);
		return true;
	}
	return false;
};
oFF.InAQMgrClearCacheAction.prototype.fillRequestStructure = function()
{
	var requestStructure = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	if (oFF.isNull(requestStructure))
	{
		return null;
	}
	var inaAnalytics = requestStructure.putNewStructure("Analytics");
	var inaActions = inaAnalytics.putNewList("Actions");
	var inaClearCacheAction = inaActions.addNewStructure();
	inaClearCacheAction.putString("Type", "ClearCache");
	var inaDataSources = inaClearCacheAction.putNewList("DataSources");
	var parent = this.getActionContext();
	inaDataSources.addString(parent.getInstanceId());
	var systemType = parent.getSystemType();
	if (systemType === oFF.SystemType.UNV || systemType === oFF.SystemType.UQAS)
	{
		var inaDataSourceDescriptions = inaClearCacheAction.putNewList("DataSourceDescriptions");
		var customProperties = parent.getDataSource().getCustomProperties();
		var iterator = customProperties.getKeysAsIteratorOfString();
		var inaCustomProperties = inaDataSourceDescriptions.addNewStructure();
		while (iterator.hasNext())
		{
			var key = iterator.next();
			inaCustomProperties.putString(key, customProperties.getByKey(key));
		}
	}
	if (oFF.isNull(this.m_timestamp))
	{
		var currentDateTimeAtLocalTimezone = oFF.XDateTime.createCurrentLocalDateTime();
		var millisecondsForDateTime = currentDateTimeAtLocalTimezone.getTimeInMilliseconds();
		this.m_timestamp = oFF.XLong.convertToString(millisecondsForDateTime);
	}
	inaClearCacheAction.putString("Id", this.m_timestamp);
	return requestStructure;
};
oFF.InAQMgrClearCacheAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(this.getActionContext());
	this.endSync();
};
oFF.InAQMgrClearCacheAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderClearCache(extResult, data, customIdentifier);
};

oFF.InAQMgrShutdownAction = function() {};
oFF.InAQMgrShutdownAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrShutdownAction.prototype._ff_c = "InAQMgrShutdownAction";

oFF.InAQMgrShutdownAction.createAndRun = function(syncType, listener, customIdentifier, parent)
{
	var newObject = new oFF.InAQMgrShutdownAction();
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.InAQMgrShutdownAction.prototype.processSynchronization = function(syncType)
{
	var provider = this.getActionContext();
	if (provider.supportsShutdown())
	{
		this.m_rpcFunction = this.getActionContext().createFunction();
		var request = this.m_rpcFunction.getRpcRequest();
		var requestStructure = this.fillRequestStructure();
		if (oFF.notNull(requestStructure))
		{
			request.setRequestStructure(requestStructure);
			request.setRequestType(oFF.RpcRequestType.CLOSE_DP);
			this.m_rpcFunction.processFunctionExecution(syncType, this, null);
			return true;
		}
	}
	return false;
};
oFF.InAQMgrShutdownAction.prototype.fillRequestStructure = function()
{
	var requestStructure = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	if (oFF.isNull(requestStructure))
	{
		return null;
	}
	var inaAnalytics = requestStructure.putNewStructure("Analytics");
	var inaActions = inaAnalytics.putNewList("Actions");
	var inaCloseAction = inaActions.addNewStructure();
	inaCloseAction.putString("Type", "Close");
	var inaDataSources = inaCloseAction.putNewList("DataSources");
	inaDataSources.addString(this.getActionContext().getInstanceId());
	return requestStructure;
};
oFF.InAQMgrShutdownAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(this.getActionContext());
	this.endSync();
};
oFF.InAQMgrShutdownAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderShutdown(extResult, data, customIdentifier);
};

oFF.InAQMgrStartupAction = function() {};
oFF.InAQMgrStartupAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrStartupAction.prototype._ff_c = "InAQMgrStartupAction";

oFF.InAQMgrStartupAction.createServiceInitAndRun = function(syncType, listener, customIdentifier, parent, genericData)
{
	var newObject = oFF.InAQMgrStartupAction.createInitAndRun(syncType, listener, true, customIdentifier, parent, genericData);
	return newObject;
};
oFF.InAQMgrStartupAction.createMetadataInitAndRun = function(syncType, listener, customIdentifier, parent, genericData)
{
	var newObject = oFF.InAQMgrStartupAction.createInitAndRun(syncType, listener, false, customIdentifier, parent, genericData);
	return newObject;
};
oFF.InAQMgrStartupAction.createInitAndRun = function(syncType, listener, isServiceInit, customIdentifier, parent, genericData)
{
	var config = parent.getQueryServiceConfig();
	var result;
	var mainAction;
	if (config.isFusionActive())
	{
		mainAction = new oFF.InAQMgrStartupAction();
		mainAction.m_isServiceInit = isServiceInit;
		mainAction.setData(genericData);
		mainAction.setupActionAndRun(syncType, listener, customIdentifier, parent);
		result = mainAction;
	}
	else
	{
		var sequence = oFF.SyncActionSequence.create(syncType, listener, customIdentifier, parent);
		var masterCacheSync = oFF.InAQMgrStartupCacheSync.createAndRun(oFF.SyncType.DELAYED, null, null, parent);
		sequence.addAction(masterCacheSync);
		sequence.setFinalizeListener(masterCacheSync);
		mainAction = new oFF.InAQMgrStartupAction();
		mainAction.m_isServiceInit = isServiceInit;
		mainAction.m_cacheSync = masterCacheSync;
		mainAction.setData(genericData);
		mainAction.setupActionAndRun(oFF.SyncType.DELAYED, null, null, parent);
		sequence.setDataAction(mainAction);
		sequence.setListenerAction(mainAction);
		sequence.addAction(mainAction);
		sequence.process();
		result = sequence;
	}
	return result;
};
oFF.InAQMgrStartupAction.prototype.m_isServiceInit = false;
oFF.InAQMgrStartupAction.prototype.m_cacheSync = null;
oFF.InAQMgrStartupAction.prototype.m_cacheKey = null;
oFF.InAQMgrStartupAction.prototype.m_cubeStructure = null;
oFF.InAQMgrStartupAction.prototype.processSynchronization = function(syncType)
{
	var provider = this.getActionContext();
	var config = provider.getQueryServiceConfig();
	if (this.m_isServiceInit)
	{
		if (provider.getLifeCycleState() !== oFF.LifeCycleState.INITIAL)
		{
			this.addError(oFF.ErrorCodes.INVALID_STATE, "Query Manager is not initial");
			return false;
		}
		provider.setLifeCycleState(oFF.LifeCycleState.STARTING_UP);
	}
	var mode = provider.getMode();
	var queryModel = this.getQueryModelBase();
	var dataSource = provider.getDataSource();
	if (oFF.isNull(queryModel))
	{
		if (mode === oFF.QueryManagerMode.RAW_QUERY)
		{
			provider.setLifeCycleState(oFF.LifeCycleState.ACTIVE);
			this.endSync();
			return true;
		}
		provider.setupDesignTimeMode();
		queryModel = this.getQueryModelBase();
		dataSource = provider.getDataSource();
	}
	else
	{
		queryModel.setDataSource(dataSource);
	}
	if (mode.isTypeOf(oFF.QueryManagerMode.DEFAULT) && oFF.isNull(dataSource))
	{
		this.addError(oFF.ErrorCodes.INVALID_STATE, "No datasource given");
		return false;
	}
	var dataSourceBase = queryModel.getDataSourceBase();
	var instanceId = dataSourceBase.getInstanceId();
	if (oFF.isNull(instanceId))
	{
		instanceId = provider.getInstanceId();
		if (oFF.isNull(instanceId))
		{
			instanceId = provider.getApplication().createNextInstanceId();
		}
		dataSourceBase.setInstanceId(instanceId);
	}
	var systemName = dataSourceBase.getSystemName();
	if (oFF.isNull(systemName))
	{
		dataSourceBase.setSystemName(provider.getSystemName());
	}
	if (mode === oFF.QueryManagerMode.RAW_QUERY && this.m_isServiceInit)
	{
		return false;
	}
	var definitionContent = provider.getInitSettings().getDefinitionContent();
	var queryContent = null;
	var metadataContent = null;
	var isInitWithStructure = false;
	if (config.isFusionActive())
	{
		metadataContent = config.getMetadataContent();
		if (oFF.notNull(metadataContent))
		{
			isInitWithStructure = true;
		}
		queryContent = config.getRepositoryContent();
	}
	if (isInitWithStructure === false)
	{
		if (oFF.notNull(definitionContent) && definitionContent.getContentType().containsMetadata())
		{
			metadataContent = definitionContent;
			isInitWithStructure = true;
		}
		else if (oFF.notNull(dataSource))
		{
			var extendedDimensions = dataSource.getExtendedDimensions();
			if (oFF.notNull(extendedDimensions))
			{
				if (dataSource.getExtendedDimensions().hasElements() && mode === oFF.QueryManagerMode.BLENDING)
				{
					this.addWarningExt(oFF.OriginLayer.SERVER, oFF.ErrorCodes.INVALID_DIMENSION, "Joining ExtendedDimensions on a BlendingQuery is not supported by the backend!");
				}
			}
			this.m_cacheKey = oFF.QFactory.createCacheKeyByContext(queryModel);
			var definitionType2 = config.getDefinitionType();
			var storedMetadata;
			if (oFF.notNull(definitionType2) && definitionType2.containsMetadata())
			{
				storedMetadata = this.getApplication().getOlapEnvironment().getQueryMetadata(this.m_cacheKey);
				metadataContent = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, storedMetadata);
				isInitWithStructure = true;
			}
			else
			{
				if (config.isFusionActive() === false)
				{
					if (queryModel.isPartialResponse() === false)
					{
						storedMetadata = this.m_cacheSync.getMetadataInCache();
						if (oFF.notNull(storedMetadata))
						{
							metadataContent = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, storedMetadata);
						}
					}
				}
			}
		}
	}
	if (oFF.notNull(metadataContent))
	{
		this.runApplySteps(queryModel, metadataContent, queryContent, mode, isInitWithStructure);
		return true;
	}
	else if (mode === oFF.QueryManagerMode.BLENDING)
	{
		this.addProfileStep("Prepare Metadata Request");
		var blendingMgr = oFF.InAQMgrStartupBlending.create(this);
		blendingMgr.prepare(syncType);
		this.endProfileStep();
		blendingMgr.process(this, syncType);
		return this.isValid();
	}
	else
	{
		if (provider.supportsAndAllowsEmptyExtendedVarDefinition())
		{
			var extResult = provider.emptyVariableDefinition(syncType, null, null);
			this.addAllMessages(extResult);
		}
		else
		{
			this.addProfileStep("Prepare Metadata Request");
			this.createRpcFunction(provider, mode);
			this.endProfileStep();
			this.m_rpcFunction.processFunctionExecution(syncType, this, mode);
			return true;
		}
	}
	return false;
};
oFF.InAQMgrStartupAction.prototype.createBlendingFunction = function()
{
	this.createRpcFunction(this.getActionContext(), oFF.QueryManagerMode.BLENDING);
	return this.m_rpcFunction;
};
oFF.InAQMgrStartupAction.prototype.createRpcFunction = function(provider, mode)
{
	this.m_rpcFunction = provider.createFunction();
	var request = this.m_rpcFunction.getRpcRequest();
	var requestStructure = oFF.PrFactory.createStructure();
	this.fillMetadataRequestStructure(requestStructure, mode);
	request.setRequestStructure(requestStructure);
};
oFF.InAQMgrStartupAction.prototype.fillMetadataRequestStructure = function(requestStructure, mode)
{
	var provider = this.getActionContext();
	var innerRequestStructure = provider.setInnerStructure(requestStructure, "Metadata", null);
	var providerType = provider.getProviderTypeProx();
	if (providerType === oFF.ProviderType.ANALYTICS || providerType === oFF.ProviderType.CATALOG)
	{
		innerRequestStructure.putString("Context", "Analytics");
	}
	else if (providerType === oFF.ProviderType.PLANNING || providerType === oFF.ProviderType.PLANNING_VALUE_HELP)
	{
		innerRequestStructure.putString("Context", "Planning");
	}
	else if (providerType === oFF.ProviderType.LIST_REPORTING)
	{
		innerRequestStructure.putString("Context", "ListReporting");
	}
	if (mode === oFF.QueryManagerMode.BLENDING)
	{
		var serviceConfig = this.getServiceConfig();
		var blendingDefinition = serviceConfig.getBlendingDefinition();
		var metadataRequest = oFF.QInADataSourceBlending.exportDataSourceBlending(oFF.QModelFormat.INA_DATA, blendingDefinition, false);
		oFF.QInAExportUtil.setNonEmptyString(metadataRequest, "InstanceId", serviceConfig.getInstanceId());
		innerRequestStructure.put("DataSource", metadataRequest);
	}
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.CLIENT_INFO_METADATA))
	{
		var systemContainer = provider.getOlapSystemContainer();
		var analyticCapabilities = systemContainer.getServiceCapabilities(oFF.ServerService.ANALYTIC);
		oFF.QInAClientInfo.exportClientInfo(requestStructure, provider.getApplication(), analyticCapabilities.supportsClientInfo());
	}
};
oFF.InAQMgrStartupAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	var mode = customIdentifier;
	var provider = this.getActionContext();
	var queryModelBase = this.getQueryModelBase();
	if (this.isValidResponse(extResult, response))
	{
		var rootElement = response.getRootElement();
		var metadataContent = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, rootElement);
		this.runApplySteps(queryModelBase, metadataContent, null, mode, false);
	}
	else
	{
		provider.setLifeCycleState(oFF.LifeCycleState.TERMINATED);
		this.endProfileStep();
		this.endSync();
	}
};
oFF.InAQMgrStartupAction.prototype.isValidResponse = function(extResult, response)
{
	if (!extResult.isValid())
	{
		return false;
	}
	if (oFF.isNull(response))
	{
		return false;
	}
	if (response.getRootElement() === null)
	{
		this.addError(oFF.ErrorCodes.PARSER_ERROR, "No json inside");
		return false;
	}
	return true;
};
oFF.InAQMgrStartupAction.prototype.runApplySteps = function(queryModel, metadataContent, queryContent, mode, isInitWithStructure)
{
	queryModel.stopEventing();
	if (this.isValid())
	{
		this.addProfileStep("step1ApplyMetadataStructure");
		this.step1ApplyMetadataStructure(queryModel, metadataContent, mode, isInitWithStructure);
		this.endProfileStep();
	}
	if (this.isValid())
	{
		this.addProfileStep("step2ApplyPlanning");
		this.step2ApplyPlanning(metadataContent, mode);
		this.endProfileStep();
	}
	if (this.isValid())
	{
		this.addProfileStep("step3ApplyQueryModel");
		this.step3ApplyQueryModel(queryContent, isInitWithStructure);
		this.endProfileStep();
	}
	if (this.isValid())
	{
		this.addProfileStep("step4ApplyDataRequest");
		this.step4ApplyDataRequest();
		this.endProfileStep();
	}
	if (this.isValid())
	{
		this.addProfileStep("step5ApplyBlending");
		this.step5ApplyBlending(mode, isInitWithStructure);
		this.endProfileStep();
	}
	this.step6Finalize();
	if (this.isValid())
	{
		this.addProfileStep("step6Variables");
		this.step6Variables(isInitWithStructure);
		this.endProfileStep();
	}
	queryModel.resumeEventing();
	this.endSync();
};
oFF.InAQMgrStartupAction.prototype.step1ApplyMetadataStructure = function(queryModel, metadataContent, mode, isInitWithStructure)
{
	if (oFF.notNull(metadataContent))
	{
		var rootElement = metadataContent.getJsonContent();
		var modelFormat = metadataContent.getContentType();
		var provider = this.getActionContext();
		var config = provider.getQueryServiceConfig();
		if (config.isFusionActive() === false)
		{
			if (queryModel.isPartialResponse() === false)
			{
				this.m_cacheSync.storeMetadataInCache(rootElement);
			}
		}
		var application = this.getApplication();
		if (!oFF.InAHelper.importMessages(rootElement, this))
		{
			this.m_cubeStructure = rootElement;
			if (modelFormat !== oFF.QModelFormat.INA_CLONE)
			{
				if (oFF.notNull(rootElement))
				{
					this.m_cubeStructure = rootElement.getStructureByKey("Cube");
					if (oFF.isNull(this.m_cubeStructure) && rootElement.containsKey("Command"))
					{
						this.m_cubeStructure = rootElement.getStructureByKey("Command");
					}
					if (oFF.isNull(this.m_cubeStructure))
					{
						if (isInitWithStructure)
						{
							this.m_cubeStructure = rootElement;
						}
						var dataSourceValidation = rootElement.getStructureByKey("DataSourceValidation");
						if (oFF.notNull(dataSourceValidation))
						{
							if (dataSourceValidation.getBooleanByKey("Valid"))
							{
								this.addInfo(oFF.InfoCodes.QUERY_MODEL_VERSION_VALID, "Model version valid");
							}
							else
							{
								this.addErrorExt(oFF.OriginLayer.DRIVER, oFF.ErrorCodes.SERVER_METADATA_NOT_FOUND, "Server metadata not available", null);
							}
							return;
						}
					}
				}
			}
			if (oFF.isNull(this.m_cubeStructure))
			{
				this.addErrorExt(oFF.OriginLayer.DRIVER, oFF.ErrorCodes.QM_CUBE_ENTRY_NOT_FOUND, "Invalid Metadata from server - Cube tag in structure not found", null);
			}
			else
			{
				var modelCapabilities = provider.getModelCapabilities();
				var importInAMetadata;
				if (mode === oFF.QueryManagerMode.BLENDING)
				{
					importInAMetadata = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
				}
				else
				{
					var queryConfig = this.getServiceConfig();
					if (modelFormat === oFF.QModelFormat.INA_CLONE)
					{
						importInAMetadata = oFF.QInAImportFactory.createForCloning(application, modelCapabilities);
					}
					else if (queryConfig.isLoadingDefaultQuery())
					{
						importInAMetadata = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
					}
					else
					{
						importInAMetadata = oFF.QInAImportFactory.createForMetadataCore(application, modelCapabilities);
					}
				}
				if (oFF.notNull(mode))
				{
					var removed = this.removeAlreadyLoadedDimensions(queryModel);
					if (removed)
					{
						importInAMetadata.importQueryModel(this.m_cubeStructure, queryModel);
					}
					else
					{
						var metaDataImporter = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
						var varQueryModel = oFF.QueryModel.create(this.getOlapEnv(), provider, queryModel.getModelCapabilitiesBase());
						varQueryModel.setDataSource(queryModel.getDataSource());
						metaDataImporter.importQueryModel(this.m_cubeStructure, varQueryModel);
						var dimensions = varQueryModel.getDimensions();
						for (var dimensionIndex = 0; dimensionIndex < dimensions.size(); dimensionIndex++)
						{
							var dimension = dimensions.get(dimensionIndex);
							var originalDimension = queryModel.getDimensionByNameFromExistingMetadata(dimension.getName());
							if (oFF.notNull(originalDimension) && originalDimension.getDimensionType() === oFF.DimensionType.DIMENSION_INCOMPLETE)
							{
								originalDimension.copyDimension(dimension);
							}
						}
						queryModel.setServerBaseSerialization(null, oFF.QModelOrigin.INITIAL_SERVER_CALL, this.m_cubeStructure);
						oFF.XObjectExt.release(varQueryModel);
					}
				}
				if (provider.getDataSource() !== null)
				{
					provider.getDataSource().setValidationHash(queryModel.getDataSource().getValidationHash());
				}
				var performanceData = rootElement.getStructureByKey("PerformanceData");
				if (oFF.notNull(performanceData))
				{
					var userName = performanceData.getStringByKey("UserName");
					var cubeInfo = queryModel.getCubeInfo();
					if (oFF.notNull(cubeInfo))
					{
						cubeInfo.setUserName(userName);
					}
				}
				this.addAllMessages(importInAMetadata);
			}
		}
	}
};
oFF.InAQMgrStartupAction.prototype.removeAlreadyLoadedDimensions = function(queryModel)
{
	if (queryModel.isPartialResponse())
	{
		return false;
	}
	for (var i = 0; i < queryModel.getLoadedDimensions().size(); )
	{
		queryModel.removeDimension(queryModel.getLoadedDimensions().get(i));
	}
	return true;
};
oFF.InAQMgrStartupAction.prototype.step2ApplyPlanning = function(metadataContent, mode)
{
	if (oFF.notNull(metadataContent) && oFF.notNull(this.m_cubeStructure))
	{
		var provider = this.getActionContext();
		var application = this.getApplication();
		oFF.PlanningStateHandler.update(application, provider.getSystemName(), metadataContent.getJsonContent(), this);
		if (mode !== oFF.QueryManagerMode.BLENDING)
		{
			this.initPlanningSupport(this.m_cubeStructure, true);
		}
	}
};
oFF.InAQMgrStartupAction.prototype.step3ApplyQueryModel = function(queryContent, isInitWithStructure)
{
	var queryModelBase = this.getQueryModelBase();
	var provider = this.getActionContext();
	var queryServiceConfig = provider.getQueryServiceConfig();
	var modellerContent = queryServiceConfig.getModellerContent();
	if (oFF.notNull(modellerContent))
	{
		queryModelBase.deserializeFromElementExt(modellerContent.getContentType(), modellerContent.getJsonContent());
	}
	if (oFF.notNull(queryContent))
	{
		queryModelBase.deserializeFromElementExt(queryContent.getContentType(), queryContent.getJsonContent());
	}
	else if (isInitWithStructure === false)
	{
		var deserializationStructure = provider.getDeserializationStructure();
		var importer = provider.getDeserializationImporter();
		if (oFF.notNull(deserializationStructure) && oFF.notNull(importer))
		{
			queryModelBase.resumeEventing();
			importer.importQueryModel(deserializationStructure, queryModelBase);
			queryModelBase.stopEventing();
		}
	}
};
oFF.InAQMgrStartupAction.prototype.step4ApplyDataRequest = function()
{
	var provider = this.getActionContext();
	var dataRequest = provider.getQueryServiceConfig().getDataRequest();
	if (oFF.notNull(dataRequest))
	{
		var queryModelBase = this.getQueryModelBase();
		queryModelBase.deserializeFromElementExt(oFF.QModelFormat.INA_DATA, dataRequest);
	}
};
oFF.InAQMgrStartupAction.prototype.step5ApplyBlending = function(mode, isInitWithStructure)
{
	if (isInitWithStructure === false)
	{
		if (mode === oFF.QueryManagerMode.BLENDING)
		{
			var serviceConfig = this.getServiceConfig();
			var blendingDefinition = serviceConfig.getBlendingDefinition();
			if (oFF.notNull(blendingDefinition))
			{
				var queryModelBase = this.getQueryModelBase();
				var dataSourceBase = queryModelBase.getDataSourceBase();
				dataSourceBase.setBlendingDefinition(blendingDefinition);
			}
		}
	}
};
oFF.InAQMgrStartupAction.prototype.step6Variables = function(isInitWithStructure)
{
	if (isInitWithStructure === false)
	{
		var provider = this.getActionContext();
		if (provider.isDirectVariableTransferEnabled() === false)
		{
			provider.setVariableProcessorState(oFF.VariableProcessorState.CHANGEABLE_STARTUP);
		}
		provider.resumeEventing();
		provider.prepareAfterVariables();
		provider.stopEventing();
	}
};
oFF.InAQMgrStartupAction.prototype.step6Finalize = function()
{
	var provider = this.getActionContext();
	if (this.isValid())
	{
		provider.setLifeCycleState(oFF.LifeCycleState.ACTIVE);
	}
	else
	{
		provider.setLifeCycleState(oFF.LifeCycleState.TERMINATED);
	}
};
oFF.InAQMgrStartupAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	if (this.m_isServiceInit)
	{
		var serviceListener = listener;
		serviceListener.onServiceInitialized(extResult, data, customIdentifier);
	}
	else
	{
		var modelInitListener = listener;
		modelInitListener.onQueryModelInitialized(extResult, data, customIdentifier);
	}
};
oFF.InAQMgrStartupAction.prototype.getServiceConfig = function()
{
	return this.getQueryManager().getServiceConfig();
};

oFF.InAQMgrVarAction = function() {};
oFF.InAQMgrVarAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrVarAction.prototype._ff_c = "InAQMgrVarAction";

oFF.InAQMgrVarAction.createAndRunDefinition = function(parent, syncType, listener, customIdentifier)
{
	var state;
	var parentState = parent.getVariableProcessorState();
	if (parentState === oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		state = oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION;
	}
	else
	{
		state = oFF.VariableProcessorState.PROCESSING_DEFINITION;
	}
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, state, oFF.ProcessingStep.VARIABLE_DEFINITION, true, true, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunVariantActivation = function(parent, variant, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, variant, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION, oFF.ProcessingStep.VARIABLE_DEFINITION, true, true, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunVariantDeletion = function(parent, variant, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, variant, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_DELETION, oFF.ProcessingStep.VARIANT_DELETE, false, true, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunVariantUpdate = function(parent, variant, updateProperties, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.m_updateVariantProperties = updateProperties;
	newObject.setupVarActionAndRun(syncType, parent, variant, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_SAVE, oFF.ProcessingStep.VARIANT_SAVE, false, true, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunSubmit = function(parent, syncType, listener, customIdentifier)
{
	var state;
	if (parent.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_REINIT)
	{
		state = oFF.VariableProcessorState.PROCESSING_SUBMIT_AFTER_REINIT;
	}
	else
	{
		state = oFF.VariableProcessorState.PROCESSING_SUBMIT;
	}
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, state, oFF.ProcessingStep.VARIABLE_SUBMIT, true, true, parent.isVariableSubmitNeeded());
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunCancel = function(parent, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_CANCEL, oFF.ProcessingStep.VARIABLE_CANCEL, false, false, !parent.isSubmitted());
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunCheck = function(parent, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_CHECK, null, false, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunGetRuntimeInfo = function(parent, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_DEFINITION, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunReInitAfterSubmit = function(parent, syncType, listener, customIdentifier)
{
	if (parent.getInitSettings().isExternalizedDynamicFilter())
	{
		var olapFilterManager = parent.getOlapEnv().getFilterManager();
		olapFilterManager.projectExternalizedFilter(parent);
	}
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_REINIT, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, parent.isSubmitted());
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunSetGetValues = function(parent, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunEmptyVariableDefinition = function(parent, syncType, listener, customIdentifier)
{
	var newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.clearSavedStateAndExternalizeDynamicFilter = function(provider, isProcessingSubmitState, invalidateRsc)
{
	provider.setStateBeforeVarScreen(null);
	provider.setMetadataStateBeforeVarScreen(null);
	if (invalidateRsc)
	{
		provider.getNewResultsetContainer();
	}
	if (provider.getInitSettings().isExternalizedDynamicFilter())
	{
		var olapFilterManager = provider.getOlapEnv().getFilterManager();
		olapFilterManager.externalizeDynamicFilterAfterSubmit(provider, isProcessingSubmitState);
	}
};
oFF.InAQMgrVarAction.prototype.m_applyVariableStates = false;
oFF.InAQMgrVarAction.prototype.m_applyVariableAndModelStates = false;
oFF.InAQMgrVarAction.prototype.m_processingStep = null;
oFF.InAQMgrVarAction.prototype.m_state = null;
oFF.InAQMgrVarAction.prototype.m_variableVariant = null;
oFF.InAQMgrVarAction.prototype.m_needsProcessing = false;
oFF.InAQMgrVarAction.prototype.m_isProcessingEmptyDef = false;
oFF.InAQMgrVarAction.prototype.m_updateVariantProperties = false;
oFF.InAQMgrVarAction.prototype.setupVarActionAndRun = function(syncType, context, variant, listener, customIdentifier, state, processingStep, applyVarStates, applyVarAndModelStates, needsProcessing)
{
	this.m_applyVariableStates = applyVarStates;
	this.m_applyVariableAndModelStates = applyVarAndModelStates;
	this.m_processingStep = processingStep;
	this.m_state = state;
	this.m_needsProcessing = needsProcessing;
	this.m_variableVariant = variant;
	if (this.m_state === oFF.VariableProcessorState.PROCESSING_REINIT)
	{
		var queryModel = context.getQueryModel();
		context.setStateBeforeVarScreen(queryModel.serializeToElement(oFF.QModelFormat.INA_REPOSITORY));
		context.setMetadataStateBeforeVarScreen(queryModel.serializeToElement(oFF.QModelFormat.INA_METADATA));
	}
	else if (this.m_state === oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		this.m_isProcessingEmptyDef = true;
	}
	oFF.InAQMgrSyncAction.prototype.setupActionAndRun.call( this , syncType, listener, customIdentifier, context);
};
oFF.InAQMgrVarAction.prototype.releaseObject = function()
{
	this.m_rpcFunction = null;
	this.m_processingStep = null;
	this.m_state = null;
	oFF.InAQMgrSyncAction.prototype.releaseObject.call( this );
};
oFF.InAQMgrVarAction.prototype.processSynchronization = function(syncType)
{
	this.setData(this);
	if (this.m_needsProcessing)
	{
		this.m_rpcFunction = this.createFunction();
		var requestStructure = oFF.PrFactory.createStructure();
		var withVariables = this.m_state !== oFF.VariableProcessorState.PROCESSING_REINIT && this.m_state !== oFF.VariableProcessorState.PROCESSING_VARIANT_DELETION;
		var actionContext = this.getActionContext();
		actionContext.fillAnalyticRequestStructure(requestStructure, oFF.QInAConverter.lookupContextNameForProvider(this.getQueryManager().getProviderType()), withVariables, this.m_processingStep, this.m_variableVariant);
		actionContext.setVariableProcessorState(this.m_state);
		this.m_rpcFunction.getRpcRequest().setRequestStructure(requestStructure);
		this.m_rpcFunction.processFunctionExecution(syncType, this, null);
		return true;
	}
	return false;
};
oFF.InAQMgrVarAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addProfileStep("applyDataModelStructure");
	this.addAllMessages(extResult);
	var context = this.getActionContext();
	if (oFF.notNull(context))
	{
		var queryModel = context.getQueryModelBase();
		if (extResult.isValid() && oFF.notNull(response))
		{
			var rootElement = response.getRootElement();
			if (oFF.isNull(rootElement))
			{
				this.addError(oFF.ErrorCodes.PARSER_ERROR, "Root element is missing");
			}
			else
			{
				if (!oFF.InAHelper.importMessages(rootElement, this))
				{
					oFF.PlanningStateHandler.update(this.getApplication(), context.getSystemName(), rootElement, this);
					if (this.m_applyVariableStates)
					{
						var inaQueryModel = rootElement.getStructureByKey("Cube");
						if (oFF.isNull(inaQueryModel))
						{
							this.addError(oFF.ErrorCodes.PARSER_ERROR, "Invalid Metadata from server - Cannot find 'Cube' element.");
						}
						else
						{
							this.processCubeElement(queryModel, rootElement, inaQueryModel, context);
						}
					}
					if (this.m_state === oFF.VariableProcessorState.PROCESSING_VARIANT_DELETION)
					{
						context.removeVariableVariant(this.m_variableVariant);
					}
					else if (this.m_state === oFF.VariableProcessorState.PROCESSING_VARIANT_SAVE && this.m_updateVariantProperties)
					{
						var cube = rootElement.getStructureByKey("Cube");
						oFF.QInAMdQuery.importVariants(cube, queryModel);
						var newVariantName = oFF.QInAMdQuery.importVariant(cube, queryModel);
						if (oFF.isNull(newVariantName))
						{
							this.addError(oFF.ErrorCodes.PARSER_ERROR, "Could not parse variant.");
						}
						else
						{
							var variant = context.getVariableVariantByName(newVariantName);
							this.m_variableVariant.setName(newVariantName);
							this.m_variableVariant.setText(variant.getText());
							this.m_variableVariant.setScope(variant.getScope());
							this.m_variableVariant.applyState();
						}
					}
				}
			}
		}
		if (this.isValid())
		{
			var nextState = this.m_state.getNextState();
			if (oFF.notNull(nextState))
			{
				if (this.m_state === oFF.VariableProcessorState.PROCESSING_CANCEL)
				{
					this.addAllMessages(queryModel.deserializeFromElementExt(oFF.QModelFormat.INA_METADATA, context.getMetadataStateBeforeVarScreen()));
					this.addAllMessages(queryModel.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, context.getStateBeforeVarScreen()));
					context.setStateBeforeVarScreen(null);
					context.setMetadataStateBeforeVarScreen(null);
					if (context.getInitSettings().isExternalizedDynamicFilter())
					{
						context.getConvenienceCommands().clearNonMeasureFilters();
					}
				}
				else if (this.m_state.isTypeOf(oFF.VariableProcessorState.PROCESSING_SUBMIT))
				{
					oFF.InAQMgrVarAction.clearSavedStateAndExternalizeDynamicFilter(context, this.m_state === oFF.VariableProcessorState.PROCESSING_SUBMIT, true);
				}
				context.setVariableProcessorState(nextState);
			}
			else
			{
				context.returnToPreviousProcessorState();
			}
			context.prepareAfterVariables();
		}
		else
		{
			if (this.m_state.isTypeOf(oFF.VariableProcessorState.PROCESSING_SUBMIT))
			{
				context.setVariableProcessorState(oFF.VariableProcessorState.SUBMIT_FAILED);
			}
			else
			{
				context.returnToPreviousProcessorState();
			}
		}
	}
	this.endProfileStep();
	this.endSync();
};
oFF.InAQMgrVarAction.prototype.processCubeElement = function(queryModel, rootElement, cubeElement, context)
{
	if (oFF.notNull(queryModel) && context.getModelCapabilities().supportsAutoVariableSubmit())
	{
		queryModel.setIsMetadataUpdatedByAutoSubmit(false);
	}
	if (this.m_applyVariableAndModelStates)
	{
		this.applyServerModel(queryModel, rootElement, cubeElement);
	}
	else if (this.m_isProcessingEmptyDef)
	{
		var inaImporterForEmptyVarDef = context.getVariablesImporter();
		oFF.QInAMdQuery.importDimensions(inaImporterForEmptyVarDef, cubeElement, queryModel);
		inaImporterForEmptyVarDef.importDimensions(cubeElement, queryModel, queryModel);
		oFF.QInAMdQuery.importVariants(cubeElement, queryModel);
		inaImporterForEmptyVarDef.importVariables(cubeElement, context.getVariableContainerBase());
		oFF.QInAMdDataSource.importMd(inaImporterForEmptyVarDef, cubeElement, queryModel, queryModel);
		this.addAllMessages(inaImporterForEmptyVarDef);
		this.m_isProcessingEmptyDef = false;
		this.getActionContext().setLifeCycleState(oFF.LifeCycleState.ACTIVE);
	}
	else
	{
		var inaImporter = context.getVariablesImporter();
		inaImporter.importVariables(cubeElement, context.getVariableContainerBase());
		this.addAllMessages(inaImporter);
	}
};
oFF.InAQMgrVarAction.prototype.applyServerModel = function(queryModel, inaStructure, inaQueryModel)
{
	var queryModelInAStructure = inaQueryModel;
	var provider = this.getActionContext();
	var mergeNeeded = false;
	if (provider.getPreviousVariableProcessorState() !== oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		mergeNeeded = true;
	}
	var environment = this.getOlapEnv();
	var application = this.getApplication();
	oFF.PlanningStateHandler.update(application, provider.getSystemName(), inaStructure, this);
	var metaDataImporter = oFF.QInAImportFactory.createForMetadata(application, queryModel.getModelCapabilities());
	var varQueryModel = oFF.QueryModel.create(environment, provider, queryModel.getModelCapabilitiesBase());
	varQueryModel.setDataSource(queryModel.getDataSource());
	if (this.m_processingStep === oFF.ProcessingStep.VARIABLE_DEFINITION)
	{
		metaDataImporter.importVariableManager(inaStructure.getStructureByKey("Cube"), queryModel.getVariableManagerBase(), queryModel);
	}
	else if (!mergeNeeded)
	{
		metaDataImporter.importQueryModel(queryModelInAStructure, queryModel);
		var deserializationStructure = provider.getDeserializationStructure();
		var importer = provider.getDeserializationImporter();
		if (oFF.notNull(deserializationStructure) && oFF.notNull(importer))
		{
			importer.importQueryModel(deserializationStructure, queryModel);
		}
	}
	else
	{
		metaDataImporter.importQueryModel(queryModelInAStructure, varQueryModel);
		queryModelInAStructure = oFF.PrFactory.createStructureDeepCopy(queryModelInAStructure);
		queryModel.setServerBaseSerialization(null, oFF.QModelOrigin.VARIABLE_SUBMIT, queryModelInAStructure);
	}
	this.addAllMessages(metaDataImporter);
	if (mergeNeeded)
	{
		queryModel.metadataUpdateEventing();
		var variableProcessorState = provider.getVariableProcessorState();
		var settings = oFF.InAQMgrMergeSettings.create(variableProcessorState === oFF.VariableProcessorState.PROCESSING_SUBMIT);
		this.revertUdhStateOnVariableModel(varQueryModel, queryModel, settings);
		queryModel.mergeDeepRecursive(settings, varQueryModel);
	}
	oFF.XObjectExt.release(varQueryModel);
	this.initPlanningSupport(queryModelInAStructure, false);
	if (mergeNeeded)
	{
		queryModel.resumeEventing();
	}
};
oFF.InAQMgrVarAction.prototype.revertUdhStateOnVariableModel = function(varQueryModel, queryModel, settings)
{
	if (queryModel.getQueryManager().isHierarchyToUDHConversionEnabledForCurrentRs())
	{
		var universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchies();
		var hierarchyList = universalDisplayHierarchies.getHierarchies();
		var varQueryModelUniversalDisplayHierarchies = varQueryModel.getUniversalDisplayHierarchies();
		var varQueryModelHierarchyList = varQueryModelUniversalDisplayHierarchies.getHierarchies();
		if (oFF.XCollectionUtils.hasElements(hierarchyList) && oFF.XCollectionUtils.hasElements(varQueryModelHierarchyList))
		{
			for (var i = 0; i < varQueryModelHierarchyList.size(); i++)
			{
				var varQueryModelUdh = varQueryModelHierarchyList.get(i);
				if (varQueryModelUdh.isActive())
				{
					var axisType = varQueryModelUdh.getHierarchyDedicatedAxis().getType();
					var dimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(queryModel.getAxis(axisType));
					if (oFF.notNull(dimension))
					{
						this.revertUdhState(varQueryModel, dimension, varQueryModelUniversalDisplayHierarchies, universalDisplayHierarchies, settings);
					}
				}
			}
		}
	}
};
oFF.InAQMgrVarAction.prototype.revertUdhState = function(varQueryModel, convertedDimension, varQueryModelUdh, udh, settings)
{
	var varQueryModelDimension = varQueryModel.getDimensionByName(convertedDimension.getName());
	if (oFF.notNull(varQueryModelDimension))
	{
		varQueryModelDimension.getHierarchyManager().copyFrom(convertedDimension.getHierarchyManager(), null);
		var varQueryModelFilter = varQueryModelDimension.getFilter();
		if (oFF.notNull(varQueryModelFilter))
		{
			varQueryModelFilter.clear();
		}
		varQueryModelUdh.mergeDeepRecursive(settings, udh);
	}
};
oFF.InAQMgrVarAction.prototype.isSuccessfullyProcessed = function()
{
	return this.isValid();
};
oFF.InAQMgrVarAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVariableProcessorExecuted(extResult, data, customIdentifier);
};

oFF.InAQMgrVariantModifyAction = function() {};
oFF.InAQMgrVariantModifyAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrVariantModifyAction.prototype._ff_c = "InAQMgrVariantModifyAction";

oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP = "ACTIVATE";
oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP = "SAVE_REPLACE";
oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP = "SAVE_NEW";
oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP = "SAVE_OLD";
oFF.InAQMgrVariantModifyAction.DELETE_STEP = "DELETE";
oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP = "DELETE_ERROR";
oFF.InAQMgrVariantModifyAction.createAndRunModification = function(context, variant, syncType, listener, customIdentifier)
{
	var obj = new oFF.InAQMgrVariantModifyAction();
	obj.m_variant = variant;
	obj.setupActionAndRun(syncType, listener, customIdentifier, context);
	return obj;
};
oFF.InAQMgrVariantModifyAction.prototype.m_variant = null;
oFF.InAQMgrVariantModifyAction.prototype.m_replacementVariant = null;
oFF.InAQMgrVariantModifyAction.prototype.m_previousVariableValues = null;
oFF.InAQMgrVariantModifyAction.prototype.releaseObject = function()
{
	this.m_replacementVariant = null;
	this.m_variant = null;
	this.m_previousVariableValues = oFF.XObjectExt.release(this.m_previousVariableValues);
	oFF.InAQMgrSyncAction.prototype.releaseObject.call( this );
};
oFF.InAQMgrVariantModifyAction.prototype.processSynchronization = function(syncType)
{
	if (!this.m_variant.isDirty())
	{
		return false;
	}
	var queryManager = this.getActionContext();
	if (this.m_variant.getName() === null)
	{
		var dirtyScope = this.m_variant.getDirtyScope();
		var dirtyName = dirtyScope !== oFF.Scope.USER ? this.m_variant.getDirtyName() : null;
		this.createAndRunReplacementSave(dirtyName, this.m_variant.getDirtyText(), dirtyScope, oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP);
		return true;
	}
	this.m_previousVariableValues = queryManager.getVariableContainer().serializeToElement(oFF.QModelFormat.INA_DATA);
	queryManager.activateVariableVariant(this.m_variant, syncType, this, oFF.XStringValue.create(oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP));
	return true;
};
oFF.InAQMgrVariantModifyAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier) {};
oFF.InAQMgrVariantModifyAction.prototype.isSuccessfullyProcessed = function()
{
	return this.isValid();
};
oFF.InAQMgrVariantModifyAction.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	var step = customIdentifier.toString();
	var queryManager = this.getActionContext();
	this.addAllMessages(extResult);
	if (this.hasErrors())
	{
		this.doErrorHandling(step);
	}
	else
	{
		this.clearMessages();
		switch (step)
		{
			case oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP:
				var dirtyText = this.m_variant.getDirtyText();
				if (this.m_variant.isNameOrScopeDirty())
				{
					var dirtyScope = this.m_variant.getDirtyScope();
					var dirtyName = dirtyScope !== oFF.Scope.USER ? this.m_variant.getDirtyName() : null;
					this.createAndRunReplacementSave(dirtyName, dirtyText, dirtyScope, oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP);
				}
				else
				{
					var name = this.m_variant.getName();
					var scope = this.m_variant.getScope();
					this.createAndRunReplacementSave(name, dirtyText, scope, oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP);
				}
				break;

			case oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP:
				queryManager.deleteVariableVariant(this.m_variant, this.getActiveSyncType(), this, oFF.XStringValue.create(oFF.InAQMgrVariantModifyAction.DELETE_STEP));
				break;

			case oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP:
				this.applyVariantState();
				this.restorePreviousValuesAndEnd();
				break;

			case oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP:
				this.applyVariantState();
				this.endSync();
				break;

			case oFF.InAQMgrVariantModifyAction.DELETE_STEP:
				this.applyVariantState();
				this.restorePreviousValuesAndEnd();
				break;

			case oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP:
				this.restorePreviousValuesAndEnd();
				break;
		}
	}
};
oFF.InAQMgrVariantModifyAction.prototype.doErrorHandling = function(step)
{
	var queryManager = this.getActionContext();
	switch (step)
	{
		case oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP:
			this.endSync();
			break;

		case oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP:
			this.restorePreviousValuesAndEnd();
			break;

		case oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP:
			this.restorePreviousValuesAndEnd();
			break;

		case oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP:
			this.endSync();
			break;

		case oFF.InAQMgrVariantModifyAction.DELETE_STEP:
			queryManager.deleteVariableVariant(this.m_replacementVariant, this.getActiveSyncType(), this, oFF.XStringValue.create(oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP));
			this.restorePreviousValuesAndEnd();
			break;

		case oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP:
			this.restorePreviousValuesAndEnd();
			break;
	}
};
oFF.InAQMgrVariantModifyAction.prototype.createAndRunReplacementSave = function(name, text, scope, step)
{
	this.m_replacementVariant = oFF.QVariableVariant.createVariantWithScopeInternal(this.m_variant.getDataSource(), name, text, scope);
	oFF.InAQMgrVarAction.createAndRunVariantUpdate(this.getActionContext(), this.m_replacementVariant, true, this.getActiveSyncType(), this, oFF.XStringValue.create(step));
};
oFF.InAQMgrVariantModifyAction.prototype.applyVariantState = function()
{
	this.m_variant.setName(this.m_replacementVariant.getName());
	this.m_variant.setText(this.m_replacementVariant.getText());
	this.m_variant.setScope(this.m_replacementVariant.getScope());
	this.m_variant.applyState();
};
oFF.InAQMgrVariantModifyAction.prototype.restorePreviousValuesAndEnd = function()
{
	var queryManager = this.getActionContext();
	queryManager.getVariableContainer().deserializeFromElementExt(oFF.QModelFormat.INA_DATA, this.m_previousVariableValues);
	this.endSync();
};
oFF.InAQMgrVariantModifyAction.prototype.endSync = function()
{
	this.m_replacementVariant = null;
	this.m_variant = null;
	this.m_previousVariableValues = oFF.XObjectExt.release(this.m_previousVariableValues);
	oFF.InAQMgrSyncAction.prototype.endSync.call( this );
};
oFF.InAQMgrVariantModifyAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVariableProcessorExecuted(extResult, data, customIdentifier);
};

oFF.InAQRriTargetsSyncAction = function() {};
oFF.InAQRriTargetsSyncAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQRriTargetsSyncAction.prototype._ff_c = "InAQRriTargetsSyncAction";

oFF.InAQRriTargetsSyncAction.createAndRun = function(syncType, parent, identifier)
{
	var result = new oFF.InAQRriTargetsSyncAction();
	result.m_parent = parent;
	result.m_identifier = identifier;
	result.setupActionAndRun(syncType, parent, null, null);
	return result;
};
oFF.InAQRriTargetsSyncAction.extractRriTargets = function(targets)
{
	var result = oFF.XList.create();
	var len = oFF.PrUtils.getListSize(targets, 0);
	for (var i = 0; i < len; i++)
	{
		var target = oFF.PrUtils.getStructureElement(targets, i);
		if (oFF.isNull(target))
		{
			continue;
		}
		var rriTarget = oFF.QRriTarget.create();
		var parameterNames = oFF.PrUtils.getKeysAsReadOnlyListOfString(target, null);
		if (oFF.notNull(parameterNames))
		{
			var parameters = rriTarget.getParameters();
			for (var j = 0; j < parameterNames.size(); j++)
			{
				var parameterName = parameterNames.get(j);
				var parameterValue = oFF.PrUtils.getStringProperty(target, parameterName);
				if (oFF.notNull(parameterValue))
				{
					parameters.put(parameterName, parameterValue.getString());
				}
			}
		}
		var properties = oFF.PrUtils.getStructureProperty(target, "Properties");
		var propertyNames = oFF.PrUtils.getKeysAsReadOnlyListOfString(properties, null);
		if (oFF.notNull(propertyNames))
		{
			var customProperties = rriTarget.getCustomProperties();
			for (var k = 0; k < propertyNames.size(); k++)
			{
				var propertyName = propertyNames.get(k);
				var propertyValue = oFF.PrUtils.getStringProperty(properties, propertyName);
				if (oFF.notNull(propertyValue))
				{
					customProperties.put(propertyName, propertyValue.getString());
				}
			}
		}
		result.add(rriTarget);
	}
	return result;
};
oFF.InAQRriTargetsSyncAction.prototype.m_parent = null;
oFF.InAQRriTargetsSyncAction.prototype.m_identifier = null;
oFF.InAQRriTargetsSyncAction.prototype.releaseObject = function()
{
	this.m_parent = null;
	this.m_identifier = null;
	oFF.InAQMgrSyncAction.prototype.releaseObject.call( this );
};
oFF.InAQRriTargetsSyncAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	var rriTargets = null;
	if (extResult.isValid())
	{
		rriTargets = oFF.InAQRriTargetsSyncAction.extractRriTargets(oFF.PrUtils.getListProperty(response.getRootElement(), "RRITargets"));
	}
	var extResultRriTargets = oFF.ExtResult.create(rriTargets, extResult);
	var manager = this.m_identifier.getManager();
	manager.setResult(extResultRriTargets, this.m_identifier);
	this.endSync();
};
oFF.InAQRriTargetsSyncAction.prototype.callListener = function(extResult, listener, data, customIdentifier) {};
oFF.InAQRriTargetsSyncAction.prototype.processSynchronization = function(syncType)
{
	var requestJson = this.exportRequestJson();
	var connection = this.m_parent.getConnection();
	var serverMetadata;
	if (connection.getSession().hasFeature(oFF.FeatureToggleOlap.SERVER_METADATA_VIA_SYSTEM_CONNECT))
	{
		serverMetadata = connection.getSystemConnect().getServerMetadata();
	}
	else
	{
		serverMetadata = connection.getServerMetadata();
	}
	var capabilities = serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
	var fastPath = capabilities.getByKey(oFF.InACapabilities.C032_FAST_PATH);
	var path;
	if (oFF.notNull(fastPath))
	{
		path = fastPath.getValue();
	}
	else
	{
		path = this.m_parent.getSystemType().getInAPath();
	}
	var ocpFunction = connection.newRpcFunction(path);
	var request = ocpFunction.getRpcRequest();
	request.setRequestStructure(requestJson);
	ocpFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.InAQRriTargetsSyncAction.prototype.exportRequestJson = function()
{
	var requestStructure = oFF.PrFactory.createStructure();
	var innerRequestStructure = this.m_parent.setInnerStructure(requestStructure, "Analytics", null);
	var exportInAData = oFF.QInAExportFactory.createForData(this.m_parent.getApplication(), this.m_parent.getModelCapabilities());
	var queryModel = this.m_parent.getQueryModel();
	var inaDefinition = exportInAData.exportQueryModel(queryModel, true, false);
	innerRequestStructure.put("Definition", inaDefinition);
	innerRequestStructure.put("DataSource", exportInAData.exportDataSource(queryModel.getDataSource(), false));
	innerRequestStructure.getStructureByKey("DataSource").putString("Type", "Query/RRI");
	var options = inaDefinition.putNewStructure("ResultSetFeatureRequest");
	options.putBoolean("UseDefaultAttributeKey", false);
	if (this.m_parent.getCapabilitiesBase().supportsEncodedResultset())
	{
		options.putString("ResultFormat", "Version2");
		options.putString("ResultEncoding", "None");
	}
	var rriTargetManager = queryModel.getQueryManager().getRriTargetManager();
	var rriContext = innerRequestStructure.putNewStructure("RRIContext");
	rriContext.putInteger("Column", rriTargetManager.getResultSetColumn());
	rriContext.putInteger("Row", rriTargetManager.getResultSetRow());
	return requestStructure;
};

oFF.InAQueryManagerProvider = function() {};
oFF.InAQueryManagerProvider.prototype = new oFF.QueryManager();
oFF.InAQueryManagerProvider.prototype._ff_c = "InAQueryManagerProvider";

oFF.InAQueryManagerProvider.CLAZZ = null;
oFF.InAQueryManagerProvider.staticSetupProvider = function()
{
	oFF.InAQueryManagerProvider.CLAZZ = oFF.XClass.create(oFF.InAQueryManagerProvider);
};
oFF.InAQueryManagerProvider.prototype.m_exportData = null;
oFF.InAQueryManagerProvider.prototype.m_importMetaData = null;
oFF.InAQueryManagerProvider.prototype.m_importer = null;
oFF.InAQueryManagerProvider.prototype.m_isVariableSubmitNeeded = false;
oFF.InAQueryManagerProvider.prototype.m_directVariableTransfer = false;
oFF.InAQueryManagerProvider.prototype.m_deserializationStructure = null;
oFF.InAQueryManagerProvider.prototype.m_inaCapabilities = null;
oFF.InAQueryManagerProvider.prototype.m_inaCapabilitiesValueHelp = null;
oFF.InAQueryManagerProvider.prototype.m_rriTargetManager = null;
oFF.InAQueryManagerProvider.prototype.m_savedStateBeforeVarScreen = null;
oFF.InAQueryManagerProvider.prototype.m_savedMetadataStateBeforeVarScreen = null;
oFF.InAQueryManagerProvider.prototype.m_lastDataRequest = null;
oFF.InAQueryManagerProvider.prototype.m_capabilities = null;
oFF.InAQueryManagerProvider.prototype.m_updateRuntimeCapabilities = false;
oFF.InAQueryManagerProvider.prototype.m_noVariableSubmitResponse = false;
oFF.InAQueryManagerProvider.prototype.m_processingImageRequest = null;
oFF.InAQueryManagerProvider.prototype.m_listOfRequestedResources = null;
oFF.InAQueryManagerProvider.prototype.m_stateManager = null;
oFF.InAQueryManagerProvider.prototype.m_indicateVariableSubmitAndRSRequestBatch = false;
oFF.InAQueryManagerProvider.prototype.m_listenerForQueryModelReady = null;
oFF.InAQueryManagerProvider.prototype.m_applyRepoState = false;
oFF.InAQueryManagerProvider.prototype.m_inaRequestStructure = null;
oFF.InAQueryManagerProvider.prototype.m_recordingQueryManagerState = false;
oFF.InAQueryManagerProvider.prototype.m_applyingQueryManagerState = false;
oFF.InAQueryManagerProvider.prototype.m_valueHelpProvider = null;
oFF.InAQueryManagerProvider.prototype.setupQueryModel = function()
{
	var queryModel = oFF.QueryManager.prototype.setupQueryModel.call( this );
	var application = this.getApplication();
	var modelCapabilities = queryModel.getModelCapabilities();
	this.m_importMetaData = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
	this.m_exportData = oFF.QInAExportFactory.createForData(application, modelCapabilities);
	return queryModel;
};
oFF.InAQueryManagerProvider.prototype.isServiceConfigMatching = function(serviceConfig, connection, messages)
{
	var ok;
	var serverMetadata;
	if (connection.getSession().hasFeature(oFF.FeatureToggleOlap.SERVER_METADATA_VIA_SYSTEM_CONNECT))
	{
		serverMetadata = connection.getSystemConnect().getServerMetadata();
	}
	else
	{
		serverMetadata = connection.getServerMetadata();
	}
	if (oFF.isNull(serverMetadata))
	{
		messages.addErrorExt(oFF.OriginLayer.DRIVER, oFF.ErrorCodes.SERVER_METADATA_NOT_FOUND, "Server metadata not available", null);
		ok = false;
	}
	else
	{
		var initSettings = serviceConfig;
		var capabilities = oFF.InACapabilitiesProvider.create(connection.getSession(), serverMetadata, initSettings.getProviderType(), null);
		ok = capabilities.getServerMainCapabilities() !== null;
	}
	return ok;
};
oFF.InAQueryManagerProvider.prototype.newObject = function()
{
	return new oFF.InAQueryManagerProvider();
};
oFF.InAQueryManagerProvider.prototype.updateQueryManager = function(masterQueryManager, neededDimensions)
{
	var thisQueryModel = this.getQueryModelBase();
	var masterQueryModel = masterQueryManager.getQueryModel();
	var neededDimensionsWithoutDuplicates = oFF.XHashSetOfString.create();
	neededDimensionsWithoutDuplicates.addAll(neededDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByLeveledHierarchies(masterQueryModel, neededDimensionsWithoutDuplicates);
	var updatedListOfDimensions = neededDimensionsWithoutDuplicates.getValuesAsReadOnlyListOfString();
	this.getDimensionsRequestedFromClient().addAll(neededDimensions);
	this.getDimensionsToClone().addAll(updatedListOfDimensions);
	var dimensionManagerBase = thisQueryModel.getDimensionManagerBase();
	for (var i = 0; i < updatedListOfDimensions.size(); i++)
	{
		var updatedDimensionName = updatedListOfDimensions.get(i);
		if (thisQueryModel.getDimensionByName(updatedDimensionName) === null)
		{
			var originalDimension = masterQueryModel.getDimensionByName(updatedDimensionName);
			if (oFF.notNull(originalDimension))
			{
				var cloneDim = originalDimension.cloneOlapComponent(thisQueryModel, dimensionManagerBase);
				thisQueryModel.addDimension(cloneDim);
				var defaultAxis = thisQueryModel.getAxis(cloneDim.getDefaultAxisType());
				defaultAxis.add(cloneDim);
				dimensionManagerBase.finalizeDimensionMetadataSetup(cloneDim);
			}
		}
	}
	this.getQueryServiceConfig().setRequiredDimensions(oFF.XListOfString.createFromReadOnlyList(this.getDimensionsToClone().getValuesAsReadOnlyListOfString()));
};
oFF.InAQueryManagerProvider.prototype.cloneQueryManagerUsingExtDataSource = function(cloneMode, dataSource)
{
	if (cloneMode !== oFF.QueryCloneMode.MICRO_CUBE)
	{
		throw oFF.XException.createIllegalStateException("Cloning query manager using external datasource is supported for MicroCube use only.");
	}
	oFF.XObjectExt.assertNotNullExt(dataSource, "External datasource can't be null.");
	this.assertLifeCycleActive();
	var qMgrProvider = new oFF.InAQueryManagerProvider();
	qMgrProvider.setupClone(this, cloneMode, dataSource);
	return qMgrProvider;
};
oFF.InAQueryManagerProvider.prototype.setupDesignTimeMode = function()
{
	this.m_importMetaData = oFF.QInAImportFactory.createForMetadata(this.getApplication(), this.getModelCapabilities());
	this.setupQueryModel();
	var queryModel = this.getQueryModel();
	oFF.QInAMdDataSource.importMd(this.m_importMetaData, this.m_inaRequestStructure, queryModel, queryModel);
	var dataSource = queryModel.getDataSource();
	if (this.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		var blendingDefinition = this.getQueryServiceConfig().getBlendingDefinition();
		dataSource.setBlendingDefinition(blendingDefinition);
	}
	var cloneDs = dataSource.clone();
	this.setDataSource(cloneDs);
	this.getSettingsBase().setDataRequest(null);
	if (oFF.notNull(this.m_inaRequestStructure) && this.m_inaRequestStructure.containsKey("ListReporting"))
	{
		this.getSettingsBase().setProviderType(oFF.ProviderType.LIST_REPORTING);
	}
	this.activateExperimentalFeatures();
};
oFF.InAQueryManagerProvider.prototype.setupValues = function()
{
	oFF.QueryManager.prototype.setupValues.call( this );
	this.prepareExperimentalCapabilities();
	var initSettings = this.getInitSettings();
	var runtimeRawQuery = this.getMode() === oFF.QueryManagerMode.RAW_QUERY && initSettings.getDataRequest() !== null;
	this.m_updateRuntimeCapabilities = true;
	if (!runtimeRawQuery)
	{
		this.m_isVariableSubmitNeeded = true;
	}
	var dataSource = this.getDataSource();
	if (oFF.notNull(dataSource) && dataSource.getType() === oFF.MetaObjectType.CATALOG_VIEW_2 && !this.getCapabilitiesBase().supportsCatalogServiceV2())
	{
		dataSource.setType(oFF.MetaObjectType.CATALOG_VIEW);
	}
	this.setDirectVariableTransferEnabled(true);
	var definitionType = initSettings.getDefinitionType();
	if (oFF.notNull(definitionType) && definitionType !== oFF.QModelFormat.UQM)
	{
		this.m_importer = oFF.QInAImportFactory.create(this.getApplication(), definitionType, null);
		this.m_deserializationStructure = initSettings.getDefinitionAsStructure();
		if (oFF.notNull(this.m_deserializationStructure))
		{
			this.m_inaCapabilities.importDeserializationDocumentCapabilities(this.m_deserializationStructure);
			if (this.isDataSourceInitial() && this.getMode().isTypeOf(oFF.QueryManagerMode.DEFAULT))
			{
				this.setDataSource(this.m_importer.importDataSource(this.m_deserializationStructure));
			}
		}
	}
	if (!runtimeRawQuery)
	{
		this.setupQueryModel();
	}
	this.m_listOfRequestedResources = oFF.XListOfString.create();
	this.resetMaxResultRecords();
	this.m_stateManager = oFF.QueryModelStateManager.create(this);
};
oFF.InAQueryManagerProvider.prototype.prepareExperimentalCapabilities = function()
{
	var serverMetadata;
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.SERVER_METADATA_VIA_SYSTEM_CONNECT))
	{
		serverMetadata = this.getConnection().getSystemConnect().getServerMetadata();
	}
	else
	{
		serverMetadata = this.getConnection().getServerMetadata();
	}
	var providerType = this.getInitSettings().getProviderType();
	var session = this.getSession();
	this.m_inaCapabilities = oFF.InACapabilitiesProvider.create(session, serverMetadata, providerType, null);
	var associatedValueHelp = providerType.getAssociatedValueHelp();
	this.m_inaCapabilitiesValueHelp = oFF.InACapabilitiesProvider.create(session, serverMetadata, associatedValueHelp, null);
	var featureToggles = session.getFeatureToggles();
	if (this.isShallow())
	{
		featureToggles = this.extractFeatureTogglesFromRequest();
	}
	this.m_inaCapabilities.activateDevCapabilities(featureToggles.getKeysAsReadOnlyListOfString());
};
oFF.InAQueryManagerProvider.prototype.extractFeatureTogglesFromRequest = function()
{
	var capabilitiesToActivate = oFF.XSetOfNameObject.create();
	var inaDataRequestSuppliedFromClient = this.getQueryServiceConfig().getDataRequest();
	var inaContext = oFF.InARuntimeUtils.getRequestContext(inaDataRequestSuppliedFromClient);
	if (oFF.isNull(inaContext))
	{
		var batch = inaDataRequestSuppliedFromClient.getListByKey(oFF.ConnectionConstants.INA_BATCH);
		if (oFF.notNull(batch))
		{
			inaContext = batch.getStructureAt(batch.size() - 1).getStructureByKey("Analytics");
		}
	}
	if (oFF.isNull(inaContext))
	{
		return capabilitiesToActivate;
	}
	var inaCapabilities = inaContext.getListByKey("Capabilities");
	if (oFF.isNull(inaCapabilities))
	{
		return capabilitiesToActivate;
	}
	var activeMainCapabilities = this.getMainCapabilities();
	var numberOfCapabilitiesInInARequest = inaCapabilities.size();
	for (var i = 0; i < numberOfCapabilitiesInInARequest; i++)
	{
		var capability = inaCapabilities.get(i);
		if (!activeMainCapabilities.containsKey(capability.getString()))
		{
			var inactiveCapability = oFF.FeatureToggleOlap.lookup(capability.getString());
			if (oFF.notNull(inactiveCapability))
			{
				capabilitiesToActivate.add(inactiveCapability);
			}
		}
	}
	return capabilitiesToActivate;
};
oFF.InAQueryManagerProvider.prototype.releaseObject = function()
{
	this.m_importMetaData = oFF.XObjectExt.release(this.m_importMetaData);
	this.m_importer = oFF.XObjectExt.release(this.m_importer);
	this.m_exportData = oFF.XObjectExt.release(this.m_exportData);
	this.m_capabilities = oFF.XObjectExt.release(this.m_capabilities);
	this.m_lastDataRequest = oFF.XObjectExt.release(this.m_lastDataRequest);
	this.m_inaCapabilitiesValueHelp = oFF.XObjectExt.release(this.m_inaCapabilitiesValueHelp);
	this.m_rriTargetManager = oFF.XObjectExt.release(this.m_rriTargetManager);
	this.m_deserializationStructure = null;
	this.m_savedStateBeforeVarScreen = null;
	this.m_savedMetadataStateBeforeVarScreen = null;
	var environment = this.getOlapEnv();
	if (oFF.XCollectionUtils.hasElements(this.m_listOfRequestedResources))
	{
		for (var i = 0; i < this.m_listOfRequestedResources.size(); i++)
		{
			environment.releaseResource(this.m_listOfRequestedResources.get(i));
		}
	}
	this.m_listOfRequestedResources = oFF.XObjectExt.release(this.m_listOfRequestedResources);
	if (oFF.notNull(this.m_valueHelpProvider))
	{
		this.m_valueHelpProvider = oFF.XObject.castFromNative(this.m_valueHelpProvider);
	}
	oFF.QueryManager.prototype.releaseObject.call( this );
	this.m_inaCapabilities = null;
	this.m_stateManager = oFF.XObjectExt.release(this.m_stateManager);
	this.m_listenerForQueryModelReady = null;
	this.m_inaRequestStructure = oFF.XObjectExt.release(this.m_inaRequestStructure);
};
oFF.InAQueryManagerProvider.prototype.createFunction = function()
{
	var systemDescription = this.getSystemDescription();
	oFF.XObjectExt.assertNotNullExt(systemDescription, "System description is null");
	var fastPathCap = this.getMainCapabilities().getByKey(oFF.InACapabilities.C032_FAST_PATH);
	var path;
	if (oFF.notNull(fastPathCap) && fastPathCap.getValue() !== null)
	{
		path = fastPathCap.getValue();
	}
	else
	{
		path = systemDescription.getSystemType().getInAPath();
	}
	var connection = this.getConnection();
	if (oFF.isNull(connection))
	{
		var connectionPool = this.getApplication().getConnectionPool();
		connection = connectionPool.getOpenConnection(systemDescription.getSystemName());
	}
	var ocpFunction = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getResourcePath()))
	{
		ocpFunction = connection.newRpcFunctionForBLOB(this.getResourcePath());
		ocpFunction.getRpcRequest().setMethod(oFF.HttpRequestMethod.HTTP_GET);
		return ocpFunction;
	}
	if (connection.isBatchModeEnabled() && this.getActiveResultSetContainer().isRemotePreQuery() && this.getPreQueryName() === null && !oFF.XCollectionUtils.hasElements(this.getQueryModel().getPreQueries()))
	{
		ocpFunction = connection.newRpcFunctionForRemotePreQuery(path);
	}
	else if (this.m_indicateVariableSubmitAndRSRequestBatch)
	{
		ocpFunction = connection.newRpcFunction(connection.getBatchModePath());
	}
	else
	{
		ocpFunction = connection.newRpcFunction(path);
	}
	var request = ocpFunction.getRpcRequest();
	request.setMethod(oFF.HttpRequestMethod.HTTP_POST);
	ocpFunction.getProcessingHint().putBoolean(oFF.ConnectionParameters.CACHE_HINTS_ENABLED, this.getQueryManager().isCacheHintEnabled());
	return ocpFunction;
};
oFF.InAQueryManagerProvider.prototype.processProviderShutdown = function(syncType, listener, customIdentifier)
{
	return oFF.InAQMgrShutdownAction.createAndRun(syncType, listener, customIdentifier, this);
};
oFF.InAQueryManagerProvider.prototype.processProviderCancelThreads = function(syncType, listener, customIdentifier)
{
	if (this.getCapabilitiesBase().supportsCancelRunningQueries())
	{
		return oFF.InAQMgrCancelThreadsAction.createAndRun(syncType, listener, customIdentifier, this);
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.processProviderClearCache = function(syncType, listener, customIdentifier, timestamp)
{
	if (this.getCapabilitiesBase().supportsProviderClearCache())
	{
		return oFF.InAQMgrClearCacheAction.createAndRun(syncType, listener, customIdentifier, this, timestamp);
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.processInitialization = function(syncType, listener, customIdentifier)
{
	this.setupValues();
	var runningAction = oFF.InAQMgrStartupAction.createServiceInitAndRun(syncType, listener, customIdentifier, this, this);
	this.setupRuntimeQuery();
	return runningAction;
};
oFF.InAQueryManagerProvider.prototype.setupRuntimeQuery = function()
{
	if (this.isForRendering())
	{
		var definitionStructure = this.getInitSettings().getDefinitionAsStructure();
		this.applyStateOnQueryManager(definitionStructure);
	}
};
oFF.InAQueryManagerProvider.prototype.isForRendering = function()
{
	var initSettings = this.getInitSettings();
	return initSettings.getMode() === oFF.QueryManagerMode.RAW_QUERY && initSettings.getDefinitionType() === oFF.QModelFormat.INA_CLONE_RENDERING;
};
oFF.InAQueryManagerProvider.prototype.processModelInitialization = function(syncType, listener, customIdentifier)
{
	if (this.getMode() === oFF.QueryManagerMode.RAW_QUERY)
	{
		this.setMode(oFF.QueryManagerMode.DEFAULT);
	}
	this.getNewResultsetContainer();
	return oFF.InAQMgrStartupAction.createMetadataInitAndRun(syncType, listener, customIdentifier, this, this);
};
oFF.InAQueryManagerProvider.prototype.processModelInitializationAndApplyRepoState = function(syncType, listener, customIdentifier, repoState)
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FUSION_SERVICE))
	{
		throw oFF.XException.createRuntimeException("This call is incompatible with fusion. Create a new query service config instead");
	}
	this.m_listenerForQueryModelReady = listener;
	this.m_applyRepoState = true;
	if (this.isShallow())
	{
		this.m_importer.mode = oFF.QModelFormat.INA_REPOSITORY;
		var jsonParser = oFF.JsonParserFactory.newInstance();
		this.m_deserializationStructure = jsonParser.parse(repoState);
		if (jsonParser.hasErrors())
		{
			throw oFF.XException.createRuntimeException("Error parsing the Repository state of the QueryModel");
		}
		oFF.XObjectExt.release(jsonParser);
		var inADataSource = this.extractInADataSource();
		if (oFF.notNull(inADataSource))
		{
			if (oFF.XString.isEqual(oFF.QueryManagerMode.BLENDING.getName(), inADataSource.getStringByKey("Type")))
			{
				this.considerBlendingFlow(inADataSource);
			}
		}
		var modelInitialization = this.processModelInitialization(syncType, this, customIdentifier);
		return modelInitialization;
	}
	var deserializeExt = this.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, repoState);
	var extResult = oFF.ExtResult.create(this, deserializeExt);
	if (oFF.notNull(this.m_listenerForQueryModelReady))
	{
		this.m_listenerForQueryModelReady.onQueryModelInitialized(extResult, this, customIdentifier);
	}
	return oFF.SyncActionExtRes.createSyncAction(this, extResult);
};
oFF.InAQueryManagerProvider.prototype.extractInADataSource = function()
{
	var dataRequest = this.getDataRequest();
	if (oFF.isNull(dataRequest))
	{
		dataRequest = this.getQueryServiceConfig().getDataRequest();
	}
	var batch = dataRequest.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (oFF.isNull(batch))
	{
		this.m_inaRequestStructure = dataRequest;
	}
	else
	{
		this.m_inaRequestStructure = batch.getStructureAt(batch.size() - 1);
	}
	var inaContext = oFF.InARuntimeUtils.getRequestContext(this.m_inaRequestStructure);
	if (oFF.isNull(inaContext))
	{
		inaContext = this.m_inaRequestStructure.getStructureByKey("Definition");
	}
	return inaContext.getStructureByKey("DataSource");
};
oFF.InAQueryManagerProvider.prototype.considerBlendingFlow = function(inADataSource)
{
	this.setMode(oFF.QueryManagerMode.BLENDING);
	var blendingDefinition = oFF.QFactory.createBlendingDefinition();
	this.getQueryServiceConfig().setBlendingDefinition(blendingDefinition);
	var sources = inADataSource.getListByKey("Sources");
	if (oFF.notNull(sources))
	{
		var numberOfSources = sources.size();
		for (var i = 0; i < numberOfSources; i++)
		{
			var sourceStructureFromInADataRequest = sources.getStructureAt(i);
			var alias = sourceStructureFromInADataRequest.getStringByKey("AliasName");
			var sourceCustomIdentifier = oFF.XStringValue.create(alias);
			var definitionInADataRequest = sourceStructureFromInADataRequest.getStructureByKey("DefiningContext");
			var queryServiceConfigRepo = oFF.QueryServiceConfig.createWithDataRequest(this.getApplication(), this.getSystemName(), definitionInADataRequest);
			var processQueryManagerCreationRepo = queryServiceConfigRepo.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
			var sourceQueryManager = processQueryManagerCreationRepo.getData();
			var repoStateAsString = null;
			if (oFF.notNull(this.m_deserializationStructure))
			{
				var dataSourceFromRepo = this.m_deserializationStructure.getStructureByKey("DataSource");
				if (oFF.isNull(dataSourceFromRepo))
				{
					dataSourceFromRepo = this.m_deserializationStructure.getStructureByKey("Definition").getStructureByKey("DataSource");
				}
				var repoSourceStructure = dataSourceFromRepo.getListByKey("Sources").getStructureAt(i);
				var repoStateForSource = repoSourceStructure.getStructureByKey("DefiningContext");
				repoStateAsString = oFF.PrUtils.serialize(repoStateForSource, true, false, 0);
			}
			sourceQueryManager.processModelInitializationAndApplyRepoState(oFF.SyncType.BLOCKING, null, sourceCustomIdentifier, repoStateAsString);
			var sourceQueryModelForBlendingDefinition = sourceQueryManager.getQueryModel();
			blendingDefinition.addNewSource(sourceQueryModelForBlendingDefinition, alias);
		}
	}
	var mappings = inADataSource.getListByKey("Mappings");
	if (oFF.notNull(mappings))
	{
		var numberOfMappings = mappings.size();
		for (var mappingIndex = 0; mappingIndex < numberOfMappings; mappingIndex++)
		{
			var elementInMappings = mappings.getStructureAt(mappingIndex);
			var linkType = oFF.BlendingLinkType.lookup(elementInMappings.getStringByKey("LinkType"));
			var dimensionName = elementInMappings.getStringByKey("DimensionName");
			var customDimensionMapping = blendingDefinition.addNewDimensionMapping(linkType, dimensionName);
			var mappingList = elementInMappings.getListByKey("Mapping");
			for (var j = 0; j < mappingList.size(); j++)
			{
				var elementInMapping = mappingList.getStructureAt(j);
				var qmAliasName = elementInMapping.getStringByKey("AliasName");
				var queryModelDimensionName = elementInMapping.getStructureByKey("MappingDefinition").getStructureByKey("Member").getStringByKey("Name");
				var blendingSource = blendingDefinition.getSources().get(j);
				customDimensionMapping.addNewDimensionMappingDefinition(blendingSource.getQueryModel().getDimensionByName(queryModelDimensionName), qmAliasName);
			}
		}
	}
};
oFF.InAQueryManagerProvider.prototype.onQueryModelInitialized = function(extResult, queryManager, customIdentifier)
{
	if (!extResult.hasErrors())
	{
		if (this.m_applyRepoState)
		{
			this.applyRSFeatureRequest();
		}
		if (oFF.notNull(this.m_listenerForQueryModelReady))
		{
			this.m_listenerForQueryModelReady.onQueryModelInitialized(extResult, this, customIdentifier);
		}
	}
};
oFF.InAQueryManagerProvider.prototype.applyRSFeatureRequest = function()
{
	var context = oFF.InARuntimeUtils.getRequestContext(this.m_inaRequestStructure);
	var definition = null;
	if (oFF.isNull(context))
	{
		definition = this.m_inaRequestStructure.getStructureByKey("Definition");
	}
	else
	{
		definition = context.getStructureByKey("Definition");
	}
	this.importRSFeatureRequest(definition);
};
oFF.InAQueryManagerProvider.prototype.activateExperimentalFeatures = function()
{
	if (oFF.notNull(this.m_deserializationStructure))
	{
		var experimentalFeatureToggles = this.m_deserializationStructure.getStringByKey("ExperimentalFeatures");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(experimentalFeatureToggles))
		{
			var experimentalFeatureToggleList = oFF.XStringTokenizer.splitString(experimentalFeatureToggles, ",");
			this.m_inaCapabilities.activateDevCapabilities(experimentalFeatureToggleList);
		}
	}
};
oFF.InAQueryManagerProvider.prototype.loadQueryModel = function(syncType, listener, customIdentifier)
{
	if (this.isShallow())
	{
		return this.processModelInitialization(syncType, listener, customIdentifier);
	}
	if (oFF.notNull(listener))
	{
		listener.onQueryModelInitialized(this.getQueryServiceConfig(), this, customIdentifier);
	}
	return this.getQueryServiceConfig();
};
oFF.InAQueryManagerProvider.prototype.getDataAreas = function()
{
	var systemType = this.getSystemType();
	if (!systemType.isTypeOf(oFF.SystemType.BW))
	{
		return null;
	}
	var queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	var dataAreaState = oFF.PlanningStateHandler.getDataAreaStateByName(this.getApplication(), this.getSystemName(), queryModel.getDataArea());
	if (oFF.isNull(dataAreaState))
	{
		return null;
	}
	if (dataAreaState.isSubmitted())
	{
		return null;
	}
	var list = oFF.PrFactory.createList();
	list.add(dataAreaState.serializeToJson());
	return list;
};
oFF.InAQueryManagerProvider.prototype.exportDataEntryDescription = function(planningExtension)
{
	var resultSetContainer = this.getActiveResultSetContainer();
	if (oFF.isNull(resultSetContainer))
	{
		return;
	}
	if (!resultSetContainer.hasDataEntryCollection())
	{
		return;
	}
	var dataEntryCollection = resultSetContainer.getDataEntryCollection();
	if (!dataEntryCollection.hasChangedDataEntries())
	{
		return;
	}
	var dataCellEntryDescription = dataEntryCollection.getDataCellEntryDescription();
	if (oFF.XStringUtils.isNullOrEmpty(dataCellEntryDescription))
	{
		return;
	}
	planningExtension.putString("ActionDescription", dataCellEntryDescription);
};
oFF.InAQueryManagerProvider.prototype.createCustomHierarchyProvider = function(customHierarchyDefinition, enforceRequest)
{
	return oFF.InACustomHierarchyProvider.create(this, customHierarchyDefinition, enforceRequest);
};
oFF.InAQueryManagerProvider.prototype.createResultSetProvider = function(procedure, structure, rsDefQueryModel)
{
	oFF.XBooleanUtils.checkTrue(this.getCapabilitiesBase().supportsEncodedResultset(), "Only encoded resultset is supported");
	return oFF.InARsEnProvider.create(this, procedure, structure, oFF.QContextType.RESULT_SET);
};
oFF.InAQueryManagerProvider.prototype.setInnerStructure = function(requestStructure, name, processingDirective)
{
	var dataAreas = this.getDataAreas();
	if (oFF.notNull(dataAreas))
	{
		requestStructure.put("DataAreas", dataAreas);
	}
	oFF.QInAOptions.fillOptions(requestStructure, this.getCapabilitiesBase(), this.getSession(), this.getInitSettings());
	var innerRequestStructure = requestStructure.putNewStructure(name);
	var dataSourceRequestStructure;
	var queryModel = this.getQueryModel();
	var exportActiveMainCapabilities = this.m_recordingQueryManagerState ? null : this.m_inaCapabilities.exportActiveCapabilitiesAsList();
	if (oFF.XString.isEqual("Metadata", name))
	{
		oFF.QInAMdDataSource.exportMd(this.m_exportData, innerRequestStructure, queryModel);
		innerRequestStructure.put("Expand", oFF.QInAExpand.createExpandMetadata(this));
	}
	else
	{
		if (oFF.notNull(queryModel) && queryModel.hasExplainQueryContext())
		{
			var inaExplainQueryContext = innerRequestStructure.putNewStructure("ExplainQueryContext");
			var explainQueryContext = queryModel.getExplainQueryContext();
			inaExplainQueryContext.putInteger("Row", explainQueryContext.getRowIndex());
			inaExplainQueryContext.putInteger("Column", explainQueryContext.getColumnIndex());
		}
		oFF.QInAOptions.setRequestTimeZone(requestStructure, this);
		if (this.isPersistedPreQuery())
		{
			var localSystemDescription = this.getConnection().getSystemDescription();
			oFF.QInADataSourceBlending.updateRemoteDataSource(innerRequestStructure, this, true, localSystemDescription);
			oFF.XCollectionUtils.removeIf(exportActiveMainCapabilities,  function(element){
				return oFF.XString.isEqual(element.asString().getString(), oFF.InACapabilities.C121_RETURN_ERROR_FOR_INVALID_QUERYMODEL);
			}.bind(this));
		}
		else if (!this.m_recordingQueryManagerState)
		{
			var inaDatasource = this.m_exportData.exportDataSource(queryModel.getDataSource(), this.getCapabilitiesBase().supportsRunAsUser());
			if (this.getProviderType() === oFF.ProviderType.PLANNING_VALUE_HELP)
			{
				dataSourceRequestStructure = innerRequestStructure.putNewStructure("Command");
			}
			else
			{
				dataSourceRequestStructure = innerRequestStructure;
			}
			dataSourceRequestStructure.put("DataSource", inaDatasource);
		}
		if (processingDirective === oFF.ProcessingStep.VARIABLE_SUBMIT)
		{
			innerRequestStructure.putIfNotNull("Expand", oFF.QInAExpand.createExpandSubmit(this, this.m_noVariableSubmitResponse));
		}
	}
	if (oFF.notNull(exportActiveMainCapabilities))
	{
		innerRequestStructure.put("Capabilities", exportActiveMainCapabilities);
	}
	oFF.QInAOptions.setLanguage(innerRequestStructure, this);
	return innerRequestStructure;
};
oFF.InAQueryManagerProvider.prototype.isPersistedPreQuery = function()
{
	return this.getPreQueryName() !== null && this.getResultSetPersistenceIdentifier() !== null;
};
oFF.InAQueryManagerProvider.prototype.processRriTargetSync = function(syncType, identifier)
{
	return oFF.InAQRriTargetsSyncAction.createAndRun(syncType, this, identifier);
};
oFF.InAQueryManagerProvider.prototype.getDeserializationStructure = function()
{
	return this.m_deserializationStructure;
};
oFF.InAQueryManagerProvider.prototype.setDeserializationStructureAsNull = function()
{
	this.m_deserializationStructure = null;
};
oFF.InAQueryManagerProvider.prototype.getDeserializationImporter = function()
{
	return this.m_importer;
};
oFF.InAQueryManagerProvider.prototype.getValueHelpProvider = function()
{
	if (oFF.isNull(this.m_valueHelpProvider))
	{
		this.m_valueHelpProvider = oFF.InAQueryValueHelpProvider.create(this);
	}
	return this.m_valueHelpProvider;
};
oFF.InAQueryManagerProvider.prototype.setValueHelpProvider = function(valueHelpProvider)
{
	this.m_valueHelpProvider = valueHelpProvider;
};
oFF.InAQueryManagerProvider.prototype.getInaCapabilities = function()
{
	return this.m_inaCapabilities;
};
oFF.InAQueryManagerProvider.prototype.getProviderTypeProx = function()
{
	return this.getInitSettings().getProviderType();
};
oFF.InAQueryManagerProvider.prototype.getResultSetProviderFactory = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.importVariables = oFF.noSupport;
oFF.InAQueryManagerProvider.prototype.exportVariables = function(variablesContext, parentStructure)
{
	this.m_exportData.exportVariables(variablesContext, parentStructure);
};
oFF.InAQueryManagerProvider.prototype.assertNotDirectValueTransfer = function()
{
	if (this.isDirectVariableTransferEnabled())
	{
		throw oFF.XException.createIllegalStateException("stateful variable handling cannot be mixed with direct variable transfer");
	}
};
oFF.InAQueryManagerProvider.prototype.processRetrieveVariableRuntimeInformation = function(syncType, listener, customIdentifier)
{
	this.assertNotDirectValueTransfer();
	return oFF.InAQMgrVarAction.createAndRunGetRuntimeInfo(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processSetGetVariableValues = function(syncType, listener, customIdentifier)
{
	this.assertNotDirectValueTransfer();
	return oFF.InAQMgrVarAction.createAndRunSetGetValues(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processEmptyVariableDefinition = function(syncType, listener, customIdentifier)
{
	this.assertNotDirectValueTransfer();
	return oFF.InAQMgrVarAction.createAndRunEmptyVariableDefinition(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processVariableSubmit = function(syncType, listener, customIdentifier)
{
	if (this.isDirectVariableTransferEnabled() || !this.hasVariables() && !this.supportsAndAllowsEmptyExtendedVarDefinition())
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	return oFF.InAQMgrVarAction.createAndRunSubmit(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processReInitVariableAfterSubmit = function(syncType, listener, customIdentifier)
{
	if (this.isDirectVariableTransferEnabled() || !this.hasVariables() && !this.supportsAndAllowsEmptyExtendedVarDefinition())
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	return oFF.InAQMgrVarAction.createAndRunReInitAfterSubmit(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processVariableCancel = function(syncType, listener, customIdentifier)
{
	if (this.isDirectVariableTransferEnabled() || !this.hasVariables() && !this.supportsAndAllowsEmptyExtendedVarDefinition())
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	return oFF.InAQMgrVarAction.createAndRunCancel(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processCheckVariables = function(syncType, listener, customIdentifier)
{
	oFF.XBooleanUtils.checkTrue(this.supportsCheckVariables(), "Check variables is not supported");
	return oFF.InAQMgrVarAction.createAndRunCheck(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.transferVariables = function(syncType, listener, customIdentifier)
{
	return this.processSetGetVariableValues(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.emptyVariableDefinition = function(syncType, listener, customIdentifier)
{
	return this.processEmptyVariableDefinition(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.transferVariablesByVariable = function(variable, syncType, listener, customIdentifier)
{
	if (this.getVariables().contains(variable))
	{
		return this.processSetGetVariableValues(syncType, listener, customIdentifier);
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.getVariablesExporter = function()
{
	return this.m_exportData;
};
oFF.InAQueryManagerProvider.prototype.getVariablesImporter = function()
{
	return this.m_importMetaData;
};
oFF.InAQueryManagerProvider.prototype.isVariableValuesRuntimeNeeded = function()
{
	return this.getSystemType().isTypeOf(oFF.SystemType.BW);
};
oFF.InAQueryManagerProvider.prototype.isVariableSubmitNeeded = function()
{
	return this.m_isVariableSubmitNeeded;
};
oFF.InAQueryManagerProvider.prototype.setIsVariableSubmitNeeded = function(submit)
{
	this.m_isVariableSubmitNeeded = submit;
};
oFF.InAQueryManagerProvider.prototype.isDirectVariableTransfer = function()
{
	return this.m_directVariableTransfer;
};
oFF.InAQueryManagerProvider.prototype.setDirectVariableTransfer = function(directVariableTransfer)
{
	this.m_directVariableTransfer = directVariableTransfer;
};
oFF.InAQueryManagerProvider.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	var content;
	if (modelFormat.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		content = oFF.QueryManager.prototype.serializeToContentExt.call( this , modelFormat, capabilities);
	}
	else
	{
		var queryModel = this.getQueryModelBase();
		queryModel.generateTransientObjects();
		var drillManager = queryModel.getDrillManager();
		if (oFF.notNull(drillManager))
		{
			drillManager.checkRootNodeFetching();
		}
		var inaStructure = oFF.PrFactory.createStructure();
		var preQueries = this.getResultSetPersistenceIdentifier() !== null ? null : oFF.QueryModelUtils.getPreQueries(queryModel);
		if (oFF.XCollectionUtils.hasElements(preQueries))
		{
			var inaBatch = inaStructure.putNewList(oFF.ConnectionConstants.INA_BATCH);
			this.dealWithPreQuery(preQueries, inaBatch, modelFormat);
			if (modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA)
			{
				inaBatch.add(this.fillPersistedQueryDataRequestStructure(true));
			}
			else
			{
				inaBatch.add(this.fillDataRequestStructure(true));
			}
			queryModel.destroyTransientObjects();
		}
		else
		{
			if (queryModel.getDataSource().getType() === oFF.MetaObjectType.BLENDING)
			{
				var blendingSources = queryModel.getBlendingSources();
				var numberOfBlendingSources = blendingSources.size();
				var inaBlendingBatch = null;
				for (var i = 0; i < numberOfBlendingSources; i++)
				{
					var blendingSource = blendingSources.get(i);
					var blendingSourcePreQueries = blendingSource.getQueryModel().getPreQueries();
					if (oFF.XCollectionUtils.hasElements(blendingSourcePreQueries))
					{
						inaBlendingBatch = inaStructure.putNewList(oFF.ConnectionConstants.INA_BATCH);
						this.dealWithPreQuery(blendingSourcePreQueries, inaBlendingBatch, modelFormat);
					}
				}
				var isBlendingBatch = oFF.notNull(inaBlendingBatch);
				if (isBlendingBatch)
				{
					inaStructure.getListByKey(oFF.ConnectionConstants.INA_BATCH).add(modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA ? this.fillPersistedQueryDataRequestStructure(true) : this.fillDataRequestStructure(true));
					queryModel.destroyTransientObjects();
				}
				else
				{
					inaStructure = null;
				}
			}
			else
			{
				inaStructure = null;
			}
			if (oFF.isNull(inaStructure))
			{
				inaStructure = modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA ? this.fillPersistedQueryDataRequestStructure(true) : this.fillDataRequestStructure(true);
				queryModel.destroyTransientObjects();
			}
		}
		content = oFF.XContent.createJsonObjectContent(modelFormat, inaStructure);
	}
	return content;
};
oFF.InAQueryManagerProvider.prototype.dealWithPreQuery = function(preQueries, inaBatch, modelFormat)
{
	var numberOfPreQueries = preQueries.size();
	for (var i = 0; i < numberOfPreQueries; i++)
	{
		var nameGenericPair = preQueries.get(i);
		var preQueryName = nameGenericPair.getName();
		var preQueryModel = nameGenericPair.getObject();
		preQueryModel.generateTransientObjects();
		var internalPreQueries = preQueryModel.getPreQueries();
		if (oFF.XCollectionUtils.hasElements(internalPreQueries))
		{
			this.dealWithPreQuery(internalPreQueries, inaBatch, modelFormat);
		}
		var serializedPreQueryManager;
		if (modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA)
		{
			serializedPreQueryManager = preQueryModel.getQueryManager().fillPersistedQueryDataRequestStructure(true);
		}
		else
		{
			serializedPreQueryManager = preQueryModel.getQueryManager().fillDataRequestStructure(true);
		}
		var requestContext = oFF.InARuntimeUtils.getRequestContext(serializedPreQueryManager);
		var preQuerySystemName = preQueryModel.getSystemName();
		if (!oFF.XString.isEqual(preQuerySystemName, this.getSystemName()))
		{
			var inaDataSource = requestContext.getStructureByKey("DataSource");
			inaDataSource.putString("System", preQuerySystemName);
		}
		var definition = requestContext.getStructureByKey("Definition");
		definition.putString("Name", preQueryName);
		var rsFeatureRequest = definition.getStructureByKey("ResultSetFeatureRequest");
		rsFeatureRequest.putBoolean("ReturnEmptyJsonResultSet", true);
		inaBatch.add(serializedPreQueryManager);
		preQueryModel.destroyTransientObjects();
	}
};
oFF.InAQueryManagerProvider.prototype.fillDataRequestStructure = function(withVariables)
{
	var mode = this.getMode();
	var initSettings = this.getInitSettings();
	if (mode.isTypeOf(oFF.QueryManagerMode.DEFAULT) || mode === oFF.QueryManagerMode.BLENDING)
	{
		this.m_lastDataRequest = oFF.PrFactory.createStructure();
		var providerType = initSettings.getProviderType();
		var context = oFF.QInAConverter.lookupContextNameForProvider(providerType);
		var processingDirective = this.getProcessingDirective(providerType);
		this.fillAnalyticRequestStructure(this.m_lastDataRequest, context, withVariables, processingDirective, null);
	}
	else if (mode === oFF.QueryManagerMode.RAW_QUERY)
	{
		this.m_lastDataRequest = initSettings.getDataRequest();
		if (this.isUpdatingDataRequestCapabilities() && this.getApplication().getConnection(this.getSystemName()).supportsAnalyticCapability(oFF.InACapabilities.V266_RESULTSETV2_METADATA_EXTENSION1))
		{
			if (this.m_lastDataRequest.isProxy())
			{
				this.m_lastDataRequest = oFF.PrUtils.deepCopyElement(this.m_lastDataRequest);
			}
			oFF.InARuntimeUtils.setLanguageAndAddRuntimeCapability(this.m_lastDataRequest, this.getSystemDescription().getLanguage());
			var requestContext = oFF.InARuntimeUtils.getRequestContext(this.m_lastDataRequest);
			if (oFF.notNull(requestContext))
			{
				var definitionInA = requestContext.getStructureByKey("Definition");
				var rsFeatureRequestInA = definitionInA.getStructureByKey("ResultSetFeatureRequest");
				oFF.QInAOptions.importPaging(rsFeatureRequestInA, this);
				oFF.QInAOptions.importSuppressKeyfigureCalculation(rsFeatureRequestInA, this);
			}
		}
		else if (!this.isUpdatingDataRequestCapabilities())
		{
			var analytics2 = this.m_lastDataRequest.getStructureByKey("Analytics");
			var definition = analytics2.getStructureByKey("Definition");
			var rsFeatureRequest = definition.getStructureByKey("ResultSetFeatureRequest");
			if (oFF.isNull(rsFeatureRequest))
			{
				rsFeatureRequest = definition.putNewStructure("ResultSetFeatureRequest");
				rsFeatureRequest.putString("ResultEncoding", "None");
				rsFeatureRequest.putString("ResultFormat", "Version2");
			}
			oFF.QInAOptions.exportReturnedDataSelections(rsFeatureRequest, this);
			this.updateString(rsFeatureRequest, "ResultEncoding", "None");
			this.updateString(rsFeatureRequest, "ResultFormat", "Version2");
			oFF.QInAOptions.setLanguage(analytics2, this);
			oFF.QInAOptions.fillOptions(this.m_lastDataRequest, this.getCapabilitiesBase(), this.getSession(), this.getInitSettings());
		}
		this.enableRuntimeVariables();
		return this.m_lastDataRequest;
	}
	else
	{
		throw oFF.XException.createIllegalStateException("Unknown mode");
	}
	oFF.QInAOptions.setRequestTimeZone(this.m_lastDataRequest, this);
	return this.m_lastDataRequest;
};
oFF.InAQueryManagerProvider.prototype.fillPersistedQueryDataRequestStructure = function(withVariables)
{
	this.m_lastDataRequest = oFF.PrFactory.createStructure();
	var providerType = this.getInitSettings().getProviderType();
	var context = oFF.QInAConverter.lookupContextNameForProvider(providerType);
	var processingDirective = this.getProcessingDirective(providerType);
	this.fillPersistedQueryAnalyticRequestStructure(this.m_lastDataRequest, context, withVariables, processingDirective);
	oFF.QInAOptions.setRequestTimeZone(this.m_lastDataRequest, this);
	return this.m_lastDataRequest;
};
oFF.InAQueryManagerProvider.prototype.getProcessingDirective = function(providerType)
{
	if (providerType !== oFF.ProviderType.PLANNING && this.getVariableProcessorState() === oFF.VariableProcessorState.VALUE_HELP)
	{
		return oFF.ProcessingStep.VARIABLE_DEFINITION;
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.updateString = function(structure, name, value)
{
	if (!oFF.XString.isEqual(structure.getStringByKey(name), value))
	{
		structure.putString(name, value);
	}
};
oFF.InAQueryManagerProvider.prototype.enableRuntimeVariables = function()
{
	if (this.supportsServerState() && this.getMode() === oFF.QueryManagerMode.RAW_QUERY)
	{
		if (this.getVariableProcessorState() === oFF.VariableProcessorState.SUBMITTED)
		{
			var inaBatch = this.m_lastDataRequest.getListByKey(oFF.ConnectionConstants.INA_BATCH);
			if (oFF.notNull(inaBatch))
			{
				this.m_lastDataRequest = inaBatch.getStructureAt(1);
			}
		}
		else
		{
			this.buildBatchWithVarSubmitReq();
		}
	}
};
oFF.InAQueryManagerProvider.prototype.buildBatchWithVarSubmitReq = function()
{
	var inaAnalytics = this.m_lastDataRequest.getStructureByKey("Analytics");
	if (oFF.isNull(inaAnalytics))
	{
		return;
	}
	var inaDefinition = inaAnalytics.getStructureByKey("Definition");
	if (oFF.isNull(inaDefinition))
	{
		return;
	}
	var requestAsSubmit = oFF.PrUtils.createDeepCopy(this.m_lastDataRequest);
	var processingDirectives = requestAsSubmit.getStructureByKey("Analytics").putNewStructure("ProcessingDirectives");
	processingDirectives.putString("ProcessingStep", "VariableSubmit");
	var inaRoot = oFF.PrFactory.createStructure();
	var inaBatch = inaRoot.putNewList(oFF.ConnectionConstants.INA_BATCH);
	inaBatch.add(requestAsSubmit);
	inaBatch.add(this.m_lastDataRequest);
	this.m_lastDataRequest = inaRoot;
	this.m_indicateVariableSubmitAndRSRequestBatch = true;
};
oFF.InAQueryManagerProvider.prototype.recordingStateOfQueryManager = function()
{
	return this.m_recordingQueryManagerState;
};
oFF.InAQueryManagerProvider.prototype.applyingStateOnQueryManager = function()
{
	return this.m_applyingQueryManagerState;
};
oFF.InAQueryManagerProvider.prototype.recordStateOfQueryManager = function(requestStructure)
{
	this.m_recordingQueryManagerState = true;
	this.fillAnalyticRequestStructure(requestStructure, "Analytics", true, null, null);
	this.fillQueryConfigSettings(requestStructure);
	requestStructure.putString("Name", this.getName());
	this.m_recordingQueryManagerState = false;
};
oFF.InAQueryManagerProvider.prototype.fillQueryConfigSettings = function(requestStructure)
{
	var queryServiceConfig = this.getQueryServiceConfig();
	var queryConfigElement = queryServiceConfig.serialize();
	requestStructure.put("QueryServiceConfig", queryConfigElement);
};
oFF.InAQueryManagerProvider.prototype.applyStateOnQueryManager = function(definition)
{
	this.m_applyingQueryManagerState = true;
	var qModelFormat = oFF.QModelFormat.INA_REPOSITORY_DATA;
	if (this.isForRendering())
	{
		oFF.QueryManager.prototype.setupQueryModel.call( this );
		qModelFormat = oFF.QModelFormat.INA_CLONE_RENDERING;
	}
	var result = this.getQueryModel().deserializeFromElementExt(qModelFormat, definition);
	this.importQuerySettings(definition);
	this.m_applyingQueryManagerState = false;
	return result;
};
oFF.InAQueryManagerProvider.prototype.fillAnalyticRequestStructure = function(requestStructure, requestName, withVariables, processingDirective, variant)
{
	this.addProfileStep("fillAnalyticRequestStructure");
	var resultsetContainer = this.getResultsetContainer(false);
	var request = resultsetContainer.getRequest();
	if (resultsetContainer.getSyncState() === oFF.SyncState.OUT_OF_SYNC || oFF.isNull(request))
	{
		var exportInAData = oFF.QInAExportFactory.createForData(this.getApplication(), this.getModelCapabilities());
		this.exportToInADefinition(requestStructure, requestName, withVariables, processingDirective, exportInAData, variant);
	}
	else
	{
		requestStructure.copyFrom(request, null);
	}
};
oFF.InAQueryManagerProvider.prototype.fillPersistedQueryAnalyticRequestStructure = function(requestStructure, requestName, withVariables, processingDirective)
{
	this.addProfileStep("fillPersistedQueryAnalyticRequestStructure");
	var exportInAData = oFF.QInAExportFactory.createForPersistedQueryData(this.getApplication(), this.getModelCapabilities());
	this.exportToInADefinition(requestStructure, requestName, withVariables, processingDirective, exportInAData, null);
};
oFF.InAQueryManagerProvider.prototype.exportToInADefinition = function(requestStructure, requestName, withVariables, processingDirective, exportInAData, variant)
{
	var query = this.getQueryModelBase();
	var requestStructureName = this.checkRequestStructureName(requestName, this.hasNewValues());
	var innerRequestStructure = this.setInnerStructure(requestStructure, requestStructureName, processingDirective);
	exportInAData.variableProcessingDirective = processingDirective;
	query.setHasProcessingStep(oFF.notNull(processingDirective));
	var inaDefinition = null;
	if (this.m_recordingQueryManagerState)
	{
		inaDefinition = this.getQueryModel().serializeToElement(oFF.QModelFormat.INA_REPOSITORY_DATA);
	}
	else
	{
		inaDefinition = this.exportQueryModelForInARequest(withVariables, this.getMainCapabilities(), query, exportInAData);
	}
	if (oFF.isNull(inaDefinition))
	{
		return;
	}
	inaDefinition.putStringNotNull("Name", this.getPreQueryName());
	innerRequestStructure.put("Definition", inaDefinition);
	if (this.supportsDataEntryReadOnly())
	{
		var inputEnabled = !this.isDataEntryReadOnly();
		inaDefinition.putBoolean("InputEnabled", inputEnabled);
	}
	var planningExtensionStructure = oFF.PrFactory.createStructure();
	oFF.QInAExportUtil.setNameIfNotNull(planningExtensionStructure, "PlanningMode", this.getPlanningModeEffective());
	oFF.QInAVersion.exportPlanningVersions(planningExtensionStructure, this);
	this.exportDataEntryDescription(planningExtensionStructure);
	oFF.QInANewValues.exportNewValues(inaDefinition, planningExtensionStructure, this);
	oFF.QInANewLines.exportNewLines(inaDefinition, this);
	if (planningExtensionStructure.hasElements())
	{
		inaDefinition.put("PlanningExtensions", planningExtensionStructure);
	}
	this.addAllMessages(exportInAData);
	this.endProfileStep();
	if (this.isPersistedPreQuery())
	{
		inaDefinition.put("ResultSetFeatureRequest", oFF.QInADataSourceBlending.exportResultSetFeatures(query, false));
	}
	else
	{
		var inaOptions = oFF.QInAOptions.exportOptions(this);
		oFF.QInAOptions.exportReturnedDataSelections(inaOptions, this);
		inaDefinition.put("ResultSetFeatureRequest", inaOptions);
	}
	if (oFF.notNull(processingDirective))
	{
		var inaContext = requestStructure.getStructureByKey(requestStructureName);
		var inaProcessingDirective = inaContext.putNewStructure("ProcessingDirectives");
		inaProcessingDirective.putString("ProcessingStep", processingDirective.getName());
		if (oFF.notNull(variant))
		{
			if (processingDirective === oFF.ProcessingStep.VARIABLE_DEFINITION || processingDirective === oFF.ProcessingStep.VARIANT_DELETE || processingDirective === oFF.ProcessingStep.VARIANT_SAVE)
			{
				oFF.QInAVariableVariants.exportVariableVariant(inaDefinition, variant);
			}
		}
	}
	oFF.QInAOptions.exportOptimizerHints(inaDefinition, query);
	oFF.QInAClientInfo.exportClientInfo(requestStructure, this.getQueryModel(), this.getModelCapabilities().supportsClientInfo());
};
oFF.InAQueryManagerProvider.prototype.exportQueryModelForInARequest = function(withVariables, activeMainCapabilities, query, exportInAData)
{
	var spatialClusterSettings = query.getSpatialClusterSettings();
	if (oFF.notNull(spatialClusterSettings) && spatialClusterSettings.isActive())
	{
		var inaClusteringRequest = oFF.QInASpatialClustering.exportSpatialClusteringRequest(this.m_exportData, spatialClusterSettings);
		var inaClusteringAnalytics = inaClusteringRequest.getStructureByKey("Analytics");
		return inaClusteringAnalytics.getStructureByKey("Definition");
	}
	var hasDataSourceAtService = activeMainCapabilities.containsKey(oFF.InACapabilities.C001_DATASOURCE_AT_SERVICE);
	var lovConfig = this.getActiveResultSetContainerBase().getLovConfig();
	if (oFF.notNull(lovConfig))
	{
		return exportInAData.exportLovRequest(query, withVariables, !hasDataSourceAtService, lovConfig);
	}
	return exportInAData.exportQueryModel(query, withVariables, !hasDataSourceAtService);
};
oFF.InAQueryManagerProvider.prototype.getPlanningModeEffective = function()
{
	if (!this.isDataEntryEnabled())
	{
		return null;
	}
	var currentSystemtype = this.getSystemType();
	if (!currentSystemtype.isTypeOf(oFF.SystemType.HANA))
	{
		return null;
	}
	var planningMode = this.getPlanningMode();
	if (planningMode === oFF.PlanningMode.SERVER_DEFAULT)
	{
		return null;
	}
	if (oFF.isNull(planningMode))
	{
		return oFF.PlanningMode.DISABLE_PLANNING;
	}
	return planningMode;
};
oFF.InAQueryManagerProvider.prototype.checkRequestStructureName = function(requestName, newValues)
{
	if (!oFF.XString.isEqual("Analytics", requestName))
	{
		return requestName;
	}
	var systemType = this.getSystemType();
	if (oFF.isNull(systemType) || !systemType.isTypeOf(oFF.SystemType.BW))
	{
		return requestName;
	}
	if (newValues)
	{
		return "Planning";
	}
	return requestName;
};
oFF.InAQueryManagerProvider.prototype.getMainCapabilities = function()
{
	return this.m_inaCapabilities.getActiveCapabilities();
};
oFF.InAQueryManagerProvider.prototype.getRriTargetManager = function()
{
	if (oFF.isNull(this.m_rriTargetManager) && this.getModelCapabilities().supportsReportReportInterface())
	{
		this.m_rriTargetManager = oFF.QRriTargetManager.create(this);
	}
	return this.m_rriTargetManager;
};
oFF.InAQueryManagerProvider.prototype.getStateBeforeVarScreen = function()
{
	return this.m_savedStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.setStateBeforeVarScreen = function(savedStateBeforeVarScreen)
{
	this.m_savedStateBeforeVarScreen = savedStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.getMetadataStateBeforeVarScreen = function()
{
	return this.m_savedMetadataStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.setMetadataStateBeforeVarScreen = function(savedMetadataStateBeforeVarScreen)
{
	this.m_savedMetadataStateBeforeVarScreen = savedMetadataStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.applyValueHelpCapabilities = function()
{
	if (oFF.notNull(this.m_inaCapabilitiesValueHelp))
	{
		this.m_inaCapabilities = this.m_inaCapabilitiesValueHelp;
		this.m_inaCapabilitiesValueHelp = null;
		var importer = oFF.QInAImportFactory.createForMetadataCore(this.getApplication(), this.getModelCapabilities());
		var queryModelBase = this.getQueryModelBase();
		importer.importBasicQueryModelCapabilities(queryModelBase);
	}
};
oFF.InAQueryManagerProvider.prototype.getDataRequest = function()
{
	if (oFF.isNull(this.m_lastDataRequest) && this.getMode() !== oFF.QueryManagerMode.RAW_QUERY)
	{
		this.fillDataRequestStructure(true);
	}
	return this.m_lastDataRequest;
};
oFF.InAQueryManagerProvider.prototype.setActiveResultSetContainer = function(activeResultSetContainer)
{
	if (this.getActiveResultSetContainer() !== activeResultSetContainer)
	{
		this.m_lastDataRequest = null;
		if (oFF.notNull(activeResultSetContainer))
		{
			oFF.XObjectExt.release(activeResultSetContainer.getRequest());
		}
	}
	oFF.QueryManager.prototype.setActiveResultSetContainer.call( this , activeResultSetContainer);
};
oFF.InAQueryManagerProvider.prototype.getDataRequestAsString = function()
{
	var dataRequest = this.getDataRequest();
	return oFF.isNull(dataRequest) ? null : dataRequest.toString();
};
oFF.InAQueryManagerProvider.prototype.getCapabilitiesBase = function()
{
	if (oFF.isNull(this.m_capabilities))
	{
		this.m_capabilities = this.m_inaCapabilities.getQueryCapabilities();
	}
	return this.m_capabilities;
};
oFF.InAQueryManagerProvider.prototype.getVariableVariantsInternal = function()
{
	var systemContainer = this.getOlapEnv().getSystemContainer(this.getSystemName());
	return systemContainer.getVariantsByDatasource(this.getDataSource().getFullQualifiedName());
};
oFF.InAQueryManagerProvider.prototype.getVariableVariants = function()
{
	return this.getVariableVariantsInternal();
};
oFF.InAQueryManagerProvider.prototype.processActivateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVarAction.createAndRunVariantActivation(this, variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processDeleteVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVarAction.createAndRunVariantDeletion(this, variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processUpdateVariableVariantValues = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVarAction.createAndRunVariantUpdate(this, variableVariant, false, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processSaveVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVariantModifyAction.createAndRunModification(this, variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.addVariableVariant = function(variant)
{
	var variants = this.getVariableVariantsInternal();
	var variantName = variant.getName();
	if (variants.containsKey(variantName))
	{
		variants.removeElement(variants.getByKey(variantName));
	}
	variants.add(variant);
};
oFF.InAQueryManagerProvider.prototype.removeVariableVariant = function(variant)
{
	this.getVariableVariantsInternal().removeElement(variant);
};
oFF.InAQueryManagerProvider.prototype.getVariableVariantByName = function(variableVariantName)
{
	return this.getVariableVariantsInternal().getByKey(variableVariantName);
};
oFF.InAQueryManagerProvider.prototype.activateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return this.processActivateVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.deleteVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	if (oFF.isNull(variableVariant) || this.getVariableVariantByName(variableVariant.getName()) === null)
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	if (!this.supportsMaintainsVariableVariants())
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Deleting variants is not supported", syncType, listener, customIdentifier);
	}
	return this.processDeleteVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.updateVariableVariantValues = function(variableVariant, syncType, listener, customIdentifier)
{
	if (!this.supportsMaintainsVariableVariants())
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Updating variants is not supported", syncType, listener, customIdentifier);
	}
	if (variableVariant.getName() === null || variableVariant.getScope() === null)
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Variant not valid for updating", syncType, listener, customIdentifier);
	}
	return this.processUpdateVariableVariantValues(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.saveVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	if (!this.supportsMaintainsVariableVariants())
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Modifying variants is not supported", syncType, listener, customIdentifier);
	}
	return this.processSaveVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.getMessageManager = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.getNewResultsetContainer = function()
{
	return this.getResultsetContainer(true);
};
oFF.InAQueryManagerProvider.prototype.isUpdatingDataRequestCapabilities = function()
{
	return this.m_updateRuntimeCapabilities;
};
oFF.InAQueryManagerProvider.prototype.setUpdatingDataRequestCapabilities = function(updateCapabilities)
{
	this.m_updateRuntimeCapabilities = updateCapabilities;
};
oFF.InAQueryManagerProvider.prototype.isIncludePerformanceNotDefault = function()
{
	return this.m_includePerformanceData !== oFF.TriStateBool._DEFAULT;
};
oFF.InAQueryManagerProvider.prototype.setNoVariableSubmitResponse = function(noVariableSubmitResponse)
{
	this.m_noVariableSubmitResponse = noVariableSubmitResponse;
};
oFF.InAQueryManagerProvider.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	this.getConvenienceCommands().updateDynamicVariables(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processUpdateDynamicVariables = function(syncType, listener, customIdentifier)
{
	this.getConvenienceCommands().updateDynamicVariables(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processResetExitOrDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	this.getConvenienceCommands().processResetExitOrDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
};
oFF.InAQueryManagerProvider.prototype.resetExitOrUpdateDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	this.processResetExitOrDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
};
oFF.InAQueryManagerProvider.prototype.processBLOB = function(syncType, listener, customIdentifier, imagePath)
{
	if (oFF.XStringUtils.isNullOrEmpty(imagePath))
	{
		var rsContainer = oFF.BLOBContainer.createBLOBContainer(this.getQueryManager(), null);
		rsContainer.addError(oFF.ErrorCodes.INVALID_FIELD, "No Image path specified");
		if (oFF.notNull(listener))
		{
			listener.onBLOBAvailable(rsContainer, rsContainer, customIdentifier);
		}
		return rsContainer;
	}
	var connection = this.getConnection();
	if (!connection.supportsWebServiceForBLOBObjects())
	{
		this.getActiveResultSetContainer().addError(oFF.ErrorCodes.INVALID_SYSTEM, "No Support for retrieving BLOBs.");
		var container = oFF.BLOBContainer.createBLOBContainer(this, null);
		if (oFF.notNull(listener))
		{
			listener.onBLOBAvailable(container, container, customIdentifier);
		}
		return container;
	}
	this.m_processingImageRequest = imagePath;
	if (this.getOlapEnv().hasBLOBForResourceId(imagePath))
	{
		var blobContainer = oFF.BLOBContainer.createBLOBContainer(this, null);
		if (oFF.notNull(listener))
		{
			listener.onBLOBAvailable(blobContainer, blobContainer, customIdentifier);
		}
		this.m_processingImageRequest = null;
		return blobContainer;
	}
	this.m_listOfRequestedResources.add(imagePath);
	var rsContainerImage = oFF.BLOBContainer.createBLOBContainer(this, this.createFunction());
	var response = rsContainerImage.processExecution(syncType, listener, customIdentifier);
	this.m_processingImageRequest = null;
	return response;
};
oFF.InAQueryManagerProvider.prototype.processUpdateRuntimeBlendQueryFromDependentQueries = function(systemToDependentQueriesMap, syncType, listener, customIdentifier)
{
	var metadataSerializedQueryAction = oFF.RuntimeRemoteBlendingQueryUpdaterAction.create(systemToDependentQueriesMap, this);
	return metadataSerializedQueryAction.processSyncAction(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.getResourcePath = function()
{
	return this.m_processingImageRequest;
};
oFF.InAQueryManagerProvider.prototype.getResourceDetailsFromResourceIdentifier = function(resourceKey)
{
	if (!this.m_listOfRequestedResources.contains(resourceKey))
	{
		this.m_listOfRequestedResources.add(resourceKey);
		return this.getOlapEnv().useBLOBDetailsForResourceId(resourceKey);
	}
	return this.getOlapEnv().getBLOBDetailsForResourceId(resourceKey);
};
oFF.InAQueryManagerProvider.prototype.recordState = function()
{
	return this.m_stateManager.recordState();
};
oFF.InAQueryManagerProvider.prototype.applyState = function(syncType, listener, customerIdentifier, stateId)
{
	return oFF.InAQMgrApplyStateAction.createAndRun(syncType, this, listener, customerIdentifier, stateId, this.m_stateManager);
};
oFF.InAQueryManagerProvider.prototype.importQuerySettings = function(inaDefinition)
{
	this.importRSFeatureRequest(inaDefinition);
	oFF.QInAOptions.importOptimizerHints(inaDefinition, this);
};
oFF.InAQueryManagerProvider.prototype.importRSFeatureRequest = function(definition)
{
	var rsFeatureRequest = definition.getStructureByKey("ResultSetFeatureRequest");
	oFF.QInAOptions.importPaging(rsFeatureRequest, this);
	oFF.QInAOptions.importSuppressKeyfigureCalculation(rsFeatureRequest, this);
	oFF.QInAOptions.importReturnedDataSelections(rsFeatureRequest, this);
};
oFF.InAQueryManagerProvider.prototype.isApplyingRepoState = function()
{
	return this.m_applyRepoState;
};
oFF.InAQueryManagerProvider.prototype.getQueryManagerProvider = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.removeVariable = function(name)
{
	this.assertLifeCycleActive();
	var variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	variableManagerBase.removeVariable(name);
};
oFF.InAQueryManagerProvider.prototype.clearVariables = function()
{
	this.assertLifeCycleActive();
	var variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	variableManagerBase.clearVariables();
};
oFF.InAQueryManagerProvider.prototype.addVariable = function(variable)
{
	this.assertLifeCycleActive();
	var variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	variableManagerBase.addVariable(variable);
};
oFF.InAQueryManagerProvider.prototype.getVariableBaseAt = function(index)
{
	this.assertLifeCycleActive();
	var variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	return variableManagerBase.getVariableBaseAt(index);
};
oFF.InAQueryManagerProvider.prototype.getVariableBaseByName = function(name)
{
	this.assertLifeCycleActive();
	var variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	return variableManagerBase.getVariableBaseByName(name);
};
oFF.InAQueryManagerProvider.prototype.setVariableProcessorBase = oFF.noSupport;
oFF.InAQueryManagerProvider.prototype.getVariableProcessorProvider = function()
{
	return this;
};

oFF.ProviderModule = function() {};
oFF.ProviderModule.prototype = new oFF.DfModule();
oFF.ProviderModule.prototype._ff_c = "ProviderModule";

oFF.ProviderModule.s_module = null;
oFF.ProviderModule.getInstance = function()
{
	if (oFF.isNull(oFF.ProviderModule.s_module))
	{
		oFF.DfModule.checkInitialized(oFF.OlapSerializationModule.getInstance());
		oFF.ProviderModule.s_module = oFF.DfModule.startExt(new oFF.ProviderModule());
		var registrationService = oFF.RegistrationService.getInstance();
		oFF.QInA.staticSetup();
		oFF.QInAImportFactoryImpl.staticSetupImpl();
		oFF.QInAExportFactoryImpl.staticSetupImpl();
		oFF.FunctionalValueHelpFactory.setInstance(oFF.FunctionalValueHelpFactoryImpl.createFactory());
		oFF.PlanningStateHandler.setInstance(new oFF.PlanningStateHandlerDummyImpl());
		oFF.InAQueryManagerProvider.staticSetupProvider();
		oFF.QCsnConverter.staticSetup();
		oFF.InADocConverterSfxRepo.staticSetupInAConverter();
		oFF.InADocConverterUqmRepo.staticSetupInAConverter();
		oFF.InAFusion.staticSetup();
		oFF.InAFusionLayer.staticSetup();
		registrationService.addService(oFF.OlapApiModule.XS_QUERY_CONSUMER, oFF.InAQueryManagerProvider.CLAZZ);
		oFF.XCmdCreateQueryManager.staticSetup();
		oFF.XCmdCreateQueryManagerResult.staticSetup();
		registrationService.addCommand(oFF.CmdCreateQueryManager.CMD_NAME, oFF.XCmdCreateQueryManager.CLAZZ);
		oFF.XCmdDeserializeBlending.staticSetup();
		oFF.XCmdDeserializeBlendingResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeBlending.CMD_NAME, oFF.XCmdDeserializeBlending.CLAZZ);
		oFF.XCmdDeserializeBlendingSources.staticSetup();
		oFF.XCmdDeserializeBlendingSourcesResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeBlendingSources.CMD_NAME, oFF.XCmdDeserializeBlendingSources.CLAZZ);
		oFF.XCmdDeserializeCalculatedDimension.staticSetup();
		oFF.XCmdDeserializeCalculatedDimensionResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeCalculatedDimension.CMD_NAME, oFF.XCmdDeserializeCalculatedDimension.CLAZZ);
		oFF.XCmdDeserializeExtendedDimension.staticSetup();
		oFF.XCmdDeserializeExtendedDimensionResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeExtendedDimension.CMD_NAME, oFF.XCmdDeserializeExtendedDimension.CLAZZ);
		oFF.ProviderModule.addAllComponents();
		oFF.QInA.removeEmptyContainers();
		oFF.DfModule.stopExt(oFF.ProviderModule.s_module);
	}
	return oFF.ProviderModule.s_module;
};
oFF.ProviderModule.addAllComponents = function()
{
	oFF.QInA.addInAComponent(new oFF.QCsnMdQuery());
	oFF.QInA.addInAComponent(new oFF.QCsnMdDimensions());
	oFF.QInA.addInAComponent(new oFF.QCsnMdDimension());
	oFF.QInA.addInAComponent(new oFF.QCsnMdDimMembers());
	oFF.QInA.addInAComponent(new oFF.QCsnMdVariables());
	oFF.QInA.addInAComponent(new oFF.QCsnMdVariable());
	oFF.QInA.addInAComponent(new oFF.QInAMdVariableContainer());
	oFF.QInA.addInAComponent(new oFF.QInAMdVarDimMember());
	oFF.QInA.addInAComponent(new oFF.QInAMdVarOptionList());
	oFF.QInA.addInAComponent(new oFF.QInAMdVariable());
	oFF.QInA.addInAComponent(new oFF.QInAMdBasicMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAMdField());
	oFF.QInA.addInAComponent(new oFF.QInAMdDimension());
	oFF.QInA.addInAComponent(new oFF.QInAMdSort());
	oFF.QInA.addInAComponent(new oFF.QInAMdDrillManager());
	oFF.QInA.addInAComponent(new oFF.QInAMdExceptionAggregationManager());
	oFF.QInA.addInAComponent(new oFF.QInAMdUniversalDisplayHierarchies());
	oFF.QInA.addInAComponent(new oFF.QInAMdQuery());
	oFF.QInA.addInAComponent(new oFF.QInAMdGenericComponent());
	oFF.QInA.addInAComponent(new oFF.QInARepoField());
	oFF.QInA.addInAComponent(new oFF.QInARepoTotals());
	oFF.QInA.addInAComponent(new oFF.QInARepoTotalsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoSortOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimension());
	oFF.QInA.addInAComponent(new oFF.QInARepoSort());
	oFF.QInA.addInAComponent(new oFF.QInARepoSortLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCellValueOperand());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCellValueOperandLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarHierNode());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarDimMember());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarDimMemberLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoMembersAll());
	oFF.QInA.addInAComponent(new oFF.QInARepoMembersAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberRestricted());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberRestrictedLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberFormulaMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberBasicMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberCurrency());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberExceptionAggregationMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberVarianceMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberExceptionAggregationMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberAbstract());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterOperationLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCartesianListLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterConvertedTimeCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCartesianProduct());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterMeasureBased());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterExpression());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterExpressionLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAlgebra());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAlgebraLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterTuple());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAcrossModels());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterFixed());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterFixedLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterVirtualDatasource());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAll());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterDynamic());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterVisibility());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterGeo());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterGeoLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterElement());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoHierarchy());
	oFF.QInA.addInAComponent(new oFF.QInARepoHierarchyManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoHierarchyLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxis());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxisLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxesSettings());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxesSettingsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationItem());
	oFF.QInA.addInAComponent(new oFF.QInARepoFormulaCalculatedDimension());
	oFF.QInA.addInAComponent(new oFF.QInARepoFormulaExceptionManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoFormulaException());
	oFF.QInA.addInAComponent(new oFF.QInARepoExceptions());
	oFF.QInA.addInAComponent(new oFF.QInARepoExceptionsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionsThreshold());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionsCondition());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionsConditionLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoUniversalDisplayHierarchies());
	oFF.QInA.addInAComponent(new oFF.QInARepoQueryCells());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerDimensions());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerCurrencyTranslation());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerVariableManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerMetadataProperties());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarOptionList());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarOptionListLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVariableManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoVariableContainerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVariablesListLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarSimpleType());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarSimpleTypeLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillPathElement());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillPathElementLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillPathOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimensions());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimensionsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimensionsAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataCell());
	oFF.QInA.addInAComponent(new oFF.QInARepoCalculatedDimension());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataCellsAll());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataCellsAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuerySettings());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuerySettingsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInaRepoCustomHierarchyDefinition());
	oFF.QInA.addInAComponent(new oFF.QInARepoCustomHierarchyDefinitionLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoAttribute());
	oFF.QInA.addInAComponent(new oFF.QInARepoAttributeLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataSource());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationList());
	oFF.QInA.addInAComponent(new oFF.QInARepoTranslationsManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuery());
	oFF.QInA.addInAComponent(new oFF.QInARepoQueryLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoServiceConfig());
	oFF.QInA.addInAComponent(new oFF.QInARepoQueryManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoBlendableQueryManager());
	oFF.QInA.addInAComponent(new oFF.QInAQuery());
	oFF.QInA.addInAComponent(new oFF.QInADimension());
	oFF.QInA.addInAComponent(new oFF.QInACalculatedDimension());
	oFF.QInA.addInAComponent(new oFF.QInASort());
	oFF.QInA.addInAComponent(new oFF.QInACurrencyTranslationManager());
	oFF.QInA.addInAComponent(new oFF.QInACurrencyTranslationListManager());
	oFF.QInA.addInAComponent(new oFF.QInACurrencyTranslationItem());
	oFF.QInA.addInAComponent(new oFF.QInATranslationsManager());
	oFF.QInA.addInAComponent(new oFF.QInAConditionManager());
	oFF.QInA.addInAComponent(new oFF.QInAConditionsCondition());
	oFF.QInA.addInAComponent(new oFF.QInAConditionsThreshold());
	oFF.QInA.addInAComponent(new oFF.QInADataSource());
	oFF.QInA.addInAComponent(new oFF.QInAQuerySettings());
	oFF.QInA.addInAComponent(new oFF.QInATotals());
	oFF.QInA.addInAComponent(new oFF.QInAAttribute());
	oFF.QInA.addInAComponent(new oFF.QInAAxesSettings());
	oFF.QInA.addInAComponent(new oFF.QInAAxis());
	oFF.QInA.addInAComponent(new oFF.QInADataCell());
	oFF.QInA.addInAComponent(new oFF.QInADataCellsAll());
	oFF.QInA.addInAComponent(new oFF.QInADrillManager());
	oFF.QInA.addInAComponent(new oFF.QInAUniversalDisplayHierarchies());
	oFF.QInA.addInAComponent(new oFF.QInADrillPathElement());
	oFF.QInA.addInAComponent(new oFF.QInADrillPathOperation());
	oFF.QInA.addInAComponent(new oFF.QInAField());
	oFF.QInA.addInAComponent(new oFF.QInAQueryCellsAll());
	oFF.QInA.addInAComponent(new oFF.QInAVariableContainer());
	oFF.QInA.addInAComponent(new oFF.QInAVariablesList());
	oFF.QInA.addInAComponent(new oFF.QInAVarSimpleType());
	oFF.QInA.addInAComponent(new oFF.QInAVarDimMember());
	oFF.QInA.addInAComponent(new oFF.QInAVarOptionList());
	oFF.QInA.addInAComponent(new oFF.QInAVarHierNode());
	oFF.QInA.addInAComponent(new oFF.QInAMember());
	oFF.QInA.addInAComponent(new oFF.QInAMembersAll());
	oFF.QInA.addInAComponent(new oFF.QInAMemberRestrictedMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAMemberBasicMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAMemberFormulaMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAFilterExpression());
	oFF.QInA.addInAComponent(new oFF.QInAFilterCellValueOperand());
	oFF.QInA.addInAComponent(new oFF.QInAFilterTuple());
	oFF.QInA.addInAComponent(new oFF.QInAFilterElement());
	oFF.QInA.addInAComponent(new oFF.QInAFilterAlgebra());
	oFF.QInA.addInAComponent(new oFF.QInAFilterCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInAFilterConvertedTimeCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInAFilterFixed());
	oFF.QInA.addInAComponent(new oFF.QInAFilterDynamic());
	oFF.QInA.addInAComponent(new oFF.QInAFilterVisibility());
	oFF.QInA.addInAComponent(new oFF.QInAValueHelpFilter());
	oFF.QInA.addInAComponent(new oFF.QInAFilterAll());
	oFF.QInA.addInAComponent(new oFF.QInAFilterOperation());
	oFF.QInA.addInAComponent(new oFF.QInAFilterGeo());
	oFF.QInA.addInAComponent(new oFF.QInAFilterCartesianProduct());
	oFF.QInA.addInAComponent(new oFF.QInAFilterVirtualDatasource());
	oFF.QInA.addInAComponent(new oFF.QInAFilterManager());
	oFF.QInA.addInAComponent(new oFF.QInAHierarchyValueHelp());
	oFF.QInA.addInAComponent(new oFF.QInAHierarchy());
	oFF.QInA.addInAComponent(new oFF.QInACustomHierarchyDefinition());
	oFF.QInA.addInAComponent(new oFF.QInADimensionsAll());
	oFF.QInA.addInAComponent(new oFF.QInAExceptions());
	oFF.QInA.addInAComponent(new oFF.QInAGenericComponent());
};
oFF.ProviderModule.prototype.getName = function()
{
	return "ff4400.olap.providers";
};

oFF.ProviderModule.getInstance();

return sap.firefly;
	} );